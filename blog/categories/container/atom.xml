<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Container | Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/container/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-10-04T22:56:53+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker Je Débute]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/04/12/docker-je-debute/"/>
    <updated>2015-04-12T22:25:27+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/04/12/docker-je-debute</id>
    <content type="html"><![CDATA[<h2>Docker</h2>

<p>Suite à une présentation à une conférence. J&#8217;ai commencé à m&#8217;y mettre. J&#8217;écris ce post en tant que grand débutant..</p>

<p>Docker est une solution de virtualisation d&#8217;instance, plus précisément de container. Il y a pas mal de différence avec les différentes visualisations de Virtual box/Xen/VmWare. On isole juste les process et le file-system. Ce qui fait que l&#8217;on consomme très peu de processeurs.</p>

<h2>Installation</h2>

<p>Installer docker n&#8217;est pas très compliqué sous ubuntu 14.04.</p>

<pre><code class="bash">sudo apt-get install docker.io
</code></pre>

<p>Et c&#8217;est tout !</p>

<p>Pour éviter de préfixer <code>sudo</code> à chaque commande il est plus facile d&#8217;ajouter son utilisateur au group docker.</p>

<pre><code class="bash">sudo addgroup &lt;votre user&gt; docker
</code></pre>

<h2>Hello world sous docker</h2>

<p>Lancer docker</p>

<pre><code>docker run ubuntu:14.04 /bin/echo 'Hello world'
</code></pre>

<p>Cette commande fait plusieurs choses:</p>

<ul>
<li>si l&#8217;image <code>ubuntu:14.04</code> n&#8217;existe pas, elle va la télécharger.</li>
<li>Puis on lance le container</li>
<li>Puis on exécute echo &lsquo;Hello world&rsquo;</li>
</ul>


<p>D&#8217;ailleurs si on relance la même commande, on constate que l&#8217;image est déjà sur le disque dur.</p>

<p>la commande prend moins d&#8217;une seconde. Pourtant on a chargé un container et lancer une commande !</p>

<p>Essayons la commande suivante
<code>
docker run ubuntu:14.04 - it /bin/bash
root@b2634b81c3dc:/#
</code></p>

<p>Nous avons un bash intéractif. <code>-i</code> mode interactif, et <code>-t</code> affiche un pseudo terminal</p>

<p>Il faut comprendre que  dès que la commande principale est finie, l&#8217;instance aussi. Dans le cas <code>Echo 'Hello World'</code> la commande se finit de suite. Dans le cas de <code>/bin/bash</code> On spécifie le mode interactif. Donc l&#8217;instance continue tant que l&#8217;on a pas quitté le bash.</p>

<p>Ouvrons un nouveau terminal
<code>
docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
b2634b81c3dc        ubuntu:14.04        /bin/bash           43 seconds ago      Up 42 seconds                           sharp_archimedes
</code>
On voit que mon image est toujours en cours.</p>

<p>La commande docker ps affiche tout les containers allumés pour afficher tout les containers allumés pendant la session. C&#8217;est <code>dockers ps -a</code></p>

<p>On peux inspecter une instance avec la commande
<code>
docker inspect sharp_archimedes
docker inspect b2634b81c3dc
</code>
Cela renvoie un json.</p>

<p>On peux aussi lister les images disponibles via la commande</p>

<pre><code>docker images
</code></pre>

<p>Vous voulez télécharger des images
<code>
docker pull centos
</code></p>

<p>Vous cherchez une images particulières
<code>
docker search php56
</code></p>

<p>La liste des images disponibles est disponible sur <a href="https://hub.docker.com/">Docker Hub</a> . D&#8217;ailleurs Dockers est très couplé avec DockerHub. DockerHub est un le GitHub pour Docker. On peux très bien faire du Git sans GitHub. C&#8217;est la même chose pour docker.</p>

<p>Docker et Git partage aussi la notion de commit et de push.</p>

<p>relancons notre instance
<code>
docker run -it ubuntu:14.04 /bin/bash
root@f5882f7f608d:/#
</code></p>

<p>Installons un paquet au hasard
<code>
sudo apt-get install vim
</code></p>

<p>On quitte <code>Exit</code></p>

<p>puis on commit
<code>sh
sudo docker commit f5882f7f608do marc/vim
4f177bd27a9ff0f6dc2a830403925b5360bfe0b93d476f7fc3231110e7f71b1c
</code></p>

<p>Si je liste les images.
<code>sh
docker images
</code></p>

<p>je vois apparaitre mon <code>marc/vim</code></p>

<p>Je peux ainsi réutiliser mon container ainsi
<code>sh
sudo docker run -it marc/vim vim
</code></p>

<p>On peux ainsi se créer ses propres containers. Mais c&#8217;est un peu laborieux. Docker utilise des <code>DockerFile</code> pour automatiser le process. Cela fera un prochain post</p>

<h2>Résumé des commandes</h2>

<ul>
<li><code>docker run -i -t ubuntu:14.10 /bin/bash</code> lance en mode interactif et un terminal avec la commande Bash.</li>
<li><code>docker run -i -t ubuntu:14.10 'hello world'</code></li>
<li><code>docker ps</code> liste les containers en cours.</li>
<li><code>docker ps -a</code> liste tout les containers.</li>
<li><code>docker images</code> liste toutes les images.</li>
<li><code>docker pull centos</code> pour télécharger une image (tout les images officielles sont sur le <a href="https://hub.docker.com/">Hub</a></li>
<li><code>docker inspect uuid</code> affiche les informations sur l&#8217;instance.</li>
<li><code>docker commit uuid name</code>pour commiter.</li>
</ul>


<h2>Conclusion</h2>

<p>Bon j&#8217;avoue que je débute depuis 2 jours.  Ce qui m&#8217;impressionne dans Docker c&#8217;est la vitesse (moins d&#8217;une seconde pour démarrer). C&#8217;est plutôt simple d&#8217;utilisation. La notion de commit a l&#8217;air sympa (Même si au fond c&#8217;est l&#8217;équivalent d&#8217;un snapshot sous vmware). J&#8217;espère pouvoir faire mon premier dépôt sous DockerHub bientôt.</p>
]]></content>
  </entry>
  
</feed>
