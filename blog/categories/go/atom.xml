<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Go | Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/go/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-08-04T22:00:40+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go Hello Server]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/18/go-hello-server/"/>
    <updated>2015-05-18T23:00:46+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/18/go-hello-server</id>
    <content type="html"><![CDATA[<h2> Introduction</h2>

<p>Je continue mon apprentissage en go. Nous allons essayer de faire un hello world via une page web.</p>

<p>L&#8217;exemple le plus simple de la <a href="https://gowalker.org/net/http#HandleFunc">documentation officielle</a>.</p>

<h2>Mise en place</h2>

<p>Je me place dans mon répertoire <code>go</code></p>

<p>Je vais dans le répertoire <code>src/github.com/&lt;username&gt;/</code></p>

<p>Je crée un répertoire <code>hello-server</code></p>

<p>Dans ce répertoire je crée le fichier server.go</p>

<pre><code class="go">package main

import (
    "io"
    "net/http"
    "log"
)

// hello world, the web server
func HelloServer(w http.ResponseWriter, req *http.Request) {
    io.WriteString(w, "hello, world!\n")
}

func main() {
    http.HandleFunc("/", HelloServer)
    err := http.ListenAndServe(":12345", nil)
    if err != nil {
        log.Fatal("ListenAndServe: ", err)
    }
}
</code></pre>

<p>Il suffit pour tester de lancer</p>

<pre><code>go run server.go
</code></pre>

<p>Ou sinon dans le répertoire <code>src/github.com/&lt;username&gt;/hello-server</code></p>

<pre><code>go install
</code></pre>

<p>Dans votre répertoire <code>bin</code> vous avez un exécutable <code>hello-server</code></p>

<p>si on reprend notre répertoire <code>go</code> avec le précédent post</p>

<pre><code class="bash">
.
├── bin
│   ├── hello
│   └── hello-server
└── src
    └── github.com
        └── mcamuzat
            ├── hello
            │   ├── hello.go
            │   ├── LICENSE
            │   └── README.md
            └── hello-server
                └── server.go
</code></pre>

<p>Avec votre navigateur aller à l&#8217;adresse suivante <a href="http://localhost:12345/">http://localhost:12345/</a></p>

<h3>Micro analyse</h3>

<pre><code>    http.HandleFunc("/", HelloServer)
</code></pre>

<p>On initialise un router qui associe à la route <code>/</code> (la route vide) un <em>callback</em> <code>HelloServer</code> (qui ne fait qu&#8217;un simple <code>hello world!</code>)</p>

<pre><code>    err := http.ListenAndServe(":12345", nil)
</code></pre>

<p>On demande à go d&#8217;écouter le port <code>:12345</code></p>

<p>Et il n&#8217;y a pas grand chose à dire d&#8217;autre.</p>

<h2>En conclusion</h2>

<p>Cela ressemble à beaucoup de micro-framework, en tant que développeur PHP je ne suis pas vraiment perdu.
Je vais essayer de continuer un peu sur le serveur web (récupération des posts).</p>

<p>L&#8217;avantage ici est que le fichier <code>hello-server</code> est exécutable et n&#8217;a besoin d&#8217;aucune dépendance (donc pas besoin de apache, PHP, etc..).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go Introduction]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/10/go-introduction/"/>
    <updated>2015-05-10T18:21:31+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/10/go-introduction</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>J&#8217;ai regardé Docker. Docker est en Go ainsi que pas mal de projets en fait. J&#8217;ai donc décidé d&#8217;essayer.</p>

<p>Dans ce chapitre nous n&#8217;allons pas trop discuter du langage mais surtout mettre en place tout les outils.</p>

<h2>Installation(linux)</h2>

<ul>
<li><p>Nous allons télécharger les fichiers <a href="https://golang.org/dl/">ici</a></p></li>
<li><p>On décompresse le fichier
<code>bash
sudo tar -C /usr/local -xzf go1.4.2.linux-amd64.tar.gz
</code></p></li>
</ul>


<p>Créer un répertoire go dans votre <code>/usr/local</code></p>

<ul>
<li>enfin il faut l&#8217;ajouter à votre <code>$PATH</code> en modifiant le <code>.profile</code></li>
</ul>


<pre><code>export PATH=$PATH:/usr/local/go/bin
</code></pre>

<ul>
<li>testons dans notre ligne de commande.</li>
</ul>


<pre><code>$ go version
go version go1.4.2 linux/amd64
</code></pre>

<h2>Hello world !</h2>

<p>Ouvrons un fichier <code>hello.go</code></p>

<pre><code class="go">package main

import "fmt"

func main() {
    fmt.Printf("hello, world\n")
}
</code></pre>

<p>Pour l&#8217;exécuter
<code>sh
go run hello.go
hello, world
</code></p>

<p>Tout va bien ! Nous avons installé Go</p>

<h2>Organisation d&#8217;un projet</h2>

<p>L&#8217;organisation d&#8217;un projet sous Go est fixe ! Comprendre qu&#8217;il faut un <strong>workspace</strong></p>

<p>Nous allons ensemble créer le projet <code>Hello</code></p>

<ul>
<li><p>Créer un répertoire <code>go</code></p></li>
<li><p>Assigner la variable d&#8217;environnement <code>$GOPATH</code></p></li>
</ul>


<pre><code> export GOPATH=$HOME/go
</code></pre>

<ul>
<li><p>enfin rajouter le $GOPATH/bin dans le PATH
<code>
export PATH=$PATH:$GOPATH/bin
</code></p></li>
<li><p>Nous voulons sauvegarder notre code quelques part. ici github!
<code>
mkdir -p $GOPATH/src/github.com/&lt;votreusername&gt;/hello
</code></p></li>
</ul>


<p>Votre <code>username</code> est votre namespace pour les packages (un peu comme java).</p>

<ul>
<li><p>dans notre répertoire <code>src/github.com/&lt;votreusername&gt;/hello</code> nous allons copier notre <code>hello.go</code></p></li>
<li><p>Tout est en place. Il n&#8217;y a plus qu&#8217;a taper <code>go install github.com/user/hello</code>.</p></li>
<li><p>autre possibilité se rendre dans le répertoire <code>src/github.com/&lt;votreusername&gt;/hello</code>
<code>bash
go install
</code></p></li>
<li><p>Nous pouvons vérifier que dans le répertoire <code>$HOME/go</code> il y a un dossier <code>bin/</code>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$GOPATH/bin/hello
</span><span class='line'>hello world&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;de manière plus simple puisque nous avons ajouter dans le path $GOPATH/bin&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;hello
</span><span class='line'>hello world</span></code></pre></td></tr></table></div></figure>
voici la structure finale</p></li>
</ul>


<pre><code>.
├── bin
│   └── hello
└── src
    └── github.com
        └── mcamuzat
            └── hello
                ├── hello.go
                ├── LICENSE
                └── README.md
</code></pre>

<h2>Sauvegarde d&#8217;un projet</h2>

<p>Nous allons sauvegarder celui-ci sous <a href="https://github.com/">Github</a>. Ce n&#8217;est pas obligatoire.
<code>
cd $GOPATH/src/github.com/user/hello
git init
git add .
git commit -m"create project"
</code></p>

<p>Sous github, j&#8217;ai crée un nouveau repository <code>hello-go</code></p>

<pre><code>git remote add origin git@github.com:mcamuzat/hello-go.git
git pull --rebase
git push origin master
</code></pre>

<h2>Conclusion</h2>

<p>Nous avons d&#8217;installer Go.</p>

<p>Je viens juste de m&#8217;y mettre, Je ne sais pas encore ce que la suite nous réserve..</p>
]]></content>
  </entry>
  
</feed>
