<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-11-01T21:07:34+01:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tig : Status]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/04/tig-status/"/>
    <updated>2015-10-04T21:59:59+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/04/tig-status</id>
    <content type="html"><![CDATA[<p>Tig est un client git en ligne de commande</p>

<p>Il n&#8217;est pas compliqué à installer :</p>

<pre><code class="bash">sudo apt-get install tig
</code></pre>

<p>Néanmoins c&#8217;est la version 1.2 dans les dépôts au moment ou j&#8217;écris ces lignes.</p>

<p>On peut installer la version 2 qui a plus de fonctionnalités et de raccourcis.</p>

<pre><code class="bash">git clone https://github.com/jonas/tig
make
make install
</code></pre>

<p>attention vous aurez probablement besoin d&#8217;avoir installer la librairies <code>libncursesw</code> pour l&#8217;utf-8</p>

<h2>La vue principale</h2>

<p>Elle permet de voir l&#8217;historique du dépôt.</p>

<p><img class="center" src="/images/tig-defaut.png" width="600" height="398" title="&lsquo;la vue par défault&rsquo; &lsquo;la vue par défaut&rsquo;" ></p>

<p>Appuyer sur <code>&lt;Enter&gt;</code> pour voir la différence. (Dans la version 2, si le terminal fait plus de 160 caractères l&#8217;écran se splitte en 2 verticalement)</p>

<p><img class="center" src="/images/tig-diff.png" width="600" height="399" title="&lsquo;quand on appuie sur la touche entrée, on affiche la différence&rsquo; &lsquo;l'écran de différence&rsquo;" ></p>

<p>Screenshot de la version 2 avec les deux colonnes.</p>

<p><img class="center" src="/images/tig_view_v2.png" width="600" height="366" title="&lsquo;dans la version 2, si le terminal&rsquo; &lsquo;Screenshot de la version 2 avec les deux colonnes.&rsquo;" ></p>

<p>Il va falloir apprendre les touches Vi car on se sert beaucoup de <code>j</code> et <code>k</code> (un rappel <code>j</code> descend vers le bas et <code>k</code> va vers le haut)</p>

<p>De cette écran voici les différents modes (je ne les cites pas tous)</p>

<ul>
<li><code>S</code> ou <code>s</code> pour voir le stage (équivalent de git status)</li>
<li><code>t</code> tree view affichage en explorateur de fichier</li>
<li><code>r</code> permet de voir les différentes branches (<code>H</code> dans la version1</li>
<li><code>l</code> voir les logs</li>
</ul>


<p>Je vais surtout m&#8217;intéresser à la status view.</p>

<h2>La vue Status</h2>

<p>Les touches à connaitre.</p>

<ul>
<li><code>u</code> sur un noms de fichiers pour <strong>u</strong>se cela fait l&#8217;équivalent de <code>git add &lt;nom du fichier&gt;</code></li>
</ul>


<p>Si vous appuyer sur <code>u</code> sur les lignes <code>Changes to be commited</code>, <code>Changed but not updated</code>, <code>Untracked files</code> vous ajoutez tous les fichiers.</p>

<pre><code>Changes to be committed:
M   fichier1
Changed but not updatedy://&lt;---(*curseur*) 
M   fichier2
M   fichier3
M   fichier4
M   fichier5
M   fichier6
M   fichier7
Untracked files:
?   nouveau fichier
</code></pre>

<p>Cela devient</p>

<pre><code>Changes to be committed:
M   fichier1
M   fichier2
M   fichier3
M   fichier4
M   fichier5
M   fichier6
M   fichier7
Changed but not updatedy:
(no files)
Untracked files:
?   nouveau fichier
</code></pre>

<p>Enfin on peut aussi prendre chunk par chunck (l&#8217;équivalent de <code>git add -p</code>)</p>

<p><img class="center" src="/images/tig-revert.png" width="600" height="398" title="&lsquo;la vue par défaut&rsquo; &lsquo;la vue par défaut&rsquo;" ></p>

<p>Il suffit d&#8217;appuyer sur <code>Enter</code> puis de se déplacer dans le commit avec <code>j</code> et <code>k</code> et appuyer sur <code>u</code> pour ajouter ce chunk. Les chunks pour faire simple sont les textes séparés par des <code>@@ ... @@</code>. On se déplace de chunk en chunk grâce à la touche <code>@</code>.</p>

<p>Pour reverter le fichier, On utilise la touche <code>!</code>.</p>

<p>Cela marche aussi sur un chunk. On peut donc reverter partiellement un fichier.</p>

<p>Il est possible d&#8217;ajouter ligne par ligne dans un commit grâce à la touche <code>1</code>.</p>

<p>Pour faire le git commit il suffit d&#8217;appuyer sur <code>C</code> comme <strong>C</strong>ommit.</p>

<p>Enfin la touche <code>e</code> comme <strong>e</strong>dit ouvre le fichier dans l&#8217;éditeur par défaut.</p>

<h2>Le fichier <code>.tigrc</code></h2>

<p>Le fichier <code>.tigrc</code> permet de personnaliser l&#8217;affichage et d&#8217;ajouter des raccourcis claviers.</p>

<p>Voici quelques exemples de ma config.</p>

<pre><code class=""># Delete files in status view (useful for untracked files)
bind status D !@?rm %(file)

# Amend last commit with A
bind status A !git commit --amend

# Create and checkout a new branch; specify custom prompt
bind main B !git checkout -b "%(prompt Enter new branch name: )"
</code></pre>

<p>Les raccourcis claviers que j&#8217;ai rajouté</p>

<ul>
<li>Dans la vue status la touche <code>D</code> efface le fichier</li>
<li>Dans la vue status la touche <code>A</code> fait un <code>git commit --amend</code></li>
<li>Dans la vue principale la touche <code>B</code> permet de créer une branche.</li>
</ul>


<h2>Résumé de touches</h2>

<ul>
<li><code>s</code> ou <code>S</code> voir la vue status</li>
<li><code>u</code> ajouter le commit/chunk</li>
<li><code>!</code> revert</li>
<li><code>1</code> ajoute une lignes au commit</li>
<li><code>@</code> aller au chunck/diff suivant</li>
<li><code>D</code> supprimer le fichier (<em>raccourcis perso</em>)</li>
<li><code>A</code> git amend</li>
<li><code>e</code> ouvre dans l&#8217;éditeur par défaut</li>
</ul>


<h2>Des liens</h2>

<ul>
<li><a href="http://jonas.nitro.dk/tig/">le site officiel</a></li>
<li>la <a href="https://github.com/pmiossec/tig-cheat-sheet">cheat-sheet</a> avec les raccourcis claviers (<em>indispensable</em>)</li>
</ul>


<h2>Conclusion</h2>

<p>Je vais revenir sur les autres vues bientôt.</p>

<p>Merci de m&#8217;avoir lu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Des Commandes Au Top]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/09/27/des-commandes-au-top/"/>
    <updated>2015-09-27T16:04:40+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/09/27/des-commandes-au-top</id>
    <content type="html"><![CDATA[<p>J&#8217;utilise souvent le programme htop. mais il y en a d&#8217;autre.</p>

<h2>atop</h2>

<p>Plus austère. Beaucoup d&#8217;information sur toutes les ressources. C&#8217;est plus un outils d&#8217;audit. Le logicel donne toutes informations possibles. processeurs, disques, carte réseau. En pratique il peut même être lancer au démarrage. En pratique on parle de <code>sar</code> (<strong>S</strong>ystem <strong>A</strong>ctivity <strong>R</strong>eport). Il permet de surveiller la tailles des processus avec la colonne <code>VGROW</code> (<em>Virtual Memory Grow</em>) et <code>RGROW</code>(Resident memory Grow)
<img class="center" src="/images/atop.png" width="600" height="381" title="&lsquo;atop&rsquo; &lsquo;atop&rsquo;" ></p>

<p>voir <a href="https://en.wikipedia.org/wiki/Sar_%28Unix%29">sar</a></p>

<h2>vtop</h2>

<p>Un clone en Nodejs. voir le screenshot c&#8217;est vraiment très joli</p>

<p><img class="center" src="/images/vtop.png" width="600" height="383" title="&lsquo;vtop&rsquo; &lsquo;vtop&rsquo;" ></p>

<p>installation via npm
<code>sh
sudo npm install -g vtop
</code></p>

<p>dépot <a href="https://github.com/MrRio/vtop">Github</a></p>

<h2>Htop</h2>

<h3>Quelques options</h3>

<h3>filtrer par utilisateur</h3>

<pre><code class="sh">$ htop -umarc
</code></pre>

<p>ou <code>u</code> dans Htop</p>

<h4>Sélectionner un process</h4>

<p>Utilisez la barre d&#8217;espace pour sélectionner un process. Cela permet de le suivre.</p>

<ul>
<li><code>F7</code> ou  <code>F8</code> pour augmenter la priorité du process</li>
<li><code>F9</code> ou <code>k</code> pour killer un process</li>
<li><code>F5</code> affichage en arbre.</li>
<li><code>a</code> pour assigner le process à un CPU.</li>
<li><code>U</code> pour désélectionnér tous les process</li>
</ul>


<h4>Personnalisez l&#8217;affichage</h4>

<p>La touche magique ici est <code>&lt;F2&gt;</code>. Vous pouvez personnaliser les deux colonnes avec les raccourcis claviers suivants. La colonne toutes à droite donne les widgets disponibles</p>

<ul>
<li><code>&lt;F5&gt;</code> ajouter le widget à la colonne de droite.</li>
<li><code>&lt;F6&gt;</code> ajouter le widget à la colonne de gauche.</li>
</ul>


<p>Sur une colonne vous pouvez sélectionniez le type d&#8217;affiche (texte simple, histogramme, etc..) via la touche <code>&lt;F4&gt;</code></p>

<p>Voir le screenshot (<code>Text</code>, <code>Graph</code>,<code>Led</code>, <code>Bar</code>)
<img class="center" src="/images/typeaffichage.png" width="600" height="133" title="&lsquo;les quatre types d'affichage&rsquo; &lsquo;les quatre types d'affichage&rsquo;" ></p>

<h3>Les codes couleurs</h3>

<p>La touche <code>h</code> permet d&#8217;obtenir de l&#8217;aide, les raccourcis claviers et la significations des couleurs.</p>

<p><img class="center" src="/images/codecouleur.png" width="600" height="104" title="&lsquo;les différentes couleurs et leurs significations&rsquo; &lsquo;les différentes couleurs et leurs significations&rsquo;" ></p>

<h2>En conclusion</h2>

<p>J&#8217;espère que vous appris un nouveau raccourci sur htop.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lancer Des Commandes Dans Vim]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/31/lancer-des-commandes-dans-vim/"/>
    <updated>2015-08-31T23:49:17+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/31/lancer-des-commandes-dans-vim</id>
    <content type="html"><![CDATA[<p>Soit le fichier texte suivant:</p>

<pre><code class=""> * Alpha
 * Foxtrot
 * Charlie
 * Delta
 * Echo 
 * Bravo
</code></pre>

<p>Dans VIM il suffit de taper.</p>

<pre><code class="">:%sort ou :%!sort
</code></pre>

<p>Pour obtenir
<code>
 * Alpha
 * Bravo
 * Charlie
 * Delta
 * Echo
 * Foxtrot
</code></p>

<p>On peux aussi lancer plein de commandes amusantes</p>

<pre><code> * Doublon
 * Pas unique
 * Doublon
 * 
 * ...
</code></pre>

<pre><code>!sort | uniq -c | tr "[A-Z]" "[a-z]"
</code></pre>

<p>Pour ceux qui ne se rappelle plus trop les commandes de Bash</p>

<ul>
<li><code>sort</code> trie le texte</li>
<li><code>uniq -c</code> prend toute les valeurs et les comptes c&#8217;est l&#8217;équivalent d&#8217;un <code>GROUP BY</code> en SQL</li>
<li><code>tr</code> est l&#8217;abréviation de <strong>tr</strong>anspose je remplace les lettres en <code>[A-Z]</code> par leur équivalent en minuscule.</li>
</ul>


<pre><code>      1  * 
      1  * ...
      2  * doublon
      1  * pas unique
</code></pre>

<p>Si vous sélectionnez le texte avec <code>v</code> et que vous appuyer sur <code>:</code></p>

<p>Alors vous devez voir la commande suivante
<code>
:'&lt;,'&gt;
</code>
et Ajoutez la commande que vous allez appliquer à la sélection. Par exemple <code>:'&lt;,'&gt;!sort</code></p>

<p>Plus rigolo. On peux appeler des langages que l&#8217;on veut dans VIM</p>

<pre><code class="php">&lt;?php echo "bonjour";
</code></pre>

<p>Tapez <code>!!</code>
vous devriez voir apparaître
<code>
:.!
</code>
Compléter avec <code>:.!php</code></p>

<p>votre texte va se remplacer
<code>
bonjour
</code></p>

<p>Cela marche aussi avec python</p>

<pre><code class="python">print "olleh"[::-1]
</code></pre>

<p>Avec le curseur sur la ligne, appuyer sur <code>!!</code> puis ajoutez <code>:.!python</code></p>

<p>La ligne devient</p>

<pre><code class="">hello
</code></pre>

<h2>Exécuter une commande Bash depuis VIM</h2>

<p>La commande suivante</p>

<pre><code>php app/console cache:clear --env=prod
</code></pre>

<p>Si vous voulez exécuter la commande mais ne pas modifiez la ligne.</p>

<pre><code>:.w !bash
</code></pre>

<p>C&#8217;est un peu moins simple.</p>

<ul>
<li><code>:.</code> représente la ligne actuelle.</li>
<li><code>w</code> représente une écriture</li>
<li><code>!bash</code> via Bash.</li>
</ul>


<p>La documentation de VIM <code>:help :w_c</code></p>

<h2>en résumé</h2>

<ul>
<li>Si vous voulez appliquer votre commande sur tout le fichier <code>:%!commande</code></li>
<li>S vous voulez juste la ligne <code>:.!commande</code> ou tapez <code>!!</code>.</li>
<li>Si vous voulez sur une sélection <code>v</code> ou <code>V</code> puis <code>:</code> vous deviez voir ceci <code>:'&lt;,'&gt;</code>, ajoutez la commande souhaitée.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Histogramme Et Ligne De Commande]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/19/histogramme-et-ligne-de-commande/"/>
    <updated>2015-07-19T18:16:57+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/19/histogramme-et-ligne-de-commande</id>
    <content type="html"><![CDATA[<h2>Un petit utilitaire.</h2>

<p>J&#8217;ai reprogrammé en php un clone de <a href="https://github.com/holman/spark">spark</a>.</p>

<p>Un petit exemple est plus parlant</p>

<pre><code>spark([1,2,3,4,4,5,6,1,2]); // ▂▃▅▆▆▇█▂▃
spark([1,2,3,4,5,1,2,3,4,5]); //▂▄▅▇█▂▄▅▇█
</code></pre>

<p>Voici l&#8217;implémentation</p>

<pre><code class="php">function spark($array) {
    $bars = array('▁','▂','▃','▄','▅','▆','▇','█');
    $divide = max($array);
    if ($divide == 0) {
        $divide = 1;
    }
    $countBars = count($bars)-1;
    $out = '';
    foreach ($array as $tick)
        $out .= $bars[round(($tick / $divide) * $countBars)];
    echo $out;
}
</code></pre>

<h2>L&#8217;appeler en ligne de commande.</h2>

<p>La documentation de spark donne cette ligne de commande
<code>
spark 0 30 55 80 33 150
</code></p>

<p>Est ce qu&#8217;on peux faire la même chose ? Il suffit de rajouter les deux lignes suivantes.
<code>php
$iDontCare =array_shift($argv);
spark($argv);
return 0;
</code></p>

<p>On utilise la variable <code>$argv</code> qui est le tableau de paramètres passer dans la ligne de commande. L&#8217;argument <code>$argv[0]</code>est le nom du programme, c&#8217;est pour cela que l&#8217;on fait un <code>array_shift</code> cela supprime la première valeur du tableau.</p>

<pre><code>php spark.php 0 30 55 80 33 150
▁▂▄▅▃█
</code></pre>

<h2>L&#8217;appeler via les pipes</h2>

<p>Un peu plus compliqué via les pipes du Shell.</p>

<p>Les implémentations des Pipes se présentent toujours un peu de la même manière. On utilise <code>STDIN</code>  qui représente l&#8217;entrée standard.</p>

<p>Un exemple qui traduit les caractères accentués. <code>é-&gt;&amp;eacute</code></p>

<pre><code class="php">#!/usr/bin/env php
&lt;?php
while (!feof(STDIN)) {
     echo htmlentities(fgets(STDIN));
}
</code></pre>

<p>La ligne <code>!/usr/bin/env php</code> s&#8217;appelle le <a href="https://fr.wikipedia.org/wiki/Shebang">shebang</a></p>

<p>Puis rendre exécutable le fichier
<code>
chmod +x htmlentities.php
</code>
Des exemples
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo &lsquo;énergie&rsquo; | ./htmlentities.php&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&eacute;nergie&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ cat file.txt | ./htmlentities</span></code></pre></td></tr></table></div></figure></p>

<p>Ce qui est cool c&#8217;est que l&#8217;on peux chainer les opérateur.</p>

<p>Un programme qui passe la première lettre en majuscule.</p>

<pre><code class="php">#!/usr/bin/env php
&lt;?php
while (!feof(STDIN)) {
     echo ucfirst(trim(fgets(STDIN)));
}
</code></pre>

<p>Un programme qui aime crier !!!!.</p>

<pre><code class="php">#!/usr/bin/env php
&lt;?php
while (!feof(STDIN)) {
     echo trim(fgets(STDIN)).'!!!!';
}
</code></pre>

<pre><code>$ echo 'récuperation' | ./shoot.php | ./capitalize.php | ./htmlentities.php
R&amp;eacute;cup&amp;eacute;ration!!!!
</code></pre>

<p>C&#8217;est un peu plus compliqué dans la vrai vie avec les retours à la ligne vide. Mais j&#8217;espère que vous avez compris mon idée.</p>

<p>Retour à notre script.</p>

<p>Voici la partie pour récupérer de la ligne de commande.
<code>php
// si je n'ai aucun argument ..
if (count($argv) == 0) {
    $str = '';
    // recupère le flux d'entrée
    while (!feof(STDIN)) {
        $str .= fgets(STDIN);
    }
    // explode laisse la derniere ligne vide.
    // d'ou le array_filter
    spark(array_filter(explode("\n", $str),'strlen'));
    return 0;
}
</code></p>

<p>Essayons une commande sur le dépôt git du blog que vous lisez.
<code>
git shortlog -s | cut -f1 | php ~/prog/spark/spark.php
</code>
<code>sh
$ git shortlog -s
(...)
   2  Manu
   37  Marc Camuzat
   1  Marcus Young
(..)
</code></p>

<p>On ne garde que la colonne 1 avec <code>cut -f1</code> puis on passe au script php</p>

<p>On obtient
<code>
▁▁▁▁▁▁▁▁▁▁▁▁▃▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
</code></p>

<h2>Conclusion</h2>

<p>J&#8217;avais besoin pour un futur article (le prochain ?) de cette fonction.
La philosophie de Linux est de créer plein de petits programmes et que ceux-ci communiquent via une interface très simple et universelle qui est le fichier texte. Ainsi il n&#8217;y a aucune dépendance le programme 1 est en bash, le programme 2 est en C, le programme 3 est en PHP. Et tout cela ne pose aucun problème.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Less Is More Et BASH]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/06/28/less-is-more-et-bash/"/>
    <updated>2015-06-28T19:19:59+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/06/28/less-is-more-et-bash</id>
    <content type="html"><![CDATA[<h2>less comme tail -f</h2>

<p>On peux utiliser <code>less</code> pour suivre et parser les logs avec la commande</p>

<pre><code>less +F nom_du_fichier
</code></pre>

<p>Ou tout simplement appuyer sur <code>F</code> quand le fichier est ouvert avec <code>less</code>.</p>

<p>Less est compatible avec les raccourcis VI donc les commandes suivantes marchent</p>

<pre><code>gg # debut du fichier
G # fin du fichier
/ #recherche
&amp; #affiche seulement les lignes qui contiennent le mot 
h,j,k,l les directions
</code></pre>

<p>les touche suivantes marche aussi avec <code>man</code></p>

<p>Je vous conseille ce post sur les <a href="blog/2015/03/08/comprendre-les-raccourcis-claviers-de-vi-slash-vim/">mouvement vi</a></p>

<h2>Éditer une ligne de commande trop complexe</h2>

<p>Si on souhaite récupérer la commande actuelle sous BASH. C&#8217;est <code>Ctrl x + Ctrl e</code>. Cela ouvre la commande actuelle dans <code>vi</code> ou votre éditeur par défaut <code>$EDITOR</code> enregistrer et quitter.</p>

<h2>Copier/Coller dans bash</h2>

<ul>
<li>Coupe toute la ligne : <code>Ctrl u</code></li>
<li>Coupe à droite du curseur: <code>Ctrl k</code></li>
<li>Coller <code>Ctrl y</code></li>
</ul>


<h3>Cas d&#8217;utilisation</h3>

<pre><code>vim /etc/hosts (oups j'ai oublié le sudo..)
&lt;Ctrl u&gt; sudo &lt;Ctrl k&gt;
</code></pre>

<h1>Annuler dans Bash</h1>

<p>C&#8217;est <code>Ctrl _</code></p>

<h1>En conclusion</h1>

<p>Les raccourcis claviers <code>Ctrl _</code> et <code>Ctrl y</code> sont des raccourcis claviers de emacs.</p>

<p>Bien qu&#8217;utilisateur Vim, j&#8217;aime beaucoup Emacs. Notamment le <code>org-mode</code>. Emacs est supérieur à Vim. (plus de mode, plus de personnalisation, une véritable interaction en REPL pour les langage type lisp). Il y a une tendance à utiliser Emacs avec le Evil-mode (ce qui en gros rajoute les raccourcis claviers de vim dans Emacs). Mais je pas encore passé le cap.</p>

<p>Il est possible de passer son BASH en Vi-mode avec la commande suivante. Personnellement j&#8217;aime pas.</p>

<pre><code>set -o vi
</code></pre>

<p>L&#8217;article <a href="http://www.catonmat.net/blog/bash-vi-editing-mode-cheat-sheet/">suivant</a> aide un peu. Mais ce n&#8217;est pas évident de dé-apprendre les raccourcis claviers.</p>

<h1>Quelques liens</h1>

<ul>
<li><a href="https://github.com/jlevy/the-art-of-command-line">the art of the command line</a></li>
<li><a href="http://www.commandlinefu.com">commandlinefu</a></li>
<li><a href="http://orgmode.org/index.html">org-mode</a></li>
<li><a href="http://www.emacswiki.org/emacs/Evil">evil-mode</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
