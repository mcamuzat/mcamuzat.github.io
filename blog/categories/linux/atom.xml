<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-04-29T22:57:45+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker Et Dockerfile]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/04/26/docker-et-dockerfile/"/>
    <updated>2015-04-26T19:44:44+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/04/26/docker-et-dockerfile</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Je continue dans mon exploration de Docker, aujourd&#8217;hui nous allons voir comment automatiser la création d&#8217;un container à l&#8217;aide d&#8217;un <code>Dockerfile</code>.</p>

<p>Nous allons créer un container pour <a href="http://jonas.nitro.dk/tig/">tig</a>.. C&#8217;est un interface git qui marche sous un terminal. Pour moi, c&#8217;est un magnifique outil de travail. Je m&#8217;en sers très souvent (surtout la vue de status (touche <code>S</code>) puis <code>u</code> pour ajouter, <code>!</code> pour reverter, <code>C</code> pour commit, <code>e</code> pour lancer mon éditeur (Bien entendu Vim)</p>

<p>Nous allons faire</p>

<ul>
<li>L&#8217;installation à la main</li>
<li>Puis écrire le <code>Dockerfile</code> qui automatise la partie 1</li>
<li>Optimiser un peu celui-ci en utilisant une autre distribution</li>
<li>Faire des commit sous Github, puis sous DockerHub</li>
</ul>


<h2>Création du container à la main</h2>

<p>Je commence avec une Ubuntu que je lance en mode interactif.</p>

<pre><code class="sh">docker run -it ubuntu:14.10
</code></pre>

<p>Je mets à jour ma distribution
<code>
apt-get update
</code></p>

<p>J&#8217;installe tig (il est dans les dépôts officiels)</p>

<pre><code class="sh">apt-get install -y tig
</code></pre>

<p>A cause du <code>apt-get update</code> Ubuntu a téléchargé toutes les sources des dépôts dans le répertoire <code>var/lib/apt/lists/</code> pour ne pas alourdir le container je vais effacer celui-ci
<code>
rm -rf /var/lib/apt/lists/*
</code></p>

<p>Je lance <code>tig</code>
<code>
root@0a475b7fbed7:/# tig
tig: Not a git repository
</code></p>

<p>Il n&#8217;y a pas de dépot git à la racine c&#8217;est normal.</p>

<p>je quitte mon container et je liste</p>

<pre><code>docker ps -a
CONTAINER ID        IMAGE                                         COMMAND                CREATED             STATUS                            PORTS                                                                         NAMES
0a475b7fbed7        ubuntu:14.10                                  "/bin/bash"            13 minutes ago      Exited (130) About a minute ago
</code></pre>

<p>Je vais le committer.
<code>
docker commit -m "add tig" -a "mcamuzat" admiring_yonath mcamuzat/tig:v1
</code></p>

<p>Je vais le relancer avec la commande suivante.
<code>
docker run -t -i -v `pwd`:/project mcamuzat/tig:v1
</code></p>

<p>En gros j&#8217;ai crée un lien symbolique qui pointe le répertoire courant de mon ordinateur vers le répertoire <code>project</code> du container.</p>

<p>je me place dans le répertoire project.
<code>
cd /project
</code></p>

<p>et je lance tig
<code>
tig
</code></p>

<p>Si dans le répertoire courant il y a un dépôt git. Normalement l&#8217;interface de Tig apparait.</p>

<p>Voila j&#8217;ai placé tig dans un container.</p>

<h2>Automatisation via un DockerFile.</h2>

<p>On se place dans un répertoire vide</p>

<p>Je crée un fichier <code>DockerFile</code> avec le contenu suivant</p>

<pre><code>FROM ubuntu:14.10
MAINTAINER Marc Camuzat &lt;marco@crans.org&gt;
RUN apt-get update \
    &amp;&amp; apt-get install -y mysql-client \
    &amp;&amp; rm -rf /var/lib/apt/lists/*
WORKDIR /project
VOLUME  /project
ENTRYPOINT ["tig"]
</code></pre>

<p><code>WORKDIR</code> et <code>VOLUME</code> indique à Docker que le répertoire par défault est <code>project</code> et que l&#8217;on lance tig</p>

<p>On va maintenant demander à docker de <em>builder</em> l&#8217;image à l&#8217;aide de la commande suivante</p>

<pre><code>docker build -t mcamuzat/tig:v2 .
</code></pre>

<p>On attend un peu.. Et on relance
<code>
docker run -t -i -v `pwd`:/project mcamuzat/tig:v2
</code></p>

<p>C&#8217;est beaucoup plus rapide.</p>

<h2>Optimisons la taille.</h2>

<p>Quand je liste mon image via la commande suivante</p>

<pre><code>REPOSITORY              TAG                     IMAGE ID            CREATED             VIRTUAL SIZE
mcamuzat/tig            v2                      103a05c16a2b        3 minutes ago       234.6 MB
</code></pre>

<p>Mon container fait 234 méga ! C&#8217;est beaucoup pour un simple utilitaire.
pour simplifier je vais utiliser une autre distribution <a href="https://www.alpinelinux.org/">alpine-linux</a> (que je ne connaissais pas ..) et le dockerhub <a href="https://registry.hub.docker.com/u/gliderlabs/alpine/">suivant</a> qui réduit la distribution à 5 méga !</p>

<p>Voici mon <code>DockerFile</code></p>

<pre><code>FROM gliderlabs/alpine:3.1
RUN apk --update add tig
WORKDIR /project
VOLUME  /project
ENTRYPOINT ["tig"]
</code></pre>

<p>Je relance un build.</p>

<pre><code>docker build -t mcamuzat/tig:v3 .
</code></pre>

<p>Maintenant mon container ne fait plus que 24 Méga !</p>

<h2>Publions sous Github</h2>

<p>Nous allons créer un nouveau dépôt avec un README.</p>

<p>Que je vais cloner.
<code>
git clone https://github.com/mcamuzat/tig-docker.git
</code></p>

<p>Je vais ajouter mon DockerFile, Commiter et Pusher
<code>
git add Dockerfile
git commit -m"initial commit"
git push origin master
</code></p>

<p>Et c&#8217;est tout.</p>

<p>Résultat <a href="https://github.com/mcamuzat/tig-docker">ici</a></p>

<h2>Publions sur DockerHub</h2>

<p>Je pars du principe que vous avez un compte sur DockerHub.</p>

<ul>
<li>Cliquer sur le bouton <code>Add Repository-&gt;Automated Build</code></li>
<li>choisir Github.</li>
<li>Puis On va vous demander de relier votre compte DockerHub à Github.</li>
<li>DockerHub va vous demander quel projet vous souhaitez builder automatiquement.</li>
</ul>


<p>Résultat <a href="https://registry.hub.docker.com/u/mcamuzat/tig/">ici</a></p>

<h2>Conclusion</h2>

<p>Le Dockerfile sert à automatiser la création d&#8217;image. il est plus simple de stocker le <code>Dockerfile</code> que le container (puisque Dockerhub s&#8217;occupe de faire build)</p>

<p>J&#8217;ai crée mon premier dépôt. Ce n&#8217;est pas très compliqué. Dans un prochain article, je vais essayer d&#8217;expérimenter <code>docker compose</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Je Débute]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/04/12/docker-je-debute/"/>
    <updated>2015-04-12T22:25:27+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/04/12/docker-je-debute</id>
    <content type="html"><![CDATA[<h2>Docker</h2>

<p>Suite à une présentation à une conférence. J&#8217;ai commencé à m&#8217;y mettre. J&#8217;écris ce post en tant que grand débutant..</p>

<p>Docker est une solution de virtualisation d&#8217;instance, plus précisément de container. Il y a pas mal de différence avec les différentes visualisations de Virtual box/Xen/VmWare. On isole juste les process et le file-system. Ce qui fait que l&#8217;on consomme très peu de processeurs.</p>

<h2>Installation</h2>

<p>Installer docker n&#8217;est pas très compliqué sous ubuntu 14.04.</p>

<pre><code class="bash">sudo apt-get install docker.io
</code></pre>

<p>Et c&#8217;est tout !</p>

<p>Pour éviter de préfixer <code>sudo</code> à chaque commande il est plus facile d&#8217;ajouter son utilisateur au group docker.</p>

<pre><code class="bash">sudo addgroup &lt;votre user&gt; docker
</code></pre>

<h2>Hello world sous docker</h2>

<p>Lancer docker</p>

<pre><code>docker run ubuntu:14.04 /bin/echo 'Hello world'
</code></pre>

<p>Cette commande fait plusieurs choses:</p>

<ul>
<li>si l&#8217;image <code>ubuntu:14.04</code> n&#8217;existe pas, elle va la télécharger.</li>
<li>Puis on lance le container</li>
<li>Puis on exécute echo &lsquo;Hello world&rsquo;</li>
</ul>


<p>D&#8217;ailleurs si on relance la même commande, on constate que l&#8217;image est déjà sur le disque dur.</p>

<p>la commande prend moins d&#8217;une seconde. Pourtant on a chargé un container et lancer une commande !</p>

<p>Essayons la commande suivante
<code>
docker run ubuntu:14.04 - it /bin/bash
root@b2634b81c3dc:/#
</code></p>

<p>Nous avons un bash intéractif. <code>-i</code> mode interactif, et <code>-t</code> affiche un pseudo terminal</p>

<p>Il faut comprendre que  dès que la commande principale est finie, l&#8217;instance aussi. Dans le cas <code>Echo 'Hello World'</code> la commande se finit de suite. Dans le cas de <code>/bin/bash</code> On spécifie le mode interactif. Donc l&#8217;instance continue tant que l&#8217;on a pas quitté le bash.</p>

<p>Ouvrons un nouveau terminal
<code>
docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
b2634b81c3dc        ubuntu:14.04        /bin/bash           43 seconds ago      Up 42 seconds                           sharp_archimedes
</code>
On voit que mon image est toujours en cours.</p>

<p>La commande docker ps affiche tout les containers allumés pour afficher tout les containers allumés pendant la session. C&#8217;est <code>dockers ps -a</code></p>

<p>On peux inspecter une instance avec la commande
<code>
docker inspect sharp_archimedes
docker inspect b2634b81c3dc
</code>
Cela renvoie un json.</p>

<p>On peux aussi lister les images disponibles via la commande</p>

<pre><code>docker images
</code></pre>

<p>Vous voulez télécharger des images
<code>
docker pull centos
</code></p>

<p>Vous cherchez une images particulières
<code>
docker search php56
</code></p>

<p>La liste des images disponibles est disponible sur <a href="https://hub.docker.com/">Docker Hub</a> . D&#8217;ailleurs Dockers est très couplé avec DockerHub. DockerHub est un le GitHub pour Docker. On peux très bien faire du Git sans GitHub. C&#8217;est la même chose pour docker.</p>

<p>Docker et Git partage aussi la notion de commit et de push.</p>

<p>relancons notre instance
<code>
docker run -it ubuntu:14.04 /bin/bash
root@f5882f7f608d:/#
</code></p>

<p>Installons un paquet au hasard
<code>
sudo apt-get install vim
</code></p>

<p>On quitte <code>Exit</code></p>

<p>puis on commit
<code>sh
sudo docker commit f5882f7f608do marc/vim
4f177bd27a9ff0f6dc2a830403925b5360bfe0b93d476f7fc3231110e7f71b1c
</code></p>

<p>Si je liste les images.
<code>sh
docker images
</code></p>

<p>je vois apparaitre mon <code>marc/vim</code></p>

<p>Je peux ainsi réutiliser mon container ainsi
<code>sh
sudo docker run -it marc/vim vim
</code></p>

<p>On peux ainsi se créer ses propres containers. Mais c&#8217;est un peu laborieux. Docker utilise des <code>DockerFile</code> pour automatiser le process. Cela fera un prochain post</p>

<h2>Résumé des commandes</h2>

<ul>
<li><code>docker run -i -t ubuntu:14.10 /bin/bash</code> lance en mode interactif et un terminal avec la commande Bash.</li>
<li><code>docker run -i -t ubuntu:14.10 'hello world'</code></li>
<li><code>docker ps</code> liste les containers en cours.</li>
<li><code>docker ps -a</code> liste tout les containers.</li>
<li><code>docker images</code> liste toutes les images.</li>
<li><code>docker pull centos</code> pour télécharger une image (tout les images officielles sont sur le <a href="https://hub.docker.com/">Hub</a></li>
<li><code>docker inspect uuid</code> affiche les informations sur l&#8217;instance.</li>
<li><code>docker commit uuid name</code>pour commiter.</li>
</ul>


<h2>Conclusion</h2>

<p>Bon j&#8217;avoue que je débute depuis 2 jours.  Ce qui m&#8217;impressionne dans Docker c&#8217;est la vitesse (moins d&#8217;une seconde pour démarrer). C&#8217;est plutôt simple d&#8217;utilisation. La notion de commit a l&#8217;air sympa (Même si au fond c&#8217;est l&#8217;équivalent d&#8217;un snapshot sous vmware). J&#8217;espère pouvoir faire mon premier dépôt sous DockerHub bientôt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comprendre La Ligne De Commande De Vi]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/03/30/comprendre-la-ligne-de-commande-de-vi/"/>
    <updated>2015-03-30T22:36:21+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/03/30/comprendre-la-ligne-de-commande-de-vi</id>
    <content type="html"><![CDATA[<p>Sous Vi quand on appuie sur <code>:</code> on a la ligne de commande</p>

<p>Tout le monde connaît
<code>
:wq // quitter et enregistrer
:q! // quitter sans enregistrer et sans confirmation !
</code></p>

<p>Mais en pratique il existe plein de commandes.</p>

<p>Par exemple :</p>

<pre><code>:1,10d 
</code></pre>

<p>efface la ligne 1 à 10 (<code>d</code> = delete)</p>

<pre><code>:1,10m 10
</code></pre>

<p>bouge les lignes de 1 à 10 de 10 ligne (ici <code>m</code> = move)</p>

<dl>
<dt>le &ldquo;pattern&rdquo; est toujours le même</dt>
<dt>&#8220;`</dt>
<dd>(début, fin)action
<code>``
| mouvements | traduction|
| ------------- |:-------------:|
|</code>1,10<code>     | entre la ligne 1 et  la ligne 1 à 10 |
|</code>.,10<code>     |</code>.<code>signifie la ligne actuelle      |
|</code>10,$<code>|</code>$<code>signifie la dernière ligne|
|</code>/mot1/,/mot2/<code>| entre le</code>mot1<code>et le</code>mot2<code>|
|</code>., +5<code>| entre la ligne actuelle (</code>.<code>) et les 5 lignes suivantes|
|</code>%` | tout le fichier|</dd>
</dl>

<p>quelques actions</p>

<table>
<thead>
<tr>
<th>racourcci</th>
<th> traduction</th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>d</code> </td>
<td> comme <strong>d</strong>elete</td>
</tr>
<tr>
<td> <code>j</code> </td>
<td> comme <strong>j</strong>oin</td>
</tr>
<tr>
<td><code>sort</code></td>
<td> trier (sort) les lignes</td>
</tr>
<tr>
<td><code>w</code></td>
<td> pour enregistrer</td>
</tr>
<tr>
<td><code>y</code></td>
<td> comme yank</td>
</tr>
</tbody>
</table>


<h2>le plus connu substitute</h2>

<p>vous avez souvent vu cette syntaxe dans les commits <code>s/mot1/mot2</code></p>

<p>ici <code>s</code> signifie <strong>substitute</strong>.</p>

<p>par exemple
<code>
:%s/mot1/mot2/g
</code>
va remplacer le mot 1 par le mot 2
le <code>g</code> active le flag <code>global</code> et remplace si le mot apparait deux fois.</p>

<p>par exemple
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mot1 = $mot1 + 1;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;// s/mot1/mot2
</span><span class='line'>$mot2 = $mot1 + 1 ; // on ne change que le premier mot&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;// s/mot1/mot2/g
</span><span class='line'>$mot2 = $mot2 + 1 // tout les mots</span></code></pre></td></tr></table></div></figure></p>

<h2>Encore un peu plus loin</h2>

<p>la commande suivante permet de grouper les mots
<code>
:g/mot/ #donne toute les lignes contenant mot
</code>
<code>g</code> ici signifie <strong>g</strong>roup</p>

<p>On peut chaîner les differentes actions
par exemple
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:g/pattern/s/mot/mot2/g # toutes les lignes qui contiennent le pattern, remplace mot1 par mot2.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;:g/pattern/d # efface toute les lignes qui contiennent le pattern suivant&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;:g/pattern/p # &lsquo;print toutes lignes qui contienne le pattern suivant</span></code></pre></td></tr></table></div></figure></p>

<p>la derniere ligne est la plus connue. pattern est le plus souvent une <em>regex</em> donc la traduction <code>g/regex/p</code> ->donne la commande <code>grep</code> sous linux.</p>

<p>en faite, toutes les commandes que j&#8217;ai données proviennent de <code>sed</code>. mais ce n&#8217;est pas un hasard. <code>vi</code> est l&#8217;abbreviation de <strong>V</strong>isual <strong>I</strong>nteraction of Sed. un <em>sed interactif</em>.</p>

<p>J&#8217;espère que cela vous fera apprecier <code>sed</code> comme <code>vi</code>. on peut rester très longtemps sur toutes les commandes.</p>

<p>j&#8217;avais expliqué dans un précédent articles les mouvements en mode normal sont
&#8220;`
Action + Nombre de fois + Mouvement</p>

<p>Exemple:
d5w # <em>d</em>elete <em>5</em> word
yG  # copier jusqu&#8217;à la fin du fichier (G)
=4j # indenter (=) 4 lignes vers le bas
di( # efface entre les parenthèses <em>d</em>elete <em>i</em>nside (</p>

<dl>
<dt>Dans le mode commande</dt>
<dd>début, fin action</dd>
</dl>

<p>:%d # efface tout le fichier
:1,10y # copie dans le presse-papier la ligne 1 à 10
:%s/include_one/require_once/gc</p>

<pre><code>
Il me reste à vous parler des buffers et des macros. et on aura presque fait le tour de la magie de `vi`.

##une commande de la vrai vie
</code></pre>

<p>:%s/\s+$//
<code>``
sur tout le fichier (</code>%<code>) remplace(</code>s<code>) un ou plus(</code>+<code>) espaces (</code>\s<code>) à la fin de la ligne (</code>$`) par du vide. cette commande supprime les espaces vides à la fin des lignes..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comprendre Les Raccourcis Claviers De Vi/vim]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/03/08/comprendre-les-raccourcis-claviers-de-vi-slash-vim/"/>
    <updated>2015-03-08T18:37:20+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/03/08/comprendre-les-raccourcis-claviers-de-vi-slash-vim</id>
    <content type="html"><![CDATA[<h1>Comprendre les raccourcis claviers Vim : la méthode des deux tableaux</h1>

<p>Aujourd&#8217;hui nous allons essayer de comprendre les raccourcis de vi/vim. Je vous demande de prendre deux feuilles. Je vais essayer de vous monter comment se combinent les touches.</p>

<ul>
<li>sur la feuille 1 dessinez deux colonnes: touche description.</li>
<li>Titre de la feuille 1 : Mouvement</li>
<li>Tire de la feuille 2 : Action deux colonnes : touche et description.</li>
</ul>


<p>Lancez <code>vim</code> et ouvrez un fichier texte existant.</p>

<h2>Les mouvements :</h2>

<p><code>w</code> signifie <strong>w</strong>ord
appuyez sur <code>w</code> vous passez au mot suivant.</p>

<p>Ajouter à votre tableau mouvement
w <strong>w</strong>ord  passe au mots suivant</p>

<p><code>b</code> signifie <strong>b</strong>ack. Vous allez au mot précédent</p>

<p>Vous ajoutez a la feuille b <strong>b</strong>ack</p>

<p><code>e</code> signifie <strong>e</strong>nd va à la fin du mot</p>

<h3>les directions</h3>

<p>J&#8217;ai un peu peur de vous perdre ici.
Dans le temps les clavier n&#8217;avait pas de touche de direction. Les touches sont <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code> pour respectivement <code>gauche</code>, <code>bas</code>, <code>haut</code>, <code>droite</code></p>

<p>Moyen mnémotechnique <code>j</code> va vers le bas, <code>k</code> va vers le haut.</p>

<p>Vous pouvez utiliser les flèches. Mais un des avantage d&#8217;utiliser les <code>j</code> et <code>k</code> est que vos doigts ne quitte jamais le milieu du clavier.</p>

<p>Vous avez maintenant 7 lignes à votre tableau</p>

<h3>Un quiz !</h3>

<p>Que se passe t&#8217;il si je tape <code>3w</code> ou <code>5j</code> ?</p>

<p>Réponse je me déplace de <code>3 mots</code> ou <code>5 ligne vers le bas</code>
modifions notre tableau en rajoutant le (n).</p>

<h3>Se déplacer dans le fichier.</h3>

<p><code>gg</code> vous ramène au début du fichier (<code>g</code> pour <strong>g</strong>o)
<code>G</code> vous emmène à la fin du fichier
<code>50G</code> vous emmène à la ligne 50 (variante <code>:50</code> marche aussi)</p>

<p>Vous rajoutez les 3 lignes dans votre tableau.</p>

<h3>Début de ligne, fin de ligne</h3>

<p>si vous connaissez vos Regex <code>^a</code> vous donnes tout les occurrences qui commencent par <code>a</code> et <code>a$</code> qui finissent par <code>a</code>
<code>^</code> début du texte sur la ligne actuelle
<code>$</code> fin de la ligne
<code>0</code> colonne 0 (tout début de la ligne)</p>

<h3>A la recherche du mot perdu</h3>

<p>pour chercher de vi on utilise la touche <code>/</code>, vous mettez le mot que vous souhaitez, appuyez sur <code>n</code> pour suivant ou <code>N</code> pour précédent.</p>

<p>nous avons le tableau final</p>

<table>
<thead>
<tr>
<th> Touche      </th>
<th style="text-align:center;"> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>w</code>               </td>
<td style="text-align:center;"> <strong>w</strong>ord  mot suivant</td>
</tr>
<tr>
<td> <code>(n)w</code>            </td>
<td style="text-align:center;"> n <strong>w</strong>ord  (ex: <code>3w</code> 3 mots)</td>
</tr>
<tr>
<td> <code>b</code>      </td>
<td style="text-align:center;"> <strong>b</strong>ack   mots précédent  </td>
</tr>
<tr>
<td> <code>e</code> </td>
<td style="text-align:center;"> <strong>e</strong>nd fin du mot</td>
</tr>
<tr>
<td> <code>h</code>,<code>j</code>, <code>k</code>,<code>l</code> </td>
<td style="text-align:center;"> gauche, bas, haut, droite</td>
</tr>
<tr>
<td> <code>(n)j</code> </td>
<td style="text-align:center;"> 3 fois bas</td>
</tr>
<tr>
<td> <code>gg</code> </td>
<td style="text-align:center;"> début du fichier</td>
</tr>
<tr>
<td> <code>G</code> </td>
<td style="text-align:center;"> fin du fichier</td>
</tr>
<tr>
<td><code>20G</code></td>
<td style="text-align:center;"> ligne 20</td>
</tr>
<tr>
<td><code>^</code></td>
<td style="text-align:center;">Début de ligne</td>
</tr>
<tr>
<td><code>$</code></td>
<td style="text-align:center;"> fin de la ligne</td>
</tr>
<tr>
<td> <code>/mot</code></td>
<td style="text-align:center;"> cherche <code>mot</code>. <code>n</code> pour suivant <code>N</code> pour précédent</td>
</tr>
</tbody>
</table>


<p>Nous avons la feuille 1.</p>

<h3>Un demi conclusion :</h3>

<ul>
<li>Il existe plus de mouvement.</li>
<li>mais le but ici n&#8217;est pas d&#8217;être exhaustif. J&#8217;ai besoin des mouvements pour introduire la feuille suivante.</li>
</ul>


<h2>Les Actions.</h2>

<p><code>d</code> signifie <strong>d</strong>elete (en fait c&#8217;est un couper)</p>

<p>Petit quizz : que se passe t&#8217;il si j&#8217;appuie sur les touches suivantes ? <code>d3w</code>
une traduction <strong>d</strong>elete <strong>3</strong> <strong>w</strong>ords. J&#8217;efface trois mots, Vous comprenez pourquoi j&#8217;ai absolument besoin de la table d&#8217;avant. Car en fait et c&#8217;est une des vérités qui vous aidera dans Vi/Vim. Un combinaison dans Vi c&#8217;est <strong>action</strong> + <strong>mouvement</strong>.</p>

<p>Je donne les autres actions</p>

<ul>
<li><code>y</code>pour <strong>y</strong>ank pour copier <code>yw</code> copie un mot. <code>y3j</code> copie 3 lignes. pour coller on utilise la touche <code>p</code> comme <strong>p</strong>aste</li>
<li><code>c</code> pour <strong>c</strong>hange. Vous souhaitez changer un mot. avant vous appuyer sur <code>i</code> pour vous effacer le mot, puis vous rajouter le votre. Si vous taper <code>cw</code> comme <strong>c</strong>hange <strong>w</strong>ord. vi supprime le mot et met directement en mode <em>insertion</em>.</li>
<li><code>&gt;</code> et <code>&lt;</code> déplace à droite et à gauche le texte <code>&lt;4j</code> déplace 4 ligne à gauche.</li>
<li><code>=</code> re-indente le texte, c&#8217;est un pictogramme le deux lignes du égale sont alignées. Pour ré-indenter tout le texte <code>gg=G</code> soit <code>gg</code> va au début du fichier <code>=G</code> ré-indente jusqu&#8217;à la fin du fichier.</li>
</ul>


<p>Table 2</p>

<table>
<thead>
<tr>
<th>Touche      </th>
<th style="text-align:center;"> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>d</code>               </td>
<td style="text-align:center;"> <strong>d</strong>elete</td>
</tr>
<tr>
<td> <code>c</code>               </td>
<td style="text-align:center;"> <strong>c</strong>hange efface et passe en mode insertion</td>
</tr>
<tr>
<td> <code>y</code>            </td>
<td style="text-align:center;">  <strong>y</strong>ank (copier) <code>p</code> pour <strong>p</strong>aste coller</td>
</tr>
<tr>
<td> <code>&gt;</code>      </td>
<td style="text-align:center;"> décale le texte à droite </td>
</tr>
<tr>
<td> <code>&lt;</code> </td>
<td style="text-align:center;"> décale à droite</td>
</tr>
<tr>
<td> <code>=</code></td>
<td style="text-align:center;"> reindente le code</td>
</tr>
<tr>
<td> <code>v</code> </td>
<td style="text-align:center;"> <strong>v</strong>isual selectionne le texte  <code>y</code> copie <code>d</code> coupe etc ..</td>
</tr>
</tbody>
</table>


<h1>Conclusion</h1>

<ul>
<li><p>Pour faire une combinaison de touche il suffit de prendre une lettre de la table 2 + un mouvement de la table 1.
par exemple je veux effacer 5 lignes:
<code>delete 5 lines</code> -> d5j
je veux changer un mot
<code>change word</code> -> cw</p></li>
<li><p>Recopier les deux tableaux. L&#8217;astuce est vraiment d&#8217;avoir les feuilles sous les yeux.</p></li>
<li>Les touches sont les mêmes pour <code>man</code> et surtout <code>less</code></li>
</ul>


<h1>Un peu de philosophie.</h1>

<ul>
<li>Je n&#8217;ai pas utilisé une seul fois la touche controle et alt.</li>
<li>En 1 sens, je n&#8217;utilise pas la souris. Je veux indenter le texte je dis <em>indente le texte</em> <code>=G</code> et pas sélectionner le texte, puis bouton droit ou un raccourci clavier. En un sens Vi est plus direct.</li>
<li>J&#8217;espère que cela démystifie un peu l&#8217;utilisation du clavier sur vi</li>
</ul>


<h2>Teaser</h2>

<p>il existe d&#8217;autre mouvement ! Je ferai une version deluxe, l&#8217;idée ici est de comprendre la combinaison de mouvements. une touche apprise c&#8217;est de dizaine de nouvelles possibilités
par exemple <code>di(</code> <code>i</code> signifie inside. donc delete inside parenthèse. Efface le texte entre les parenthèses.</p>

<h2>Faq</h2>

<p>j&#8217;appris que pour effacer une ligne c&#8217;est <code>dd</code> ? je ne le vois pas dans le tableau.
en fait</p>

<ul>
<li><code>dd</code> efface une ligne.</li>
<li><code>yy</code> copie la ligne.</li>
<li><code>cc</code> change la ligne.</li>
</ul>


<p>Il existe un mouvement qui s&#8217;appelle <code>_</code> qui représente la ligne actuelle (c&#8217;est d&#8217;ailleurs le pictogramme d&#8217;une ligne)
donc en fait si on tape <code>d_</code> on efface la ligne actuelle (essayez !). Mais la plupart du temps c&#8217;est un peu compliqué à taper pour une opération plutôt courante (supprimer une ligne) . Donc il a été décidé que <code>dd</code>, <code>yy</code> , <code>cc</code>
 sont les raccourcis de <code>d_</code>, <code>y_</code> et <code>c_</code>.</p>

<p>Il y a en fait une multitude de raccourcis
par exemple:</p>

<ul>
<li><code>c$</code> donne <code>C</code>(Change tout la ligne à partir du curseur).</li>
<li><code>d$</code> donne <code>D</code>(Efface toute la ligne à partir du Curseur).</li>
<li><code>^i</code> donne <code>I</code> insert au début de la ligne.</li>
<li><code>$a</code> donne <code>A</code> ajoute à la fin de la ligne.</li>
</ul>

]]></content>
  </entry>
  
</feed>
