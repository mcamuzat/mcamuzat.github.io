<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Journal d'un panda qui code]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-11-22T17:48:38+01:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les Monades 3 Le Maybe (suite)]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/"/>
    <updated>2015-11-22T16:59:31+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite</id>
    <content type="html"><![CDATA[<ul>
<li>partie 1 : <a href="blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>partie 2 : <a href="blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
</ul>


<p>Dans la partie de 3 : Nous allons utiliser le functor Maybe avec l&#8217;instruction <code>bind</code>.</p>

<p>Soit le tableau suivant.</p>

<pre><code class="php">$data = [
    ['id_article' =&gt; 1, 'titre' =&gt; 'titre1', 'meta' =&gt; ['images' =&gt; ['//first.jpg', '//second.jpg']]],
    ['id_article' =&gt; 2, 'titre' =&gt; 'titre2', 'meta' =&gt; ['images' =&gt; ['//third.jpg']]],
    ['id_article' =&gt; 3, 'titre' =&gt; 'titre3'],
];
</code></pre>

<p>nous voulons afficher une liste avec une titre et et une image.</p>

<p>Nous allons utilisez la fonction suivante</p>

<pre><code class="php ">function get($key)
{
    return function ($array) use ($key) {
        return isset($array[$key]) ? $array[$key] : null;
    };
}
</code></pre>

<p>Exemple d&#8217;utilisation.</p>

<pre><code class="php">$getTitre = get("titre");
foreach ($data as $line) {
  var_dump $getTitre($line");
}
</code></pre>

<p>Le résultat</p>

<pre><code class="sh ">string (6) "titre1"
string (6) "titre2"
string (6) "titre3"
</code></pre>

<p>Pour extraire les images utilisons notre Maybe
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$data</span> <span class="k">as</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">maybeFromValue</span><span class="p">(</span><span class="nv">$line</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">meta</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">images</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">noimage</span><span class="o">.</span><span class="nx">png</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">Le</span> <span class="nx">résultat</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="c1">//first.jpg&amp;rdquo;</span>
</span><span class='line'><span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="c1">//third.jpg&amp;rdquo;</span>
</span><span class='line'><span class="nx">string</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">no</span><span class="o">-</span><span class="nx">image</span><span class="o">.</span><span class="nx">png</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Avec le <code>bind</code></h2>

<p>Ré-ecrivons pour utiliser le bind. (Nous utilisons l&#8217;idée que la fonction que j&#8217;injecte dans le container renvoie elle-mème un <code>Some</code> ou <code>Nothing</code>)</p>

<p><img class="center" src="/images/functionretourneSome.png" width="600" height="450" title="&lsquo;la fonction renvoie un maybe&rsquo; &lsquo;la fonction renvoie un maybe&rsquo;" ></p>

<pre><code class="php">function get($key)
{
    return function ($array) use ($key) {
        return isset($array[$key]) ? Some::of($array[$key]) : Nothing::of(null);
    };
}
</code></pre>

<p>La fonction devient.</p>

<pre><code class="php">foreach ($data as $line) {
   var_dump(maybeFromValue($line)-&gt;bind(get("meta"))
       -&gt;bind(get("images"))
       -&gt;bind(get(0))
       -&gt;getOrElse("noimage.png"));
}
</code></pre>

<h2>En conclusion</h2>

<ul>
<li>Si j&#8217;utilise la fonction <code>map</code> (parfois on parle aussi de <code>fmap</code>) j&#8217;utilise le Maybe en tant que Functor.</li>
<li>Si j&#8217;utilise la fonction <code>bind</code> j&#8217;utilise le Maybe en tant que Monad.</li>
</ul>


<p>Nous allons continuer notre voyage avec les listes dans le prochain post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades (suite): Le Functor Maybe..]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/"/>
    <updated>2015-11-15T16:43:42+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/lesdeuxcontainerMaybe.png" width="512" height="313" title="&lsquo;Il y a deux container&rsquo; &lsquo;Il y a deux containers&rsquo;" ></p>

<p>Nous avons vue dans le précédent <a href="blog/2015/11/11/les-monades-en-php-cest-possible-dot/">post</a> un pseudo-container qui nous permet d&#8217;emballer nos valeurs. Nous allons muscler un peu notre container mais partons d&#8217;un exemple.</p>

<p>Je souhaite récupérer le mail du client &ldquo;bob&rdquo; ou afficher &ldquo;pas de mail&rdquo;</p>

<pre><code class="php">function getMail($name) {
$mail = getUserByName($name)-&gt;getAddress()-&gt;getMail();
if (null === $mail) {
   return "pas de mail"; 
}
return $mail;
}
</code></pre>

<p>Facile non ?</p>

<!--more-->


<p>Si <code>getAdress()</code> renvoie null, Outch &hellip;</p>

<pre><code>PHP Fatal error: Call to a member function getMail() on a non-object..
</code></pre>

<p>L&#8217;utilisateur n&#8217;existe pas forcement et puis l&#8217;adresse est peut-être vide.. Une implémentation naïve</p>

<pre><code class="php">function getMail($name) {
    $user = getUserByName($name);
    if ($user) {
        $address = $user-&gt;getAddress();
        if ($address) {
            //etc ...
            return $adresse-&gt;getMail();
        }
   }
   return "pas de mail";

}
</code></pre>

<p>Ce code vous le connaissez, vous l&#8217;avez probablement déjà écris, il y a moyen d&#8217;optimiser de faire plus propre.</p>

<h2>Deux containers pour le prix d&#8217;un.</h2>

<p>Le Maybe à la rescousse..</p>

<p>Voici le Maybe en dessin.</p>

<p><img class="center" src="/images/lesdeuxcontainerMaybe.png" width="512" height="313" title="&lsquo;Il y a deux container&rsquo; &lsquo;Il y a deux containers&rsquo;" ></p>

<p>J&#8217;ai un container <code>Some</code> et un Container <code>Nothing</code>.</p>

<p>Le container <code>Nothing</code> est un container qui n&#8217;a aucune valeurs. La méthode <code>map</code> renvoie toujours un container <code>Nothing</code>.</p>

<pre><code class="php">class Nothing extends Container{
    public function map($function)
    {
       return static::of(null);
    }
    public static function of($value)
    {
        return new static($value);
    }

    public function bind($transformation)
    {
        return static::of(null);
    }

    public function getOrElse($default)
    {
        return $default;
    }
}
</code></pre>

<p>Le container <code>Some</code> le résultats de <code>map</code> est un nouveau container <code>Some</code> s&#8217;il y a un résultat non-null sinon c&#8217;est un container <code>Nothing</code>.</p>

<pre><code class="php ">class Some extends Container{
    public function map($function)
    {
        $result = $this-&gt;bind($function);
        if ($result === null) {
            return Nothing::of(null);
        }
        return static::of($result);
    }
    public static function of($value)
    {
        return new static($value);
    }

    public function bind($transformation)
    {
        return call_user_func($transformation, $this-&gt;value);
    }

    public function getOrElse($default)
    {
        return $this-&gt;value;
    }
}
</code></pre>

<p>Enfin j&#8217;ai besoin d&#8217;un helper</p>

<pre><code>function maybeFromValue($value) {
 if ($value === null) 
   return Nothing::of(null);
 return Some::of($value);
}
</code></pre>

<p>Notons que j&#8217;ai une méthode qui me permet de sortir avec une valeurs par défaut</p>

<p>Quelques exemples:</p>

<pre><code class="php">echo maybeFromValue(null)-&gt;map("ucfirst")-&gt;getOrElse("non!!");
// non!!
echo maybeFromValue("oui!!")-&gt;map("ucfirst")-&gt;getOrElse("non!!");
// Oui!!
echo Some::of("oui")-&gt;map("ucfirst")
   -&gt;map(function($value) {return null;})
   -&gt;getOrElse("Non!!");
// Non !!
</code></pre>

<p>Nous pouvons simplifier notre problème</p>

<p>En le refactorisant ainsi</p>

<pre><code class="php">// example
// method("name") return function($obj) {return $obj-&gt;getName()};

function method($name)
{
    return function ($obj) use ($name) {
        return $obj-&gt;$name();
    };
}

$mail = maybeFromValue(getUserByName($name))
    -&gt;map(method("getAddress")) // $value-&gt;getAdress()
    -&gt;map(method("getMail"))
    -&gt;getOrElse("pas de mail");
</code></pre>

<p>Quelques dessins
Le cas ou tout marche</p>

<p><img class="center" src="/images/maybechainageok.png" width="516" height="260" title="&lsquo;chainage tout va bien&rsquo; &lsquo;chainage tout va bien&rsquo;" ></p>

<p>Le cas ou <code>getUser()</code> renvoie null</p>

<p><img class="center" src="/images/chainagepasok.png" width="516" height="216" title="&lsquo;getAdress renvoie null, on prend la valeur par défault&rsquo; &lsquo;getAdress renvoie null, on prend la valeur par défaults&rsquo;" ></p>

<p>Sympa la refactorisation. On peux supprimer ainsi une partie de la logique (la plupart des if, les nulls ont tous disparus).</p>

<h2>Une librairie toute faite</h2>

<p>Je vais parler de <a href="https://github.com/schmittjoh/php-option">php-option</a>. Si vous faite du <a href="https://symfony.com/">symfony2</a> vous l&#8217;avez déja dans votre <code>/vendor</code> et vous ne le saviez pas.</p>

<p>La syntaxe est un peu près le même</p>

<p>Mais il y a plein de fonctionnalités</p>

<pre><code class="php">$entity = $this-&gt;findSomeEntity()-&gt;getOrElse(new Entity());
$entity = $this-&gt;findSomeEntity()-&gt;getOrCall('createAnNewAddress');
$entity = $this-&gt;findSomeEntity()-&gt;getOrThrow(new \Exception('ha!!!!!'));
</code></pre>

<p>Il y a aussi des possibilité de chainer les réponses si pas de résultats
<code>php
$entity = $this-&gt;findSomeEntity()-&gt;orElse($this-&gt;findSomeOtherEntity())
            -&gt;orElse($this-&gt;createEntity());
</code></p>

<p>Nous n&#8217;utilisons que l&#8217;instruction <code>map</code> pour le moment. Donc nous n&#8217;utilisons pas le container en tant que monade mais plutôt en tant que functor. Nous verrons cela dans le troisième post.</p>

<h2>Conclusion</h2>

<p>Je suis désolé si certain termes sont inexacts comme le container. Je ne suis pas un expert, mais j&#8217;admets bien volontiers mon erreur.</p>

<p>Si vous avez un code ou vous vérifiez tout le temps si les valeurs sont nulles. Il y a probablement moyen que cette structure vous aide.</p>

<p>Dans le prochain Post nous utiliserons le Maybe avec l&#8217;instruction <code>bind</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades en PHP c'est possible..]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/"/>
    <updated>2015-11-11T19:28:39+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Nous allons voir ensemble les monades. Nous allons voir la monade <strong>Identity</strong>. elle n&#8217;est pas très utile mais nécessaire si vous voulez comprendre la monade/functor  <strong>Maybe</strong> qui j&#8217;espère va changer votre façon de voir votre code mais ce sera dans le post suivant.</p>

<p>Les monades sont des structures de la programmation fonctionnelle. Très utilisées dans le langage <a href="https://www.haskell.org/">Haskell</a>. En pratique Haskell serait moins attractifs sans cette structure. <em>(Je ne suis absolument pas développeur Haskell.)</em></p>

<!--more-->


<p>Je ne sais pas trop les définir puisque il existe un nombre incalculable de définitions</p>

<ul>
<li>C&#8217;est un triplet d&#8217;après <a href="https://fr.wikipedia.org/wiki/Monade_%28informatique%29">wikipédia en français</a></li>
<li>Une Interface, de l&#8217;injection de dépendances, Structure, Une base spatiale, Un <a href="https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/">burrito</a></li>
<li>Des catégories</li>
</ul>


<p>Il existe une infinité de tutoriels dessus (Le site officiel de Haskell à un compteur <a href="https://wiki.haskell.org/Monad_tutorials_timeline">plutôt amusant</a> pour quantifier l&#8217;avalanche de tuto), écris par les plus grands Douglas Crowford <a href="https://www.youtube.com/watch?v=b0EF0VTs9Dc">Youtube</a> (La référence du Javascript). Donc probablement que mon explication ne sera pas forcément la meilleure.</p>

<p>Pour comprendre les monades je vais vous parler de container (Rien à voir avec <a href="https://www.docker.com/">docker</a>, ni container de <a href="https://symfony.com/">Symfony</a>).</p>

<h2>des valeurs sympas et pas sympa.</h2>

<p>J&#8217;ai des valeurs sympas, et des valeurs <strong>pas sympas</strong>.</p>

<p><img class="center" src="/images/sympa-passympa.png" width="600" height="233" title="&lsquo;des valeurs sympas et pas sympas&rsquo; &lsquo;des valeurs sympas et pas sympas&rsquo;" ></p>

<p>Par <strong>pas sympa</strong>, j&#8217;entends toute les valeurs que je ne maitrise pas trop
par exemple</p>

<ul>
<li>la variable n&#8217;est pas instanciée le fabuleux <code>Null</code></li>
<li>le résultat n&#8217;est pas forcément le même. je lance la fonction deux fois, je n&#8217;ai pas le même résultat.</li>
<li>le résultat dépend d&#8217;autre chose, par exemple la lecture d&#8217;un fichier (le réseau est coupé, le disque dur est plein, etc ..) et peux entrainer des erreurs et des exceptions.</li>
<li>le résultat n&#8217;a pas forcement la même taille. je pense à un résultat de base de donnée, je peux avoir 0 lignes commes des milliards.</li>
<li>enfin le résultat utilise des ressources qui sont partagés avec d&#8217;autre programme.</li>
</ul>


<h2>La solution le container</h2>

<p>La solution :</p>

<blockquote><blockquote><p>utiliser un container ou un emballage</p></blockquote></blockquote>

<p><img class="center" src="/images/valeurdanscontainer.png" width="600" height="450" title="&lsquo;Ma valeur dans un container&rsquo; &lsquo;Ma valeur dans un container&rsquo;" ></p>

<p>L&#8217;idée est simple, je mets en <strong>quarantaine</strong> ma valeur.</p>

<p>Ainsi je suis protégé des effets néfastes.</p>

<p><img class="center" src="/images/valeurquicasse.png" width="600" height="450" title="&lsquo;Si problème..&rsquo; &lsquo;Si problème..&rsquo;" ></p>

<p>Voici le début de l&#8217;implémentation</p>

<pre><code class="php">class Container {

   /**
     * @var mixed
     */
    protected $value;

    public function __construct($value)
    {
        $this-&gt;value = $value;
    }

    public static function of($value)
    {
        return new static($value);
    }
}
</code></pre>

<p>J&#8217;ai deux méthodes:  un constructeur, et une factory statique.
deux possibilités</p>

<pre><code class="php">$valueNotSecure = "Je ne suis pas sympa";
var_dump(new Container($valueNotSecure));
var_dump(Container::of($valueNotSecure));
</code></pre>

<pre><code class="php">class Container#1 (1) {
  protected $value =&gt;
  string(20) "Je ne suis pas sympa"
}
class Container#1 (1) {
  protected $value =&gt;
  string(20) "Je ne suis pas sympa"
}
</code></pre>

<p>Ma valeur est dans un container, la propriété est <code>protected</code>. Donc impossible à atteindre de l&#8217;extérieur, à priori on ne craint pas grand chose..</p>

<p>Mais voila mon container aussi sécure qu&#8217;il soit ne sert à rien. Puisque rien ne sort, mais rien de rentre..</p>

<h2>Un Sas de décontamination.</h2>

<p>Je vais ajouter un sas de décontamination à ma structure via l&#8217;instruction <code>map</code> qui prend une fonction. Il applique la fonction à la valeur à l&#8217;intérieur. Il a une petite particularité. Il ne donne pas le résultat mais un nouveau container qui contient le résultat.</p>

<p><img class="center" src="/images/containeravecsas.png" width="600" height="450" title="&lsquo;J'ajoute un sas&rsquo; &lsquo;J'ajoute un sas&rsquo;" ></p>

<p>Soit la fonction suivante qui ajoute 1 à la valeur en entrée.</p>

<pre><code class="php">function addOne($value) {
    return $value + 1;
}
</code></pre>

<p>Regardons le dessin suivant:</p>

<p><img class="center" src="/images/containeravecsasexemple.png" width="600" height="450" title="&lsquo;Je place la fonction +1 dans le sas&rsquo; &lsquo;Je place la fonction +1 dans le sas&rsquo;" ></p>

<ul>
<li>Je crée un container qui contient la valeur &ldquo;5&rdquo;.</li>
<li>Je mets la fonction <code>addOne</code> dans le <code>map</code>. Je fais le calcul. Que je m&#8217;empresse de remettre dans un container tout neuf.</li>
<li>j&#8217;ai un Container avec &ldquo;6&rdquo;.</li>
</ul>


<p><img class="center" src="/images/containertoutneuf.png" width="600" height="450" title="&lsquo;J'ajoute un sas&rsquo; &lsquo;J'ajoute un sas&rsquo;" ></p>

<p>Voici l&#8217;implémentation de <code>map</code> dans ma classe container.</p>

<pre><code class="php ">    public function map($function)
    {
        // call_user_func =&gt; $function($this-&gt;value)
        return static::of(call_user_func($function,$this-&gt;value));
    }
</code></pre>

<p>Et le code d&#8217;exemple.</p>

<pre><code class="php">$output = Container::of(5)
    -&gt;map("addOne")
var_dump($output);
</code></pre>

<p>Et le résultat
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Container</span><span class="c1">#2 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">int</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Quelques</span> <span class="nx">remarques</span>
</span><span class='line'>
</span><span class='line'> <span class="o">*</span> <span class="nx">Comme</span> <span class="nx">le</span> <span class="nx">résultat</span> <span class="nx">n</span><span class="s1">&#39;est pas sur, Je remet le résultat dans un nouveau container. Je ne réutilise plus l&#39;</span><span class="nx">ancien</span> <span class="nx">container</span> <span class="p">(</span><span class="nx">puisque</span> <span class="nx">contaminé</span><span class="p">)</span><span class="o">.</span> <span class="nx">Comme</span> <span class="nx">on</span> <span class="nx">ne</span> <span class="nx">peux</span> <span class="nx">changer</span> <span class="nx">le</span> <span class="nx">contenu</span><span class="p">,</span> <span class="nx">il</span> <span class="nx">est</span> <span class="o">**</span><span class="nx">immutable</span><span class="o">**</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="nx">img</span> <span class="nx">center</span> <span class="o">/</span><span class="nx">images</span><span class="o">/</span><span class="nx">containertoutneuf</span><span class="o">.</span><span class="nx">png</span> <span class="mi">600</span> <span class="mi">450</span> <span class="s1">&#39;des valeurs sympas et pas sympas&#39;</span> <span class="s1">&#39;des valeurs sympas et pas sympas&#39;</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="o">*</span> <span class="nx">Le</span> <span class="nx">container</span> <span class="nx">avec</span> <span class="nx">l</span><span class="s1">&#39;instruction `map` par définition **Chainable**.</span>
</span><span class='line'>
</span><span class='line'><span class="s1"><img class="center /images/chainagecontainer.png 600 450 &#39;</span><span class=nx>J</span><span class=s1>&#39;ajoute un sas&#39;</span> <span class=s1>&#39;J&#39;</span><span class=nx>ajoute</span> <span class=nx>un</span> <span" src="class="nx">sas</span><span" title="class=&#34;s1&#34;>&#39;" alt="class=&#34;s1&#34;>&#39;"></span>
</span><span class='line'><span class="s1">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;$output = Container::of(5)</span>
</span><span class='line'><span class="s1">    -&gt;map(&amp;ldquo;addOne&amp;rdquo;)</span>
</span><span class='line'><span class="s1">    -&gt;map(&amp;ldquo;addOne&amp;rdquo;)</span>
</span><span class='line'><span class="s1">    -&gt;map(&amp;ldquo;addOne&amp;rdquo;)</span>
</span><span class='line'><span class="s1">    -&gt;map(&amp;ldquo;addOne&amp;rdquo;)</span>
</span><span class='line'><span class="s1">var_dump($output);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;//class Container#3 (1) {</span>
</span><span class='line'><span class="s1">//  protected $value =&gt;</span>
</span><span class='line'><span class="s1">//  int(9)</span>
</span><span class='line'><span class="s1">//}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code&gt;</span>
</span><span class='line'><span class="s1">Bien sur il est parfaitement possible d&#39;</span><span class="nx">utiliser</span> <span class="nx">des</span> <span class="nx">callbacks</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$output</span> <span class="o">=</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">addOne</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$value</span> <span class="o">*</span> <span class="mi">4</span><span class="p">;});</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;//</span><span class="k">class</span> <span class="nc">Container</span><span class="c1">#3 (1) {</span>
</span><span class='line'><span class="c1">//  protected $value =&gt;</span>
</span><span class='line'><span class="c1">//  int(24)</span>
</span><span class='line'><span class="c1">//}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">Donc</span> <span class="nx">j</span><span class="s1">&#39;ai un Sas d&#39;</span><span class="nx">entrée</span> <span class="nx">qui</span> <span class="nx">me</span> <span class="nx">permet</span> <span class="nx">d</span><span class="s1">&#39;interagir avec ma valeur. Je n&#39;</span><span class="nx">ai</span> <span class="nx">toujours</span> <span class="nx">pas</span> <span class="nx">fais</span> <span class="nx">sortir</span> <span class="nx">la</span> <span class="nx">fonction</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">## Une sortie.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">C</span><span class="s1">&#39;est pas très spectaculaire, j&#39;</span><span class="nx">ajoute</span> <span class="nx">une</span> <span class="nx">fonction</span> <span class="nb">extract</span><span class="p">()</span> <span class="nx">qui</span> <span class="nx">n</span><span class="s1">&#39;est qu&#39;</span><span class="nx">un</span> <span class="nx">simple</span> <span class="k">return</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;...</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">Exemple</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>     <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">je</span> <span class="nx">suis</span> <span class="nx">tranquille</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>         <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nb">strtoupper</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'> <span class="c1">//string(18) JE SUIS TRANQUILLE</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Une application : Le décorateur de texte.</h2>

<p>Nous allons utiliser la capacité de chainage de notre container pour faire un pseudo-décorateur.</p>

<p>Soit les fonctions suivantes
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">h1</span><span class="p">(</span><span class="nv">$text</span><span class="p">)</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$output</span> <span class="o">=</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span>  <span class="nx">la</span> <span class="nx">réponse</span> <span class="nx">est</span> <span class="nx">Non</span>   <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nb">trim</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nb">htmlentities</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">h1</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">body</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">html</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">echo</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
Voici le fonctionnement</p>

<ul>
<li>je supprime les espaces en trop avec <a href="http://php.net/manual/fr/function.trim.php">trim</a></li>
<li>Je code en Html <a href="http://php.net/manual/fr/function.htmlentities.php">htmlentities</a></li>
<li>j&#8217;encadre de &ldquo;h1&rdquo; puis &ldquo;body&rdquo; puis &ldquo;html&rdquo;.</li>
</ul>


<p>Le résultat</p>

<pre><code class="html">&lt;html&gt;&lt;body&gt;&lt;h1&gt;la r&amp;eacute;ponse est Non&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;
</code></pre>

<p>En image</p>

<h2>Une autre idée</h2>

<p>Nous pouvons aussi imagine une fonction qui renvoie un Container.</p>

<p>Par exemple reprenons notre fonction <code>addOne</code></p>

<p><img class="center" src="/images/functionretournecontainer.png" width="600" height="450" title="&lsquo;Ma fonction renvoie un container&rsquo; &lsquo;ma fonction renvoie un container&rsquo;" ></p>

<pre><code class="php">function addOne($value) {
    return Container::of($value + 1);
}
</code></pre>

<p>Donc ma fonction me renvoie forcement un container.</p>

<p>Si j&#8217;utilise l&#8217;instruction <code>map</code>, je risque de mettre un container dans le container.</p>

<p><img class="center" src="/images/containerdanscontainer.png" width="600" height="450" title="&lsquo;container dans un container&rsquo; &lsquo;container dans un container&rsquo;" ></p>

<p>D&#8217;où l&#8217;ajout de la méthode <code>bind</code></p>

<pre><code class="php">    public function bind($transformation)
    {
        return call_user_func($transformation, $this-&gt;value);
    }
</code></pre>

<p>On remarque que mon résultat reste chaînable.</p>

<pre><code class="php">$output = Container::of(5)
    -&gt;bind("addOne")
    -&gt;bind("addOne")
    -&gt;bind("addOne")
    -&gt;bind("addOne")
var_dump($output);

//class Container#3 (1) {
//  protected $value =&gt;
//  int(9)
//}
</code></pre>

<h2>Conclusion</h2>

<p>Mon container bien que pour le moment est assez peu utilise mais.</p>

<ul>
<li><p>Il implémente une fonction <code>map</code> qui est chainage. Nous venons d&#8217;implémenter un <strong>functor</strong> ou <strong>foncteur</strong> en français. Cela a un rapport avec les mathématiques. Et il m&#8217;est difficile au moment ou j&#8217;écris ces lignes de vous l&#8217;expliquer. Le Functor s&#8217;occupe d&#8217;appeler la fonction pour nous et de retourner un résultat correct. Il s&#8217;occupe de tout. C&#8217;est une sorte d&#8217;abstraction. On lui confie le calcul et il se débrouille. (Nous le retrouverons dans le post suivant)</p></li>
<li><p>Nous implémentons la méthode <code>of</code> et <code>bind</code> qui est elle aussi chainage (à condition de lui donner des fonctions qui renvoie de Container). Nous venons d&#8217;implémenter une <em>monade</em> même principe que le functor.</p></li>
</ul>


<p>Si vous avez compris le container, vous pouvez le renommer en IdentityMonad.</p>

<p>Dans le prochain post nous allons implémenter un  la Monade/Functor Maybe.</p>

<p>Elle nous permettra de réfactoriser le code suivant</p>

<pre><code class="php">function getAbonnementByUserConnected() {
    $user = getUserConnected();
    // l'utilisateur est anonyme pas d'abonnement
    if (null === $user)  {
        return null;
    }
    // l'utilisateur n'a pas d'abonnement
    $abonnement = getAbonnementByUser($user);
    if (null === $abonnement) {
        return null;
    }

    return $abonnement;
}

function getPromotion() {
    $abo = getAbonnementByUserConnected();
    if (null === getAbonnementByUser()) {
        return new Promotion();
    }
    return $abo-&gt;getPromotion();
}
</code></pre>

<p>Pour devenir
<code>php
$promotion = Maybe::of("getUserConnected")
    -&gt;map("getAbonnementByUser")
    -&gt;map("getPromotion")
    -&gt;orElse(new Promotion());
</code></p>

<p>Je me suis lancé dans une tache bien compliqué mais passionnante. Je m&#8217;excuse d&#8217;avance pour certaines approximations. J&#8217;avais confondu <code>map</code> et <code>bind</code> dans la première version</p>

<p>Je vous remercies de m&#8217;avoir lu..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Listes Chainées Iterator]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/01/listes-chainees-iterator/"/>
    <updated>2015-11-01T19:46:40+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/01/listes-chainees-iterator</id>
    <content type="html"><![CDATA[<p>Troisième partie sur la SPL et les listes chainées.</p>

<ul>
<li>partie 1 <a href="blog/2015/10/03/spl-surcharge-magique">SPL et surcharge</a></li>
<li>partie 2 <a href="blog/2015/10/10/liste-chainees-implementation">Implémentation</a></li>
</ul>


<p>Nous allons implémenter l&#8217;interface <code>ArrayAccess</code>. Donc notre liste chainée va se comporter comme un array.</p>

<p>Je vais rajouter deux méthodes. Attention les <code>Array</code> commencent traditionnellement à 0 d&#8217;où le <code>$this-&gt;count -1</code></p>

<!--more-->


<ul>
<li><p>Supprimer le chainon N
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="k">public</span> <span class="k">function</span> <span class="nf">removeAtPosition</span><span class="p">(</span><span class="nv">$position</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validateInterval</span><span class="p">(</span><span class="nv">$position</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>             <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">L</span><span class="err">&#39;</span><span class="nx">index</span> <span class="nx">doit</span> <span class="nx">être</span> <span class="nx">valide</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>     <span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">removeFirstValue</span><span class="p">();</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span>  <span class="o">==</span>  <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nb">count</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">removeLastValue</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">first</span><span class="p">;</span>
</span><span class='line'> <span class="nv">$last</span> <span class="o">=</span> <span class="nv">$current</span><span class="p">;</span>
</span><span class='line'> <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nv">$position</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="nv">$last</span> <span class="o">=</span> <span class="nv">$current</span><span class="p">;</span>
</span><span class='line'>     <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getNext</span><span class="p">();</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="nv">$last</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setNext</span><span class="p">(</span><span class="nv">$current</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getNext</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'> <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p>Récupérer le chainon N
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="k">public</span> <span class="k">function</span> <span class="nf">getAtPosition</span><span class="p">(</span><span class="nv">$position</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validateInterval</span><span class="p">(</span><span class="nv">$position</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>         <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">L</span><span class="s1">&#39;index doit être numerique&amp;rdquo;);</span>
</span><span class='line'><span class="s1">     }</span>
</span><span class='line'><span class="s1">     if ($position == 0) {</span>
</span><span class='line'><span class="s1">         return $this-&gt;first-&gt;getData();</span>
</span><span class='line'><span class="s1">     }&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code&gt; if ($position == $this-&amp;gt;count - 1) {</span>
</span><span class='line'><span class="s1">     return $this-&amp;gt;last-&amp;gt;getData();</span>
</span><span class='line'><span class="s1"> }</span>
</span><span class='line'>
</span><span class='line'><span class="s1"> $current = $this-&amp;gt;first;</span>
</span><span class='line'><span class="s1"> for ($i = 0; $i &amp;lt; $position; $i++) {</span>
</span><span class='line'><span class="s1">     $current = $current-&amp;gt;getNext();</span>
</span><span class='line'><span class="s1"> }</span>
</span><span class='line'>
</span><span class='line'><span class="s1"> return $current-&amp;gt;getData();</span>
</span><span class='line'><span class="s1">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt; }&lt;/p&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="s1">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code&gt;</span>
</span><span class='line'><span class="s1">Pour avoir le 9999 chainon,  il faut parcourir les 9998 chainons précédents.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Avec les deux méthodes précédentes. Il suffit d&#39;</span><span class="nx">implémenter</span> <span class="nx">les</span> <span class="nx">méthodes</span> <span class="nx">suivantes</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">public</span> <span class="k">function</span> <span class="nf">offsetSet</span><span class="p">(</span><span class="nv">$offset</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$offset</span> <span class="o">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">insertAtEnd</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">validateInterval</span><span class="p">(</span><span class="nv">$offset</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s2">&quot;L&#39;index doit être valide&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">insertAtPosition</span><span class="p">(</span><span class="nv">$offset</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">offsetExists</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">validInterval</span><span class="p">(</span><span class="nv">$offset</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">offsetUnset</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">removeAtPosition</span><span class="p">(</span><span class="nv">$offset</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">offsetGet</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getAtPosition</span><span class="p">(</span><span class="nv">$offset</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">Pour</span> <span class="nx">vérifier</span> <span class="nx">que</span> <span class="nx">les</span> <span class="nx">valeurs</span> <span class="nx">en</span> <span class="nx">entrée</span> <span class="nx">sont</span> <span class="nx">correctes</span> <span class="nx">j</span><span class="s1">&#39;utilise la fonction suivante </span>
</span><span class='line'><span class="s1">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code&gt;private function validateInterval($offset) {</span>
</span><span class='line'><span class="s1">    return (false !== filter_var(</span>
</span><span class='line'><span class="s1">        $offset,</span>
</span><span class='line'><span class="s1">        FILTER_VALIDATE_INT,</span>
</span><span class='line'><span class="s1">        array(</span>
</span><span class='line'><span class="s1">            &#39;</span><span class="nx">options</span><span class="s1">&#39; =&amp;gt; array(</span>
</span><span class='line'><span class="s1">                &#39;</span><span class="nx">min_range</span><span class="s1">&#39; =&amp;gt; 0,</span>
</span><span class='line'><span class="s1">                &#39;</span><span class="nx">max_range</span><span class="s1">&#39; =&amp;gt; $this-&amp;gt;count-1</span>
</span><span class='line'><span class="s1">            )</span>
</span><span class='line'><span class="s1">        )</span>
</span><span class='line'><span class="s1">    ));</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'><span class="s1">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code&gt;</span>
</span><span class='line'><span class="s1">Bon cela semble un peu abstrait, voici quelques exemples d&#39;</span><span class="nx">utilisations</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="nv">$list</span><span class="p">[]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">first</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="nv">$list</span><span class="p">[]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">second</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="nv">$list</span><span class="p">[]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">third</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$list</span><span class="p">[</span><span class="mi">1</span><span class="p">]));</span><span class="c1">// =&gt; true</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$list</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="c1">// =&gt; &amp;ldquo;second&amp;rdquo;</span>
</span><span class='line'><span class="nb">unset</span><span class="p">(</span><span class="nv">$list</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$list</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="c1">// =&gt; third</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="sb">``</span>
</span><span class='line'><span class="nx">Nous</span> <span class="nx">avons</span> <span class="nx">une</span> <span class="nx">liste</span> <span class="nx">qui</span> <span class="nx">se</span> <span class="nx">comporte</span> <span class="nx">comme</span> <span class="nx">un</span> <span class="k">array</span><span class="o">.</span> <span class="nx">c</span><span class="s1">&#39;est pratique, mais on ne peux pas faire de&lt;/code&gt;foreach` dessus.. Enfin pas encore.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;h2&gt;Ajout de l&#39;</span><span class="nx">itérator</span><span class="o">&lt;/</span><span class="nx">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Pour</span> <span class="nx">faire</span> <span class="nx">un</span> <span class="nx">itérator</span> <span class="nx">il</span> <span class="nx">faut</span> <span class="nx">implémenter</span> <span class="nx">l</span><span class="s1">&#39;interface suivante</span>
</span><span class='line'><span class="s1">&lt;code&gt;php</span>
</span><span class='line'><span class="s1"> Iterator extends Traversable {</span>
</span><span class='line'><span class="s1">/* Méthodes */</span>
</span><span class='line'><span class="s1">abstract public mixed current ( void )</span>
</span><span class='line'><span class="s1">abstract public scalar key ( void )</span>
</span><span class='line'><span class="s1">abstract public void next ( void )</span>
</span><span class='line'><span class="s1">abstract public void rewind ( void )</span>
</span><span class='line'><span class="s1">abstract public boolean valid ( void )</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'><span class="s1">&lt;/code&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;Dans le cas de notre liste chainée cela n&#39;</span><span class="nx">est</span> <span class="nx">pas</span> <span class="nx">très</span> <span class="nx">compliqué</span><span class="o">.&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;php&quot;</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">LinkedList</span> <span class="k">implements</span> <span class="nx">Countable</span><span class="p">,</span> <span class="nx">ArrayAccess</span><span class="p">,</span> <span class="o">*</span><span class="nx">Iterator</span><span class="o">*</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">.....</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$current</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$position</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="o">....</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">current</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nb">current</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getData</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">key</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">position</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">next</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">position</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nb">current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nb">current</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getNext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">rewind</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">position</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nb">current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">first</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">valid</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nb">current</span> <span class="o">!==</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Un</span> <span class="nx">petit</span> <span class="nx">code</span> <span class="nx">d</span><span class="s1">&#39;exemple&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;$list = new LinkedList();</span>
</span><span class='line'><span class="s1">//</span>
</span><span class='line'><span class="s1">$list[] = &quot;first&quot;;</span>
</span><span class='line'><span class="s1">$list[] = &quot;second&quot;;</span>
</span><span class='line'><span class="s1">$list[] = &quot;third&quot;;</span>
</span><span class='line'><span class="s1">foreach($list as $key =&amp;gt; $value) {</span>
</span><span class='line'><span class="s1">    var_dump(&quot;$key =&amp;gt; $value&quot;);</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'>
</span><span class='line'><span class="s1">// string(10) &quot;0 =&amp;gt; first&quot;</span>
</span><span class='line'><span class="s1">// string(11) &quot;1 =&amp;gt; second&quot;</span>
</span><span class='line'><span class="s1">// string(10) &quot;2 =&amp;gt; third&quot;</span>
</span><span class='line'><span class="s1">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;Je peux a tout moment le retransformer en &lt;code&gt;array&lt;/code&gt; grâce à la méthode &lt;code&gt;iterator_to_array($list)&lt;/code&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;</span>
</span><span class='line'><span class="s1">array(3) {</span>
</span><span class='line'><span class="s1">  [0] =&amp;gt;</span>
</span><span class='line'><span class="s1">  string(5) &quot;first&quot;</span>
</span><span class='line'><span class="s1">  [1] =&amp;gt;</span>
</span><span class='line'><span class="s1">  string(6) &quot;second&quot;</span>
</span><span class='line'><span class="s1">  [2] =&amp;gt;</span>
</span><span class='line'><span class="s1">  string(5) &quot;third&quot;</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'><span class="s1">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;Pour faire dans l&#39;</span><span class="nx">autre</span> <span class="nx">sens</span> <span class="nx">nous</span> <span class="nx">pouvons</span> <span class="nx">implémenter</span> <span class="nx">le</span> <span class="nx">constructor</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">php</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$input</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="o">||</span> <span class="nv">$input</span> <span class="nx">instanceof</span> <span class="nx">Traversable</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s2">&quot;Un array ou Un iterator..&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">foreach</span><span class="p">(</span><span class="nv">$input</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">insertAtEnd</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Mon</span> <span class="nx">constructor</span> <span class="nx">prend</span> <span class="nx">un</span> <span class="k">array</span> <span class="nx">ou</span> <span class="nx">un</span> <span class="nx">Objet</span> <span class="nx">qui</span> <span class="nx">implémente</span> <span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">Traversable</span><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;</span> <span class="p">(</span><span class="nx">en</span> <span class="nx">gros</span> <span class="nx">un</span> <span class="nx">Itérateur</span><span class="p">);</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Quelques</span> <span class="nx">exemples</span>
</span></code></pre></td></tr></table></div></figure> php
$list = new LinkedList(array(&ldquo;one&rdquo;, &ldquo;two&rdquo;, &ldquo;three&rdquo;));
foreach($list as $key => $value) {
    var_dump($value);
}
//string(3) &ldquo;one&rdquo;
//string(3) &ldquo;two&rdquo;
//string(5) &ldquo;three&rdquo;</p>

<p>$spl = New SplQueue();
$spl[] = &ldquo;travail1&rdquo;;
$spl[] = &ldquo;travail2&rdquo;;
$spl[] = &ldquo;travail3&rdquo;;
$list = new LinkedList($spl));
foreach($list as $key => $value) {
    var_dump($value);
}</p>

<p>// string(8) &ldquo;travail1&rdquo;
// string(8) &ldquo;travail2&rdquo;
// string(8) &ldquo;travail3&rdquo;</p>

<p>$linked = New LinkedList();
$linked[] = &ldquo;valeur 1&rdquo;;
$linked[] = &ldquo;valeur 2&rdquo;;
$linked[] = &ldquo;valeur 3&rdquo;;</p>

<p>$list = new LinkedList($linked);
foreach($list as $key => $value) {
    var_dump($value);
}
// string(9) &ldquo;valeur 1&rdquo;
// string(8) &ldquo;valeur 2&rdquo;
// string(8) &ldquo;valeur 3&rdquo;</p>

<p>&#8220;`</p>

<h2>En conclusion.</h2>

<p>Nous avons implémenter Les listes chainées avec toutes les méthodes. Mon exemple est un peu théorique. Mais je vous conseille de re-regarder les doctrines collections.</p>

<p>Merci de m&#8217;avoir lu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les fractales en php Mandelbrot]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/18/les-fractales-en-php-mandelbrot/"/>
    <updated>2015-10-18T20:02:28+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/18/les-fractales-en-php-mandelbrot</id>
    <content type="html"><![CDATA[<pre><code class="">______________________________________
______________________________________
___________________________*__________
_________________________****_________
_________________________****_________
_________________________****_________
______________________________________
___________________*__**********______
___________________**************_**__
___________________*****************__
__________________*****************___
_________________*******************__
________________*********************_
________________*********************_
______*__*_____**********************_
______*******__**********************_
_____*********_**********************_
_____*********_**********************_
___*_*********_*********************__
***********************************___
___*_*********_*********************__
_____*********_**********************_
_____*********_**********************_
______*******__**********************_
______*__*_____**********************_
________________*********************_
________________*********************_
_________________*******************__
__________________*****************___
___________________*****************__
___________________**************_**__
___________________*__**********______
______________________________________
_________________________****_________
_________________________****_________
_________________________****_________
___________________________*__________
_____________________________________
</code></pre>

<!--more-->


<p>Voici le code :</p>

<pre><code class="php">class Mandelbrot
{


    function Mandelbrot()
    {
        for ($x = -19; $x &lt; 19; $x++) {
            echo("\n");
            for ($y = -19; $y &lt; 19; $y++) {
                if (($out = $this-&gt;iterate($x/20.0,$y/20.0)) == 0)
                    echo("*");
                else
                    echo("_");

            }
        }
    }

    function iterate($x,$y)
    {
        $cr = $y-0.5;
        $ci = $x;
        $zi = 0.0;
        $zr = 0.0;
        $i = 0;
        while (true) {
            $i++;
            $zr2 = $zr * $zr;
            $zi2 = $zi * $zi;
            // Calul de la nouvelle valeur de z
            list($zr, $zi) = array(
                $zr2 - $zi2 + $cr,
                2 * ($zr * $zi) + $ci
            );
            // Si le module est supérieur à 2
            if ($zi2 + $zr2 &gt; BAILOUT)
                return $i;
            // si cela fait la millieme boucle.
            if ($i &gt; MAX_ITERATIONS)
                return 0;
        }

    }


}

$m = new Mandelbrot();
?&gt;
</code></pre>

<p>Comment cela marche.</p>

<p>Rappel sur les complexes</p>

<ul>
<li>un nombre complexe est composé d&#8217;une partie réelle et une partie imaginaire : <code>a + i b</code> ici <strong>a</strong> est la partie réelle et <strong>b</strong> est la partie imaginaire</li>
<li>le module d&#8217;un nombre complexe représente la distance entre les coordonnées du point et le centre. <code>|module|^2 = a^2 + b ^2</code></li>
<li>la multiplication d&#8217;un nombre complexe donne <code>(a + ib)^2 = (a^2-b^2)+2ab * i</code></li>
</ul>


<h2>La version simple</h2>

<p>il existe une video en anglais qui explique cela très bien.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/NGMRB4O922I" frameborder="0" allowfullscreen></iframe>


<ul>
<li>Je crée un tableau (x,y) de 20 * 20 qui va de [1, -1] en largeur et en hauteur</li>
<li>j&#8217;effectue la boucle suivante.</li>
<li>je calcule la valeur <code>z1</code> qui est égale à <code>z0^2 + c</code> avec c qui est <code>x+i*y</code>.</li>
<li>puis je calcule la valeur de <code>z2 = z1^2 + c</code> puis <code>z3</code>..</li>
<li>je quitte la boucle pour deux raisons.

<ul>
<li>si le module est supérieur à 2, le module devient de plus en plus grand et dépasse 2.</li>
<li>au bout de 1000 boucles la valeurs n&#8217;a toujours pas dépassé 2. Je renvoie 0</li>
</ul>
</li>
</ul>


<p>C&#8217;est le code de la fonction <code>iterate</code>. le php ne connaît pas les complexes(c&#8217;est natif en python..) donc le chiffre z est divisé en 2 <code>zr</code> la partie réelle et <code>zi</code> la partie imaginaire.</p>

<pre><code>    function iterate($x,$y)
    {
        $cr = $y-0.5;
        $ci = $x;
        $zi = 0.0;
        $zr = 0.0;
        $i = 0;
        while (true) {
            $i++;
            $zr2 = $zr * $zr;
            $zi2 = $zi * $zi;
            // Calul de la nouvelle valeur de z
            list($zr, $zi) = array(
                $zr2 - $zi2 + $cr,
                2 * ($zr * $zi) + $ci
            );
            // Si le module est supérieur à 2
            if ($zi2 + $zr2 &gt; BAILOUT)
                return $i;
            // si cela fait la millieme boucle.
            if ($i &gt; MAX_ITERATIONS)
                return 0;
        }

    }
</code></pre>

<p>Si on compte le nombre d&#8217;étapes pour dépasser 2 on obtient le schéma suivant.</p>

<pre><code class="php">    function Mandelbrot()
    {
        for ($x = -19; $x &lt; 19; $x++) {
            echo("\n");
            for ($y = -19; $y &lt; 19; $y++) {
                if (($out = $this-&gt;iterate($x/20.0,$y/20.0)) == 0)
                    echo(" ");
                else
                    echo(chr(41+$out%16));

            }
        }
    }
</code></pre>

<p>Voici le résultat</p>

<pre><code class="">--------------.......///1241410/....--
-------------.......///023.2520//....-
------------.......///053)1 ,*1///....
-----------.......//00128    ,20////..
----------......//0001130    ,2100///.
--------......//012222348    7432000,/
-------.....///017+644.*1865+1/73222)1
------....////00164 *4          .68)*)
-----..//////00024-              6  23
---..///////0002868                 .1
-../000///00011/23                 ,61
.//1611111111125.                   +3
//01)3326422224,                     8
//014*.67-753352                     )
//113) 2) 73757                      8
/0125,       )*                      )
1+34-         0                      6
26780         +                      2
48/ 6         )                     41
                                   621
48/ 6         )                     41
26780         +                      2
1+34-         0                      6
/0125,       )*                      )
//113) 2) 73757                      8
//014*.67-753352                     )
//01)3326422224,                     8
.//1611111111125.                   +3
-../000///00011/23                 ,61
---..///////0002868                 .1
-----..//////00024-              6  23
------....////00164 *4          .68)*)
-------.....///017+644.*1865+1/73222)1
--------......//012222348    7432000,/
----------......//0001130    ,2100///.
-----------.......//00128    ,20////..
------------.......///053)1 ,*1///....
-------------.......///023.2520//....-
</code></pre>

<p>C&#8217;est ce qui est assez amusant dans les fractales, les formules sont très simples. Mais le résultat est très impressionnant.</p>

<h2>Des liens</h2>

<ul>
<li>article <a href="https://en.wikipedia.org/wiki/Mandelbrot_set">wikipédia</a></li>
<li>les videos hypnotiques de <a href="https://en.wikipedia.org/wiki/Electric_Sheep">electric sheep</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
