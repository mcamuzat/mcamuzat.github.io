<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Php | Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-03-30T22:38:36+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FizzBuzz Sans Boucle If]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/03/22/fizzbuzz-sans-boucle-if/"/>
    <updated>2015-03-22T23:19:46+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/03/22/fizzbuzz-sans-boucle-if</id>
    <content type="html"><![CDATA[<p>FizzBuzz sans boucle if.</p>

<p>Bon, j&#8217;ai passé deux-trois entretiens ou on m&#8217;a demandé d&#8217;implementer &ldquo;fizzbuz&rdquo;</p>

<p>les règles sont simples.</p>

<ul>
<li>Ecrire un programme qui écrit les nombres de 1 à 100.</li>
<li>Si le chiffre est divisible par 3 afficher seulement &ldquo;fizz&rdquo;</li>
<li>Si le chiffre est divisible par 5 afficher seulement &ldquo;buzz&rdquo;</li>
<li>Si divisible par 3 et 5 afficher &ldquo;fizzbuzz&rdquo;</li>
<li>sinon afficher le chiffre tout seul</li>
</ul>


<p>Il y a plein de solutions possibles</p>

<h2>la plus littérale</h2>

<pre><code class="php">for ($i = 1; $i &lt;= 100; $i++) {
    if ($i % 15 == 0) {
        echo 'fizzbuzz'. "\n";
    } elseif ($i % 3 == 0) {
        echo 'buzz'. "\n";
    } elseif ($i % 5 == 0) {
        echo 'fizz'. "\n";
    } else {
    echo $i ."\n";
    }
}
</code></pre>

<h2>la version de wikipedia</h2>

<pre><code class="php">for ($i = 1; $i &lt;= 100; $i++) {
    $output = '';
    if ( $i%3 == 0) {
        $output .= 'fizz';
    }
    if ( $i%5 == 0) {
        $output .= 'buzz';
    }

    if ($output == '') {
        $output .= $i;
    }
    echo $output. "\n";
}
</code></pre>

<h2>Ma version que j&#8217;avais programmé</h2>

<p>Le <code>continue</code> n&#8217;est pas souvent utilisé. Mais je trouve qu&#8217;il remplit son rôle ici.</p>

<pre><code class="php">for ($i = 1; $i &lt;= 100; $i++) {
    if ($i % 15 == 0) {
        echo 'fizzbuzz'. "\n";
        continue;
    }
    if ($i % 3 == 0) {
        echo 'buzz'. "\n";
        continue;
    }
    if ($i % 5 == 0) {
        echo 'fizz'. "\n";
        continue;
    }
    echo $i ."\n";

}
</code></pre>

<h2>Sans boucle if</h2>

<p>Il existe une version qui n&#8217;utilise aucune boucle if.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$resp</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">fizzbuzz</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">fizz</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">buzz</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">fizz</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">fizz</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">fizz</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="k">false</span>
</span><span class='line'><span class="p">);</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">100</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">$output</span> <span class="o">=</span> <span class="nv">$resp</span><span class="p">[</span><span class="nv">$i</span><span class="o">%</span><span class="mi">15</span><span class="p">])</span> <span class="o">||</span> <span class="p">(</span><span class="nv">$output</span> <span class="o">=</span> <span class="nv">$i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$output</span><span class="o">.</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">\n</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">En</span> <span class="nx">php</span> <span class="nx">on</span> <span class="nx">ne</span> <span class="nx">peux</span> <span class="nx">pas</span> <span class="nx">faire</span> <span class="nx">la</span> <span class="nx">commande</span> <span class="nx">suivante</span> <span class="nx">qui</span> <span class="nx">correcte</span> <span class="nx">en</span> <span class="nx">javascript</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">value</span> <span class="o">||</span> <span class="nx">defautvalue</span> <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>$output = $resp[i%15] || $i// =&gt; $output = true
</code></pre>

<p>C&#8217;est pour cela que l&#8217;on utilise cette ligne un peu bancale.
<code>
($output = $resp[$i%15]) || ($output = $i);
</code>
Il n&#8217;y a pas de boucle if. Si un jour on vous demande d&#8217;implémenter FizzBuzzben essayer cette version.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MapReduce Du Pauvre]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/03/16/mapreduce-du-pauvre/"/>
    <updated>2015-03-16T22:41:41+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/03/16/mapreduce-du-pauvre</id>
    <content type="html"><![CDATA[<h1>MapReduce du pauvre.</h1>

<h2>une commande linux</h2>

<pre><code class="bash">find -name '*.php' | xargs -p 4 grep "ma chaine de caractère" | wc -l
</code></pre>

<p>Cela ne se voit pas mais je viens de faire un map/reduce</p>

<ul>
<li>je prend tout les fichiers php</li>
<li>je lance un grep avec le résultat que je passe à travers le pipe.</li>
<li>puis je compte le nombre de résultats.</li>
</ul>


<pre><code>[filter] -&gt; [map] -&gt; [reduce]
</code></pre>

<p>ici l&#8217;astuce tient dans une astuces <code>xargs -p 4</code> qui ordonne à xargs d&#8217;utiliser 4 processeurs en parrallèle ! Donc qui me permet d&#8217;aller quatre fois plus vite. On comprend l&#8217;interet du map/reduce. Je peux <strong>dispatcher</strong> le travail sur plusieurs instances(ici processeurs). On retrouve ce fonctionnement dans beaucoup de logiciels actuels. L&#8217;avantage ici est que j&#8217;utilise linux et que je n&#8217;ai installé aucun programme et en multiprocesseur je fais pleinenement confiance au kernel de mon linux. Il existe aussi un programme <code>parallel</code> mais je ne m&#8217;en suis jamais servi.</p>

<h2>En php ?</h2>

<p>Il existe bien entendu les fonctions <code>array_map</code>, <code>array_filter</code>, <code>array_reduce</code> mais il ne sont pas spécialement plus rapide qu&#8217;une boucle foreach. Il existe un map pour les Collection de doctrine.</p>

<p>je vais montrer que l&#8217;on peux écrires toute les opérations possibles avec &lsquo;array_reduce&rsquo;.
&#8220;`
function mysum($array) {
    return array_reduce($array, function($acc, $item) {
        return $acc += $item;
    });
}
function mymult($array) {
    return array_reduce($array, function($acc, $item) {
        return $acc *= $item;
    },1);
}</p>

<p>function mymax($array) {
    return array_reduce($array, function($acc, $item) {
        return max($acc, $item);
    });
}// le min est un peu moins simple</p>

<p>function map($function, $array) {
    return array_reduce(
        $array,
        function ($acc, $input) use ($function) {
            $acc[] = $function($input);
            return $acc;
        });
}</p>

<p>function filter($function, $array) {
    return array_reduce(
        $array,
        function ($acc, $input) use ($function) {
            if ($function($input)) {
                $acc[] = $input;
            }
            return $acc;
        });
}</p>

<p>function mycount($array) {
    return array_reduce(
        $array,
        function ($acc, $input)  {
        return ++$acc;
},0);
}</p>

<p>$a = [1,2,3,4,5];
var_dump(mysum($a)); // 15
var_dump(mymult($a)); // 120
var_dump(mymax($a)); // 5
var_dump(mycount($a)); // 5
var_dump(map(function($input) { return 2 * $input;}, $a)); // [2,4,6,8,10]
var_dump(filter(function($input) { return ($input > 4); }, $a)); // [6]</p>

<p>&#8220;`
Map et Reduce sont des fonctions un peu particulières, elle prenent comme argument des fonctions. On parle de fonctions d&#8217;ordre supérieure, parfois de functor (mais çà c&#8217;est une autre histoire ..)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php en Mode Intéractif]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/03/08/php-en-mode-interactif/"/>
    <updated>2015-03-08T19:24:57+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/03/08/php-en-mode-interactif</id>
    <content type="html"><![CDATA[<p>Je me baladai sous Github</p>

<p>et je suis tombé sur ce dépot</p>

<p><a href="https://github.com/borisrepl/boris">https://github.com/borisrepl/boris</a></p>

<p>(en fait c&#8217;est un des dépots les plus actifs de ce mois pour Php)</p>

<p>c&#8217;est vraiment cool</p>

<p>Bien entendu il existe déja un mode interactif sous Php</p>

<pre><code class="sh">php -a
</code></pre>

<p>On peux le refaire en encore moins de ligne.</p>

<p>Explication : La documentation parle de REPL.
c&#8217;est l&#8217;abbreviation de <strong>R</strong>ead <strong>E</strong>val <strong>P</strong>rint <strong>L</strong>oop</p>

<p>et voici comment on peut l&#8217;implémenter (difficile de faire plus simple)
<code>
while (true) {
    echo eval(fgets(STDIN));
}
</code>
 avec les commentaires
<code>
while (true)/*Loop*/ {
    echo /*Print*/ eval(/*Read*/ fgets(STDIN));
}
</code>
Read Eval Print Loop. le nom donne le programme.</p>

<p>C&#8217;est une technique qui marche avec un peu tout les languages.
voir <a href="http://repl.it">http://repl.it</a></p>
]]></content>
  </entry>
  
</feed>
