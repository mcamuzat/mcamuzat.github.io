<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Php | Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-07-25T18:29:34+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Créer Son Dépôt Sous Packagist]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/24/creer-son-depot-sous-packagist/"/>
    <updated>2015-07-24T17:50:58+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/24/creer-son-depot-sous-packagist</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>J&#8217;avais montré dans le précédent <a href="/blog/2015/07/19/histogramme-et-ligne-de-commande/">Post</a>, une fonction qui permet de créer des histogrammes.</p>

<p>J&#8217;ai décidé de la publier sous <a href="https://packagist.org/">Packagist</a>. Je n&#8217;avais jamais fais. Je vous propose de suivre mon cheminement</p>

<ul>
<li>Je mets au propre le fichier</li>
<li>J&#8217;ajoute le <code>composer.json</code></li>
<li>j&#8217;ajoute les tests unitaires</li>
<li>Je crée le dépôt sur Github</li>
<li>J&#8217;enregistre le dépôt sur Packagist</li>
</ul>


<h2>Industrialisation</h2>

<p>Nous sommes partis du code suivant.</p>

<pre><code class="php">function spark($array) {
    $bars = array('▁','▂','▃','▄','▅','▆','▇','█');
    $divide = max($array);
    if ($divide == 0) {
        $divide = 1;
    }
    $countBars = count($bars)-1;
    $out = '';
    foreach ($array as $tick)
        $out .= $bars[round(($tick / $divide) * $countBars)];
    echo $out;
}

// si je n'ai aucun argument ..
if (count($argv) == 0) {
    $str = '';
    // recupère le flux d'entrée
    while (!feof(STDIN)) {
        $str .= fgets(STDIN);
    }
    // explode laisse la derniere ligne vide.
    // d'ou le array_filter
    spark(array_filter(explode("\n", $str),'strlen'));
    return 0;
}

$iDontCare =array_shift($argv);
spark($argv);
return 0;
</code></pre>

<p>Je vais découper cela en plusieurs fichiers et répertoires.</p>

<pre><code class="">.
├── bin
│   └── spark
├── composer.json
├── LICENSE
├── phpunit.xml.dist
├── src
│   └── Spark
│       └── Spark.php
└── tests
    ├── bootstrap.php
    └── Spark
        └── SparkTest.php
</code></pre>

<p>Voici <code>Spark.php</code></p>

<pre><code class="php">&lt;?php
namespace Spark;

class Spark
{

    private static $bars = array('▁','▂','▃','▄','▅','▆','▇','█');
    /**
     *
     */
    public static function spark($array)
    {
        $divide = max($array);

        if ($divide == 0) {
            $divide = 1;
        }
        $countTick = count(self::$bars)-1;
        $out = '';
        foreach ($array as $tick) {
            $out .= self::$bars[round(($tick / $divide) * $countTick)];
        }
        return $out;
    }
}
</code></pre>

<p>Et le fichier <code>spark</code> dans le répertoire <code>bin</code></p>

<pre><code class="php">#!/usr/bin/env php
&lt;?php

require_once __DIR__ . '/../vendor/autoload.php'; // Autoload files using Composer autoload

use Spark\Spark;

$iDontCare =array_shift($argv);
if (count($argv) == 0) {
    $str = '';
    while (!feof(STDIN)) {
        $str .= fgets(STDIN);
    }
    echo Spark::spark(array_filter(explode("\n", $str),'strlen'));
    return 0;
}
echo Spark::spark($argv);
return 0;
</code></pre>

<h2>Le Composer.json</h2>

<p><strong>Pour publier sur Packagist il faut un <code>composer.json</code></strong></p>

<p>C&#8217;est plutôt simple en fait. Il suffit de lancer la commande <code>composer init</code>. Tout se fait de manière interactive.</p>

<p>à la fin j&#8217;obtiens.</p>

<pre><code class="javascript">{
    "name": "mcamuzat/spark",
    "description": "histogram in command line. Clone of holman/spark",
    "require-dev": {
        "phpunit/phpunit": "~4.0",
        "squizlabs/php_codesniffer": "2.*"
    },
    "license": "MIT",
    "authors": [
        {
            "name": "Marc Camuzat",
            "email": "marc.camuzat@gmail.com"
        }
    ],
    "minimum-stability": "dev",
    "require": {},
    "autoload": {
        "psr-0": {
            "Spark": "src/"
        }
    },
    "config": {
        "bin-dir": "bin"
    },
    "bin": ["bin/spark"]
}
</code></pre>

<p>Je crée le Namespace et j&#8217;ajoute que j&#8217;ai un fichier à marquer comme exécutable de le répertoire <code>bin/spark</code>. Je n&#8217;ai aucune dépendance.</p>

<h2>Ajoutons les tests.</h2>

<p>Il faut un minimum de tests.</p>

<p>Pour avoir des tests il faut 3 fichiers</p>

<ul>
<li>Un <code>phpunit.xml.dist</code></li>
<li>Un <code>bootstrap.php</code> pour qui se borne à appeler l&#8217;autoload de composer</li>
<li>Enfin un fichier de test</li>
</ul>


<p>Et installer PHPUnit (qui est déjà dans mon <code>composer.json</code>)</p>

<p>Le <code>phpunit.xml.dist</code></p>

<pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;phpunit backupGlobals="false"
         backupStaticAttributes="false"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="false"
         syntaxCheck="false"
         bootstrap="tests/bootstrap.php"
&gt;
    &lt;testsuites&gt;
        &lt;testsuite name="Spark Test Suite"&gt;
            &lt;directory&gt;./tests/&lt;/directory&gt;
        &lt;/testsuite&gt;
    &lt;/testsuites&gt;

    &lt;filter&gt;
        &lt;whitelist&gt;
            &lt;directory&gt;./src/&lt;/directory&gt;
        &lt;/whitelist&gt;
    &lt;/filter&gt;
&lt;/phpunit&gt;
</code></pre>

<p>On appelle le <code>bootstrap.php</code> qui fait venir l&#8217;autoloader</p>

<pre><code class="php">&lt;?php
$loader = @include __DIR__.'/../vendor/autoload.php';
if (!$loader) {
    $loader = require __DIR__.'/../../../../vendor/autoload.php';
}
</code></pre>

<p>Et enfin les tests</p>

<pre><code class="php">&lt;?php
namespace Spark;
use Spark\Spark;
class SparkTest extends \PHPUnit_Framework_TestCase
{
    public function testItCreateAStringFromData()
    {
        $out = Spark::spark(array(1,5,22,13,5));
        $this-&gt;assertEquals('▁▃█▅▃', $out);
    }
    public function testItDontCareifInputIsString()
    {
        $out = Spark::spark(array("2","4","8"));
        $this-&gt;assertEquals('▃▅█', $out);
    }
    public function testItWorkWithFloatNumber()
    {
        $out = Spark::spark(array("0.2","0.8","0.4"));
        $this-&gt;assertEquals('▃█▅', $out);
    }
    public function testItNotDivideBy0()
    {
        $out = Spark::spark(array(0,0,0));
        $this-&gt;assertEquals('▁▁▁', $out);
    }
}
</code></pre>

<p>Lançons les tests</p>

<pre><code class="sh">$ bin/phpunit 
PHPUnit 4.8-ge1cc585 by Sebastian Bergmann and contributors.

....

Time: 722 ms, Memory: 4.50Mb

OK (4 tests, 4 assertions)
</code></pre>

<h2>Publication</h2>

<p>Je crée le dépôt sur <a href="https://github.com/mcamuzat/spark">GitHub</a> que je clone</p>

<pre><code>git clone mcamuzat/spark.git
git add .
git commit -m"initialize repo"
git push -u origin master
</code></pre>

<p>Je me suis inscris sur <a href="https://packagist.org/">Packagist</a>.</p>

<p>Il suffit de cliquer sur <strong>Submit</strong></p>

<p><img class="center" src="/images/packagist_ajout.png" width="600" height="258" title="&lsquo;Ajouter un dépôt sur Packagist&rsquo; &lsquo;Ajouter un dépôt sur packagist&rsquo;" ></p>

<p>Et de mettre l&#8217;url de Github. Et c&#8217;est tout !</p>

<h2>Des liens</h2>

<ul>
<li>Le projet sur <a href="https://github.com/mcamuzat/spark">Github</a></li>
<li>Le projet sur <a href="https://packagist.org/packages/mcamuzat/spark">Packagist</a></li>
</ul>


<h2>En conclusion</h2>

<p>Il manque encore le <code>README</code> sur Github, car pour l&#8217;instant l&#8217;intérêt du programme est encore un peu mystérieux pour une personne extérieure.</p>

<p>J&#8217;espère que si vous voulez créer votre propre librairie sur Packagist, ce tutoriel vous servira.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Histogramme Et Ligne De Commande]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/19/histogramme-et-ligne-de-commande/"/>
    <updated>2015-07-19T18:16:57+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/19/histogramme-et-ligne-de-commande</id>
    <content type="html"><![CDATA[<h2>Un petit utilitaire.</h2>

<p>J&#8217;ai reprogrammé en php un clone de <a href="https://github.com/holman/spark">spark</a>.</p>

<p>Un petit exemple est plus parlant</p>

<pre><code>spark([1,2,3,4,4,5,6,1,2]); // ▂▃▅▆▆▇█▂▃
spark([1,2,3,4,5,1,2,3,4,5]); //▂▄▅▇█▂▄▅▇█
</code></pre>

<p>Voici l&#8217;implémentation</p>

<pre><code class="php">function spark($array) {
    $bars = array('▁','▂','▃','▄','▅','▆','▇','█');
    $divide = max($array);
    if ($divide == 0) {
        $divide = 1;
    }
    $countBars = count($bars)-1;
    $out = '';
    foreach ($array as $tick)
        $out .= $bars[round(($tick / $divide) * $countBars)];
    echo $out;
}
</code></pre>

<h2>L&#8217;appeler en ligne de commande.</h2>

<p>La documentation de spark donne cette ligne de commande
<code>
spark 0 30 55 80 33 150
</code></p>

<p>Est ce qu&#8217;on peux faire la même chose ? Il suffit de rajouter les deux lignes suivantes.
<code>php
$iDontCare =array_shift($argv);
spark($argv);
return 0;
</code></p>

<p>On utilise la variable <code>$argv</code> qui est le tableau de paramètres passer dans la ligne de commande. L&#8217;argument <code>$argv[0]</code>est le noms du programme, c&#8217;est pour cela que l&#8217;on fait un <code>array_shift</code> cela supprime la première valeur su tableau.</p>

<pre><code>php spark.php 0 30 55 80 33 150
▁▂▄▅▃█
</code></pre>

<h2>L&#8217;appeler via les pipes</h2>

<p>Un peu plus compliqué via les pipes du Shell.</p>

<p>Les implémentations des Pipes se présentent toujours un peu de la même manière. On utilise <code>STDIN</code>  qui représente l&#8217;entrée standard.</p>

<p>Un exemple qui traduit les caractères accentués. <code>é-&gt;&amp;eacute</code></p>

<pre><code class="php">#!/usr/bin/env php
&lt;?php
while (!feof(STDIN)) {
     echo htmlentities(fgets(STDIN));
}
</code></pre>

<p>La ligne <code>!/usr/bin/env php</code> s&#8217;appelle le <a href="https://fr.wikipedia.org/wiki/Shebang">shebang</a></p>

<p>Puis rendre exécutable le fichier
<code>
chmod +x htmlentities.php
</code>
Des exemples
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo &lsquo;énergie&rsquo; | ./htmlentities.php&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&eacute;nergie&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ cat file.txt | ./htmlentities</span></code></pre></td></tr></table></div></figure></p>

<p>Ce qui est cool c&#8217;est que l&#8217;on peux chainer les opérateur.</p>

<p>Un programme qui passe la première lettre en majuscule.</p>

<pre><code class="php">#!/usr/bin/env php
&lt;?php
while (!feof(STDIN)) {
     echo ucfirst(trim(fgets(STDIN)));
}
</code></pre>

<p>Un programme qui aime crier !!!!.</p>

<pre><code class="php">#!/usr/bin/env php
&lt;?php
while (!feof(STDIN)) {
     echo trim(fgets(STDIN)).'!!!!';
}
</code></pre>

<pre><code>$ echo 'récuperation' | ./shoot.php | ./capitalize.php | ./htmlentities.php
R&amp;eacute;cup&amp;eacute;ration!!!!
</code></pre>

<p>C&#8217;est un peu plus compliqué dans la vrai vie avec les retours à la ligne vide. Mais j&#8217;espère que vous avez compris mon idée.</p>

<p>Retour à notre script.</p>

<p>Voici la partie pour récupérer de la ligne de commande.
<code>php
// si je n'ai aucun argument ..
if (count($argv) == 0) {
    $str = '';
    // recupère le flux d'entrée
    while (!feof(STDIN)) {
        $str .= fgets(STDIN);
    }
    // explode laisse la derniere ligne vide.
    // d'ou le array_filter
    spark(array_filter(explode("\n", $str),'strlen'));
    return 0;
}
</code></p>

<p>Essayons une commande sur le dépôt git du blog que vous lisez.
<code>
git shortlog -s | cut -f1 | php ~/prog/spark/spark.php
</code>
<code>sh
$ git shortlog -s
(...)
   2  Manu
   37  Marc Camuzat
   1  Marcus Young
(..)
</code></p>

<p>On ne garde que la colonne 1 avec <code>cut -f1</code> puis on passe au script php</p>

<p>On obtient
<code>
▁▁▁▁▁▁▁▁▁▁▁▁▃▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
</code></p>

<h2>Conclusion</h2>

<p>J&#8217;avais besoin pour un futur article (le prochain ?) de cette fonction.
La philosophie de Linux est de créer plein de petits programmes et que ceux-ci communiquent via une interface très simple et universelle qui est le fichier texte. ainsi aucune dépendance le programme 1 est en bash, le programme 2 est en C, le programme 3 est en PHP. et tout cela ne pose aucun problème.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Quines]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/11/les-quines/"/>
    <updated>2015-07-11T19:39:53+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/11/les-quines</id>
    <content type="html"><![CDATA[<p>Aujourd&#8217;hui commençons par un petit programme</p>

<pre><code class="sh">  #!/bin/sh
  quine () {
  echo -e "#!/bin/sh\n$1"
  echo "quine '$1'"
  }

  quine 'quine () {
  echo -e "#!/bin/sh\\n$1"
  echo "quine \047$1\047"
  }
  '
</code></pre>

<p>Pouvez vous devinez que fais ce programme ?</p>

<p>Une quine est un code donc la sortie est exactement son code source.</p>

<p>Cela ressemble à une exercice de programmation.</p>

<p>Mais toute en quelque sorte peuvent se résumer à l&#8217;idée suivante.</p>

<blockquote><p>Écrivez, puis écrivez entre guillemets et suivi d&#8217;un point, « Écrivez, puis écrivez entre guillemets et suivi d&#8217;un point, ».</p></blockquote>

<p>Le code python suivant est une interprétation littérale.</p>

<pre><code class="py">a='a=%r;print(a%%a)';print(a%a)
</code></pre>

<p>En php
<code>php
&lt;?$a='&lt;?$a=%c%s%c;printf($a,39,$a,39);';printf($a,39,$a,39);
</code></p>

<p>Seulement possible en php</p>

<pre><code class="php">&lt;?php
echo file_get_contents(__FILE__);
</code></pre>

<h2>A quoi cela sert ?</h2>

<p>On parle de code qui se réplique. Il existe une quine dans tout les langages de programmations complets(c&#8217;est à dire turing-complet). Une des applications les plus curieuses est l&#8217;injection de code malicieux dans les compilateurs. C&#8217;est un des papiers les plus célèbres de Ken Thompson (Inventeur de B, Unix, UTF8, Go bref un monstre..). C&#8217;est un publication académique très facilement lisible et qui ne fait que trois pages. Il décrit une méthode d&#8217;injection dans le compilateur lui-même pour créer un compilateur infecté. Le plus bizarre dans cette histoire est que cette attaque est théorique. Mais personne n&#8217;y croyait. Il existe pourtant réellement un virus qui utilise cette faille.</p>

<ul>
<li><a href="https://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf">Reflections on Trusting Trust</a></li>
<li><a href="https://lists.owasp.org/pipermail/owasp-cincinnati/2009-August/000187.html">la faille de sécurité</a></li>
</ul>


<h2>Des liens et bibliographie.</h2>

<p>Il y a un chapitre complet dans le <a href="https://fr.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach_:_Les_Brins_d%27une_Guirlande_%C3%89ternelle">Gödel Escher Bach</a>
quelques phrases issues de ce livre passionnant</p>

<blockquote><p>&ldquo;est un fragment de phrase&rdquo; est un fragment de phrase</p>

<p>&ldquo;se compose de cinq mots&rdquo; se compose de cinq mots</p>

<p>&ldquo;Donne une fausseté si précédée d&#8217;elle-même entre guillemets&rdquo; Donne une fausseté si précédée d&#8217;elle-même entre guillemets.</p></blockquote>

<p>Cette dernière est de <a href="https://en.wikipedia.org/wiki/Willard_Van_Orman_Quine">W. V. Quine</a> qui est la première personne à écrire dessus et qui donne le noms de quine.</p>

<p>la plupart des exemples viens de l&#8217;article <a href="https://fr.wikipedia.org/wiki/Quine_%28informatique%29">quine</a> sur Wikipedia. Voir aussi <a href="http://c2.com/cgi/wiki?QuineProgram">quine</a> sur c2.com</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Des Tests Behat Plus Rapides Sous Symfony]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/06/des-tests-plus-rapides-sous-symfony/"/>
    <updated>2015-07-06T19:46:43+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/06/des-tests-plus-rapides-sous-symfony</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Nous allons voir comment multiplier par 5 voir 10 les tests et l&#8217;environnement de test et de dev. L&#8217;astuce ici est de mettre le répertoire <code>cache</code> et <code>log</code> dans la Ram de l&#8217;ordinateur. Ainsi plus d&#8217;écriture sur le disque dur. C&#8217;est très pratique aussi pour les tests Behat. Attention à ne pas utiliser cette astuce sur une instance en production.</p>

<h2>Mise en Oeuvre</h2>

<h3>Méthode 1 : modification du code</h3>

<p>Il suffit de modifier le <code>AppKernel.php</code></p>

<pre><code class="php">public function getCacheDir()
{
    if (in_array($this-&gt;environment, array('dev', 'test'))) {
        return '/run/shm/&lt;MonProjet&gt;/cache/' . $this-&gt;environment;
    }

    return parent::getCacheDir();
}

public function getLogDir()
{
    if (in_array($this-&gt;environment, array('dev', 'test'))) {
        return '/run/shm/&lt;Monprojet&gt;/logs';
    }

    return parent::getLogDir();
}
</code></pre>

<p>Il faut bien entendu créer les répertoires suivants. <code>/run/shm/&lt;Monprojet&gt;/logs</code> et <code>/run/shm/&lt;Monprojet&gt;/cache</code>.</p>

<p>Le problème de cette méthode est que l&#8217;on modifie le code. Et que ce genre de modification ne marche pas très bien avec les tests automatiques Jenkins. Bref pratique sur son poste mais pas en production.</p>

<h3>Fixer les problèmes de droit.</h3>

<p>Suivant comme est configuré votre projet et votre apache. Il peux y avoir des problème de droit.</p>

<h4>Solution a : mettre les permissions à l&#8217;utilisateur apache</h4>

<pre><code>chown -R www-data:www-data /run/shm/&lt;MonProjet&gt;
</code></pre>

<h4>Solution b : mettre l&#8217;utilisateur actuel en utilisateur apache.</h4>

<p>Normalement apache utilise l&#8217;utilisateur www-data, mais rien n&#8217;empêche de changer celui-ci par votre utilisateur.</p>

<p>Il suffit de modifier votre <code>/etc/apache2/httpd.conf</code></p>

<pre><code>User &lt;mon user&gt; 
Group &lt;mon user&gt;
</code></pre>

<p>que je lance symfony de la console, ou du site c&#8217;est toujours le même utilisateur.</p>

<h4>Solution c : Fixer juste pour le projet votre utilisateur.</h4>

<p>La solution la plus simple à mettre en oeuvre est <code>mpm-itk</code></p>

<pre><code>sudo apt-get install apache2-mpm-itk
</code></pre>

<p>Dans mon fichier de conf <code>/etc/apache2/site-available/&lt;monprojet&gt;.conf</code></p>

<p>J&#8217;ajoute les lignes suivantes</p>

<pre><code>    &lt;IfModule mpm_itk_module&gt;
    AssignUserId &lt;mon user&gt; &lt;mon group&gt;
    &lt;/IfModule&gt;
</code></pre>

<p>Il faut redémarrer apache. Les plus courageux tenterons le fast-cgi et autre fpm</p>

<h4>Un petit HS:</h4>

<ul>
<li>Vous pouvez créer un utilisateur par projet.</li>
<li>Et installer le projet dans /home/projet1</li>
<li>dans le /etc/apache2/site-available/projet1.conf</li>
</ul>


<pre><code>    &lt;IfModule mpm_itk_module&gt;
    AssignUserId &lt;projet1&gt; &lt;projet1&gt;
    &lt;/IfModule&gt;
</code></pre>

<p>Si l&#8217;utilisateur <em>projet1</em> est compromis, il ne peux modifier que son home. Il y a plus de risque avec l&#8217;utilisateur apache <code>www-data</code> qui peux modifier l&#8217;ensemble de projet dans le /www/var.</p>

<h3>Solution N°2 : Aucune modification du code.</h3>

<p>Nous allons tout simplement supprimer les répertoires <code>cache</code> et <code>logs</code> du projet et remplacer par un lien symbolique.
<code>
rm -rf app/cache
ln -s /run/shm/&lt;mon projet&gt;/cache  app/cache
ln -s /run/shm/&lt;mon projet&gt;/logs  app/logs
</code></p>

<p>Le code n&#8217;est pas modifié. Donc pas de commit bizarre et pas de problème en Prod. Le seul souci est qu&#8217;il y a souvent un <code>.gitkeep</code> sur <code>cache</code> et <code>log</code> donc les <code>git stash</code> et autre se comporte un peu bizarrement.</p>

<h3>des chiffres</h3>

<p>J&#8217;ai pris un projet de mon boulot voici la différence pour les tests Behat</p>

<pre><code class="">Avant
49 scenarios (49 passed)
396 steps (396 passed)
5m12.80s (66.61Mb)

Après
49 scenarios (49 passed)
396 steps (396 passed)
0m23.74s (72.85Mb)
</code></pre>

<p>je suis passé de 5 minutes à 24 secondes. Les fixtures sur le SQLite sont plus rapides. Bref un gain de temps énorme.</p>

<h2>Conclusion</h2>

<p>Nous avons vu deux solutions.
Un Post un peu bizarre, puisque c&#8217;est un collègue qui m&#8217;a montré l&#8217;astuce. J&#8217;avais envie d&#8217;écrire un post dessus. Merci à <a href="https://github.com/floyoops">lui</a></p>

<h2>Des liens</h2>

<ul>
<li><a href="http://www.whitewashing.de/2013/08/19/speedup_symfony2_on_vagrant_boxes.html">le liens le plus cité</a></li>
<li>sur Npm-itk en <a href="http://bibabox.fr/apache2-mpm-itk-utiliser-un-utiliser-un-utilisateur-different-pour-chaque-vhost/">français</a> ou en <a href="http://blog.stuartherbert.com/php/2008/04/19/using-mpm-itk-to-secure-a-shared-server/">anglais</a> les deux sont biens.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Et Debbuger]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/05/vim-et-debbuger/"/>
    <updated>2015-07-05T17:12:57+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/05/vim-et-debbuger</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Je vais montrer aujourd&#8217;hui comment interfacer Vim et xdebug pour debugger du php.</p>

<ul>
<li>Installer xdebug</li>
<li>Paramétrer xdebug</li>
<li>Présentation de deux plugins <strong>Vdebug</strong> et <strong>DBGPavim</strong></li>
<li>Comment installer les deux plugin avec</li>
</ul>


<h2>Installer xdebug</h2>

<p>Je connais deux méthodes</p>

<p>Utiliser PECL</p>

<pre><code>sudo pecl install xdebug
</code></pre>

<p>il faut alors ajouter dans votre <code>php.ini</code> la ligne suivante</p>

<pre><code>zend_extension=/usr/lib/php5/20090626/xdebug.so
</code></pre>

<p>Ou plus propre rajouter dans un nouveau fichier  <code>/etc/php5/apache2/conf.d/xdebug.ini</code> et pareil pour la ligne de commande <code>/etc/php5/cli/conf.d/xdebug.ini</code></p>

<p>utiliser apt-get sous Ubuntu
<code>
sudo apt-get install php5-xdebug
</code>
sur mon Ubuntu, les fichier conf.d était déjà crée</p>

<h2>Paramétrer xdebug pour le debugger</h2>

<p>Il faut rajouter les lignes suivantes le <code>xdebug.ini</code></p>

<pre><code>xdebug.remote_enable=on
xdebug.remote_handler=dbgp
xdebug.remote_host=localhost
xdebug.remote_port=9000
</code></pre>

<p>Puis aller sur l&#8217;url en ajoutant
<code>
http://monsite.com/?XDEBUG_SESSION_START=1
</code>
Il y a des plugins Firefox et Chrome qui s&#8217;occupe de cela.</p>

<p>Pour que le debugger soit lancer par défaut. Vous pouvez rajouter la ligne suivante</p>

<pre><code class="ini">xdebug.remote_autostart=1
</code></pre>

<p>Pour tester en ligne de commande.</p>

<pre><code class="sh">php -dxdebug.remote_autostart=1 test.php
</code></pre>

<p>un simple script bash fait l&#8217;affaire. <code>php-debug</code></p>

<pre><code class="sh">#!/bin/bash
/usr/bin/php -dxdebug.remote_autostart=1 "$@"
</code></pre>

<h2>Les plugins VIM</h2>

<p>Je vais pas trop insister sur comment installer un plugin sous Vim. Ce n&#8217;est pas très compliqué. Il faut passer par un gestionnaire de plugin (la gestion des plugins par défaut dans Vim n&#8217;est pas pratique)</p>

<h2> Vdebug</h2>

<h3>Utilisation</h3>

<ul>
<li>appuyer sur <code>&lt;F5&gt;</code></li>
<li>vous avez 20 seconde pour lancer le script ou aller sur le serveur apache.</li>
<li>Une fois le signal capturé</li>
</ul>


<h3>Liste des raccourcis claviers</h3>

<p><img class="center" src="/images/VDebug.png" width="600" height="375" title="&lsquo;Vdebug&rsquo; &lsquo;Screenshot de VDebug&rsquo;" ></p>

<ul>
<li><code>&lt;F5&gt;</code>: start/run (to next breakpoint/end of script)</li>
<li><code>&lt;F2&gt;</code>: step over</li>
<li><code>&lt;F3&gt;</code>: step into</li>
<li><code>&lt;F4&gt;</code>: step out</li>
<li><code>&lt;F6&gt;</code>: stop debugging</li>
<li><code>&lt;F7&gt;</code>: detach script from debugger</li>
<li><code>&lt;F9&gt;</code>: run to cursor</li>
<li><code>&lt;F10&gt;</code>: toggle line breakpoint</li>
<li><code>&lt;F11&gt;</code>: show context variables (e.g. after &ldquo;eval&rdquo;)</li>
<li><code>&lt;F12&gt;</code>: evaluate variable under cursor</li>
<li><code>:VdebugEval &lt;code&gt;</code>: evaluate some code and display the result</li>
<li><code>&lt;Leader&gt;e</code>: evaluate the expression under visual highlight and display the result</li>
</ul>


<p>La touche <code>&lt;Leader&gt;</code> est par défault <code>\</code> sur un clavier anglais. <code>&lt;Leader&gt;e</code> correspond à <code>\e</code>. Pas simple à taper sur un clavier azerty. la touche <code>&lt;Leader&gt;</code> est réglable grâce à cette configuration du <code>.vimrc</code></p>

<pre><code>let mapleader = ","
</code></pre>

<p>Sur mon poste, je tape <code>,e</code></p>

<h3>Un avis</h3>

<p>Marche plutôt bien, mais par défaut Le debugger commence au début du script et pas au premier breakpoint.</p>

<p>Il faut rajouter cette ligne dans votre <code>.vimrc</code>.</p>

<pre><code>let g:vdebug_options["break_on_open"]=0
</code></pre>

<p>L&#8217;histoire des 20 secondes pour se connecter est un peu frustrante.</p>

<p>Par contre le code python est super propre.</p>

<h2>DBGPavim</h2>

<p><img class="center" src="/images/DBGPAVIM.png" width="600" height="375" title="&lsquo;DBGPavim&rsquo; &lsquo;Screenshot de DBGPavim&rsquo;" ></p>

<p>Ce plugin résout les deux problèmes de Vdebug (aucune limitation de temps, démarre au premier point d&#8217;arrêt). Je le trouve moins intuitif. Mais il est visiblement plus puissant, il gère plusieurs sessions.</p>

<p>Sur les screenshots la différence est plutôt minime.</p>

<p>Les touches sont un peu près les mêmes.</p>

<h2>Installations sous vim</h2>

<p>Suivant le plugin que vous avez choisi</p>

<p>Par <a href="https://github.com/tpope/vim-pathogen">Pathogen</a>:
<code>
git clone git://github.com/joonty/vdebug.git bundle/vdebug
ou
git://github.com/joonty/vdebug.git brookhong/DBGPavim.git
</code></p>

<p>Ou avec les submodules de Git</p>

<pre><code>git submodule add git://github.com/joonty/vdebug.git bundle/vdebug
# ou 
git submodule add git://github.com/brookhong/DBGPavim.git bundle/DBGPavim
</code></pre>

<p>Ajouter cette ligne à votre <code>.vimrc</code></p>

<p>par <a href="https://github.com/gmarik/Vundle.vim">Vundle</a>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Bundle &ldquo;joonty/vdebug&rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;ou&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Bundle &lsquo;brookhong/DBGPavim&rsquo;</span></code></pre></td></tr></table></div></figure></p>

<p>par <a href="https://github.com/Shougo/neobundle.vim">NeoBundle</a> :
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NeoBundle &ldquo;joonty/vdebug&rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;ou&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;NeoBundle &lsquo;brookhong/DBGPavim&rsquo;</span></code></pre></td></tr></table></div></figure></p>

<h2>En conclusion</h2>

<p>Le debugger c&#8217;est chouette et cela rends un peu obsolète ce bon vieux <code>var_dump(); die();</code></p>

<p>D&#8217;ailleurs sur le <code>var_dump</code>. Il est plus simple de taper cette commande directement.</p>

<pre><code>die(var_dump($foo));
</code></pre>

<p>Enfin sur les versions récentes de Symfony la commande <code>dump()</code> est pratique.</p>

<p>Je vais reparler de xdebug. J&#8217;ai plein d&#8217;astuce à partager.</p>

<h2>Des liens</h2>

<ul>
<li><a href="https://github.com/joonty/vdebug">Vdebug</a></li>
<li><a href="https://github.com/brookhong/DBGPavim">DBGPAVIM</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
