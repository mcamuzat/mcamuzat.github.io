<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Php | Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-07-17T23:17:14+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les Quines]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/11/les-quines/"/>
    <updated>2015-07-11T19:39:53+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/11/les-quines</id>
    <content type="html"><![CDATA[<p>Aujourd&#8217;hui commençons par un petit programme</p>

<pre><code class="sh">  #!/bin/sh
  quine () {
  echo -e "#!/bin/sh\n$1"
  echo "quine '$1'"
  }

  quine 'quine () {
  echo -e "#!/bin/sh\\n$1"
  echo "quine \047$1\047"
  }
  '
</code></pre>

<p>Pouvez vous devinez que fais ce programme ?</p>

<p>Une quine est un code donc la sortie est exactement son code source.</p>

<p>Cela ressemble à une exercice de programmation.</p>

<p>Mais toute en quelque sorte peuvent se résumer à l&#8217;idée suivante.</p>

<blockquote><p>Écrivez, puis écrivez entre guillemets et suivi d&#8217;un point, « Écrivez, puis écrivez entre guillemets et suivi d&#8217;un point, ».</p></blockquote>

<p>Le code python suivant est une interprétation littérale.</p>

<pre><code class="py">a='a=%r;print(a%%a)';print(a%a)
</code></pre>

<p>En php
<code>php
&lt;?$a='&lt;?$a=%c%s%c;printf($a,39,$a,39);';printf($a,39,$a,39);
</code></p>

<p>Seulement possible en php</p>

<pre><code class="php">&lt;?php
echo file_get_contents(__FILE__);
</code></pre>

<h2>A quoi cela sert ?</h2>

<p>On parle de code qui se réplique. Il existe une quine dans tout les langages de programmations complets(c&#8217;est à dire turing-complet). Une des applications les plus curieuses est l&#8217;injection de code malicieux dans les compilateurs. C&#8217;est un des papiers les plus célèbres de Ken Thompson (Inventeur de B, Unix, UTF8, Go bref un monstre..). C&#8217;est un publication académique très facilement lisible et qui ne fait que trois pages. Il décrit une méthode d&#8217;injection dans le compilateur lui-même pour créer un compilateur infecté. Le plus bizarre dans cette histoire est que cette attaque est théorique. Mais personne n&#8217;y croyait. Il existe pourtant réellement un virus qui utilise cette faille.</p>

<ul>
<li><a href="https://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf">Reflections on Trusting Trust</a></li>
<li><a href="https://lists.owasp.org/pipermail/owasp-cincinnati/2009-August/000187.html">la faille de sécurité</a></li>
</ul>


<h2>Des liens et bibliographie.</h2>

<p>Il y a un chapitre complet dans le <a href="https://fr.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach_:_Les_Brins_d%27une_Guirlande_%C3%89ternelle">Gödel Escher Bach</a>
quelques phrases issues de ce livre passionnant</p>

<blockquote><p>&ldquo;est un fragment de phrase&rdquo; est un fragment de phrase</p>

<p>&ldquo;se compose de cinq mots&rdquo; se compose de cinq mots</p>

<p>&ldquo;Donne une fausseté si précédée d&#8217;elle-même entre guillemets&rdquo; Donne une fausseté si précédée d&#8217;elle-même entre guillemets.</p></blockquote>

<p>Cette dernière est de <a href="https://en.wikipedia.org/wiki/Willard_Van_Orman_Quine">W. V. Quine</a> qui est la première personne à écrire dessus et qui donne le noms de quine.</p>

<p>la plupart des exemples viens de l&#8217;article <a href="https://fr.wikipedia.org/wiki/Quine_%28informatique%29">quine</a> sur Wikipedia. Voir aussi <a href="http://c2.com/cgi/wiki?QuineProgram">quine</a> sur c2.com</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Des Tests Behat Plus Rapides Sous Symfony]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/06/des-tests-plus-rapides-sous-symfony/"/>
    <updated>2015-07-06T19:46:43+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/06/des-tests-plus-rapides-sous-symfony</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Nous allons voir comment multiplier par 5 voir 10 les tests et l&#8217;environnement de test et de dev. L&#8217;astuce ici est de mettre le répertoire <code>cache</code> et <code>log</code> dans la Ram de l&#8217;ordinateur. Ainsi plus d&#8217;écriture sur le disque dur. C&#8217;est très pratique aussi pour les tests Behat. Attention à ne pas utiliser cette astuce sur une instance en production.</p>

<h2>Mise en Oeuvre</h2>

<h3>Méthode 1 : modification du code</h3>

<p>Il suffit de modifier le <code>AppKernel.php</code></p>

<pre><code class="php">public function getCacheDir()
{
    if (in_array($this-&gt;environment, array('dev', 'test'))) {
        return '/run/shm/&lt;MonProjet&gt;/cache/' . $this-&gt;environment;
    }

    return parent::getCacheDir();
}

public function getLogDir()
{
    if (in_array($this-&gt;environment, array('dev', 'test'))) {
        return '/run/shm/&lt;Monprojet&gt;/logs';
    }

    return parent::getLogDir();
}
</code></pre>

<p>Il faut bien entendu créer les répertoires suivants. <code>/run/shm/&lt;Monprojet&gt;/logs</code> et <code>/run/shm/&lt;Monprojet&gt;/cache</code>.</p>

<p>Le problème de cette méthode est que l&#8217;on modifie le code. Et que ce genre de modification ne marche pas très bien avec les tests automatiques Jenkins. Bref pratique sur son poste mais pas en production.</p>

<h3>Fixer les problèmes de droit.</h3>

<p>Suivant comme est configuré votre projet et votre apache. Il peux y avoir des problème de droit.</p>

<h4>Solution a : mettre les permissions à l&#8217;utilisateur apache</h4>

<pre><code>chown -R www-data:www-data /run/shm/&lt;MonProjet&gt;
</code></pre>

<h4>Solution b : mettre l&#8217;utilisateur actuel en utilisateur apache.</h4>

<p>Normalement apache utilise l&#8217;utilisateur www-data, mais rien n&#8217;empêche de changer celui-ci par votre utilisateur.</p>

<p>Il suffit de modifier votre <code>/etc/apache2/httpd.conf</code></p>

<pre><code>User &lt;mon user&gt; 
Group &lt;mon user&gt;
</code></pre>

<p>que je lance symfony de la console, ou du site c&#8217;est toujours le même utilisateur.</p>

<h4>Solution c : Fixer juste pour le projet votre utilisateur.</h4>

<p>La solution la plus simple à mettre en oeuvre est <code>mpm-itk</code></p>

<pre><code>sudo apt-get install apache2-mpm-itk
</code></pre>

<p>Dans mon fichier de conf <code>/etc/apache2/site-available/&lt;monprojet&gt;.conf</code></p>

<p>J&#8217;ajoute les lignes suivantes</p>

<pre><code>    &lt;IfModule mpm_itk_module&gt;
    AssignUserId &lt;mon user&gt; &lt;mon group&gt;
    &lt;/IfModule&gt;
</code></pre>

<p>Il faut redémarrer apache. Les plus courageux tenterons le fast-cgi et autre fpm</p>

<h4>Un petit HS:</h4>

<ul>
<li>Vous pouvez créer un utilisateur par projet.</li>
<li>Et installer le projet dans /home/projet1</li>
<li>dans le /etc/apache2/site-available/projet1.conf</li>
</ul>


<pre><code>    &lt;IfModule mpm_itk_module&gt;
    AssignUserId &lt;projet1&gt; &lt;projet1&gt;
    &lt;/IfModule&gt;
</code></pre>

<p>Si l&#8217;utilisateur <em>projet1</em> est compromis, il ne peux modifier que son home. Il y a plus de risque avec l&#8217;utilisateur apache <code>www-data</code> qui peux modifier l&#8217;ensemble de projet dans le /www/var.</p>

<h3>Solution N°2 : Aucune modification du code.</h3>

<p>Nous allons tout simplement supprimer les répertoires <code>cache</code> et <code>logs</code> du projet et remplacer par un lien symbolique.
<code>
rm -rf app/cache
ln -s /run/shm/&lt;mon projet&gt;/cache  app/cache
ln -s /run/shm/&lt;mon projet&gt;/logs  app/logs
</code></p>

<p>Le code n&#8217;est pas modifié. Donc pas de commit bizarre et pas de problème en Prod. Le seul souci est qu&#8217;il y a souvent un <code>.gitkeep</code> sur <code>cache</code> et <code>log</code> donc les <code>git stash</code> et autre se comporte un peu bizarrement.</p>

<h3>des chiffres</h3>

<p>J&#8217;ai pris un projet de mon boulot voici la différence pour les tests Behat</p>

<pre><code class="">Avant
49 scenarios (49 passed)
396 steps (396 passed)
5m12.80s (66.61Mb)

Après
49 scenarios (49 passed)
396 steps (396 passed)
0m23.74s (72.85Mb)
</code></pre>

<p>je suis passé de 5 minutes à 24 secondes. Les fixtures sur le SQLite sont plus rapides. Bref un gain de temps énorme.</p>

<h2>Conclusion</h2>

<p>Nous avons vu deux solutions.
Un Post un peu bizarre, puisque c&#8217;est un collègue qui m&#8217;a montré l&#8217;astuce. J&#8217;avais envie d&#8217;écrire un post dessus. Merci à <a href="https://github.com/floyoops">lui</a></p>

<h2>Des liens</h2>

<ul>
<li><a href="http://www.whitewashing.de/2013/08/19/speedup_symfony2_on_vagrant_boxes.html">le liens le plus cité</a></li>
<li>sur Npm-itk en <a href="http://bibabox.fr/apache2-mpm-itk-utiliser-un-utiliser-un-utilisateur-different-pour-chaque-vhost/">français</a> ou en <a href="http://blog.stuartherbert.com/php/2008/04/19/using-mpm-itk-to-secure-a-shared-server/">anglais</a> les deux sont biens.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Et Debbuger]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/05/vim-et-debbuger/"/>
    <updated>2015-07-05T17:12:57+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/05/vim-et-debbuger</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Je vais montrer aujourd&#8217;hui comment interfacer Vim et xdebug pour debugger du php.</p>

<ul>
<li>Installer xdebug</li>
<li>Paramétrer xdebug</li>
<li>Présentation de deux plugins <strong>Vdebug</strong> et <strong>DBGPavim</strong></li>
<li>Comment installer les deux plugin avec</li>
</ul>


<h2>Installer xdebug</h2>

<p>Je connais deux méthodes</p>

<p>Utiliser PECL</p>

<pre><code>sudo pecl install xdebug
</code></pre>

<p>il faut alors ajouter dans votre <code>php.ini</code> la ligne suivante</p>

<pre><code>zend_extension=/usr/lib/php5/20090626/xdebug.so
</code></pre>

<p>Ou plus propre rajouter dans un nouveau fichier  <code>/etc/php5/apache2/conf.d/xdebug.ini</code> et pareil pour la ligne de commande <code>/etc/php5/cli/conf.d/xdebug.ini</code></p>

<p>utiliser apt-get sous Ubuntu
<code>
sudo apt-get install php5-xdebug
</code>
sur mon Ubuntu, les fichier conf.d était déjà crée</p>

<h2>Paramétrer xdebug pour le debugger</h2>

<p>Il faut rajouter les lignes suivantes le <code>xdebug.ini</code></p>

<pre><code>xdebug.remote_enable=on
xdebug.remote_handler=dbgp
xdebug.remote_host=localhost
xdebug.remote_port=9000
</code></pre>

<p>Puis aller sur l&#8217;url en ajoutant
<code>
http://monsite.com/?XDEBUG_SESSION_START=1
</code>
Il y a des plugins Firefox et Chrome qui s&#8217;occupe de cela.</p>

<p>Pour que le debugger soit lancer par défaut. Vous pouvez rajouter la ligne suivante</p>

<pre><code class="ini">xdebug.remote_autostart=1
</code></pre>

<p>Pour tester en ligne de commande.</p>

<pre><code class="sh">php -dxdebug.remote_autostart=1 test.php
</code></pre>

<p>un simple script bash fait l&#8217;affaire. <code>php-debug</code></p>

<pre><code class="sh">#!/bin/bash
/usr/bin/php -dxdebug.remote_autostart=1 "$@"
</code></pre>

<h2>Les plugins VIM</h2>

<p>Je vais pas trop insister sur comment installer un plugin sous Vim. Ce n&#8217;est pas très compliqué. Il faut passer par un gestionnaire de plugin (la gestion des plugins par défaut dans Vim n&#8217;est pas pratique)</p>

<h2> Vdebug</h2>

<h3>Utilisation</h3>

<ul>
<li>appuyer sur <code>&lt;F5&gt;</code></li>
<li>vous avez 20 seconde pour lancer le script ou aller sur le serveur apache.</li>
<li>Une fois le signal capturé</li>
</ul>


<h3>Liste des raccourcis claviers</h3>

<p><img class="center" src="/images/VDebug.png" width="600" height="375" title="&lsquo;Vdebug&rsquo; &lsquo;Screenshot de VDebug&rsquo;" ></p>

<ul>
<li><code>&lt;F5&gt;</code>: start/run (to next breakpoint/end of script)</li>
<li><code>&lt;F2&gt;</code>: step over</li>
<li><code>&lt;F3&gt;</code>: step into</li>
<li><code>&lt;F4&gt;</code>: step out</li>
<li><code>&lt;F6&gt;</code>: stop debugging</li>
<li><code>&lt;F7&gt;</code>: detach script from debugger</li>
<li><code>&lt;F9&gt;</code>: run to cursor</li>
<li><code>&lt;F10&gt;</code>: toggle line breakpoint</li>
<li><code>&lt;F11&gt;</code>: show context variables (e.g. after &ldquo;eval&rdquo;)</li>
<li><code>&lt;F12&gt;</code>: evaluate variable under cursor</li>
<li><code>:VdebugEval &lt;code&gt;</code>: evaluate some code and display the result</li>
<li><code>&lt;Leader&gt;e</code>: evaluate the expression under visual highlight and display the result</li>
</ul>


<p>La touche <code>&lt;Leader&gt;</code> est par défault <code>\</code> sur un clavier anglais. <code>&lt;Leader&gt;e</code> correspond à <code>\e</code>. Pas simple à taper sur un clavier azerty. la touche <code>&lt;Leader&gt;</code> est réglable grâce à cette configuration du <code>.vimrc</code></p>

<pre><code>let mapleader = ","
</code></pre>

<p>Sur mon poste, je tape <code>,e</code></p>

<h3>Un avis</h3>

<p>Marche plutôt bien, mais par défaut Le debugger commence au début du script et pas au premier breakpoint.</p>

<p>Il faut rajouter cette ligne dans votre <code>.vimrc</code>.</p>

<pre><code>let g:vdebug_options["break_on_open"]=0
</code></pre>

<p>L&#8217;histoire des 20 secondes pour se connecter est un peu frustrante.</p>

<p>Par contre le code python est super propre.</p>

<h2>DBGPavim</h2>

<p><img class="center" src="/images/DBGPAVIM.png" width="600" height="375" title="&lsquo;DBGPavim&rsquo; &lsquo;Screenshot de DBGPavim&rsquo;" ></p>

<p>Ce plugin résout les deux problèmes de Vdebug (aucune limitation de temps, démarre au premier point d&#8217;arrêt). Je le trouve moins intuitif. Mais il est visiblement plus puissant, il gère plusieurs sessions.</p>

<p>Sur les screenshots la différence est plutôt minime.</p>

<p>Les touches sont un peu près les mêmes.</p>

<h2>Installations sous vim</h2>

<p>Suivant le plugin que vous avez choisi</p>

<p>Par <a href="https://github.com/tpope/vim-pathogen">Pathogen</a>:
<code>
git clone git://github.com/joonty/vdebug.git bundle/vdebug
ou
git://github.com/joonty/vdebug.git brookhong/DBGPavim.git
</code></p>

<p>Ou avec les submodules de Git</p>

<pre><code>git submodule add git://github.com/joonty/vdebug.git bundle/vdebug
# ou 
git submodule add git://github.com/brookhong/DBGPavim.git bundle/DBGPavim
</code></pre>

<p>Ajouter cette ligne à votre <code>.vimrc</code></p>

<p>par <a href="https://github.com/gmarik/Vundle.vim">Vundle</a>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Bundle &ldquo;joonty/vdebug&rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;ou&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Bundle &lsquo;brookhong/DBGPavim&rsquo;</span></code></pre></td></tr></table></div></figure></p>

<p>par <a href="https://github.com/Shougo/neobundle.vim">NeoBundle</a> :
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NeoBundle &ldquo;joonty/vdebug&rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;ou&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;NeoBundle &lsquo;brookhong/DBGPavim&rsquo;</span></code></pre></td></tr></table></div></figure></p>

<h2>En conclusion</h2>

<p>Le debugger c&#8217;est chouette et cela rends un peu obsolète ce bon vieux <code>var_dump(); die();</code></p>

<p>D&#8217;ailleurs sur le <code>var_dump</code>. Il est plus simple de taper cette commande directement.</p>

<pre><code>die(var_dump($foo));
</code></pre>

<p>Enfin sur les versions récentes de Symfony la commande <code>dump()</code> est pratique.</p>

<p>Je vais reparler de xdebug. J&#8217;ai plein d&#8217;astuce à partager.</p>

<h2>Des liens</h2>

<ul>
<li><a href="https://github.com/joonty/vdebug">Vdebug</a></li>
<li><a href="https://github.com/brookhong/DBGPavim">DBGPAVIM</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Koan Et Programmation]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/25/koan-et-programmation/"/>
    <updated>2015-05-25T20:53:23+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/25/koan-et-programmation</id>
    <content type="html"><![CDATA[<p>Un koan est dixit wikipedia</p>

<blockquote><blockquote><p>koan est une une brève anecdote ou un court échange entre un maître et son disciple, absurde, énigmatique ou paradoxal, ne sollicitant pas la logique ordinaire.</p></blockquote></blockquote>

<p>Un exemple de Koan</p>

<blockquote><blockquote><p>Quel est le son d’une seule main qui applaudit ?</p></blockquote></blockquote>

<p>Il existe des Koan pour la programmation. Ce sont des mini problèmes pour s&#8217;initier à une technologie.</p>

<h2>RubyKoan</h2>

<p>Le plus connu et le premier est <a href="http://rubykoans.com/">RubyKoan</a>.</p>

<p>Regardons ensemble la première utilisation.</p>

<pre><code class="bash">cd koans
/home/marc/.rvm/rubies/ruby-2.2.0/bin/ruby path_to_enlightenment.rb
AboutAsserts#test_assert_truth has damaged your karma.

The Master says:
  You have not yet reached enlightenment.

The answers you seek...
  Failed assertion.

Please meditate on the following code:
  /home/marc/prog/ruby_koans/koans/about_asserts.rb:10:in `test_assert_truth'

mountains are merely mountains
your path thus far [X_________________________________________________] 0/282
</code></pre>

<p>J&#8217;ouvre le fichier <code>about_asserts.rb</code>.</p>

<pre><code class="ruby">#!/usr/bin/env ruby
# -*- ruby -*-

require File.expand_path(File.dirname(__FILE__) + '/neo')

class AboutAsserts &lt; Neo::Koan

  # We shall contemplate truth by testing reality, via asserts.
  def test_assert_truth
    assert false                # This should be true
  end
</code></pre>

<p>Il suffit de changer le <code>false</code> en <code>true</code></p>

<p>Relancons, On avance petit à petit et toutes les notions du ruby sont expliquées.</p>

<pre><code class="bash">cd koans
/home/marc/.rvm/rubies/ruby-2.2.0/bin/ruby path_to_enlightenment.rb
AboutAsserts#test_assert_truth has expanded your awareness.
AboutAsserts#test_assert_with_message has damaged your karma.

The Master says:
  You have not yet reached enlightenment.
  You are progressing. Excellent. 1 completed.

The answers you seek...
  This should be true -- Please fix this

Please meditate on the following code:
  /home/marc/prog/ruby_koans/koans/about_asserts.rb:16:in `test_assert_with_message'

learn the rules so you know how to break them properly
your path thus far [.X________________________________________________] 1/282
</code></pre>

<p>C&#8217;est un moyen facile et rapide pour apprendre un langage. Ceci dit j&#8217;ai personnellement fini les rubykoans. Mais 1 mois plus tard, j&#8217;étais incapable d&#8217;aligner une ligne de code en ruby. Faire passer les tests n&#8217;est pas très compliqué quelque soit le langage.</p>

<p>Il y a aussi les Katas de programmation, Mais c&#8217;est plus un cahier des charges avec des tests d&#8217;acceptations (On parle de BDD) alors que les koan sont plutôt dans la notion d&#8217;unitaire.</p>

<h2>Quelques Koan.</h2>

<p>Bien sur les <a href="http://rubykoans.com/">RubyKoans</a> il existe une version <a href="http://koans.herokuapp.com/en/about_asserts">en ligne</a>.</p>

<p>Les <a href="https://github.com/gregmalcolm/python_koans">python-koans</a> sont vraiment chouettes Il y a python 2.7 et python 3. Si les premiers problèmes sont faciles. Les derniers sont plutôt durs.</p>

<p>En javascript on peux citer</p>

<ul>
<li><a href="https://github.com/mrdavidlaing/javascript-koans">javascript-koans</a></li>
<li><a href="https://github.com/larrymyers/backbone-koans">backbone-koans</a></li>
<li><a href="https://github.com/bjpbakker/angular-koans">angular-koans</a></li>
</ul>


<p>J&#8217;ai été un peu déçus de ne pas trouver des Koans en php. Cela reste très basique.
je citerai:</p>

<ul>
<li><a href="https://github.com/TorontoPHPSoftwareCraftsmanship/PHPUnit-Koans">PHPUnit-koans</a></li>
<li>et celui-ci par votre serviteur (mais c&#8217;était il y a bien longtemps) <a href="https://github.com/mcamuzat/PHPUnitRegexKoan">mcamuzat/PHPUnitRegexKoan</a></li>
</ul>


<h2>Conclusion</h2>

<p>Je vous avais parler des <a href="/blog/2015/04/29/awesome-et-liste-de-liens/">awesome-list</a> et bien il existe une liste de <a href="https://github.com/ahmdrefat/awesome-koans">awesome-koans</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go Hello Server]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/18/go-hello-server/"/>
    <updated>2015-05-18T23:00:46+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/18/go-hello-server</id>
    <content type="html"><![CDATA[<h2> Introduction</h2>

<p>Je continue mon apprentissage en go. Nous allons essayer de faire un hello world via une page web.</p>

<p>L&#8217;exemple le plus simple de la <a href="https://gowalker.org/net/http#HandleFunc">documentation officielle</a>.</p>

<h2>Mise en place</h2>

<p>Je me place dans mon répertoire <code>go</code></p>

<p>Je vais dans le répertoire <code>src/github.com/&lt;username&gt;/</code></p>

<p>Je crée un répertoire <code>hello-server</code></p>

<p>Dans ce répertoire je crée le fichier server.go</p>

<pre><code class="go">package main

import (
    "io"
    "net/http"
    "log"
)

// hello world, the web server
func HelloServer(w http.ResponseWriter, req *http.Request) {
    io.WriteString(w, "hello, world!\n")
}

func main() {
    http.HandleFunc("/", HelloServer)
    err := http.ListenAndServe(":12345", nil)
    if err != nil {
        log.Fatal("ListenAndServe: ", err)
    }
}
</code></pre>

<p>Il suffit pour tester de lancer</p>

<pre><code>go run server.go
</code></pre>

<p>Ou sinon dans le répertoire <code>src/github.com/&lt;username&gt;/hello-server</code></p>

<pre><code>go install
</code></pre>

<p>Dans votre répertoire <code>bin</code> vous avez un exécutable <code>hello-server</code></p>

<p>si on reprend notre répertoire <code>go</code> avec le précédent post</p>

<pre><code class="bash">
.
├── bin
│   ├── hello
│   └── hello-server
└── src
    └── github.com
        └── mcamuzat
            ├── hello
            │   ├── hello.go
            │   ├── LICENSE
            │   └── README.md
            └── hello-server
                └── server.go
</code></pre>

<p>Avec votre navigateur aller à l&#8217;adresse suivante <a href="http://localhost:12345/">http://localhost:12345/</a></p>

<h3>Micro analyse</h3>

<pre><code>    http.HandleFunc("/", HelloServer)
</code></pre>

<p>On initialise un router qui associe à la route <code>/</code> (la route vide) un <em>callback</em> <code>HelloServer</code> (qui ne fait qu&#8217;un simple <code>hello world!</code>)</p>

<pre><code>    err := http.ListenAndServe(":12345", nil)
</code></pre>

<p>On demande à go d&#8217;écouter le port <code>:12345</code></p>

<p>Et il n&#8217;y a pas grand chose à dire d&#8217;autre.</p>

<h2>En conclusion</h2>

<p>Cela ressemble à beaucoup de micro-framework, en tant que développeur PHP je ne suis pas vraiment perdu.
Je vais essayer de continuer un peu sur le serveur web (récupération des posts).</p>

<p>L&#8217;avantage ici est que le fichier <code>hello-server</code> est exécutable et n&#8217;a besoin d&#8217;aucune dépendance (donc pas besoin de apache, PHP, etc..).</p>
]]></content>
  </entry>
  
</feed>
