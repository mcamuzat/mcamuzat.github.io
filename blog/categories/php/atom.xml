<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Journal d'un panda qui code]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-12-06T19:52:12+01:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les Monades : Evaluation partielle]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/"/>
    <updated>2015-12-06T18:49:49+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle</id>
    <content type="html"><![CDATA[<h2>Interlude.</h2>

<p>J&#8217;ai besoin pour le prochain chapitre d&#8217;introduire la notion d&#8217;application partielle. Cela consiste à évaluer une partie de la fonction même si je n&#8217;ai pas tous les arguments.</p>

<p>Soit la fonction suivante.</p>

<pre><code class="php">function plus($a, $b) {
   return $a + $b;
}
</code></pre>

<p>Que donne l&#8217;exécution ?
<code>php
$result = plus(10);
</code></p>

<!--more-->


<p>Une erreur bien entendu, puisque il manque un argument..</p>

<p>Voici une fonction tirée de la librairie <a href="https://github.com/widmogrod/php-functional">php-functionnal</a></p>

<pre><code class="php">function push(array $array, array $values)
{
    foreach ($values as $value) {
        $array[] = $value;
    }
    return $array;
}

function curryN($numberOfArguments, callable $function, array $args = [])
{
    return function () use ($numberOfArguments, $function, $args) {
        $argsLeft = $numberOfArguments - func_num_args();
        return $argsLeft &lt;= 0
            ? call_user_func_array($function, push($args, func_get_args()))
            : curryN($argsLeft, $function, push($args, func_get_args()));
    };
}
</code></pre>

<p>Et maintenant reprenons ma première fonction
<code>php
$add = curryN(2, function($a, $b) {return $a + $b;});
</code></p>

<p>Maintenant réessayons notre commande</p>

<pre><code class="php">$add10 = $add(10);
</code></pre>

<p>pas d&#8217;erreur mais il y a mieux !</p>

<pre><code class="php">$result = $add10(10) // 20.
</code></pre>

<p>Varions encore un peu avec aucun arguments
<code>php
$addition = $add();
result = $addition(10,10);//20
</code></p>

<p>S&#8217;il manque un argument, la fonction ne renvoie pas de résultat mais une nouvelle fonction.</p>

<p>On appelle cela l&#8217;évaluation partielle.</p>

<p>C&#8217;est plutôt pratique..</p>

<h2>Quelques applications pratiques</h2>

<h3>On réutilise mieux les calculs.</h3>

<p>Par exemple
<code>
$result1 = $valeurTresComplique + $valeursTresSimple1;
$result2 = $valeurTresComplique + $valeursTresSimple2;
</code></p>

<p>Devient
<code>
$partiel = $add($valeurTresComplique);
$result1 = $partiel($valeursTresSimple1);
$result2 = $partiel($valeursTresSimple2);
</code></p>

<h3>C&#8217;est plus simple à tester.</h3>

<p>Si toute les fonctions ne prennent qu&#8217;un argument, Il y a moins de cas à tester. De plus cela permet une meilleure isolation du code. C&#8217;est une bonne pratique d&#8217;avoir des fonction le plus unitaire possible. Une fonction à 5-6 arguments est rarement un bon signe dans le code.</p>

<h3>Cela permet de chainer les fonctions.</h3>

<p>Nous allons nous servir de cette astuce pour nos monades/functors. Car depuis le début on ne peux mettre qu&#8217;une seule valeur dans mon <em>container</em> donc comment faire pour faire des fonctions à plusieurs arguments ?</p>

<h2>Les evaluations partielles</h2>

<p>Il faut quand même noter que les langage PHP n&#8217;est pas génial pour le coup.</p>

<p>L&#8217;expression suivante en javascript est parfaitement légale.
<code>js
result = add(10)(5);
</code>
je suis obligé d&#8217;utiliser une viable intermédiaire en PHP.
<code>php
$add10= add(4);
$result = $add10(5);
</code>
Bref la syntaxe n&#8217;est pas très pratique.</p>

<h2>Conclusion</h2>

<p>En Haskell et <a href="https://fr.wikipedia.org/wiki/OCaml">OCaml</a> l&#8217;évaluation partielle est la norme.
<code>haskell
max 10 10
</code>
En fait le langage fait.
<code>haskell
(max 10) 10
</code></p>

<p>Transformer une fonction à plusieurs arguments en une série de fonction à un argument s&#8217;appelle la <em>Curryfication</em>. Cela vient du prénom de la première personne a avoir écris sur le sujet <a href="https://fr.wikipedia.org/wiki/Haskell_Curry">Haskell Curry</a>. Le nom de famille doit voir dire quelque chose aussi..</p>

<p>Cela semble un peu compliqué et pas forcement intéressant sur les exemples que j&#8217;ai choisi. Mais dans le prochain post nous allons utiliser cette notion.</p>

<p>Merci de m&#8217;avoir lu.</p>

<ul>
<li>partie 1 : <a href="blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>partie 2 : <a href="blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>partie 3 : <a href="blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>partie 4 : <a href="blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades : Les listes]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/"/>
    <updated>2015-11-29T21:44:52+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes</id>
    <content type="html"><![CDATA[<p>Nous continuons notre exploration des Monades/Functors, nous allons parler de Collection, de lapins, de marteaux et de non-déterminisme.</p>

<p>Voici notre nouveau <em>container</em> Le container <strong>List</strong>. Il prend en entrée un tableau (Array) ou en Php un <code>Traversable</code>.
<img class="center" src="/images/collection.png" width="600" height="450" title="&lsquo;Le container Collection&rsquo; &lsquo;Le container collection&rsquo;" ></p>

<ul>
<li>partie 1 : <a href="blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>partie 2 : <a href="blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>partie 3 : <a href="blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
</ul>


<p>Nous allons voir ensemble les listes, Collections. Nous allons voir le <code>map</code>, le <code>bind</code> nous allons voir que le comportement n&#8217;est pas exactement le même..</p>

<!--more-->


<p>Ne nous embêtons pas allons directement dans l&#8217;implémentation.</p>

<pre><code class="php">class Collection extends Container{
    /**
     * @param array $value
     */
    public function __construct($value)
    {

        $this-&gt;value = $this-&gt;isNativeTraversable($value)
            ? $value
            : [$value];
    }

    private function isNativeTraversable($value)
    {
        return is_array($value) || $value instanceof \Traversable;
    }

    public function map(callable $transformation)
    {
        $result = [];
        foreach ($this-&gt;value as $key =&gt; $value) {
            $result[$key] = call_user_func($transformation, $value);
        }
        return self::of($result);
    }

    public function extract() {
        $result = array();
        foreach ($this-&gt;value as $value) {
            if ($value instanceof Container) {
                $result[] = $value-&gt;extract();
            } else {
                $result[] = $value;
            }
        }
        return $result;
    }

}
</code></pre>

<p>On garde toujours la même définition. <code>map</code> prend toujours une fonction et renvoie un Objet du même type. <code>extract</code> renvoie la valeur, <code>Collection::of</code> renvoie une collection.</p>

<p>Quelques exemples
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>   <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">value</span><span class="p">;})</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nv">$value</span><span class="o">-</span><span class="mi">1</span><span class="p">;})</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">);</span> <span class="c1">// [ 1, 3, 5, 7]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">var_dump</span><span class="p">(</span><span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">one</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">two</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">three</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;))</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nb">strtoupper</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$value</span><span class="o">.&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">!!!!&amp;</span><span class="nx">rdquo</span><span class="p">;;})</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">);</span><span class="c1">// [&amp;ldquo;ONE!!!!&amp;rdquo;, &amp;ldquo;TWO!!!!&amp;rdquo;,&amp;ldquo;THREE!!!!&amp;rdquo;]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">Nous</span> <span class="nx">allons</span> <span class="nx">reprendre</span> <span class="nx">notre</span> <span class="nx">liste</span> <span class="nx">du</span> <span class="nx">post</span> <span class="p">[</span><span class="nx">précédent</span><span class="p">](</span><span class="nx">blog</span><span class="o">/</span><span class="mi">2015</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">22</span><span class="o">/</span><span class="nx">les</span><span class="o">-</span><span class="nx">monades</span><span class="o">-</span><span class="mi">3</span><span class="o">-</span><span class="nx">le</span><span class="o">-</span><span class="nx">maybe</span><span class="o">-</span><span class="nx">suite</span><span class="o">/</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$data</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">id_article</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">titre</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">titre1</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">meta</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">images</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="c1">//first.jpg&amp;rsquo;, &amp;lsquo;//second.jpg&amp;rsquo;]]],</span>
</span><span class='line'>    <span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">id_article</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">titre</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">titre2</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">meta</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">images</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="c1">//third.jpg&amp;rsquo;]]],</span>
</span><span class='line'>    <span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">id_article</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">titre</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">titre3</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;],</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
<img class="center" src="/images/arraydanscontainer.png" width="600" height="450" title="&lsquo;Un array dans le container&rsquo; &lsquo;Un array dans le container&rsquo;" ></p>

<ul>
<li>Nous allons transformer chaque ligne en <code>maybe</code> grâce à l&#8217;instruction <code>maybeFromValue</code> (<a href="blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">post2</a>)</li>
</ul>


<p><img class="center" src="/images/collectionmaybe.png" width="600" height="450" title="&lsquo;Un array dans le container&rsquo; &lsquo;Un array dans le container&rsquo;" ></p>

<p>Nous aimerions utiliser notre instruction <code>get</code>.</p>

<p>l&#8217;algo :</p>

<ul>
<li>je récupère le maybe.</li>
<li>J&#8217;appelle la fonction bind du maybe avec le get</li>
</ul>


<p>Cela donne ..</p>

<pre><code class="php">function get($key)
{
    return function ($value) use ($key) {
        return $value-&gt;bind(function ($array) use ($key) {
            return isset($array[$key]) ? Some::of($array[$key]) : Nothing::of(null);
        });
    };
}
</code></pre>

<p>Oui vous ne rêvez pas c&#8217;est une fonction qui renvoie une fonction qui renvoie une fonction.</p>

<p>L&#8217;implémentation est sympathique..</p>

<pre><code class="php">$result = Collection:of($data)
   -&gt;map(fromValue)
   -&gt;bind(get("meta"))
   -&gt;bind(get("images"))
   -&gt;bind(get(0))
   -&gt;extract();
</code></pre>

<p>Nous obtenons en une ligne <em>sans if sans condition</em>.</p>

<pre><code class="php">["//first.jpg", "//third.jpg", null]
</code></pre>

<h2>Le bind</h2>

<p>Je n&#8217;ai pas donnée le code du bind qui se résume à</p>

<pre><code class="php">    public function bind(callable $transformation)
    {
        return self::of($this-&gt;concat($this-&gt;map($transformation)));
    }
</code></pre>

<p>Je vais essayer de justifier tout cela.</p>

<p>Partons d&#8217;abord du principe que <code>$this-&gt;concat</code> n&#8217;existe pas..</p>

<p>Donc mon <code>bind</code> devient</p>

<pre><code class="php">    public function bind(callable $transformation)
    {
        return self::of($this-&gt;map($transformation));
    }
</code></pre>

<p>Un exemple
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">addOne</span><span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$input</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">addOne</span><span class="p">);</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Le résultat
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Collection</span><span class="c1">#6 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Collection</span><span class="c1">#5 (1) {</span>
</span><span class='line'>      <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>      <span class="k">array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">Collection</span><span class="c1">#2 (1) {</span>
</span><span class='line'>          <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">Collection</span><span class="c1">#3 (1) {</span>
</span><span class='line'>          <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">Collection</span><span class="c1">#4 (1) {</span>
</span><span class='line'>          <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">Nous</span> <span class="nx">avons</span> <span class="nx">une</span> <span class="nx">collection</span> <span class="nx">qui</span> <span class="nx">contient</span> <span class="nx">une</span> <span class="nx">collection</span> <span class="p">(</span><span class="nx">double</span> <span class="nx">container</span><span class="o">!!</span><span class="p">)</span> <span class="nx">et</span> <span class="nx">pire</span> <span class="nx">dans</span> <span class="nx">chaque</span> <span class="nx">valeur</span> <span class="nx">est</span> <span class="nx">encore</span> <span class="nx">une</span> <span class="nx">collection</span> <span class="o">!.</span> <span class="nx">On</span> <span class="nx">perd</span> <span class="nx">aussi</span> <span class="nx">le</span> <span class="nx">chainage</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Bref</span> <span class="nx">nous</span> <span class="nx">avons</span> <span class="nx">tout</span> <span class="nx">perdu</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">### Solution le marteau.</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="nx">img</span> <span class="nx">center</span> <span class="o">/</span><span class="nx">images</span><span class="o">/</span><span class="nx">marteau</span><span class="o">.</span><span class="nx">png</span> <span class="mi">515</span> <span class="mi">150</span> <span class="s1">&#39;Le marteau comme solution.&#39;</span> <span class="s1">&#39;Le marteau comme solution&#39;</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Nous</span> <span class="nx">allons</span> <span class="nx">aplatir</span> <span class="nx">le</span> <span class="nx">résultat</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">C</span><span class="s1">&#39;est a dire que nous allons transformer notre collection `[[a],[b],[c]]` en `[a, b, c]`</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Voici l&#39;</span><span class="nx">implémentation</span> <span class="nx">en</span> <span class="nx">code</span><span class="o">..</span> <span class="nx">C</span><span class="s1">&#39;est un peu long n&#39;</span><span class="nx">hésitez</span> <span class="nx">pas</span> <span class="nx">à</span> <span class="nx">sauter</span> <span class="nx">cette</span> <span class="nx">partie</span><span class="o">..</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Partons</span> <span class="nx">du</span> <span class="nx">principe</span> <span class="nx">que</span> <span class="nx">c</span><span class="err">&#39;</span><span class="nx">est</span> <span class="nx">un</span> <span class="k">array</span><span class="o">..</span>
</span><span class='line'>
</span><span class='line'><span class="nx">On</span> <span class="nx">aplati</span> <span class="nx">notre</span> <span class="nx">liste</span> <span class="nx">ainsi</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$flatten</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">a</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">d</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;),</span> <span class="k">array</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">b</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;),</span> <span class="k">array</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">c</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;));</span>
</span><span class='line'><span class="nv">$result</span><span class="p">;</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$flatten</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$value</span> <span class="k">as</span> <span class="nv">$subvalue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$subvalue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span> <span class="c1">//array(&amp;ldquo;a&amp;rdquo;, &amp;ldquo;d&amp;rdquo;, &amp;ldquo;b&amp;rdquo;, &amp;ldquo;c&amp;rdquo;);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Le problème est que notre collection n&#8217;est pas un <code>Array</code>.. Mais essayons avec une fonction un peu plus tordue</p>

<pre><code class="php">$result = array_reduce(
    $flatten,
    function ($acc, $value){
    array_reduce($value, function($idontcare, $value) use(&amp;$acc) {
        $acc[] = $value;
    });
    return $acc;
}, []);
</code></pre>

<p>C&#8217;est un façon un peu plus complexe d&#8217;exprimer la même chose que le code plus haut. Sans utiliser les boucles <code>foreach</code>.</p>

<p>Le reduce pour notre collection est facilement exprimable.</p>

<pre><code class="php">    // dans la classe Collection
     public function reduce(callable $function, $accumulator)
    {
        foreach ($this-&gt;value as $item) {
            $accumulator = call_user_func($function, $accumulator, $item);
        }
        return $accumulator;
    }
</code></pre>

<p>Reprenons le code du <code>array_reduce</code> et utilisons notre <code>reduce</code></p>

<pre><code class="php"> // dans la classe Collection
    private function concat(Collection $collection)
    {
        return $collection-&gt;reduce(function ($agg, $value) {
            $value = ($value instanceof Collection) ? $value : Collection::of($value);
            return $value-&gt;reduce(function($agg, $v) {
                $agg[] = $v;
                return $agg;
            }, $agg);
        }, []);
    }
</code></pre>

<p>Voici comment on aplatit notre fonction et on sauvegarde le chainage. Mais il y a mieux..</p>

<h2>Si j&#8217;avais un marteau..</h2>

<p>Montrons quelque exemples de bind.</p>

<h3>Exemple 1 : Les lapins.</h3>

<p>Soit le fonction suivante</p>

<pre><code class="php ">function reproduction($input) {
       return Collection::of(array($input, $input, $input);
}
</code></pre>

<p>Un exemple</p>

<pre><code>$lapin = Collection::of(array("lapin"))
    -&gt;bind("reproduction")
    -&gt;bind("reproduction")
    -&gt;extract();
</code></pre>

<p>Le résultat</p>

<p><img class="center" src="/images/reproductionlapin.png" width="594" height="482" title="&lsquo;Un array dans le container&rsquo; &lsquo;Un array dans le container&rsquo;" ></p>

<ul>
<li>premier bind</li>
</ul>


<pre><code class="php">["lapin"] -&gt; map -&gt;[["lapin", "lapin","lapin"]] -&gt; concat -&gt; ["lapin", "lapin","lapin"]
</code></pre>

<ul>
<li>second bind</li>
</ul>


<pre><code class="php">["lapin", "lapin","lapin"] -&gt; map [["lapin","lapin","lapin"][..][..]] -&gt; ["lapin" .. *9]
</code></pre>

<p>Nous commençons avec un lapin, nous multiplions par 3 à chaque interaction. Comme la liste est aplatie à chaque fois.</p>

<h3>Exemple 2 : les fractales</h3>

<p>Soit la fonction suivante</p>

<pre><code class="php">
function fractale($value) {
    if ($value == "#")
        return (Collection::of(array('#', '_', '#')));
    return Collection::of(array("_", "_","_"));
}
$result = Collection::of(array("#"))-&gt;bind("fractale")-&gt;bind("fractale")-&gt;bind("fractale")-&gt;extract();
echo implode($result);
//#_#___#_#_________#_#___#_#
</code></pre>

<h3>Exemple 3 : avec les chiffres</h3>

<p>Soit la fonction suivante</p>

<p>La fonction inférieure à 20 renvoie un array vide.</p>

<pre><code class="php">function moiEtMonSuccesseur($input) {
    return Collection::of($input, $input+1); 
}

function inferieurA20($value) {
   if($value &gt; 20) {
        return Collection::of([]);
   }
   return (Collection::of(array($value)));
}

$result = Collection::of([10,20,30])-&gt;bind("moiEtMonSuccesseur")-&gt;bind("inferieurA20")-&gt;bind("moiEtMonSuccesseur")-&gt;extract();
</code></pre>

<ul>
<li>premier <code>bind</code></li>
</ul>


<pre><code class="php">[10,20, 30] -&gt; map -&gt; [[10,11],[20,21],[30,31]]-&gt;concat -&gt; [10, 11, 20, 21, 30, 31]
</code></pre>

<ul>
<li>second <code>bind</code></li>
</ul>


<pre><code class="php">[10, 11, 20, 21, 30, 31] -&gt; map -&gt; [[10],[11],[20],[],[],[]]-&gt; concat -&gt; [10,11,20]
</code></pre>

<ul>
<li>troisième <code>bind</code></li>
</ul>


<pre><code class="php">[10, 11, 20] -&gt; map [[10,11], [11,12], [20, 21]]-&gt; concat -&gt; [10,11,11,12,20,21]
</code></pre>

<h3>Exemple 4: Trouver les positions possibles d&#8217;un jeux de société</h3>

<pre><code class="php ">function donneTousLesCoupsPossibles($position) {
    //renvoie toutes les positions légales
    return Collection::of(array(position_possible..));
}

$postion1-&gt;bind(donneTousLesCoupsPossibles)
   -&gt;bind(donneTousLesCoupsPossibles);
</code></pre>

<p>cette fonction donne toute les parties possibles dans deux coup.</p>

<h2>Conclusion</h2>

<p>On comprend assez bien l&#8217;intérêt de cette monade pour gérer des listes, mais il y a une autre vision possible. La collection avec le bind est considérée comme une façon de gérer des entrées <em>non déterministes</em>. J&#8217;ai eu un peu de mal à comprendre, mais voici l&#8217;idée.
La valeur 3 n&#8217;a qu&#8217;une valeur qui est <code>3</code> facile, la valeur <code>[1, 2, 3]</code> est une représentation de la même valeur sauf qu&#8217;elle à trois états possible <code>1, 2, 3</code>. Grâce au <code>bind</code> je prend en compte tous les états possibles.</p>

<p>Pour résumer :</p>

<ul>
<li>Le Maybe prend le cas ou la valeur est présente.</li>
<li>La liste permet de gérer le Non-determinisme.</li>
</ul>


<p>Il reste encore beaucoup de chose à parler. Nous avons parlé des functors(<code>map</code> ou <code>fmap</code>), des monades (<code>of</code> et <code>bind</code>) nous allons voir les applicatives..</p>

<h1>des liens.</h1>

<ul>
<li>Ma référence pour l&#8217;implémentation est <a href="https://github.com/widmogrod/php-functional">php-functional</a>.</li>
<li>La bible pour le haskell est <a href="learnyouahaskell.com">Learn You a Haskell for Great Good!</a> Le livre est gratuit avec des jolis dessins. Enfin le fond et la forme sont vraiment bon.</li>
<li>Il existe en français !! <a href="http://lyah.haskell.fr/">Apprendre Haskell vous fera le plus grand bien !</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades 3 Le Maybe (suite)]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/"/>
    <updated>2015-11-22T16:59:31+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite</id>
    <content type="html"><![CDATA[<ul>
<li>partie 1 : <a href="blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>partie 2 : <a href="blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
</ul>


<p>Dans la partie de 3 : Nous allons utiliser le functor Maybe avec l&#8217;instruction <code>bind</code>.</p>

<p>Soit le tableau suivant.</p>

<!--more-->


<pre><code class="php">$data = [
    ['id_article' =&gt; 1, 'titre' =&gt; 'titre1', 'meta' =&gt; ['images' =&gt; ['//first.jpg', '//second.jpg']]],
    ['id_article' =&gt; 2, 'titre' =&gt; 'titre2', 'meta' =&gt; ['images' =&gt; ['//third.jpg']]],
    ['id_article' =&gt; 3, 'titre' =&gt; 'titre3'],
];
</code></pre>

<p>nous voulons afficher une liste avec une titre et et une image.</p>

<p>Nous allons utilisez la fonction suivante</p>

<pre><code class="php ">function get($key)
{
    return function ($array) use ($key) {
        return isset($array[$key]) ? $array[$key] : null;
    };
}
</code></pre>

<p>Exemple d&#8217;utilisation.</p>

<pre><code class="php">$getTitre = get("titre");
foreach ($data as $line) {
  var_dump $getTitre($line");
}
</code></pre>

<p>Le résultat</p>

<pre><code class="sh ">string (6) "titre1"
string (6) "titre2"
string (6) "titre3"
</code></pre>

<p>Pour extraire les images utilisons notre Maybe
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$data</span> <span class="k">as</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">maybeFromValue</span><span class="p">(</span><span class="nv">$line</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">meta</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">images</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">noimage</span><span class="o">.</span><span class="nx">png</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">Le</span> <span class="nx">résultat</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="c1">//first.jpg&amp;rdquo;</span>
</span><span class='line'><span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="c1">//third.jpg&amp;rdquo;</span>
</span><span class='line'><span class="nx">string</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">no</span><span class="o">-</span><span class="nx">image</span><span class="o">.</span><span class="nx">png</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Avec le <code>bind</code></h2>

<p>Ré-ecrivons pour utiliser le bind. (Nous utilisons l&#8217;idée que la fonction que j&#8217;injecte dans le container renvoie elle-mème un <code>Some</code> ou <code>Nothing</code>)</p>

<p><img class="center" src="/images/functionretourneSome.png" width="600" height="450" title="&lsquo;la fonction renvoie un maybe&rsquo; &lsquo;la fonction renvoie un maybe&rsquo;" ></p>

<pre><code class="php">function get($key)
{
    return function ($array) use ($key) {
        return isset($array[$key]) ? Some::of($array[$key]) : Nothing::of(null);
    };
}
</code></pre>

<p>La fonction devient.</p>

<pre><code class="php">foreach ($data as $line) {
   var_dump(maybeFromValue($line)-&gt;bind(get("meta"))
       -&gt;bind(get("images"))
       -&gt;bind(get(0))
       -&gt;getOrElse("noimage.png"));
}
</code></pre>

<h2>En conclusion</h2>

<ul>
<li>Si j&#8217;utilise la fonction <code>map</code> (parfois on parle aussi de <code>fmap</code>) j&#8217;utilise le Maybe en tant que Functor.</li>
<li>Si j&#8217;utilise la fonction <code>bind</code> j&#8217;utilise le Maybe en tant que Monad.</li>
</ul>


<p>Nous allons continuer notre voyage avec les listes dans le prochain post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades (suite): Le Functor Maybe..]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/"/>
    <updated>2015-11-15T16:43:42+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/lesdeuxcontainerMaybe.png" width="512" height="313" title="&lsquo;Il y a deux container&rsquo; &lsquo;Il y a deux containers&rsquo;" ></p>

<p>Nous avons vue dans le précédent <a href="blog/2015/11/11/les-monades-en-php-cest-possible-dot/">post</a> un pseudo-container qui nous permet d&#8217;emballer nos valeurs. Nous allons muscler un peu notre container mais partons d&#8217;un exemple.</p>

<p>Je souhaite récupérer le mail du client &ldquo;bob&rdquo; ou afficher &ldquo;pas de mail&rdquo;</p>

<pre><code class="php">function getMail($name) {
$mail = getUserByName($name)-&gt;getAddress()-&gt;getMail();
if (null === $mail) {
   return "pas de mail"; 
}
return $mail;
}
</code></pre>

<p>Facile non ?</p>

<!--more-->


<p>Si <code>getAdress()</code> renvoie null, Outch &hellip;</p>

<pre><code>PHP Fatal error: Call to a member function getMail() on a non-object..
</code></pre>

<p>L&#8217;utilisateur n&#8217;existe pas forcement et puis l&#8217;adresse est peut-être vide.. Une implémentation naïve</p>

<pre><code class="php">function getMail($name) {
    $user = getUserByName($name);
    if ($user) {
        $address = $user-&gt;getAddress();
        if ($address) {
            //etc ...
            return $adresse-&gt;getMail();
        }
   }
   return "pas de mail";

}
</code></pre>

<p>Ce code vous le connaissez, vous l&#8217;avez probablement déjà écris, il y a moyen d&#8217;optimiser de faire plus propre.</p>

<h2>Deux containers pour le prix d&#8217;un.</h2>

<p>Le Maybe à la rescousse..</p>

<p>Voici le Maybe en dessin.</p>

<p><img class="center" src="/images/lesdeuxcontainerMaybe.png" width="512" height="313" title="&lsquo;Il y a deux container&rsquo; &lsquo;Il y a deux containers&rsquo;" ></p>

<p>J&#8217;ai un container <code>Some</code> et un Container <code>Nothing</code>.</p>

<p>Le container <code>Nothing</code> est un container qui n&#8217;a aucune valeurs. La méthode <code>map</code> renvoie toujours un container <code>Nothing</code>.</p>

<pre><code class="php">class Nothing extends Container{
    public function map($function)
    {
       return static::of(null);
    }
    public static function of($value)
    {
        return new static($value);
    }

    public function bind($transformation)
    {
        return static::of(null);
    }

    public function getOrElse($default)
    {
        return $default;
    }
}
</code></pre>

<p>Le container <code>Some</code> le résultats de <code>map</code> est un nouveau container <code>Some</code> s&#8217;il y a un résultat non-null sinon c&#8217;est un container <code>Nothing</code>.</p>

<pre><code class="php ">class Some extends Container{
    public function map($function)
    {
        $result = $this-&gt;bind($function);
        if ($result === null) {
            return Nothing::of(null);
        }
        return static::of($result);
    }
    public static function of($value)
    {
        return new static($value);
    }

    public function bind($transformation)
    {
        return call_user_func($transformation, $this-&gt;value);
    }

    public function getOrElse($default)
    {
        return $this-&gt;value;
    }
}
</code></pre>

<p>Enfin j&#8217;ai besoin d&#8217;un helper</p>

<pre><code>function maybeFromValue($value) {
 if ($value === null) 
   return Nothing::of(null);
 return Some::of($value);
}
</code></pre>

<p>Notons que j&#8217;ai une méthode qui me permet de sortir avec une valeurs par défaut</p>

<p>Quelques exemples:</p>

<pre><code class="php">echo maybeFromValue(null)-&gt;map("ucfirst")-&gt;getOrElse("non!!");
// non!!
echo maybeFromValue("oui!!")-&gt;map("ucfirst")-&gt;getOrElse("non!!");
// Oui!!
echo Some::of("oui")-&gt;map("ucfirst")
   -&gt;map(function($value) {return null;})
   -&gt;getOrElse("Non!!");
// Non !!
</code></pre>

<p>Nous pouvons simplifier notre problème</p>

<p>En le refactorisant ainsi</p>

<pre><code class="php">// example
// method("name") return function($obj) {return $obj-&gt;getName()};

function method($name)
{
    return function ($obj) use ($name) {
        return $obj-&gt;$name();
    };
}

$mail = maybeFromValue(getUserByName($name))
    -&gt;map(method("getAddress")) // $value-&gt;getAdress()
    -&gt;map(method("getMail"))
    -&gt;getOrElse("pas de mail");
</code></pre>

<p>Quelques dessins
Le cas ou tout marche</p>

<p><img class="center" src="/images/maybechainageok.png" width="516" height="260" title="&lsquo;chainage tout va bien&rsquo; &lsquo;chainage tout va bien&rsquo;" ></p>

<p>Le cas ou <code>getUser()</code> renvoie null</p>

<p><img class="center" src="/images/chainagepasok.png" width="516" height="216" title="&lsquo;getAdress renvoie null, on prend la valeur par défault&rsquo; &lsquo;getAdress renvoie null, on prend la valeur par défaults&rsquo;" ></p>

<p>Sympa la refactorisation. On peux supprimer ainsi une partie de la logique (la plupart des if, les nulls ont tous disparus).</p>

<h2>Une librairie toute faite</h2>

<p>Je vais parler de <a href="https://github.com/schmittjoh/php-option">php-option</a>. Si vous faite du <a href="https://symfony.com/">symfony2</a> vous l&#8217;avez déja dans votre <code>/vendor</code> et vous ne le saviez pas.</p>

<p>La syntaxe est un peu près le même</p>

<p>Mais il y a plein de fonctionnalités</p>

<pre><code class="php">$entity = $this-&gt;findSomeEntity()-&gt;getOrElse(new Entity());
$entity = $this-&gt;findSomeEntity()-&gt;getOrCall('createAnNewAddress');
$entity = $this-&gt;findSomeEntity()-&gt;getOrThrow(new \Exception('ha!!!!!'));
</code></pre>

<p>Il y a aussi des possibilité de chainer les réponses si pas de résultats
<code>php
$entity = $this-&gt;findSomeEntity()-&gt;orElse($this-&gt;findSomeOtherEntity())
            -&gt;orElse($this-&gt;createEntity());
</code></p>

<p>Nous n&#8217;utilisons que l&#8217;instruction <code>map</code> pour le moment. Donc nous n&#8217;utilisons pas le container en tant que monade mais plutôt en tant que functor. Nous verrons cela dans le troisième post.</p>

<h2>Conclusion</h2>

<p>Je suis désolé si certain termes sont inexacts comme le container. Je ne suis pas un expert, mais j&#8217;admets bien volontiers mon erreur.</p>

<p>Si vous avez un code ou vous vérifiez tout le temps si les valeurs sont nulles. Il y a probablement moyen que cette structure vous aide.</p>

<p>Dans le prochain Post nous utiliserons le Maybe avec l&#8217;instruction <code>bind</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades en PHP c'est possible..]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/"/>
    <updated>2015-11-11T19:28:39+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Nous allons voir ensemble les monades. Nous allons voir la monade <strong>Identity</strong>. elle n&#8217;est pas très utile mais nécessaire si vous voulez comprendre la monade/functor  <strong>Maybe</strong> qui j&#8217;espère va changer votre façon de voir votre code mais ce sera dans le post suivant.</p>

<p>Les monades sont des structures de la programmation fonctionnelle. Très utilisées dans le langage <a href="https://www.haskell.org/">Haskell</a>. En pratique Haskell serait moins attractifs sans cette structure. <em>(Je ne suis absolument pas développeur Haskell.)</em></p>

<!--more-->


<p>Je ne sais pas trop les définir puisque il existe un nombre incalculable de définitions</p>

<ul>
<li>C&#8217;est un triplet d&#8217;après <a href="https://fr.wikipedia.org/wiki/Monade_%28informatique%29">wikipédia en français</a></li>
<li>Une Interface, de l&#8217;injection de dépendances, Structure, Une base spatiale, Un <a href="https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/">burrito</a></li>
<li>Des catégories</li>
</ul>


<p>Il existe une infinité de tutoriels dessus (Le site officiel de Haskell à un compteur <a href="https://wiki.haskell.org/Monad_tutorials_timeline">plutôt amusant</a> pour quantifier l&#8217;avalanche de tuto), écris par les plus grands Douglas Crowford <a href="https://www.youtube.com/watch?v=b0EF0VTs9Dc">Youtube</a> (La référence du Javascript). Donc probablement que mon explication ne sera pas forcément la meilleure.</p>

<p>Pour comprendre les monades je vais vous parler de container (Rien à voir avec <a href="https://www.docker.com/">docker</a>, ni container de <a href="https://symfony.com/">Symfony</a>).</p>

<h2>des valeurs sympas et pas sympa.</h2>

<p>J&#8217;ai des valeurs sympas, et des valeurs <strong>pas sympas</strong>.</p>

<p><img class="center" src="/images/sympa-passympa.png" width="600" height="233" title="&lsquo;des valeurs sympas et pas sympas&rsquo; &lsquo;des valeurs sympas et pas sympas&rsquo;" ></p>

<p>Par <strong>pas sympa</strong>, j&#8217;entends toute les valeurs que je ne maitrise pas trop
par exemple</p>

<ul>
<li>la variable n&#8217;est pas instanciée le fabuleux <code>Null</code></li>
<li>le résultat n&#8217;est pas forcément le même. je lance la fonction deux fois, je n&#8217;ai pas le même résultat.</li>
<li>le résultat dépend d&#8217;autre chose, par exemple la lecture d&#8217;un fichier (le réseau est coupé, le disque dur est plein, etc ..) et peux entrainer des erreurs et des exceptions.</li>
<li>le résultat n&#8217;a pas forcement la même taille. je pense à un résultat de base de donnée, je peux avoir 0 lignes commes des milliards.</li>
<li>enfin le résultat utilise des ressources qui sont partagés avec d&#8217;autre programme.</li>
</ul>


<h2>La solution le container</h2>

<p>La solution :</p>

<blockquote><blockquote><p>utiliser un container ou un emballage</p></blockquote></blockquote>

<p><img class="center" src="/images/valeurdanscontainer.png" width="600" height="450" title="&lsquo;Ma valeur dans un container&rsquo; &lsquo;Ma valeur dans un container&rsquo;" ></p>

<p>L&#8217;idée est simple, je mets en <strong>quarantaine</strong> ma valeur.</p>

<p>Ainsi je suis protégé des effets néfastes.</p>

<p><img class="center" src="/images/valeurquicasse.png" width="600" height="450" title="&lsquo;Si problème..&rsquo; &lsquo;Si problème..&rsquo;" ></p>

<p>Voici le début de l&#8217;implémentation</p>

<pre><code class="php">class Container {

   /**
     * @var mixed
     */
    protected $value;

    public function __construct($value)
    {
        $this-&gt;value = $value;
    }

    public static function of($value)
    {
        return new static($value);
    }
}
</code></pre>

<p>J&#8217;ai deux méthodes:  un constructeur, et une factory statique.
deux possibilités</p>

<pre><code class="php">$valueNotSecure = "Je ne suis pas sympa";
var_dump(new Container($valueNotSecure));
var_dump(Container::of($valueNotSecure));
</code></pre>

<pre><code class="php">class Container#1 (1) {
  protected $value =&gt;
  string(20) "Je ne suis pas sympa"
}
class Container#1 (1) {
  protected $value =&gt;
  string(20) "Je ne suis pas sympa"
}
</code></pre>

<p>Ma valeur est dans un container, la propriété est <code>protected</code>. Donc impossible à atteindre de l&#8217;extérieur, à priori on ne craint pas grand chose..</p>

<p>Mais voila mon container aussi sécure qu&#8217;il soit ne sert à rien. Puisque rien ne sort, mais rien de rentre..</p>

<h2>Un Sas de décontamination.</h2>

<p>Je vais ajouter un sas de décontamination à ma structure via l&#8217;instruction <code>map</code> qui prend une fonction. Il applique la fonction à la valeur à l&#8217;intérieur. Il a une petite particularité. Il ne donne pas le résultat mais un nouveau container qui contient le résultat.</p>

<p><img class="center" src="/images/containeravecsas.png" width="600" height="450" title="&lsquo;J'ajoute un sas&rsquo; &lsquo;J'ajoute un sas&rsquo;" ></p>

<p>Soit la fonction suivante qui ajoute 1 à la valeur en entrée.</p>

<pre><code class="php">function addOne($value) {
    return $value + 1;
}
</code></pre>

<p>Regardons le dessin suivant:</p>

<p><img class="center" src="/images/containeravecsasexemple.png" width="600" height="450" title="&lsquo;Je place la fonction +1 dans le sas&rsquo; &lsquo;Je place la fonction +1 dans le sas&rsquo;" ></p>

<ul>
<li>Je crée un container qui contient la valeur &ldquo;5&rdquo;.</li>
<li>Je mets la fonction <code>addOne</code> dans le <code>map</code>. Je fais le calcul. Que je m&#8217;empresse de remettre dans un container tout neuf.</li>
<li>j&#8217;ai un Container avec &ldquo;6&rdquo;.</li>
</ul>


<p><img class="center" src="/images/containertoutneuf.png" width="600" height="450" title="&lsquo;J'ajoute un sas&rsquo; &lsquo;J'ajoute un sas&rsquo;" ></p>

<p>Voici l&#8217;implémentation de <code>map</code> dans ma classe container.</p>

<pre><code class="php ">    public function map($function)
    {
        // call_user_func =&gt; $function($this-&gt;value)
        return static::of(call_user_func($function,$this-&gt;value));
    }
</code></pre>

<p>Et le code d&#8217;exemple.</p>

<pre><code class="php">$output = Container::of(5)
    -&gt;map("addOne")
var_dump($output);
</code></pre>

<p>Et le résultat
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Container</span><span class="c1">#2 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">int</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Quelques</span> <span class="nx">remarques</span>
</span><span class='line'>
</span><span class='line'> <span class="o">*</span> <span class="nx">Comme</span> <span class="nx">le</span> <span class="nx">résultat</span> <span class="nx">n</span><span class="s1">&#39;est pas sur, Je remet le résultat dans un nouveau container. Je ne réutilise plus l&#39;</span><span class="nx">ancien</span> <span class="nx">container</span> <span class="p">(</span><span class="nx">puisque</span> <span class="nx">contaminé</span><span class="p">)</span><span class="o">.</span> <span class="nx">Comme</span> <span class="nx">on</span> <span class="nx">ne</span> <span class="nx">peux</span> <span class="nx">changer</span> <span class="nx">le</span> <span class="nx">contenu</span><span class="p">,</span> <span class="nx">il</span> <span class="nx">est</span> <span class="o">**</span><span class="nx">immutable</span><span class="o">**</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="nx">img</span> <span class="nx">center</span> <span class="o">/</span><span class="nx">images</span><span class="o">/</span><span class="nx">containertoutneuf</span><span class="o">.</span><span class="nx">png</span> <span class="mi">600</span> <span class="mi">450</span> <span class="s1">&#39;des valeurs sympas et pas sympas&#39;</span> <span class="s1">&#39;des valeurs sympas et pas sympas&#39;</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="o">*</span> <span class="nx">Le</span> <span class="nx">container</span> <span class="nx">avec</span> <span class="nx">l</span><span class="s1">&#39;instruction `map` par définition **Chainable**.</span>
</span><span class='line'>
</span><span class='line'><span class="s1"><img class="center /images/chainagecontainer.png 600 450 &#39;</span><span class=nx>J</span><span class=s1>&#39;ajoute un sas&#39;</span> <span class=s1>&#39;J&#39;</span><span class=nx>ajoute</span> <span class=nx>un</span> <span" src="class="nx">sas</span><span" title="class=&#34;s1&#34;>&#39;" alt="class=&#34;s1&#34;>&#39;"></span>
</span><span class='line'><span class="s1">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;$output = Container::of(5)</span>
</span><span class='line'><span class="s1">    -&gt;map(&amp;ldquo;addOne&amp;rdquo;)</span>
</span><span class='line'><span class="s1">    -&gt;map(&amp;ldquo;addOne&amp;rdquo;)</span>
</span><span class='line'><span class="s1">    -&gt;map(&amp;ldquo;addOne&amp;rdquo;)</span>
</span><span class='line'><span class="s1">    -&gt;map(&amp;ldquo;addOne&amp;rdquo;)</span>
</span><span class='line'><span class="s1">var_dump($output);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;//class Container#3 (1) {</span>
</span><span class='line'><span class="s1">//  protected $value =&gt;</span>
</span><span class='line'><span class="s1">//  int(9)</span>
</span><span class='line'><span class="s1">//}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code&gt;</span>
</span><span class='line'><span class="s1">Bien sur il est parfaitement possible d&#39;</span><span class="nx">utiliser</span> <span class="nx">des</span> <span class="nx">callbacks</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$output</span> <span class="o">=</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">addOne</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$value</span> <span class="o">*</span> <span class="mi">4</span><span class="p">;});</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;//</span><span class="k">class</span> <span class="nc">Container</span><span class="c1">#3 (1) {</span>
</span><span class='line'><span class="c1">//  protected $value =&gt;</span>
</span><span class='line'><span class="c1">//  int(24)</span>
</span><span class='line'><span class="c1">//}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">Donc</span> <span class="nx">j</span><span class="s1">&#39;ai un Sas d&#39;</span><span class="nx">entrée</span> <span class="nx">qui</span> <span class="nx">me</span> <span class="nx">permet</span> <span class="nx">d</span><span class="s1">&#39;interagir avec ma valeur. Je n&#39;</span><span class="nx">ai</span> <span class="nx">toujours</span> <span class="nx">pas</span> <span class="nx">fais</span> <span class="nx">sortir</span> <span class="nx">la</span> <span class="nx">fonction</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">## Une sortie.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">C</span><span class="s1">&#39;est pas très spectaculaire, j&#39;</span><span class="nx">ajoute</span> <span class="nx">une</span> <span class="nx">fonction</span> <span class="nb">extract</span><span class="p">()</span> <span class="nx">qui</span> <span class="nx">n</span><span class="s1">&#39;est qu&#39;</span><span class="nx">un</span> <span class="nx">simple</span> <span class="k">return</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;...</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">Exemple</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>     <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">je</span> <span class="nx">suis</span> <span class="nx">tranquille</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>         <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nb">strtoupper</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'> <span class="c1">//string(18) JE SUIS TRANQUILLE</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Une application : Le décorateur de texte.</h2>

<p>Nous allons utiliser la capacité de chainage de notre container pour faire un pseudo-décorateur.</p>

<p>Soit les fonctions suivantes
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">h1</span><span class="p">(</span><span class="nv">$text</span><span class="p">)</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$output</span> <span class="o">=</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span>  <span class="nx">la</span> <span class="nx">réponse</span> <span class="nx">est</span> <span class="nx">Non</span>   <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nb">trim</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nb">htmlentities</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">h1</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">body</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">html</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">echo</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
Voici le fonctionnement</p>

<ul>
<li>je supprime les espaces en trop avec <a href="http://php.net/manual/fr/function.trim.php">trim</a></li>
<li>Je code en Html <a href="http://php.net/manual/fr/function.htmlentities.php">htmlentities</a></li>
<li>j&#8217;encadre de &ldquo;h1&rdquo; puis &ldquo;body&rdquo; puis &ldquo;html&rdquo;.</li>
</ul>


<p>Le résultat</p>

<pre><code class="html">&lt;html&gt;&lt;body&gt;&lt;h1&gt;la r&amp;eacute;ponse est Non&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;
</code></pre>

<p>En image</p>

<h2>Une autre idée</h2>

<p>Nous pouvons aussi imagine une fonction qui renvoie un Container.</p>

<p>Par exemple reprenons notre fonction <code>addOne</code></p>

<p><img class="center" src="/images/functionretournecontainer.png" width="600" height="450" title="&lsquo;Ma fonction renvoie un container&rsquo; &lsquo;ma fonction renvoie un container&rsquo;" ></p>

<pre><code class="php">function addOne($value) {
    return Container::of($value + 1);
}
</code></pre>

<p>Donc ma fonction me renvoie forcement un container.</p>

<p>Si j&#8217;utilise l&#8217;instruction <code>map</code>, je risque de mettre un container dans le container.</p>

<p><img class="center" src="/images/containerdanscontainer.png" width="600" height="450" title="&lsquo;container dans un container&rsquo; &lsquo;container dans un container&rsquo;" ></p>

<p>D&#8217;où l&#8217;ajout de la méthode <code>bind</code></p>

<pre><code class="php">    public function bind($transformation)
    {
        return call_user_func($transformation, $this-&gt;value);
    }
</code></pre>

<p>On remarque que mon résultat reste chaînable.</p>

<pre><code class="php">$output = Container::of(5)
    -&gt;bind("addOne")
    -&gt;bind("addOne")
    -&gt;bind("addOne")
    -&gt;bind("addOne")
var_dump($output);

//class Container#3 (1) {
//  protected $value =&gt;
//  int(9)
//}
</code></pre>

<h2>Conclusion</h2>

<p>Mon container bien que pour le moment est assez peu utilise mais.</p>

<ul>
<li><p>Il implémente une fonction <code>map</code> qui est chainage. Nous venons d&#8217;implémenter un <strong>functor</strong> ou <strong>foncteur</strong> en français. Cela a un rapport avec les mathématiques. Et il m&#8217;est difficile au moment ou j&#8217;écris ces lignes de vous l&#8217;expliquer. Le Functor s&#8217;occupe d&#8217;appeler la fonction pour nous et de retourner un résultat correct. Il s&#8217;occupe de tout. C&#8217;est une sorte d&#8217;abstraction. On lui confie le calcul et il se débrouille. (Nous le retrouverons dans le post suivant)</p></li>
<li><p>Nous implémentons la méthode <code>of</code> et <code>bind</code> qui est elle aussi chainage (à condition de lui donner des fonctions qui renvoie de Container). Nous venons d&#8217;implémenter une <em>monade</em> même principe que le functor.</p></li>
</ul>


<p>Si vous avez compris le container, vous pouvez le renommer en IdentityMonad.</p>

<p>Dans le prochain post nous allons implémenter un  la Monade/Functor Maybe.</p>

<p>Elle nous permettra de réfactoriser le code suivant</p>

<pre><code class="php">function getAbonnementByUserConnected() {
    $user = getUserConnected();
    // l'utilisateur est anonyme pas d'abonnement
    if (null === $user)  {
        return null;
    }
    // l'utilisateur n'a pas d'abonnement
    $abonnement = getAbonnementByUser($user);
    if (null === $abonnement) {
        return null;
    }

    return $abonnement;
}

function getPromotion() {
    $abo = getAbonnementByUserConnected();
    if (null === getAbonnementByUser()) {
        return new Promotion();
    }
    return $abo-&gt;getPromotion();
}
</code></pre>

<p>Pour devenir
<code>php
$promotion = Maybe::of("getUserConnected")
    -&gt;map("getAbonnementByUser")
    -&gt;map("getPromotion")
    -&gt;orElse(new Promotion());
</code></p>

<p>Je me suis lancé dans une tache bien compliqué mais passionnante. Je m&#8217;excuse d&#8217;avance pour certaines approximations. J&#8217;avais confondu <code>map</code> et <code>bind</code> dans la première version</p>

<p>Je vous remercies de m&#8217;avoir lu..</p>
]]></content>
  </entry>
  
</feed>
