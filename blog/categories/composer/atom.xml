<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: composer | Journal d'un panda qui code]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/composer/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-11-16T22:56:54+01:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Problème Np-Complet]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/09/09/probleme-np-complet/"/>
    <updated>2015-09-09T21:55:10+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/09/09/probleme-np-complet</id>
    <content type="html"><![CDATA[<p>Aujourd&#8217;hui je vais parler des problèmes Np-complets avec le <a href="http://xkcd.com/">xkcd</a> suivant. L&#8217;original est <a href="http://xkcd.com/287/">ici</a></p>

<p><img class="center" src="/images/np_complete.png" width="600" height="388" title="&lsquo;xkcd&rsquo; &lsquo;xkcd&rsquo;" ></p>

<p>On appelle ce genre de problème les NP-complets</p>

<p>Pour faire simple (Ce que j&#8217;en ai compris)</p>

<p>Les NP-problèmes sont des problèmes donc il est très facile de vérifier une solutions. Dans notre cas ici il suffit de commander 7 * 2.15 pour obtenir 15.05. Le problème a une solution. Mais il est quasiment impossible de trouver une méthode efficace pour déterminer la solution, voir même de savoir s&#8217;il y a une solutions.</p>

<!--more-->


<p>Il suffit de regarder les images suivantes (pris d&#8217;un post de <a href="http://cstheory.stackexchange.com/questions/5188/explain-p-np-problem-to-10-year-old">stack exchange</a>)</p>

<ul>
<li>si on met les paquets les plus gros d&#8217;abord, les plus larges, avec un <a href="http://www.optaplanner.org/">planner</a>.</li>
</ul>


<p><img class="center" src="/images/backpack.png" width="600" height="450" title="&lsquo;bin packing&rsquo; &lsquo;slide1&rsquo;" ></p>

<ul>
<li><p>A quel moment mettre le paquet <code>2 * 4 = 8</code>. suivant la forme la solution varie
<img class="center" src="/images/backpack2.png" width="600" height="450" title="&lsquo;bin packing&rsquo; &lsquo;slide2&rsquo;" ></p></li>
<li><p>Enfin impossible de savoir s&#8217;il y a une solution ici. Il y a priori la place, pourtant il n&#8217;y a pas de solution</p></li>
</ul>


<p><img class="center" src="/images/backpack3.png" width="600" height="450" title="&lsquo;bin packing&rsquo; &lsquo;slide3&rsquo;" ></p>

<p>la source des images <a href="http://cstheory.stackexchange.com/posts/5206/revisions">ici</a>.</p>

<p>Il reste la force brute.</p>

<p>Voici ma version du xkcd en php</p>

<pre><code class="php">function findSolution($total, $list, $menu) {
    foreach($menu as $plat =&gt; $prix) {
        $result = array_merge($list, array($plat));
        if ($total-$prix == 0) {
            var_dump($result);
            return;
        }
        if ($total-$prix &gt; 0) {
            $result = findSolution($total-$prix, $result, $menu);
        }
    }
}
$menu = array(
    "Mixed Fruit"=&gt;215,
    "French Fries"=&gt;275,
    "Side Salad"=&gt;335,
    "Hot Wing"=&gt;355,
    "Mozzarela Sticks"=&gt;420,
    "Sampler Plate"=&gt;580,
);
findSolution(1505, array(), $menu);
</code></pre>

<p>Cela affiche toute les solutions possibles.</p>

<p>Bien sur il y a des doublons. Il n&#8217;y a pas de différence entre <code>["Hot wing", "Hot wing", "Mixed Fruit", "Sampler Plate"]</code> et  <code>["Hot wing", "Hot wing", "Sampler Plate", "Mixed Fruit"]</code></p>

<p>Pour supprimer les doublons à l&#8217;affichage. Je vais utiliser des globales.</p>

<pre><code>$count = 0;
$allResult = array();
function findSolution($total, $list, $menu) {
    global $count;
    global $allResult;
    foreach($menu as $plat =&gt; $prix) {
        $count++;
        $result = array_merge($list, array($plat));

        if ($total-$prix == 0) {
            $sort = $result;
            sort($sort);
            $allResult[] = $sort;
            return $result;
        }
        if ($total-$prix &gt; 0) {
            $result = findSolution($total-$prix,$result, $menu);

        }
    }
}
$menu = array(
    "Mixed Fruit"=&gt;215,
    "French Fries"=&gt;275,
    "Side Salad"=&gt;335,
    "Hot Wing"=&gt;355,
    "Mozzarela Sticks"=&gt;420,
    "Sampler Plate"=&gt;580
);
$solution = findSolution(1505, array(), $menu);

$result = array_map(
    "unserialize",
    array_unique(
        array_map("serialize", $allResult
    )
)
);
var_dump($result);
var_dump($count);
</code></pre>

<ul>
<li>je trie le tableau de résultats. pour que tout mes doublons s&#8217;affiche pareil.</li>
<li><code>array_unique</code> ne marche pas si les valeurs sont des <em>tableaux</em> (ce qui est la cas ici)</li>
<li>Je transforme mes tableaux en chaine de caractères grâce à la serialization avec le <code>array_map</code></li>
<li>Alors <code>array_unique</code> vire les doublons</li>
<li>Je deserialize avec à nouveau <code>array_map</code> et l&#8217;opération inverse.</li>
</ul>


<pre><code class="php">array([resultat1], [resultat1],[resultat2])
// array_map("serialize", $result);
array("resultat1_serialisé","resultat1_serialisé","resultat2_serialisé");
// array_unique(..)
array("resultat1_serialise", "resultat2_serialise");
// array_map("unserialize", ..)
array([resultat1], [resultat2])
</code></pre>

<pre><code class="php">int(12040)
array(2) {
  [0] =&gt;
  array(7) {
    [0] =&gt;
    string(11) "Mixed Fruit"
    [1] =&gt;
    string(11) "Mixed Fruit"
    [2] =&gt;
    string(11) "Mixed Fruit"
    [3] =&gt;
    string(11) "Mixed Fruit"
    [4] =&gt;
    string(11) "Mixed Fruit"
    [5] =&gt;
    string(11) "Mixed Fruit"
    [6] =&gt;
    string(11) "Mixed Fruit"
  }
  [1] =&gt;
  array(4) {
    [0] =&gt;
    string(8) "Hot Wing"
    [1] =&gt;
    string(8) "Hot Wing"
    [2] =&gt;
    string(11) "Mixed Fruit"
    [3] =&gt;
    string(13) "Sampler Plate"
  }
}
</code></pre>

<p>J&#8217;ai fait 12040 boucles pour obtenir toutes les solutions. On peut bien sur optimiser un peu l&#8217;algorithme, si la valeur 5.60 ne marche pas à la première boucle, il y a pas de chance pour quelle marche à la seconde boucle. Donc il faut supprimer des valeurs dans le tableau au fur et à mesure.</p>

<h2> Conclusion</h2>

<p>La force brute n&#8217;est pas vraiment une solution, avec plus de valeurs on explose les possibilités.  Il existe plusieurs <a href="https://fr.wikipedia.org/wiki/Probl%C3%A8me_du_sac_%C3%A0_dos">approches</a> qui tende vers des solutions.</p>

<p>En informatique, il y a des nombreux cas où ce problème intervient</p>

<ul>
<li>L&#8217;ordre optimal d&#8217;installation des logiciels (Probablement la partie la plus marrante de <a href="https://getcomposer.org/">composer</a>, mais elle est assez peu documentée)</li>
<li>Beaucoup de cryptages utilisent des problèmes NP-complets (factorisation de deux nombres premiers).</li>
<li>La dernière phrase du comics parle du <a href="https://fr.wikipedia.org/wiki/Probl%C3%A8me_du_voyageur_de_commerce">voyageur de commerce</a>, un problème célèbre.</li>
<li>Le sudoku, Les jeux <a href="http://arxiv.org/pdf/1203.1895v1.pdf">nintendos</a> ?!</li>
<li>Enfin une <a href="https://fr.wikipedia.org/wiki/Liste_de_probl%C3%A8mes_NP-complets">liste complète</a> de wikipedia</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Halt compiler : twig et php dans le même fichier]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/23/halt-compiler-twig-et-php-dans-le-meme-fichier/"/>
    <updated>2015-08-23T17:20:41+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/23/halt-compiler-twig-et-php-dans-le-meme-fichier</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>je vais parler de l&#8217;instruction <code>__halt_compiler()</code>.</p>

<p>Cette instruction arrête l&#8217;interprétation du PHP. Instruction inutile ? Pas vraiment..</p>

<p>Pour ce faire je vais montrer un exemple ou je vais mixer un fichier php et un fichier <a href="http://twig.sensiolabs.org/">twig</a> ensemble.</p>

<h2>L&#8217;instruction <code>__halt_compiler()</code></h2>

<p>D&#8217;après php.net</p>

<blockquote><p>Stoppe l&#8217;exécution du compilateur. Ceci peut être très utile pour embarquer des données dans des scripts PHP, comme des fichiers d&#8217;installation.
L&#8217;octet de la position du début des données peut être déterminé par la constante <code>__COMPILER_HALT_OFFSET__</code> qui n&#8217;est définie que s&#8217;il y a une fonction <code>__halt_compiler()</code> présente dans le fichier.</p></blockquote>

<!--more-->


<h2>Une première expérimentation</h2>

<p>Soit le fichier php suivant :</p>

<pre><code class="php">&lt;?php
echo 'salut la compagnie!!';
__halt_compiler();
echo "j'apparais pas";
</code></pre>

<p>Comme prévu la deuxième ligne ne s&#8217;affiche pas.</p>

<h2>Une seconde expérimentation.</h2>

<pre><code class="php">&lt;?php
$txt = file_get_contents(__FILE__, false, null, __COMPILER_HALT_OFFSET__);
echo strtoupper($txt);
__halt_compiler();
Bonjour tout le monde!
</code></pre>

<p>La constante <code>__FILE__</code> représente le fichier actuelle, la constante <code>__COMPILER_HALT_OFFSET__</code> représente la position de l&#8217;instruction <code>__halt_compiler()</code>. On récupère le texte qui ne s&#8217;affiche pas.</p>

<pre><code class="sh">BONJOUR TOUT LE MONDE!
</code></pre>

<h2>Mettre le fichier php et le fichier de template twig dans le même fichier</h2>

<p>Un exemple un peu théorique car pas très optimisé.</p>

<p>J&#8217;ai besoin de twig, voici le <code>composer.json</code></p>

<pre><code class="json">{
   "require": {
        "twig/twig": "^1.20"
    }
}
</code></pre>

<p>Voici mon programme.</p>

<pre><code class="php">&lt;?php
require_once __DIR__ . '/vendor/autoload.php'; // Autoload files using Composer autoload

function get_halt_data() {
    return file_get_contents(__FILE__, false, null, __COMPILER_HALT_OFFSET__);
}

$loader = new Twig_Loader_Array(array(
    'index' =&gt; get_halt_data()));
$twig = new Twig_Environment($loader);

echo $twig-&gt;render('index', array('name' =&gt; 'Fabien'));

__halt_compiler();

hello {\{name}\}
</code></pre>

<pre><code class="sh">hello fabien
</code></pre>

<p>Désolé pour les <code>{\{</code> sinon cela n&#8217;apparait pas sur le code.</p>

<p>C&#8217;est relativement inefficace. Il doit avoir moyen de faire un peu plus propre en profitant du cache.</p>

<p>Comme annoncé dans le titre , j&#8217;ai dans le même fichier le php et le template twig.</p>

<h3>Un exemple plus concret <code>composer.phar</code></h3>

<p>Ouvrons pour voir le fichier <code>composer.phar</code></p>

<p>Voici ce que je vois. Nous retrouvons notre instruction du jour.</p>

<pre><code class="php">...
Phar::mapPhar('composer.phar');
define('COMPOSER_DEV_WARNING_TIME', 1445255994);
require 'phar://composer.phar/bin/composer';

__HALT_COMPILER(); ?&gt;
.. 
</code></pre>

<p>Les fichiers <code>.phar</code> en pratique n&#8217;utilise que cette astuce. Je connais assez peu.</p>

<h2>Conclusion</h2>

<ul>
<li>Sur l&#8217;utilisation en template. Il y a le projet <a href="https://github.com/bobthecow/mustache.php">mustache.php</a> vous ne devriez pas être perdu avec le loader <a href="https://github.com/bobthecow/mustache.php/wiki/Template-Loading#inline-loader">suivant</a></li>
<li>Sur l&#8217;utilisation de string dans un template twig, la lecture de cet <a href="https://techpunch.co.uk/development/render-string-twig-template-symfony2">article</a> est très bien.</li>
<li>Sur les <code>.phar</code> la <a href="http://php.net/manual/en/phar.mapphar.php">documentation officielle</a> semble un bon début.</li>
</ul>


<p>Je vais essayer de continuer à parler d&#8217;autres instructions et structures peu connues (par exemple <code>__invoke</code> ou les <code>SplHeap</code>).</p>

<p>Merci de m&#8217;avoir lu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Créer son dépôt sous Packagist]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/24/creer-son-depot-sous-packagist/"/>
    <updated>2015-07-24T17:50:58+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/24/creer-son-depot-sous-packagist</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>J&#8217;avais montré dans le précédent <a href="/blog/2015/07/19/histogramme-et-ligne-de-commande/">Post</a>, une fonction qui permet de créer des histogrammes.</p>

<p>J&#8217;ai décidé de la publier sous <a href="https://packagist.org/">Packagist</a>. Je n&#8217;avais jamais fais. Je vous propose de suivre mon cheminement</p>

<ul>
<li>Je mets au propre le fichier</li>
<li>J&#8217;ajoute le <code>composer.json</code></li>
<li>j&#8217;ajoute les tests unitaires</li>
<li>Je crée le dépôt sur Github</li>
<li>J&#8217;enregistre le dépôt sur Packagist</li>
</ul>


<h2>Industrialisation</h2>

<p>Nous sommes partis du code suivant.</p>

<pre><code class="php">function spark($array) {
    $bars = array('▁','▂','▃','▄','▅','▆','▇','█');
    $divide = max($array);
    if ($divide == 0) {
        $divide = 1;
    }
    $countBars = count($bars)-1;
    $out = '';
    foreach ($array as $tick)
        $out .= $bars[round(($tick / $divide) * $countBars)];
    echo $out;
}

// si je n'ai aucun argument ..
if (count($argv) == 0) {
    $str = '';
    // recupère le flux d'entrée
    while (!feof(STDIN)) {
        $str .= fgets(STDIN);
    }
    // explode laisse la derniere ligne vide.
    // d'ou le array_filter
    spark(array_filter(explode("\n", $str),'strlen'));
    return 0;
}

$iDontCare =array_shift($argv);
spark($argv);
return 0;
</code></pre>

<p>Je vais découper cela en plusieurs fichiers et répertoires.</p>

<pre><code class="">.
├── bin
│   └── spark
├── composer.json
├── LICENSE
├── phpunit.xml.dist
├── src
│   └── Spark
│       └── Spark.php
└── tests
    ├── bootstrap.php
    └── Spark
        └── SparkTest.php
</code></pre>

<p>Voici <code>Spark.php</code></p>

<pre><code class="php">&lt;?php
namespace Spark;

class Spark
{

    private static $bars = array('▁','▂','▃','▄','▅','▆','▇','█');
    /**
     *
     */
    public static function spark($array)
    {
        $divide = max($array);

        if ($divide == 0) {
            $divide = 1;
        }
        $countTick = count(self::$bars)-1;
        $out = '';
        foreach ($array as $tick) {
            $out .= self::$bars[round(($tick / $divide) * $countTick)];
        }
        return $out;
    }
}
</code></pre>

<p>Et le fichier <code>spark</code> dans le répertoire <code>bin</code></p>

<pre><code class="php">#!/usr/bin/env php
&lt;?php

require_once __DIR__ . '/../vendor/autoload.php'; // Autoload files using Composer autoload

use Spark\Spark;

$iDontCare =array_shift($argv);
if (count($argv) == 0) {
    $str = '';
    while (!feof(STDIN)) {
        $str .= fgets(STDIN);
    }
    echo Spark::spark(array_filter(explode("\n", $str),'strlen'));
    return 0;
}
echo Spark::spark($argv);
return 0;
</code></pre>

<h2>Le Composer.json</h2>

<p><strong>Pour publier sur Packagist il faut un <code>composer.json</code></strong></p>

<p>C&#8217;est plutôt simple en fait. Il suffit de lancer la commande <code>composer init</code>. Tout se fait de manière interactive.</p>

<p>à la fin j&#8217;obtiens.</p>

<pre><code class="javascript">{
    "name": "mcamuzat/spark",
    "description": "histogram in command line. Clone of holman/spark",
    "require-dev": {
        "phpunit/phpunit": "~4.0",
        "squizlabs/php_codesniffer": "2.*"
    },
    "license": "MIT",
    "authors": [
        {
            "name": "Marc Camuzat",
            "email": "marc.camuzat@gmail.com"
        }
    ],
    "minimum-stability": "dev",
    "require": {},
    "autoload": {
        "psr-0": {
            "Spark": "src/"
        }
    },
    "config": {
        "bin-dir": "bin"
    },
    "bin": ["bin/spark"]
}
</code></pre>

<p>Je crée le Namespace et j&#8217;ajoute que j&#8217;ai un fichier à marquer comme exécutable de le répertoire <code>bin/spark</code>. Je n&#8217;ai aucune dépendance.</p>

<h2>Ajoutons les tests.</h2>

<p>Il faut un minimum de tests.</p>

<p>Pour avoir des tests il faut 3 fichiers</p>

<ul>
<li>Un <code>phpunit.xml.dist</code></li>
<li>Un <code>bootstrap.php</code> pour qui se borne à appeler l&#8217;autoload de composer</li>
<li>Enfin un fichier de test</li>
</ul>


<p>Et installer PHPUnit (qui est déjà dans mon <code>composer.json</code>)</p>

<p>Le <code>phpunit.xml.dist</code></p>

<pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;phpunit backupGlobals="false"
         backupStaticAttributes="false"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="false"
         syntaxCheck="false"
         bootstrap="tests/bootstrap.php"
&gt;
    &lt;testsuites&gt;
        &lt;testsuite name="Spark Test Suite"&gt;
            &lt;directory&gt;./tests/&lt;/directory&gt;
        &lt;/testsuite&gt;
    &lt;/testsuites&gt;

    &lt;filter&gt;
        &lt;whitelist&gt;
            &lt;directory&gt;./src/&lt;/directory&gt;
        &lt;/whitelist&gt;
    &lt;/filter&gt;
&lt;/phpunit&gt;
</code></pre>

<p>On appelle le <code>bootstrap.php</code> qui fait venir l&#8217;autoloader</p>

<pre><code class="php">&lt;?php
$loader = @include __DIR__.'/../vendor/autoload.php';
if (!$loader) {
    $loader = require __DIR__.'/../../../../vendor/autoload.php';
}
</code></pre>

<p>Et enfin les tests</p>

<pre><code class="php">&lt;?php
namespace Spark;
use Spark\Spark;
class SparkTest extends \PHPUnit_Framework_TestCase
{
    public function testItCreateAStringFromData()
    {
        $out = Spark::spark(array(1,5,22,13,5));
        $this-&gt;assertEquals('▁▃█▅▃', $out);
    }
    public function testItDontCareifInputIsString()
    {
        $out = Spark::spark(array("2","4","8"));
        $this-&gt;assertEquals('▃▅█', $out);
    }
    public function testItWorkWithFloatNumber()
    {
        $out = Spark::spark(array("0.2","0.8","0.4"));
        $this-&gt;assertEquals('▃█▅', $out);
    }
    public function testItNotDivideBy0()
    {
        $out = Spark::spark(array(0,0,0));
        $this-&gt;assertEquals('▁▁▁', $out);
    }
}
</code></pre>

<p>Lançons les tests</p>

<pre><code class="sh">$ bin/phpunit 
PHPUnit 4.8-ge1cc585 by Sebastian Bergmann and contributors.

....

Time: 722 ms, Memory: 4.50Mb

OK (4 tests, 4 assertions)
</code></pre>

<h2>Publication</h2>

<p>Je crée le dépôt sur <a href="https://github.com/mcamuzat/spark">GitHub</a> que je clone</p>

<pre><code>git clone mcamuzat/spark.git
git add .
git commit -m"initialize repo"
git push -u origin master
</code></pre>

<p>Je me suis inscris sur <a href="https://packagist.org/">Packagist</a>.</p>

<p>Il suffit de cliquer sur <strong>Submit</strong></p>

<p><img class="center" src="/images/packagist_ajout.png" width="600" height="258" title="&lsquo;Ajouter un dépôt sur Packagist&rsquo; &lsquo;Ajouter un dépôt sur packagist&rsquo;" ></p>

<p>Et de mettre l&#8217;url de Github. Et c&#8217;est tout !</p>

<h2>Des liens</h2>

<ul>
<li>Le projet sur <a href="https://github.com/mcamuzat/spark">Github</a></li>
<li>Le projet sur <a href="https://packagist.org/packages/mcamuzat/spark">Packagist</a></li>
</ul>


<h2>En conclusion</h2>

<p>Il manque encore le <code>README</code> sur Github, car pour l&#8217;instant l&#8217;intérêt du programme est encore un peu mystérieux pour une personne extérieure.</p>

<p>J&#8217;espère que si vous voulez créer votre propre librairie sur Packagist, ce tutoriel vous servira.</p>
]]></content>
  </entry>
  
</feed>
