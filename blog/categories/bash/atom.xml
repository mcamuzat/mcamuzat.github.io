<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bash | Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-04-29T23:06:16+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MapReduce Du Pauvre]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/03/16/mapreduce-du-pauvre/"/>
    <updated>2015-03-16T22:41:41+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/03/16/mapreduce-du-pauvre</id>
    <content type="html"><![CDATA[<h1>MapReduce du pauvre.</h1>

<h2>une commande linux</h2>

<pre><code class="bash">find -name '*.php' | xargs -p 4 grep "ma chaine de caractère" | wc -l
</code></pre>

<p>Cela ne se voit pas mais je viens de faire un map/reduce</p>

<ul>
<li>je prend tout les fichiers php</li>
<li>je lance un grep avec le résultat que je passe à travers le pipe.</li>
<li>puis je compte le nombre de résultats.</li>
</ul>


<pre><code>[filter] -&gt; [map] -&gt; [reduce]
</code></pre>

<p>ici l&#8217;astuce tient dans une astuces <code>xargs -p 4</code> qui ordonne à xargs d&#8217;utiliser 4 processeurs en parrallèle ! Donc qui me permet d&#8217;aller quatre fois plus vite. On comprend l&#8217;interet du map/reduce. Je peux <strong>dispatcher</strong> le travail sur plusieurs instances(ici processeurs). On retrouve ce fonctionnement dans beaucoup de logiciels actuels. L&#8217;avantage ici est que j&#8217;utilise linux et que je n&#8217;ai installé aucun programme et en multiprocesseur je fais pleinenement confiance au kernel de mon linux. Il existe aussi un programme <code>parallel</code> mais je ne m&#8217;en suis jamais servi.</p>

<h2>En php ?</h2>

<p>Il existe bien entendu les fonctions <code>array_map</code>, <code>array_filter</code>, <code>array_reduce</code> mais il ne sont pas spécialement plus rapide qu&#8217;une boucle foreach. Il existe un map pour les Collection de doctrine.</p>

<p>je vais montrer que l&#8217;on peux écrires toute les opérations possibles avec &lsquo;array_reduce&rsquo;.
&#8220;`
function mysum($array) {
    return array_reduce($array, function($acc, $item) {
        return $acc += $item;
    });
}
function mymult($array) {
    return array_reduce($array, function($acc, $item) {
        return $acc *= $item;
    },1);
}</p>

<p>function mymax($array) {
    return array_reduce($array, function($acc, $item) {
        return max($acc, $item);
    });
}// le min est un peu moins simple</p>

<p>function map($function, $array) {
    return array_reduce(
        $array,
        function ($acc, $input) use ($function) {
            $acc[] = $function($input);
            return $acc;
        });
}</p>

<p>function filter($function, $array) {
    return array_reduce(
        $array,
        function ($acc, $input) use ($function) {
            if ($function($input)) {
                $acc[] = $input;
            }
            return $acc;
        });
}</p>

<p>function mycount($array) {
    return array_reduce(
        $array,
        function ($acc, $input)  {
        return ++$acc;
},0);
}</p>

<p>$a = [1,2,3,4,5];
var_dump(mysum($a)); // 15
var_dump(mymult($a)); // 120
var_dump(mymax($a)); // 5
var_dump(mycount($a)); // 5
var_dump(map(function($input) { return 2 * $input;}, $a)); // [2,4,6,8,10]
var_dump(filter(function($input) { return ($input > 4); }, $a)); // [6]</p>

<p>&#8220;`
Map et Reduce sont des fonctions un peu particulières, elle prenent comme argument des fonctions. On parle de fonctions d&#8217;ordre supérieure, parfois de functor (mais çà c&#8217;est une autre histoire ..)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quelques Commandes Vim/Bash]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/03/02/quelques-commandes-vim-slash-bash/"/>
    <updated>2015-03-02T21:24:52+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/03/02/quelques-commandes-vim-slash-bash</id>
    <content type="html"><![CDATA[<h1>Quelques commandes utiles</h1>

<p>Quelques commandes utiles que j&#8217;utilise souvent</p>

<h2>Quand je ne suis pas sudo</h2>

<pre><code class="bash">$ apt-get install npm
E: Could not open lock file /var/lib/dpkg/lock - open (13: Permission denied)
E: Unable to lock the administration directory (/var/lib/dpkg/), are you root?
$ sudo !!
</code></pre>

<p><code>!!</code> est la dernière commande exécutée</p>

<h3>Une variante</h3>

<pre><code class="bash">mkdir log/
cd !$ 
</code></pre>

<p><code>!$</code> est la dernière commande sans le premier argument ici <code>log/</code></p>

<h2>Vi/Vim</h2>

<p>Bon il y a beaucoup de commandes relativement sympa et complexes mais je donne celle que tout le monde demande</p>

<p>Enregistrer un fichier en lecture seule
<code>
:w !sudo tee %
</code></p>

<p>Dite oui pour recharger la page. Et dite oui si vous voulez quitter la page sans enregistrer.</p>

<p>D&#8217;ailleurs si vous utilisez tout le temps <code>:wq</code> vous pouvez essayer</p>

<ul>
<li><code>:w</code> enregistre sans quitter</li>
<li><code>:q</code> quitte mais avec warning si vous n&#8217;avez pas sauvegarder</li>
<li><code>:q!</code> quitte sans warning et sans sauver</li>
<li><code>:x</code> raccourci de <code>:wq</code>. Il existe aussi le raccourci clavier <code>ZZ</code> comme pour aller dormir. quitte et enregistre.</li>
<li><code>:e fichier.txt</code> ouvre le fichier (l&#8217;auto complétion avec tab fonctionne..)</li>
<li><code>:tabe fichier.txt</code> ouvre dans un nouvel onglet (vim seulement). on peux se ballader d&#8217;onglet en onglet avec les touches <code>gt</code> et <code>gT</code> <code>g</code> est le diminutif de <em>go</em> et <code>t</code> pour <em>tab</em>. ou avec <code>ctrl+&lt;pageUp&gt;</code> et <code>ctrl+&lt;pageDown&gt;</code> ou encore tout simplement cliquer avec la souris (astuce suivante)</li>
</ul>


<h3>Active la souris</h3>

<pre><code class="">set mouse=a
</code></pre>

<p>une astuce est d&#8217;ajouter un .vimrc et d&#8217;ajouter cette ligne dans ce fichier de config.</p>

<h3>le <code>vimrc</code></h3>

<p>Vous en avez besoin !! Il existe deux versions de vi: <code>vi</code> et <code>vim</code> vim démarre par défaut en mode vi compatible (ce qui n&#8217;est plus tout à fait vrai).Certaines fonctionnalités sont coupées. Dont les flèches de directions (et ca vous <em>voulez</em>les flèches haut, bas, gauche, droite) et surtout le annuler (<code>u</code> come <em>u</em>ndo) illimité (il est parfois limité à 1). Quel rapport avec le <code>vimrc</code> ? L&#8217;existence du fichier fera que votre vi démarre en mode non compatible. donc vous aurez les touches et le undo.</p>

<h2>l&#8217;auto-complétion sous vim</h2>

<p>Il existe une dizaine d&#8217;auto complétion sous vim. Certainement pas aussi puissantes que IDE mais cela rend service.</p>

<p>En mode insertion <code>ctrl+p</code> auto complétion en cherchant dans les fichiers ouverts. Cela résout 50 % des auto complétions.</p>

<p>l&#8217;auto-complétion est activé via la touche <code>ctrl+x</code> +<code>crtl+lettre</code> avec :</p>

<ul>
<li><code>ctrl+x</code> <code>ctrl+f</code> <code>f</code> pour <code>file</code> auto complétion suivant le fichier (marche nickel pour les hosts apache !)</li>
<li><code>ctrl+x</code> <code>ctrl+l</code> <code>l</code> pour <code>line</code> auto complétion sur la ligne entière</li>
<li><code>ctrl+x</code> <code>ctrl+p</code> c&#8217;est pareil que ctrl+p</li>
<li><code>ctrl+x</code> <code>ctrl+o</code> <code>o</code> pour <code>omni-completion</code> auto complete php/python/bash suivant le fichier que vous éditez. (cela comprend les mots clés et peux vous donner la syntaxe)</li>
</ul>


<p>Je montrerai dans un prochain post comment faire pareil qu&#8217;un IDE avec les fonctions. Ou se balader dans les classes et/ou auto compléter le code. Ce n&#8217;est pas encore le niveau des IDEs mais c&#8217;est souvent une fonctionnalité méconnue (pourtant c&#8217;est dans vi depuis des années)</p>
]]></content>
  </entry>
  
</feed>
