<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithme | Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/algorithme/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-10-04T22:56:53+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les Stacks Des Structures Méconnues]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/29/stacks-structures-meconnues/"/>
    <updated>2015-08-29T16:34:41+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/29/stacks-structures-meconnues</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Je vais parler de <code>SplStack</code> une structure de donnée qui fait partie de La SPL (pour <strong>S</strong>tandart <strong>P</strong>HP <strong>L</strong>ibrairie). Nous allons voir trois façons de nous servir de cette structure.</p>

<h2>Les Stacks ou Piles</h2>

<p>La pile n&#8217;a que deux opérations.</p>

<ul>
<li>Empiler ou Push On ajoute une donnée sur le haut de la pile.</li>
<li>Dépiler ou Pop On retire une donnée du haut de la pile.</li>
</ul>


<p>Il n&#8217;y a que le haut de la pile qui est visible. La pile est une mémoire LIFO (<strong>L</strong>ast <strong>I</strong>n <strong>F</strong>irst <strong>O</strong>ut).</p>

<p>Quelques exemples.</p>

<pre><code class="php">$pile = new SplStack(); // la pile est vide []
$pile-&gt;push(34) // [34]
$pile-&gt;push(45) // [34, 45]
$value = $pile-&gt;pop() // [34]
$pile-&gt;push('a') // [34, 'a']
$value = $pile-&gt;top() // $value = 'a' pile [34, 'a']
</code></pre>

<p>On peux utiliser les array comme des piles avec <code>array_pop</code> et <code>array_push</code>. Mais depuis PHP 5.0 il existe une Classe tout faite <code>SplStack</code></p>

<h2>Premiere application la machine à pile</h2>

<p>Il faut d&#8217;abord que je vous parle de la notation polonaise inverse. (RPN en anglais pour <strong>R</strong>everse <strong>P</strong>olish <strong>N</strong>otation).
<code>1 + 3</code> devient <code>1 3 +</code>. Pour faire simple je mets l&#8217;opérateur à la fin.</p>

<p>des exemples un peu plus complexe.</p>

<p> <code>1 + 2 * 3</code> devient <code>2 3 * 1 +</code> et <code>( 1 + 3 ) * ( 3 - 4 )</code> devient <code>1 3 + 3 4 - *</code></p>

<p>C&#8217;est un peu compliqué comme notation (en tout cas pas naturelle) mais nous allons voir que l&#8217;algorithme pour le calcul est très simple.</p>

<p>Voici l&#8217;algorithme :</p>

<ul>
<li>Si l&#8217;entrée est un entier : je l&#8217;empile</li>
<li>Si c&#8217;est une opération : je dépile deux valeurs, je fais l&#8217;opération et j&#8217;empile le résultat</li>
</ul>


<p>Un exemple</p>

<pre><code class="">soit 1 3 + 3 4 - * 
# je prend la premiere valeur "1" c'est un chiffre je l'empile
ma pile [ *1* ] 
# je prend la seconde valeur "3" c'est un chiffre je l'empile
ma pile [ 1 *3* ]
# je prend la valeurs 3 c'est une operation "+", je depile deux valeurs d'abords "3" puis "1". je fais l'addition. "4" que j'empile
ma pile [ *4* ]
# je prend la quatrieme valeur "3" c'est un chiffre j'empile
ma pile [ 4 *3* ]
# la cinquieme valeurs est un chiffre
ma pile [ 4 3 *4*]
# la sixieme valeur est une opération. je dépile deux valeurs "4" et "3" que je soustrait et je rempile
ma pile [ 4 *-1*]
# la septième valeur est une opération je dépile "-1" et "4" que je multiplie
ma pile ["-4"]
</code></pre>

<p>L&#8217;avantage de la notation est qu&#8217;elle n&#8217;a pas besoin de parenthèse. Il n&#8217;y pas d&#8217;ambigüité <code>( 1 + 3 ) * ( 3 - 4 )</code> est différent de  <code>1 + 3 * 3 - 4</code>.</p>

<p>L&#8217;implémentation est simple</p>

<pre><code class="php">function execute(array $ops)
{
    $stack = new \SplStack();

    foreach ($ops as $op) {
        if (is_numeric($op)) {
            $stack-&gt;push((int) $op);
            continue;
        }

        switch ($op) {
            case '+':
                $stack-&gt;push($stack-&gt;pop() + $stack-&gt;pop());
                break;
            case '-':
                $n = $stack-&gt;pop();
                $stack-&gt;push($stack-&gt;pop() - $n);
                break;
            case '*':
                $stack-&gt;push($stack-&gt;pop() * $stack-&gt;pop());
                break;
            case '/':
                $n = $stack-&gt;pop();
                $stack-&gt;push($stack-&gt;pop() / $n);
                break;
            default:
                throw new \InvalidArgumentException(sprintf('Invalid operation: %s', $op));
                break;
        }
    }

    return $stack-&gt;top();
}
</code></pre>

<p>essayons notre exemple.</p>

<pre><code class="php">var_dump(execute(explode(' ', '1 3 + 3 4 - *');
int(-4)
</code></pre>

<p>Félicitation nous venons d&#8217;implémenter notre première machine à pile. La plus célèbre est la <code>Java Virtual Machine</code>. Il existe aussi des langages qui sont basé sur la notion de pile, le plus célèbre est le <a href="https://fr.wikipedia.org/wiki/Forth_%28langage%29">Forth</a> et le <a href="https://fr.wikipedia.org/wiki/PostScript">Postscript</a>(si si le format de adobe). L&#8217;avantage des machines à pile est qu&#8217;elle n&#8217;utilise aucun autre registre que la pile.</p>

<h2>Le Shunting-yard de Dijkstra</h2>

<p>Je présente une version simplifié. <em>Shunting-yard</em> peut se traduire en <strong>Aiguillage</strong>. Il permet d&#8217;évaluer une expression mathématique.</p>

<p>Soit la chaîne suivante:</p>

<pre><code class="php">var_dump($calculate(explode(' ', '( ( 1 + 3 ) * ( 3 - 4 ) )')));

# int(-4)
</code></pre>

<ul>
<li>Il y a des parenthèses partout</li>
<li>L&#8217;arité des fonction est 2:  l&#8217;arité est le nombre d&#8217;argument par exemple 1 + 2 est d&#8217;arité 2 deux arguments. L&#8217;algorithme que je présente est incapable de faire <code>1 + 2 + 3</code> mais fera très bien <code>(1 + ( 2 + 3 ))</code>.</li>
</ul>


<p>Voici l&#8217;algorithme:</p>

<ul>
<li>Si parenthèse ouvrante:  je passe</li>
<li>Si c&#8217;est une opération <code>+</code>, <code>-</code>, <code>/</code>, <code>*</code>:  Je stocke dans une pile l&#8217;opération.</li>
<li>Si c&#8217;est un chiffre : je stocke dans une pile de valeurs</li>
<li>Si c&#8217;est une parenthèse fermante: Je dépile une opération et je dépile deux arguments. Je fais l&#8217;opération avec mes deux arguments et je remets le résultats dans ma pile.</li>
</ul>


<p>Voici le code</p>

<pre><code>function calculate(array $input)
{
    $operators = new SplStack();
    $values = new SplStack();

    foreach ($input as $token) {
        switch ($token) {
        case "(":
            break;
        case "+":
        case "-":
        case "*":
        case "/":
            $operators-&gt;push($token);
            break;
        case ")":
            $op = $operators-&gt;pop();
            $value = $values-&gt;pop();
            switch ($op) {
            case "+":
                $value = $values-&gt;pop() + $value;
                break;
            case "-":
                $value = $values-&gt;pop() - $value;
                break;
            case "*":
                $value = $values-&gt;pop() * $value;
                break;
            case "/":
                $value = $values-&gt;pop() / $value;
                break;
            }
            $values-&gt;push($value);
            break;
        default:
            $values-&gt;push($token);

        }

    }
    return $values-&gt;top();
}
</code></pre>

<p>On utilise deux piles. Une pour les opérations, Une pour les valeurs
je propose de faire le même exemple que plus haut
je vais représenter les deux piles et l&#8217;entrée actuelle</p>

<pre><code>operators :  [] values:  []  expression : ( ( 1 + 3 ) * ( 3 - 4 ) )

# '(' on ignore

operators [] values []  expression : ( 1 + 3 ) * ( 3 - 4 ) )

# '(' on ignore
operators [] values []  expression: 1 + 3 ) * ( 3 - 4 ) )

# '1' on ajoute dans values
operators [] values [*1*] expression:  + 3 ) * ( 3 - 4 ) )

# '+' on ajoute dans opérator
operators [*+*] values [1] expression: 3 ) * ( 3 - 4 ) )

# '3' on ajoute dans value
operators [*+*] values [1, *3*] expression: ) * ( 3 - 4 ) )

# ')' on dépile deux valeur de value et on depile une valeurs de l'operators et on empile le résultats dans values
operators [] values [4] expression:  * ( 3 - 4 ) )`

# '*' on ajoute dans opérator 
operators [*] values [4] expression:  ( 3 - 4 ) )

# '(' on ignore
operators [*] values [4] expression:  3 - 4 ) )

# '3' on ajoute dans values 
operators [*] values [4 *3*] expression:  - 4 ) )

# '-' on ajoute dans operators
operators [*, *-*] values [4 3] expression:  4 ) )

# '4' on ajoute dans values 
operators [*, ] values [4 3 4] expression:  ) )

# ')' on dépile deux valeur de value et on depile une valeur de operators et on empile le résultat dans values
operators [*] values [4 -1] expression:  )

# ')' on dépile deux valeur de values et on depile une valeur de operators et on empile le résultat dans values
operators [] values [-4] expression: 
</code></pre>

<p>On se rend compte que cette algorithme très simple permet de calculer toutes les expressions que l&#8217;on passe du moment qu&#8217;elles sont bien formées.</p>

<pre><code class="php">$expression = "( ( 1 + 3 ) * ( 3 - 4 ) )"
var_dump(calculate(explode(" ", $expression)));
</code></pre>

<p>Félicitation vous venez d&#8217;écrire votre premier interpréteur.</p>

<p>la version originale prend en compte la priorité des opérations (cela rend certaines parenthèses inutiles) c&#8217;est un peu plus complexe, mais pas tant que cela.</p>

<h2>Exemple 3 conversion vers RPN</h2>

<p>Nous allons utiliser notre pile pour traduire notre expression vers la RPN.</p>

<p>C&#8217;est à dire  <code>( ( 1 + 3 ) * ( 3 - 4 ) )</code> -> <code>1 3 + 3 4 - *</code></p>

<p>Voici l&#8217;algorithme.</p>

<ul>
<li>Si l&#8217;entrée est un parenthèse ouvrante :  je passe</li>
<li>Si c&#8217;est une opération : je stocke cela dans une pile</li>
<li>Si c&#8217;est un entier : Je pousse cela dans une file d&#8217;attente</li>
<li>Si c&#8217;est une parenthèse fermante : je vide la pile dans la file d&#8217;attente.</li>
</ul>


<pre><code>function transformate(array $input)
{
    $stack = new SplStack();
    $output = new SplQueue();

    foreach ($input as $token) {
        switch ($token) {
        case "(":
            break;
        case "+":
        case "-":
        case "*":
        case "/":
            $stack-&gt;push($token);
            break;
        case ")":
            while(count($stack)&gt; 0 &amp;&amp; $stack-&gt;top()) {
                $output-&gt;enqueue($stack-&gt;pop());
            }
            break;
        default:
            $output-&gt;enqueue($token);
        }
    }
    return iterator_to_array($output);
}
</code></pre>

<p>regardons avec le même exemple</p>

<pre><code>stack :  [] output:  []  expression : ( ( 1 + 3 ) * ( 3 - 4 ) )

# '(' on ignore

stack : [] output: []  expression : ( 1 + 3 ) * ( 3 - 4 ) )

# '(' on ignore
stack :  [] output []  expression: 1 + 3 ) * ( 3 - 4 ) )

# '1' on ajoute dans output
stack: [] output [1] expression:  + 3 ) * ( 3 - 4 ) )

# '+' on ajoute dans la stack
stack: [*+*] output [1] expression: 3 ) * ( 3 - 4 ) )

# '3' on ajoute dans output
stack: [*+*] output [1, *3*] expression: ) * ( 3 - 4 ) )

# ')' on vide stack dans outputs
stack: [] output [ 1, 3, *+*] expression:  * ( 3 - 4 ) )`

# '*' on ajoute dans la stack
stack: [*] output [1 , 3 , +] expression:  ( 3 - 4 ) )

# '(' on ignore
stack: [*] output [1, 3, +] expression:  3 - 4 ) )

# '3' on ajoute dans output.
stack: [*] output [1, 3, +, *3*] expression:  - 4 ) )

# '-' on ajoute dans la stack
stack: [*, *-*] output [1, 3, +, 3] expression:  4 ) )

# '4' on ajoute dans output.
stack: [*,-] output [1, 3, +, 3, *4*] expression:  ) )

# ')' on depile la stack dans output, on dépile d'abords - puis *
stack: [] output [1, 3, +, 3, 4, -, *] expression:  )

# ')' on re depile la stack mais ici elle est déja vide. 
</code></pre>

<p>Il suffit de transformer en array <code>$output</code> pour avoir le résultats suivants
<code>( ( 1 + 3 ) * ( 3 - 4 ) )</code> -> <code>1 3 + 3 4 - *</code></p>

<h2>Tous ensemble.</h2>

<p>Je ne resiste pas au plaisir d&#8217;utiliser l&#8217;instruction tabou du php <code>eval()</code></p>

<blockquote><p>If eval() is the answer, you&rsquo;re almost certainly asking the wrong question. &ndash; Rasmus Lerdorf, BDFL of PHP</p></blockquote>

<pre><code>$operation = "( ( 1 + 3 ) * ( 3 - 4 ) )";
$input = explode(" ", $operation);
var_dump(calculate($input));
var_dump(execute(transformate($input)));
var_dump($value = eval("return ($operation);"));
</code></pre>

<p>Nous avons sans surprise le même résultat
<code>
int(-4)
int(-4)
int(-4)
</code></p>

<h2>En conclusion</h2>

<ul>
<li>Nous avons créé une <em>VM</em> Notre machine à pile.</li>
<li>Nous avons crée un <em>interpréteur</em>:  notre algorithme de shunting-yard</li>
<li>Nous avons fait un traducteur de notre expression vers notre machine à pile. C&#8217;est un <em>compilateur</em>.</li>
<li>La notion de pile existe partout, on parle de pile d&#8217;appel (<em>stack-frame</em>), de dépassement de la pile (<em>stack overflow</em>), <code>git stash</code> est aussi un stockage en pile.</li>
</ul>


<h2>Des références.</h2>

<ul>
<li>L&#8217;algorithme simplifie viens du livre <a href="http://www.amazon.fr/dp/032157351X">Algorithms</a> de Sedgewick (j&#8217;ai traduis du Java vers Php)</li>
<li>L&#8217;exemple le plus complet sur les stacks-machine est <a href="https://igor.io/archive.html">Igor.io</a> la série est superbe, l&#8217;auteur explique vraiment bien.</li>
<li>L&#8217;article de wikipedia sur le <a href="https://en.wikipedia.org/wiki/Shunting-yard_algorithm">shunting-yard</a> Les illustrations montrent bien la notion d&#8217;aiguillage.</li>
<li><a href="https://fr.wikipedia.org/wiki/Edsger_Dijkstra">Edsger W. Dijkstra</a> est surtout connus pour son algorithme sur le plus court chemin. Mais c&#8217;est une légende de l&#8217;informatique. A voir si vous ne connaissez pas.</li>
</ul>

]]></content>
  </entry>
  
</feed>
