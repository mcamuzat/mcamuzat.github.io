<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Arduino | Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/arduino/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-08-15T23:07:17+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Processing Et Souvenir]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/17/processing-et-souvenir/"/>
    <updated>2015-07-17T22:52:27+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/17/processing-et-souvenir</id>
    <content type="html"><![CDATA[<p>{% img center /images/voiture.png 499 300 &lsquo;Vrooum!!&rsquo; &lsquo;Screenshot du programme avec le micro&rsquo; %}</p>

<p>Aujourd&#8217;hui, je ressors un vieux code que j&#8217;avais écris pour le CNAM. Le sujet était faire que l&#8217;image à l&#8217;écran bouge quand on parle dans un microphone. Mais pas d&#8217;animation à la Winamp (j&#8217;ai des vieilles références :-) ou le player de Windows. J&#8217;avais donc programmé une voiture sur un circuit, pour le réalisme j&#8217;avais connecté un Wii-chuck via un Arduino pour faire le volant. Imaginez une personne avec un Wiichuk et un micro en train de faire &ldquo;Vrrrooum&rdquo; et vous aurez un idée de ma soutenance (qui s&#8217;est bien passée d&#8217;ailleurs).</p>

<p>Les conditions étaient :</p>

<ul>
<li>Utiliser un Micro</li>
<li>La langage imposé est Processing</li>
</ul>


<h2>Processing Késako</h2>

<p>Processing est une variante de Java en plus simple. C&#8217;est un langage destiné à faire des oeuvres d&#8217;arts numériques. Il est souvent enseigné en école d&#8217;art. Il vient avec son propre éditeur. à noter que les <a href="https://fr.wikipedia.org/wiki/Arduino">Arduinos</a> se programment aussi en processing.</p>

<p>{% img center /images/processing.png 499 533 &lsquo;Processing&rsquo; &lsquo;Screenshot de processing avec son interface&rsquo; %}</p>

<p>Il suffit d&#8217;implémenter deux méthodes :</p>

<pre><code>void setup() // sera appelé à l'initialisation
void draw() // sera appellé 30 à 50 fois par seconde
</code></pre>

<p>Un exemple très simple
&#8220;` java
void setup() {
  size(640, 360); //j&#8217;initialise la taille 640*
  stroke(255); // le trait est blanc
  fill(255); // remplissage de blanc
  background(0); // couleur de fond blanche</p>

<p>}</p>

<p>void draw() {
  // si la souris est appuyer
  if (mousePressed) {
     // ellipse x, y ,hauteur, largeur
    ellipse(mouseX, mouseY, 5, 5);
  }
}
&#8220;`</p>

<p>Appuyez sur la touche play</p>

<p>{% img center /images/processing_exemple.png 535 375 &lsquo;Processing&rsquo; &lsquo;le résultat&rsquo; %}</p>

<p>Je viens de faire un petit painbrush. C&#8217;est assez facile d&#8217;obtenir un truc plutôt joli avec assez peu de lignes de code. Il y a des librairies toutes prêtes pour la video, webcam.</p>

<p>Il y a de nombreux livres donc le <a href="http://www.amazon.com/Visualizing-Data-Explaining-Processing-Environment/dp/0596514557">Visualizing Data</a>. Pour 2007, le livre est impressionnant. On parle de traitement de donnée et acquisitions des données bien avant la mode du Big data.</p>

<h1>Installez Processing</h1>

<p>Nous allons d&#8217;abord installer Java si vous n&#8217;avez pas. J&#8217;installe le paquet officiel
<code>
sudo apt-get purge openjdk*    // Supprime opendjdk
sudo apt-get install software-properties-common   //ajout de librairie
sudo add-apt-repository ppa:webupd8team/java // ajout du depot
sudo apt-get update                 // et on met à jour les videos
sudo apt-get install oracle-java7-installer // On installe
sudo apt-get install oracle-java7-set-default // et on mets par défaut
</code></p>

<p>Puis nous allons installer Processing
On télécharge le binaire à l&#8217;<a href="https://processing.org/download/?processing">adresse officielle</a></p>

<p>Puis on décompresse
<code>
tar xf processing-*.tgz
sudo mkdir /usr/share/processing
sudo mv processing-* /usr/share/processing
</code>
Il n&#8217;y a plus qu&#8217;à lancer processing
<code>
sh /usr/share/processing/processing-2.2.1/processing
</code>
Vous devriez voir apparaitre l&#8217;interface</p>

<p>Faire marcher mon code:</p>

<ul>
<li>Il faut utiliser la librairie Ess pour analyser le signal (marrant c&#8217;était déja vieux à l&#8217;époque)</li>
<li>Aller sur le site <a href="http://www.tree-axis.com/Ess">suivant</a>.</li>
<li>Décompressez et copier le répertoire ESS dans /usr/share/processing/processing-2.2.1/modes/java/libraries/</li>
</ul>


<h2>Le code</h2>

<p>Il est disponible <a href="https://github.com/mcamuzat/processing-car">ici</a> sous Github. J&#8217;ai commenté la partie avec le Numchuck+Arduino (car peux de gens ont le matériel). A l&#8217;époque impossible de faire marcher la connection USB/Wiichuck sous Linux, j&#8217;ai passé la soutenance sous un vieux PC sous windows XP. Tout est mis dans le même fichier car j&#8217;avais pas trouver comment découper un projet. C&#8217;est d&#8217;ailleurs ce que je reproche un peu à Processing, c&#8217;est un langage simple pour débuter, mais faire un MVC ou un programme très complexe. Il faut quasiment tout refaire à la main.</p>

<h2>Quelques liens</h2>

<ul>
<li>le <a href="https://processing.org/">site officiel</a></li>
<li>Des <a href="http://www.openprocessing.org/">galeries interactives</a></li>
<li><a href="http://processingjs.org/">ProcessingJs</a> (fait par le programmeur de JQuery Jon Resig)</li>
</ul>

]]></content>
  </entry>
  
</feed>
