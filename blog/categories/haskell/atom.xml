<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: haskell | Journal d'un panda qui code]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/haskell/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-11-11T23:10:49+01:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les Monades en PHP c'est possible..]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/"/>
    <updated>2015-11-11T19:28:39+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Nous allons voir ensemble les monades. Nous allons voir la monade <strong>Identity</strong>. elle n&#8217;est pas très utile mais nécessaire si vous voulez comprendre la monade <strong>Maybe</strong> qui j&#8217;espère va changer votre facon de voir votre code mais ce sera dans le post suivant.</p>

<p>Les monades sont des structures de la programmation fonctionnelle. Très utilisé dans le language <a href="https://www.haskell.org/">Haskell</a>. En pratique Haskell serait quasi inutilisable sans cette structure.</p>

<!--more-->


<p>Je ne sais pas trop les définir puisque il existe un nombre incalculable de définitions</p>

<ul>
<li>C&#8217;est un triplet d&#8217;après <a href="https://fr.wikipedia.org/wiki/Monade_%28informatique%29">wikipédia en français</a></li>
<li>Une Interface, de l&#8217;injection de dépendances, Structure, Une base spatiale, Un <a href="https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/">burrito</a></li>
<li>Des catégories</li>
</ul>


<p>Il existe une infinité de tutoriels dessus (Le site officiel de Haskell à un compteur <a href="https://wiki.haskell.org/Monad_tutorials_timeline">plutôt amusant</a> pour quantifier l&#8217;avalanche de tuto), écris par les plus grands Douglas Crowford <a href="https://www.youtube.com/watch?v=b0EF0VTs9Dc">Youtube</a> (La référence du Javascript). Donc probablement que mon explication ne sera pas forcément la meilleure.</p>

<p>Pour comprendre les monades je vais vous parler de container (Rien à voir avec <a href="https://www.docker.com/">docker</a>, ni container de <a href="https://symfony.com/">Symfony</a>).</p>

<h2>des valeurs sympas et pas sympa.</h2>

<p>J&#8217;ai des valeurs sympas, et des valeurs <strong>pas sympas</strong>.</p>

<p><img class="center" src="/images/sympa-passympa.png" width="600" height="233" title="&lsquo;des valeurs sympas et pas sympas&rsquo; &lsquo;des valeurs sympas et pas sympas&rsquo;" ></p>

<p>Par <strong>pas sympa</strong>, j&#8217;entends toute les valeurs que je ne maitrise pas trop
par exemple</p>

<ul>
<li>la variable n&#8217;est pas instanciée le fabuleux <code>Null</code></li>
<li>le résultat n&#8217;est pas forcément le même. je lance la fonction deux fois, je n&#8217;ai pas le même résultat.</li>
<li>le résultat dépend d&#8217;autre chose, par exemple la lecture d&#8217;un fichier (le réseau est coupé, le disque dur est plein, etc ..) et peux entrainer des erreurs et des exceptions.</li>
<li>le résultat n&#8217;a pas forcement la même taille. je pense à un résultat de base de donnée, je peux avoir 0 lignes commes des milliards.</li>
<li>enfin le résultat utilise des ressources qui sont partagés avec d&#8217;autre programme.</li>
</ul>


<h2>La solution le container</h2>

<p>La solution :</p>

<blockquote><blockquote><p>utiliser un container ou un emballage</p></blockquote></blockquote>

<p><img class="center" src="/images/valeurdanscontainer.png" width="600" height="450" title="&lsquo;Ma valeur dans un container&rsquo; &lsquo;Ma valeur dans un container&rsquo;" ></p>

<p>L&#8217;idée est simple, je mets en <strong>quarantaine</strong> ma valeur.</p>

<p>Ainsi je suis protégé des effets néfastes.</p>

<p><img class="center" src="/images/valeurquicasse.png" width="600" height="450" title="&lsquo;Si problème..&rsquo; &lsquo;Si problème..&rsquo;" ></p>

<p>Voici le début de l&#8217;implémentation</p>

<pre><code class="php">class Container {

   /**
     * @var mixed
     */
    protected $value;

    public function __construct($value)
    {
        $this-&gt;value = $value;
    }

    public static function of($value)
    {
        return new static($value);
    }
}
</code></pre>

<p>J&#8217;ai deux méthodes:  un constructeur, et une factory statique.
deux possibilités</p>

<pre><code class="php">$valueNotSecure = "Je ne suis pas sympa";
var_dump(new Container($valueNotSecure));
var_dump(Container::of($valueNotSecure));
</code></pre>

<pre><code class="php">class Container#1 (1) {
  protected $value =&gt;
  string(20) "Je ne suis pas sympa"
}
class Container#1 (1) {
  protected $value =&gt;
  string(20) "Je ne suis pas sympa"
}
</code></pre>

<p>Ma valeur est dans un container, la propriété est <code>protected</code>. Donc impossible à atteindre de l&#8217;extérieur, à priori on ne craint pas grand chose..</p>

<p>Mais voila mon container aussi sécure qu&#8217;il soit ne sert à rien. Puisque rien ne sort, mais rien de rentre..</p>

<h2>Un Sas de décontamination.</h2>

<p>Je vais ajouter un sas de décontamination à ma structure via l&#8217;instruction <code>map</code> qui prend une fonction. Il applique la fonction à la valeur à l&#8217;intérieur. Il a une petite particularité. Il ne donne pas le résultat mais un nouveau container qui contient le résultat.</p>

<p><img class="center" src="/images/containeravecsas.png" width="600" height="450" title="&lsquo;J'ajoute un sas&rsquo; &lsquo;J'ajoute un sas&rsquo;" ></p>

<p>Soit la fonction suivante qui ajoute 1 à la valeur en entrée.</p>

<pre><code>function addOne($value) {
    return $value + 1;
}
</code></pre>

<p>Regardons le dessin suivant:</p>

<p><img class="center" src="/images/containeravecsasexemple.png" width="600" height="450" title="&lsquo;Je place la fonction +1 dans le sas&rsquo; &lsquo;Je place la fonction +1 dans le sas&rsquo;" ></p>

<ul>
<li>je crée un container qui contient la valeur &ldquo;5&rdquo;.</li>
<li>je mets la fonction addmap dans le <code>map</code>. je fais le calcul. que je m&#8217;empresse de remettre dans un container tout neuf.</li>
<li>j&#8217;ai un Container avec &ldquo;6&rdquo;.</li>
</ul>


<p><img class="center" src="/images/containertoutneuf.png" width="600" height="450" title="&lsquo;J'ajoute un sas&rsquo; &lsquo;J'ajoute un sas&rsquo;" ></p>

<p>Voici l&#8217;implémentation de <code>map</code> dans ma classe container.</p>

<pre><code class="php ">    public function map($function)
    {
        // call_user_func =&gt; $function($this-&gt;value)
        return static::of(call_user_func($function,$this-&gt;value));
    }
</code></pre>

<p>Et le code d&#8217;exemple.</p>

<pre><code class="php">$output = Container::of(5)
    -&gt;map("addOne")
var_dump($output);
</code></pre>

<p>Et le résultat
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Container</span><span class="c1">#2 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">int</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Quelques</span> <span class="nx">remarques</span>
</span><span class='line'>
</span><span class='line'> <span class="o">*</span> <span class="nx">Comme</span> <span class="nx">le</span> <span class="nx">résultat</span> <span class="nx">n</span><span class="s1">&#39;est pas sure, Je remet le résultat dans un nouveau container. Je ne réutilise plus l&#39;</span><span class="nx">ancien</span> <span class="nx">container</span> <span class="p">(</span><span class="nx">puisque</span> <span class="nx">contaminé</span><span class="p">)</span><span class="o">.</span> <span class="nx">Comme</span> <span class="nx">on</span> <span class="nx">ne</span> <span class="nx">peux</span> <span class="nx">changer</span> <span class="nx">le</span> <span class="nx">contenu</span><span class="p">,</span> <span class="nx">il</span> <span class="nx">est</span> <span class="o">**</span><span class="nx">immutable</span><span class="o">**</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="nx">img</span> <span class="nx">center</span> <span class="o">/</span><span class="nx">images</span><span class="o">/</span><span class="nx">containertoutneuf</span><span class="o">.</span><span class="nx">png</span> <span class="mi">600</span> <span class="mi">450</span> <span class="s1">&#39;des valeurs sympas et pas sympas&#39;</span> <span class="s1">&#39;des valeurs sympas et pas sympas&#39;</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="o">*</span> <span class="nx">Le</span> <span class="nx">container</span> <span class="nx">avec</span> <span class="nx">l</span><span class="s1">&#39;instruction `map` par définition **Chainable**.</span>
</span><span class='line'>
</span><span class='line'><span class="s1"><img class="center /images/chainagecontainer.png 600 450 &#39;</span><span class=nx>J</span><span class=s1>&#39;ajoute un sas&#39;</span> <span class=s1>&#39;J&#39;</span><span class=nx>ajoute</span> <span class=nx>un</span> <span" src="class="nx">sas</span><span" title="class=&#34;s1&#34;>&#39;" alt="class=&#34;s1&#34;>&#39;"></span>
</span><span class='line'><span class="s1">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;$output = Container::of(5)</span>
</span><span class='line'><span class="s1">    -&gt;map(&amp;ldquo;addOne&amp;rdquo;)</span>
</span><span class='line'><span class="s1">    -&gt;map(&amp;ldquo;addOne&amp;rdquo;)</span>
</span><span class='line'><span class="s1">    -&gt;map(&amp;ldquo;addOne&amp;rdquo;)</span>
</span><span class='line'><span class="s1">    -&gt;map(&amp;ldquo;addOne&amp;rdquo;)</span>
</span><span class='line'><span class="s1">var_dump($output);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;//class Container#3 (1) {</span>
</span><span class='line'><span class="s1">//  protected $value =&gt;</span>
</span><span class='line'><span class="s1">//  int(9)</span>
</span><span class='line'><span class="s1">//}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code&gt;</span>
</span><span class='line'><span class="s1">Bien sur il est parfaitement possible d&#39;</span><span class="nx">utiliser</span> <span class="nx">des</span> <span class="nx">callbacks</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$output</span> <span class="o">=</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">addOne</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$value</span> <span class="o">*</span> <span class="mi">4</span><span class="p">;});</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;//</span><span class="k">class</span> <span class="nc">Container</span><span class="c1">#3 (1) {</span>
</span><span class='line'><span class="c1">//  protected $value =&gt;</span>
</span><span class='line'><span class="c1">//  int(24)</span>
</span><span class='line'><span class="c1">//}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">Donc</span> <span class="nx">j</span><span class="s1">&#39;ai un Sas d&#39;</span><span class="nx">entrée</span> <span class="nx">qui</span> <span class="nx">me</span> <span class="nx">permet</span> <span class="nx">d</span><span class="s1">&#39;interagir avec ma valeur. Je n&#39;</span><span class="nx">ai</span> <span class="nx">toujours</span> <span class="nx">pas</span> <span class="nx">fais</span> <span class="nx">sortir</span> <span class="nx">la</span> <span class="nx">fonction</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">## Une sortie.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">C</span><span class="s1">&#39;est pas très spectaculaire, j&#39;</span><span class="nx">ajoute</span> <span class="nx">une</span> <span class="nx">fonction</span> <span class="nb">extract</span><span class="p">()</span> <span class="nx">qui</span> <span class="nx">n</span><span class="s1">&#39;est qu&#39;</span><span class="nx">un</span> <span class="nx">simple</span> <span class="k">return</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;...</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">Exemple</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>     <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">je</span> <span class="nx">suis</span> <span class="nx">tranquille</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>         <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nb">strtoupper</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'> <span class="c1">//string(18) JE SUIS TRANQUILLE</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Une application : Le décorateur de texte.</h2>

<p>Nous allons utiliser la capacité de chainage de notre container pour faire un pseudo-décorateur.</p>

<p>soit les fonctions suivantes
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">h1</span><span class="p">(</span><span class="nv">$text</span><span class="p">)</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$output</span> <span class="o">=</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span>  <span class="nx">la</span> <span class="nx">réponse</span> <span class="nx">est</span> <span class="nx">Non</span>   <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nb">trim</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nb">htmlentities</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">h1</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">body</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">html</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">echo</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
Voici le fonctionnement</p>

<ul>
<li>je supprime les espaces en trop avec <a href="http://php.net/manual/fr/function.trim.php">trim</a></li>
<li>Je code en Html <a href="http://php.net/manual/fr/function.htmlentities.php">htmlentities</a></li>
<li>j&#8217;encadre de &ldquo;h1&rdquo; puis &ldquo;body&rdquo; puis &ldquo;html&rdquo;.</li>
</ul>


<p>Le résultat</p>

<pre><code class="html">&lt;html&gt;&lt;body&gt;&lt;h1&gt;la r&amp;eacute;ponse est Non&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;
</code></pre>

<p>En image</p>

<h2>Conclusion</h2>

<p>Si vous avez compris le container, vous pouvez le renommer en IdentityMonad. Car c&#8217;est exactement la même chose. Nous venons de croiser notre première monade.</p>

<p>Dans le prochain post nous allons implémenter une nouvelle monade la Monade Maybe.</p>

<p>Elle nous permettra de refactoriser le code suivant</p>

<pre><code class="php">function getAbonnementByUserConnected() {
    $user = getUserConnected();
    // l'utilisateur est anonyme pas d'abonnement
    if (null === $user)  {
        return null;
    }
    // l'utilisateur n'a pas d'abonnement
    $abonnement = getAbonnementByUser($user);
    if (null === $abonnement) {
        return null;
    }

    return $abonnement;
}

function getPromotion() {
    $abo = getAbonnementByUserConnected();
    if (null === getAbonnementByUser()) {
        return new Promotion();
    }
    return $abo-&gt;getPromotion();
}
</code></pre>

<p>Pour devenir
<code>php
$promotion = Maybe::of("getUserConnected")
    -&gt;map("getAbonnementByUser")
    -&gt;map("getPromotion")
    -&gt;orElse(new Promotion());
</code></p>

<p>Je me suis lancé dans une tache bien compliqué mais passionnante.</p>

<p>Je vous remercies de m&#8217;avoir lu..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QuickCheck une autre façon de tester]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/22/quickcheck-une-autre-facon-de-tester/"/>
    <updated>2015-08-22T19:01:42+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/22/quickcheck-une-autre-facon-de-tester</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Nous allons voir ensemble, une nouvelle façon de faire des tests. Nous allons installer utiliser un projet <a href="https://github.com/steos/php-quickcheck">php-quickcheck</a>. L&#8217;idée ici n&#8217;est pas d&#8217;écrire des tests, mais demander au logiciel de les générer.</p>

<!--more-->


<h2>Installation.</h2>

<p>Nous allons créer le <code>composer.json</code> suivant.</p>

<pre><code class="json">{
  "require": {
    "steos/php-quickcheck": "dev-master"
  }
}
</code></pre>

<p>Puis créer un fichier <code>test.php</code>.</p>

<pre><code class="php">
require_once __DIR__ . '/vendor/autoload.php'; // Autoload files using Composer autoload

use QCheck\Generator as Gen;
use QCheck\Quick;
</code></pre>

<p>Un petit <code>composer install</code>. Et tout est en place.</p>

<h2>Exemple N°1</h2>

<h3>Affirmation</h3>

<p>Je vais essayer de prouver que <code>array_merge($list1, $list2) == $list1 + $list2</code> (<strong>ce qui est faux</strong>)</p>

<p>Je l&#8217;écris dans la fonction suivante</p>

<pre><code class="php">function isEqual(array $list1, array $list2) {
    return (array_merge($list1, $list2) == $list1 + $list2);
}
</code></pre>

<h3>Mise en place et contre-exemple.</h3>

<p>Voici le code</p>

<pre><code class="php">$test = Gen::forAll(
    [Gen::ints()-&gt;intoArrays(), Gen::ints()-&gt;intoArrays()], isEqual
 );
</code></pre>

<p><code>Gen::ints()-&gt;intoArrays()</code> génère des array avec une taille aléatoire <code>[0, 1], [-15,0,5], ..</code> que  je vais passer à la fonction <code>isEqual</code></p>

<pre><code>print_r(Quick::check(102, $test, ['echo' =&gt; true]));
</code></pre>

<p>Je vais lancer 102 fois mon test.</p>

<p>Voici ce que me dit le programme dès que je lance.</p>

<pre><code>..F
Array
(
    [result] =&gt; 
    [seed] =&gt; 1440263990644
    [failing_size] =&gt; 2
    [num_tests] =&gt; 3
    [fail] =&gt; Array
        (
            [0] =&gt; Array
                (
                    [0] =&gt; 1
                )

            [1] =&gt; Array
                (
                    [0] =&gt; -2
                    [1] =&gt; 1
                )

        )

    [shrunk] =&gt; Array
        (
            [nodes_visited] =&gt; 9
            [depth] =&gt; 3
            [result] =&gt; 
            [smallest] =&gt; Array
                (
                    [0] =&gt; Array
                        (
                            [0] =&gt; 0
                        )

                    [1] =&gt; Array
                        (
                            [0] =&gt; 0
                        )

                )

        )

)
</code></pre>

<p>Le résultat est intéressant, Le logiciel a essayé 3 fois, au troisième essai l&#8217;exemple <code>([1], [-2,1])</code> donne un cas qui ne marche pas.</p>

<p>Vérifions avec <code>php -a</code></p>

<pre><code class="">php &gt; var_dump(array_merge([1], [-2,1]));
array(3) {
  [0] =&gt;
  int(1)
  [1] =&gt;
  int(-2)
  [2] =&gt;
  int(1)
}
php &gt; var_dump([1] + [-2,1]);
array(2) {
  [0] =&gt;
  int(1)
  [1] =&gt;
  int(1)
}
</code></pre>

<p>Effectivement.. Mais il y a mieux. Le logiciel a fais un <em>shrunk</em>, c&#8217;est à dire qu&#8217;il a calculé le plus petit exemple possible qui est <code>([0], [0])</code>.</p>

<p>Donc la librairie me donne tort et en plus me donne le contre-exemple.</p>

<h2>Exemple N°2</h2>

<h3>Affirmation</h3>

<p>J&#8217;affirme que <code>(sort (array) == sort(sort(array))</code> que en gros cela ne sert à rien de trier deux fois un array.</p>

<h3>Mise en place</h3>

<pre><code>$test2 = Gen::forAll(
    [Gen::ints()-&gt;intoArrays()],
    function ($list) {
        $lista = $list;
        $listb = $list;
        sort($lista);
        sort($listb);
        sort($listb);
        return ($lista == $listb);
    }
  );

print_r(Quick::check(101, $test2, ['echo' =&gt; true]));
</code></pre>

<p>Je lance le logiciel</p>

<pre><code>.....................................................................................................Array
(
    [result] =&gt; 1
    [num_tests] =&gt; 101
    [seed] =&gt; 1440265001108
)
</code></pre>

<p>Le logiciel semble d&#8217;accord. Il a fait 101 tests, mais il n&#8217;a pas trouvé de contre-exemple.</p>

<h2>Exemple N°3</h2>

<p>Nous allons encoder en <code>run legth encoding</code> qui est l&#8217;actuel encodage des fichiers bitmaps.</p>

<p>Quelque exemples:
<code>
Input: WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
Output: 12W1B12W3B24W1B14W
</code></p>

<p>Il y a <code>12W</code> puis <code>1B</code> etc .. je compresse ma chaîne de caractères.</p>

<p>Dans l&#8217;autre sens
<code>
Input: 12W1B12W3B24W1B14W
Output: WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
</code></p>

<p>Voici une implémentation en php</p>

<pre><code class="php">function encode($str) {
    return preg_replace_callback(
        '/(.)\1+/',
        function($m) {
            return sprintf('%s%s', strlen($m[0]), $m[1]);
        },
        $str
    );
};
function decode($str) {
    return preg_replace_callback(
        '/(\d+)(\D)/',
        function($m) {
            return str_repeat($m[2], $m[1]);
        },
         $str
     );
}
</code></pre>

<p>Mon implémentation est correcte, mais il y a un petit souci. Pouvez vous deviner le souci de mon programme.</p>

<p>A priori <code>$input == decode(encode($input))</code></p>

<h3>Mise en place.</h3>

<pre><code class="php">$test3 = Gen::forAll(
    [Gen::alphaNumStrings()],
    function ($string) {
      return ($string == decode(encode($string)));
    }
);
print_r(Quick::check(101, $test2, ['echo' =&gt; true]));
</code></pre>

<p>Le logiciel ne tarde pas à trouver le souci</p>

<pre><code>.....F
Array
(
    [result] =&gt; 
    [seed] =&gt; 1440265916923
    [failing_size] =&gt; 5
    [num_tests] =&gt; 6
    [fail] =&gt; Array
        (
            [0] =&gt; G67k}
        )

    [shrunk] =&gt; Array
        (
            [nodes_visited] =&gt; 34
            [depth] =&gt; 7
            [result] =&gt; 
            [smallest] =&gt; Array
                (
                    [0] =&gt; 0 
                )

        )

)
</code></pre>

<p>La chaîne de caractère <code>"G67k"</code> ne marche pas, et en fait la chaîne <code>"0"</code> tout cours ne marche pas.</p>

<h2>Conclusion des 3 exemples.</h2>

<ul>
<li>Je n&#8217;ai pas écris de test. C&#8217;est le logiciel qui génère les tests.</li>
<li>Les tests sont aléatoires. Par exemple si j&#8217;avais limité à 5 tests l&#8217;exemple 3 pourrait passer.</li>
<li>Si le code ne passe pas le logiciel est capable de <em>réduire</em> jusqu&#8217;à trouver un contre-exemple ici la chaine <code>"0"</code> ou l&#8217;entrée <code>([0],[0])</code></li>
<li>Un autre cas, dans le dernier exemple, j&#8217;ai pris un générateur de texte qui prend des chiffres et des lettres, si j&#8217;avais pris un générateur de lettre seulement comme <code>gen::alphaString</code>. Le test passerait sans problème.</li>
</ul>


<p>Ce type de logiciel s&#8217;appelle le <a href="https://en.wikipedia.org/wiki/QuickCheck">QuickCheck</a> du nom du premier logiciel en <a href="https://en.wikipedia.org/wiki/Haskell_%28programming_language%29">Haskell</a>. Ce sont des tests aléatoires.</p>

<p>Il existe deux portage en php.</p>

<ul>
<li><a href="https://github.com/giorgiosironi/eris">eris</a></li>
<li><a href="https://github.com/steos/php-quickcheck">php-quickcheck</a></li>
</ul>


<p>Il y a le même problème que les tests unitaires: Quand les tests unitaires ne passent pas,  il y a un problème. Mais des tests unitaires qui passent ne prouve pas forcement que le logiciel est correct. Néanmoins cette méthode qui génère des milliers de tests donne des résultats assez intéressants. La capacité a trouvé automatiquement un contre-exemple (s&#8217;il y a un contre-exemple) est vraiment un plus.</p>

<p>Cela n&#8217;a pas été évident d&#8217;écrire ce post. J&#8217;ai eu un peu de mal à trouver un exemple pertinent. Je me suis inspiré des exemples de <a href="https://github.com/DRMacIver/hypothesis">hypothesis</a>. L&#8217;implémentation du RLE viens de <a href="http://rosettacode.org/wiki/Run-length_encoding">rosetta</a> mais l&#8217;exemple en php est obsolète (la regex <code>/../e</code> php5.5 n&#8217;en veux pas). J&#8217;ai retraduis le code.</p>
]]></content>
  </entry>
  
</feed>
