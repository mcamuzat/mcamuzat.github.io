<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-08-09T18:24:17+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Workshops De Javascript]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/09/workshops-de-javascript/"/>
    <updated>2015-08-09T16:44:33+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/09/workshops-de-javascript</id>
    <content type="html"><![CDATA[<p><em>Et si on essayait un workshop&hellip;</em></p>

<p>Les workshops de javascript sont des cours interactifs de javascript.</p>

<h2>Installation</h2>

<p>Pour installer le cours de Node.js c&#8217;est très simple. A condition d&#8217;avoir node.js installé.</p>

<pre><code>npm install -g learnyounode
learnyounode
</code></pre>

<p>Voila ce que vous devriez voir.</p>

<p><img class="center" src="/images/workshop.png" width="585" height="397" title="&lsquo;screenshot de workshop&rsquo; &lsquo;On a un menu interactif&rsquo;" ></p>

<p>Lançons nous dans le premier exercice.</p>

<pre><code>
 LEARN YOU THE NODE.JS FOR MUCH WIN!
─────────────────────────────────────
 HELLO WORLD
 Exercise 1 of 13

Write a program that prints the text "HELLO WORLD" to the console (stdout).

-------------------------------------------------------------------------------

## HINTS

To make a Node.js program, create a new file with a .js extension and start writing JavaScript! Execute your program by running it with the
node command. e.g.:

    $ node program.js

You can write to the console in the same way as in the browser:

    console.log("text")

When you are done, you must run:

    $ learnyounode verify program.js

to proceed. Your program will be tested, a report will be generated, and the lesson will be marked 'completed' if you are successful.

-------------------------------------------------------------------------------

 » To print these instructions again, run: learnyounode print
 » To execute your program in a test environment, run: learnyounode run program.js
 » To verify your program, run: learnyounode verify program.js
 » For help run: learnyounode help
</code></pre>

<p>donc je resume on me demande de programmer un **Hello world&#8221;.</p>

<p>donc je crée un <code>hello.js</code></p>

<pre><code class="js">console.log('HELLO WORLD');
</code></pre>

<p>Je peux tester celui-ci avec un programme de test avec la commande suivante
<code>sh
$ learnyounode run hello.js
</code></p>

<p>Si je suis content du résultat alors je peux faire vérifier le programme par le logiciel.</p>

<pre><code class="sh">$ learnyounode verify program.js
</code></pre>

<p>Si le programme passe, le niveau est marquer comme <code>[COMPLETED]</code> et on peux passer au suivant.</p>

<p>Bon l&#8217;étape 1 n&#8217;est pas très compliqué passons à l&#8217;étape 2.</p>

<pre><code> LEARN YOU THE NODE.JS FOR MUCH WIN!
─────────────────────────────────────
 BABY STEPS
 Exercise 2 of 13

Write a program that accepts one or more numbers as command-line arguments and prints the sum of those numbers to the console (stdout).

-------------------------------------------------------------------------------

## HINTS

You can access command-line arguments via the global process object. The process object has an argv property which is an array containing the complete command-line. i.e. process.argv.

To get started, write a program that simply contains:

    console.log(process.argv)

Run it with node program.js and some numbers as arguments. e.g:

    $ node program.js 1 2 3

In which case the output would be an array looking something like:

    [ 'node', '/path/to/your/program.js', '1', '2', '3' ]

You'll need to think about how to loop through the number arguments so  you can output just their sum. The first element of the process.argv array is always 'node', and the second element is always the path to your program.js file, so you need to start at the 3rd element (index 2), adding each item to the total until you reach the end of the array.

Also be aware that all elements of process.argv are strings and you may need to coerce them into numbers. You can do this by prefixing the property with + or passing it to Number(). e.g. +process.argv[2] or Number(process.argv[2]).

learnyounode will be supplying arguments to your program when you run learnyounode verify program.js so you don't need to supply them yourself. To test your program without verifying it, you can invoke it with learnyounode run program.js. When you use run, you are invoking the test environment that learnyounode sets up for each exercise.

-------------------------------------------------------------------------------

 » To print these instructions again, run: learnyounode print
 » To execute your program in a test environment, run: learnyounode run program.js
 » To verify your program, run: learnyounode verify program.js
 » For help run: learnyounode help
</code></pre>

<p>Donc il s&#8217;agit de créer un programme qui prend les nombres en entrée et faire la somme à la fin.</p>

<p>Voici ma solution (atroce &hellip; )</p>

<pre><code class="js">var i = process.argv;
i.shift(); 
i.shift();// supprime les deux premiers arguments ('node', 'programme.js')
console.log(i.reduce(function(a,b){return a + Number(b)},0));
</code></pre>

<p>Le logiciel donne une implémentation beaucoup plus simple(pas difficile)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">result</span> <span class="o">+=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Etc</span> <span class="nx">etc</span> <span class="p">..</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Une</span> <span class="nx">liste</span> <span class="nx">de</span> <span class="nx">workshop</span><span class="p">.</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Le</span> <span class="nx">site</span> <span class="nx">officiel</span> <span class="nx">donne</span> <span class="nx">la</span> <span class="nx">liste</span> <span class="nx">suivante</span> <span class="nx">en</span> <span class="nx">module</span> <span class="nx">de</span> <span class="nx">base</span><span class="p">.</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;https://www.github.com/sethvincent/javascripting&quot;</span><span class="o">&gt;</span><span class="nx">javascripting</span><span class="o">&lt;</span><span class="err">/a&gt; Apprendre les bases du javascript.&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;https://www.github.com/jlord/git-it&quot;</span><span class="o">&gt;</span><span class="nx">git</span><span class="o">-</span><span class="nx">it</span><span class="o">&lt;</span><span class="err">/a&gt; pour apprendre Git et GitHub.&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;https://www.github.com/jesstelford/scope-chains-closures&quot;</span><span class="o">&gt;</span><span class="nx">Scope</span> <span class="nx">Chains</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">Closures</span><span class="o">&lt;</span><span class="err">/a&gt; Comprendre les scopes, les closures etc..&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;https://www.github.com/workshopper/learnyounode&quot;</span><span class="o">&gt;</span><span class="nx">learnyounode</span><span class="o">&lt;</span><span class="err">/a&gt; les bases de node asynchronous i/o, http.&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/npm/how-to-npm&quot;</span><span class="o">&gt;</span><span class="nx">How</span> <span class="nx">to</span> <span class="nx">npm</span><span class="o">&lt;</span><span class="err">/a&gt; Comment créer des modules Npm&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;https://www.github.com/substack/stream-adventure&quot;</span><span class="o">&gt;</span><span class="nx">stream</span><span class="o">-</span><span class="nx">adventure</span><span class="o">&lt;</span><span class="err">/a&gt; apprennez les streams et comment les composer avec &lt;code&gt;.pipe()&lt;/code&gt;.&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Mais</span> <span class="nx">il</span> <span class="nx">y</span> <span class="nx">en</span> <span class="nx">a</span> <span class="nx">plus</span><span class="p">.</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">On</span> <span class="nx">peux</span> <span class="nx">apprendre</span> <span class="nx">un</span> <span class="nx">peu</span> <span class="nx">pr</span><span class="err">è</span><span class="nx">s</span> <span class="nx">n</span><span class="s1">&#39;importe quel technologie en pratique.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;ul&gt;</span>
</span><span class='line'><span class="s1">&lt;li&gt;&lt;a href=&quot;https://github.com/timoxley/functional-javascript-workshop&quot;&gt;Functional Javascript&lt;/a&gt; : Base de la programmation fonctionnelle en javascript.&lt;/li&gt;</span>
</span><span class='line'><span class="s1">&lt;li&gt;&lt;a href=&quot;https://github.com/azat-co/expressworks&quot;&gt;ExpressWorks&lt;/a&gt;: Apprendre le framework Express.js.&lt;/li&gt;</span>
</span><span class='line'><span class="s1">&lt;li&gt;&lt;a href=&quot;https://github.com/stevekane/promise-it-wont-hurt&quot;&gt;Promise It Won&amp;rsquo;t Hurt&lt;/a&gt;:  Apprendre les promesses pour les opération asynchrone.&lt;/li&gt;</span>
</span><span class='line'><span class="s1">&lt;li&gt;&lt;a href=&quot;https://github.com/bulkan/async-you&quot;&gt;Async&lt;/a&gt;:  La librairie Async.&lt;/li&gt;</span>
</span><span class='line'><span class="s1">&lt;li&gt;&lt;a href=&quot;https://github.com/sporto/planetproto&quot;&gt;Planet Proto&lt;/a&gt;:  Comprendre l&#39;</span><span class="nx">h</span><span class="err">é</span><span class="nx">ritage</span> <span class="nx">prototypal</span><span class="p">.</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/finnp/test-anything&quot;</span><span class="o">&gt;</span><span class="nx">Test</span> <span class="nx">Anything</span><span class="o">&lt;</span><span class="err">/a&gt;:  Comment tester son code&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/evanlucas/learnyoumongo&quot;</span><span class="o">&gt;</span><span class="nx">learnyoumongo</span><span class="o">&lt;</span><span class="err">/a&gt;:  Débuter avec MongoDB et node.js&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/gl-modules/shader-school&quot;</span><span class="o">&gt;</span><span class="nx">Shader</span> <span class="nx">School</span><span class="o">&lt;</span><span class="err">/a&gt;:  Comprendre les shaders.&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/othiym23/bug-clinic&quot;</span><span class="o">&gt;</span><span class="nx">Bug</span> <span class="nx">Clinic</span><span class="o">&lt;</span><span class="err">/a&gt;:  Apprendre de nouveaux outils et debugger plus facilement.&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/alexmackey/IntroToWebGLWithThreeJS&quot;</span><span class="o">&gt;</span><span class="nx">Intro</span> <span class="nx">to</span> <span class="nx">WebGL</span><span class="o">&lt;</span><span class="err">/a&gt;:  Débuter avec &lt;a href=&quot;&quot;&gt;three.js&lt;/a&gt; et le WebGL.&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/mdunisch/lololodash&quot;</span><span class="o">&gt;</span><span class="nx">LololoDash</span><span class="o">&lt;</span><span class="err">/a&gt;: Apprendre Lo-Dash (fork de underscore)&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/robertkowalski/learnyoucouchdb&quot;</span><span class="o">&gt;</span><span class="nx">learnyoucouchdb</span><span class="o">&lt;</span><span class="err">/a&gt;:  Apprendre CouchDB.&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/tako-black/learnyoureact&quot;</span><span class="o">&gt;</span><span class="nx">learnyoureact</span><span class="o">&lt;</span><span class="err">/a&gt;:  Apprenez React.js.&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Des</span> <span class="nx">liens</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">le</span> <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://nodeschool.io&quot;</span><span class="o">&gt;</span><span class="nx">site</span> <span class="nx">officiel</span><span class="o">&lt;</span><span class="sr">/a&gt; et la version &lt;a href=&quot;http:/</span><span class="o">/</span><span class="nx">nodeschool</span><span class="p">.</span><span class="nx">io</span><span class="o">/</span><span class="nx">fr</span><span class="o">-</span><span class="nx">fr</span><span class="o">/</span><span class="s2">&quot;&gt;française&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="s2">&lt;li&gt;J&#39;ai déjà parlé des &lt;a href=&quot;</span><span class="o">/</span><span class="nx">blog</span><span class="o">/</span><span class="mi">2015</span><span class="o">/</span><span class="mi">04</span><span class="o">/</span><span class="mi">29</span><span class="o">/</span><span class="nx">awesome</span><span class="o">-</span><span class="nx">et</span><span class="o">-</span><span class="nx">liste</span><span class="o">-</span><span class="nx">de</span><span class="o">-</span><span class="nx">liens</span><span class="o">/</span><span class="s2">&quot;&gt;awesome-list&lt;/a&gt;. bien entendu elle existe pour les &lt;a href=&quot;</span><span class="nx">https</span><span class="o">:</span><span class="c1">//github.com/therebelrobot/awesome-workshopper&quot;&gt;workshops&lt;/a&gt;.&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Conclusion</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Vous</span> <span class="nx">voulez</span> <span class="nx">apprendre</span> <span class="nx">le</span> <span class="nx">js</span><span class="p">,</span> <span class="nx">react</span><span class="p">.</span><span class="nx">js</span><span class="p">,</span> <span class="err">é</span><span class="nx">crire</span> <span class="nx">des</span> <span class="nx">tests</span> <span class="nx">je</span> <span class="nx">crois</span> <span class="nx">que</span> <span class="nx">vous</span> <span class="nx">savez</span> <span class="nx">par</span> <span class="nx">ou</span> <span class="nx">commencer</span><span class="p">.</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'><span class="p">]]</span><span class="o">&gt;&lt;</span><span class="err">/content&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/entry&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">entry</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">title</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="nx">CDATA</span><span class="p">[</span><span class="nx">Processing</span> <span class="nx">Et</span> <span class="nx">Souvenir</span><span class="p">]]</span><span class="o">&gt;&lt;</span><span class="err">/title&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">link</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://mcamuzat.github.io/blog/2015/07/17/processing-et-souvenir/&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">updated</span><span class="o">&gt;</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">17</span><span class="nx">T22</span><span class="o">:</span><span class="mi">52</span><span class="o">:</span><span class="mi">27</span><span class="o">+</span><span class="mi">02</span><span class="o">:</span><span class="mi">00</span><span class="o">&lt;</span><span class="err">/updated&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">id</span><span class="o">&gt;</span><span class="nx">http</span><span class="o">:</span><span class="c1">//mcamuzat.github.io/blog/2015/07/17/processing-et-souvenir&lt;/id&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">content</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="nx">CDATA</span><span class="p">[</span><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{</span><span class="o">%</span> <span class="nx">img</span> <span class="nx">center</span> <span class="o">/</span><span class="nx">images</span><span class="o">/</span><span class="nx">voiture</span><span class="p">.</span><span class="nx">png</span> <span class="mi">499</span> <span class="mi">300</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Vrooum</span><span class="o">!!&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Screenshot</span> <span class="nx">du</span> <span class="nx">programme</span> <span class="nx">avec</span> <span class="nx">le</span> <span class="nx">micro</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">%</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Aujourd</span><span class="s1">&#39;hui, je ressors un vieux code que j&#39;</span><span class="nx">avais</span> <span class="err">é</span><span class="nx">cris</span> <span class="nx">pour</span> <span class="nx">le</span> <span class="nx">CNAM</span><span class="p">.</span> <span class="nx">Le</span> <span class="nx">sujet</span> <span class="err">é</span><span class="nx">tait</span> <span class="nx">faire</span> <span class="nx">que</span> <span class="nx">l</span><span class="s1">&#39;image à l&#39;</span><span class="err">é</span><span class="nx">cran</span> <span class="nx">bouge</span> <span class="nx">quand</span> <span class="nx">on</span> <span class="nx">parle</span> <span class="nx">dans</span> <span class="nx">un</span> <span class="nx">microphone</span><span class="p">.</span> <span class="nx">Mais</span> <span class="nx">pas</span> <span class="nx">d</span><span class="s1">&#39;animation à la Winamp (j&#39;</span><span class="nx">ai</span> <span class="nx">des</span> <span class="nx">vieilles</span> <span class="nx">r</span><span class="err">é</span><span class="nx">f</span><span class="err">é</span><span class="nx">rences</span> <span class="o">:-</span><span class="p">)</span> <span class="nx">ou</span> <span class="nx">le</span> <span class="nx">player</span> <span class="nx">de</span> <span class="nx">Windows</span><span class="p">.</span> <span class="nx">J</span><span class="s1">&#39;avais donc programmé une voiture sur un circuit, pour le réalisme j&#39;</span><span class="nx">avais</span> <span class="nx">connect</span><span class="err">é</span> <span class="nx">un</span> <span class="nx">Wii</span><span class="o">-</span><span class="nx">chuck</span> <span class="nx">via</span> <span class="nx">un</span> <span class="nx">Arduino</span> <span class="nx">pour</span> <span class="nx">faire</span> <span class="nx">le</span> <span class="nx">volant</span><span class="p">.</span> <span class="nx">Imaginez</span> <span class="nx">une</span> <span class="nx">personne</span> <span class="nx">avec</span> <span class="nx">un</span> <span class="nx">Wiichuk</span> <span class="nx">et</span> <span class="nx">un</span> <span class="nx">micro</span> <span class="nx">en</span> <span class="nx">train</span> <span class="nx">de</span> <span class="nx">faire</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Vrrrooum</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="nx">et</span> <span class="nx">vous</span> <span class="nx">aurez</span> <span class="nx">un</span> <span class="nx">id</span><span class="err">é</span><span class="nx">e</span> <span class="nx">de</span> <span class="nx">ma</span> <span class="nx">soutenance</span> <span class="p">(</span><span class="nx">qui</span> <span class="nx">s</span><span class="s1">&#39;est bien passée d&#39;</span><span class="nx">ailleurs</span><span class="p">).</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Les</span> <span class="nx">conditions</span> <span class="err">é</span><span class="nx">taient</span> <span class="o">:&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">Utiliser</span> <span class="nx">un</span> <span class="nx">Micro</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">La</span> <span class="nx">langage</span> <span class="nx">impos</span><span class="err">é</span> <span class="nx">est</span> <span class="nx">Processing</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Processing</span> <span class="nx">K</span><span class="err">é</span><span class="nx">sako</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Processing</span> <span class="nx">est</span> <span class="nx">une</span> <span class="nx">variante</span> <span class="nx">de</span> <span class="nx">Java</span> <span class="nx">en</span> <span class="nx">plus</span> <span class="nx">simple</span><span class="p">.</span> <span class="nx">C</span><span class="s1">&#39;est un langage destiné à faire des oeuvres d&#39;</span><span class="nx">arts</span> <span class="nx">num</span><span class="err">é</span><span class="nx">riques</span><span class="p">.</span> <span class="nx">Il</span> <span class="nx">est</span> <span class="nx">souvent</span> <span class="nx">enseign</span><span class="err">é</span> <span class="nx">en</span> <span class="err">é</span><span class="nx">cole</span> <span class="nx">d</span><span class="s1">&#39;art. Il vient avec son propre éditeur. à noter que les &lt;a href=&quot;https://fr.wikipedia.org/wiki/Arduino&quot;&gt;Arduinos&lt;/a&gt; se programment aussi en processing.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;<img class="center" src="/images/processing.png" width="499" height="533" title="&amp;lsquo;Processing&amp;rsquo; &amp;lsquo;Screenshot de processing avec son interface&amp;rsquo;" >&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;Il suffit d&#39;</span><span class="nx">impl</span><span class="err">é</span><span class="nx">menter</span> <span class="nx">deux</span> <span class="nx">m</span><span class="err">é</span><span class="nx">thodes</span> <span class="o">:&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">void</span> <span class="nx">setup</span><span class="p">()</span> <span class="c1">// sera appelé à l&#39;initialisation</span>
</span><span class='line'><span class="k">void</span> <span class="nx">draw</span><span class="p">()</span> <span class="c1">// sera appellé 30 à 50 fois par seconde</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Un</span> <span class="nx">exemple</span> <span class="nx">tr</span><span class="err">è</span><span class="nx">s</span> <span class="nx">simple</span>
</span></code></pre></td></tr></table></div></figure> java
void setup() {
  size(640, 360); //j&#8217;initialise la taille 640*
  stroke(255); // le trait est blanc
  fill(255); // remplissage de blanc
  background(0); // couleur de fond blanche</p>

<p>}</p>

<p>void draw() {
  // si la souris est appuyer
  if (mousePressed) {
     // ellipse x, y ,hauteur, largeur
    ellipse(mouseX, mouseY, 5, 5);
  }
}
&#8220;`</p>

<p>Appuyez sur la touche play</p>

<p><img class="center" src="/images/processing_exemple.png" width="535" height="375" title="&lsquo;Processing&rsquo; &lsquo;le résultat&rsquo;" ></p>

<p>Je viens de faire un petit painbrush. C&#8217;est assez facile d&#8217;obtenir un truc plutôt joli avec assez peu de lignes de code. Il y a des librairies toutes prêtes pour la video, webcam.</p>

<p>Il y a de nombreux livres donc le <a href="http://www.amazon.com/Visualizing-Data-Explaining-Processing-Environment/dp/0596514557">Visualizing Data</a>. Pour 2007, le livre est impressionnant. On parle de traitement de donnée et acquisitions des données bien avant la mode du Big data.</p>

<h1>Installez Processing</h1>

<p>Nous allons d&#8217;abord installer Java si vous n&#8217;avez pas. J&#8217;installe le paquet officiel
<code>
sudo apt-get purge openjdk*    // Supprime opendjdk
sudo apt-get install software-properties-common   //ajout de librairie
sudo add-apt-repository ppa:webupd8team/java // ajout du depot
sudo apt-get update                 // et on met à jour les videos
sudo apt-get install oracle-java7-installer // On installe
sudo apt-get install oracle-java7-set-default // et on mets par défaut
</code></p>

<p>Puis nous allons installer Processing
On télécharge le binaire à l&#8217;<a href="https://processing.org/download/?processing">adresse officielle</a></p>

<p>Puis on décompresse
<code>
tar xf processing-*.tgz
sudo mkdir /usr/share/processing
sudo mv processing-* /usr/share/processing
</code>
Il n&#8217;y a plus qu&#8217;à lancer processing
<code>
sh /usr/share/processing/processing-2.2.1/processing
</code>
Vous devriez voir apparaitre l&#8217;interface</p>

<p>Faire marcher mon code:</p>

<ul>
<li>Il faut utiliser la librairie Ess pour analyser le signal (marrant c&#8217;était déja vieux à l&#8217;époque)</li>
<li>Aller sur le site <a href="http://www.tree-axis.com/Ess">suivant</a>.</li>
<li>Décompressez et copier le répertoire ESS dans /usr/share/processing/processing-2.2.1/modes/java/libraries/</li>
</ul>


<h2>Le code</h2>

<p>Il est disponible <a href="https://github.com/mcamuzat/processing-car">ici</a> sous Github. J&#8217;ai commenté la partie avec le Numchuck+Arduino (car peux de gens ont le matériel). A l&#8217;époque impossible de faire marcher la connection USB/Wiichuck sous Linux, j&#8217;ai passé la soutenance sous un vieux PC sous windows XP. Tout est mis dans le même fichier car j&#8217;avais pas trouver comment découper un projet. C&#8217;est d&#8217;ailleurs ce que je reproche un peu à Processing, c&#8217;est un langage simple pour débuter, mais faire un MVC ou un programme très complexe. Il faut quasiment tout refaire à la main.</p>

<h2>Quelques liens</h2>

<ul>
<li>le <a href="https://processing.org/">site officiel</a></li>
<li>Des <a href="http://www.openprocessing.org/">galeries interactives</a></li>
<li><a href="http://processingjs.org/">ProcessingJs</a> (fait par le programmeur de JQuery Jon Resig)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If Hemingway Wrote Javascript]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/06/21/if-hemingway-wrote-javascript/"/>
    <updated>2015-06-21T19:06:54+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/06/21/if-hemingway-wrote-javascript</id>
    <content type="html"><![CDATA[<p>Je suis tombé un peu par hasard sur ce livre &ldquo;If Hemingway Wrote JavaScript&rdquo;. Cela part de l&#8217;idée que tout les auteurs ont un certain style. Et que s&#8217;il devait programmer en javascript le résultat serait diffèrent. L&#8217;auteur est un expert du javascript.</p>

<p>On trouve dans les auteurs</p>

<ul>
<li>Ernest Hemingway</li>
<li>William Shakespeare</li>
<li>André Breton</li>
<li>Roberto Bolaño</li>
<li>Dan Brown</li>
<li>Jack Kerouac</li>
<li>Jane Austen</li>
<li>Samuel Johnson</li>
<li>Sir Arthur Conan Doyle</li>
<li>James Joyce</li>
<li>J.D. Salinger</li>
<li>Tupac Shakur</li>
<li>Virginia Woolf</li>
<li>Geoffrey Chaucer</li>
<li>Vladimir Nabokov</li>
<li>Jorge Luis Borges</li>
<li>Lewis Carroll</li>
<li>Douglas Adams</li>
<li>Charles Dickens</li>
<li>David Foster Wallace</li>
<li>Sylvia Plath</li>
<li>Italo Calvino</li>
<li>J.K. Rowling</li>
<li>Arundhati Roy</li>
<li>Franz Kafka</li>
</ul>


<p>Bien sur un livre en anglais implique plutôt de la littérature anglaise. Certain choix sont curieux Dan Brown (Da vinci code) entre Kerouac et Joyce, Voir Tupac (si si le rappeur). Je venais de lire le livre le plus connus de Borges.</p>

<p>On trouve 7-8 implémentation du Fibonnaci et autre factorielle. Vous allez apprendre plein de trucs sur le javascript, bien que je doute que cela serve. L&#8217;auteur montre des utilisations de <code>with</code> ou l&#8217;atroce mais absolument correct <code>Function('return this/4').call(2*2)</code>. Il y a toutes les subtilités du javascript qui sont évoquées : Héritage, scope, hoisting, variable, etc..</p>

<p>La présentation est classe. Je l&#8217;avais pas reconnu mais les dessins sont de Miran Lipovača. C&#8217;est l&#8217;auteur du magnifique <a href="http://learnyouahaskell.com">Learn You a Haskell for Great Good!</a> si vous ne connaissez pas foncer.</p>

<h2>En conclusion</h2>

<p>Un bouquin qui aime les écrivains et qui aime le javascript. Il vous faudra aimer un peu les deux pour apprécier le contenu. Je m&#8217;en sors pas trop mal, je connaissais la plupart des écrivains. Pour moi c&#8217;est une curiosité et j&#8217;adore ce genre de livre. J&#8217;aime beaucoup la présentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Koan Et Programmation]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/25/koan-et-programmation/"/>
    <updated>2015-05-25T20:53:23+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/25/koan-et-programmation</id>
    <content type="html"><![CDATA[<p>Un koan est dixit wikipedia</p>

<blockquote><blockquote><p>koan est une une brève anecdote ou un court échange entre un maître et son disciple, absurde, énigmatique ou paradoxal, ne sollicitant pas la logique ordinaire.</p></blockquote></blockquote>

<p>Un exemple de Koan</p>

<blockquote><blockquote><p>Quel est le son d’une seule main qui applaudit ?</p></blockquote></blockquote>

<p>Il existe des Koan pour la programmation. Ce sont des mini problèmes pour s&#8217;initier à une technologie.</p>

<h2>RubyKoan</h2>

<p>Le plus connu et le premier est <a href="http://rubykoans.com/">RubyKoan</a>.</p>

<p>Regardons ensemble la première utilisation.</p>

<pre><code class="bash">cd koans
/home/marc/.rvm/rubies/ruby-2.2.0/bin/ruby path_to_enlightenment.rb
AboutAsserts#test_assert_truth has damaged your karma.

The Master says:
  You have not yet reached enlightenment.

The answers you seek...
  Failed assertion.

Please meditate on the following code:
  /home/marc/prog/ruby_koans/koans/about_asserts.rb:10:in `test_assert_truth'

mountains are merely mountains
your path thus far [X_________________________________________________] 0/282
</code></pre>

<p>J&#8217;ouvre le fichier <code>about_asserts.rb</code>.</p>

<pre><code class="ruby">#!/usr/bin/env ruby
# -*- ruby -*-

require File.expand_path(File.dirname(__FILE__) + '/neo')

class AboutAsserts &lt; Neo::Koan

  # We shall contemplate truth by testing reality, via asserts.
  def test_assert_truth
    assert false                # This should be true
  end
</code></pre>

<p>Il suffit de changer le <code>false</code> en <code>true</code></p>

<p>Relancons, On avance petit à petit et toutes les notions du ruby sont expliquées.</p>

<pre><code class="bash">cd koans
/home/marc/.rvm/rubies/ruby-2.2.0/bin/ruby path_to_enlightenment.rb
AboutAsserts#test_assert_truth has expanded your awareness.
AboutAsserts#test_assert_with_message has damaged your karma.

The Master says:
  You have not yet reached enlightenment.
  You are progressing. Excellent. 1 completed.

The answers you seek...
  This should be true -- Please fix this

Please meditate on the following code:
  /home/marc/prog/ruby_koans/koans/about_asserts.rb:16:in `test_assert_with_message'

learn the rules so you know how to break them properly
your path thus far [.X________________________________________________] 1/282
</code></pre>

<p>C&#8217;est un moyen facile et rapide pour apprendre un langage. Ceci dit j&#8217;ai personnellement fini les rubykoans. Mais 1 mois plus tard, j&#8217;étais incapable d&#8217;aligner une ligne de code en ruby. Faire passer les tests n&#8217;est pas très compliqué quelque soit le langage.</p>

<p>Il y a aussi les Katas de programmation, Mais c&#8217;est plus un cahier des charges avec des tests d&#8217;acceptations (On parle de BDD) alors que les koan sont plutôt dans la notion d&#8217;unitaire.</p>

<h2>Quelques Koan.</h2>

<p>Bien sur les <a href="http://rubykoans.com/">RubyKoans</a> il existe une version <a href="http://koans.herokuapp.com/en/about_asserts">en ligne</a>.</p>

<p>Les <a href="https://github.com/gregmalcolm/python_koans">python-koans</a> sont vraiment chouettes Il y a python 2.7 et python 3. Si les premiers problèmes sont faciles. Les derniers sont plutôt durs.</p>

<p>En javascript on peux citer</p>

<ul>
<li><a href="https://github.com/mrdavidlaing/javascript-koans">javascript-koans</a></li>
<li><a href="https://github.com/larrymyers/backbone-koans">backbone-koans</a></li>
<li><a href="https://github.com/bjpbakker/angular-koans">angular-koans</a></li>
</ul>


<p>J&#8217;ai été un peu déçus de ne pas trouver des Koans en php. Cela reste très basique.
je citerai:</p>

<ul>
<li><a href="https://github.com/TorontoPHPSoftwareCraftsmanship/PHPUnit-Koans">PHPUnit-koans</a></li>
<li>et celui-ci par votre serviteur (mais c&#8217;était il y a bien longtemps) <a href="https://github.com/mcamuzat/PHPUnitRegexKoan">mcamuzat/PHPUnitRegexKoan</a></li>
</ul>


<h2>Conclusion</h2>

<p>Je vous avais parler des <a href="/blog/2015/04/29/awesome-et-liste-de-liens/">awesome-list</a> et bien il existe une liste de <a href="https://github.com/ahmdrefat/awesome-koans">awesome-koans</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je Joue Donc Je Programme]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/04/je-joue-donc-je-programme/"/>
    <updated>2015-05-04T22:32:00+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/04/je-joue-donc-je-programme</id>
    <content type="html"><![CDATA[<p>Il existe des jeux vidéos pour apprendre à programmer. Voici quelques exemples.</p>

<h2>VimAdventure</h2>

<p><img class="center" src="/images/vimadventures.jpg" width="600" height="339" title="&lsquo;Vim adventure&rsquo; &lsquo;Vim adventure&rsquo;" >
<a href="http://vim-adventures.com/">Vim adventure</a> permet d&#8217;apprendre les touches de Vim de manière ludique. Personnellement j&#8217;ai beaucoup joué à <a href="http://crawl.develz.org/wordpress/">Dungeon Crawl</a> qui utilise les touches <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code></p>

<h2>Ruby</h2>

<p>Ruby warrior existe en deux versions:
<img class="center" src="/images/ruby-warrior.png" width="600" height="288" title="&lsquo;Ruby warrior&rsquo; &lsquo;Ruby warrior&rsquo;" ></p>

<p>En ligne de commande <a href="https://github.com/ryanb/ruby-warrior">ruby-warrior</a></p>

<p>Le but est ici d&#8217;écrire L&#8217;AI du héros. Cela commence relativement simplement. Au début pas besoin de if, else, object mais les niveaux se corsent vraiment (je dirai que jusqu&#8217;au 6 c&#8217;est relativement tranquille)</p>

<p>Depuis il existe une version web. Beaucoup plus accessible et jolie
<a href="https://www.bloc.io/ruby-warrior#/">ruby-warrior</a></p>

<h2>Javascript</h2>

<h3>Untrusted</h3>

<p><img class="center" src="/images/untrusted.jpg" width="600" height="339" title="&lsquo;Untrusted&rsquo; &lsquo;Untrusted&rsquo;" >
pour passer les niveaux, il faut atteindre le terminal et commencer à hacker le js. C&#8217;est vraiment malin.
<a href="http://alexnisnevich.github.io/untrusted/">untrusted</a></p>

<h3>Elevator Saga</h3>

<p><img class="center" src="/images/elevator-saga.png" width="600" height="288" title="&lsquo;Elevator Saga&rsquo; &lsquo;Elevator Saga&rsquo;" ></p>

<p>Quoi de plus passionnant que simulation d&#8217;ascenseur.On passe assez facilement le niveau 1. Cela se complique vraiment avec le niveau deux et les objectifs.
<a href="http://play.elevatorsaga.com/">elevator-saga</a></p>

<h3>CodeCombat</h3>

<p><a href="http://codecombat.com/">CodeCombat</a>
Diriger un petit combattant, Un peu la même idée que ruby-warror, mais l&#8217;interface est très belle. Il y a du multi-joueurs</p>

<h2>Multi-plateforme</h2>

<p><img class="center" src="/images/codingame.jpg" width="600" height="375" title="&lsquo;Coding game&rsquo; &lsquo;Coding game&rsquo;" ></p>

<p><a href="http://www.codingame.com">Codingame</a>. L&#8217;interface est magnifique, vous pouvez choisir le langage (il y a une vingtaine de langage PHP, Js, Haskell, Bash, C). les exercices sont assez variés. C&#8217;est plus des katas de programmation.</p>

<h2>Le SQL</h2>

<p><img class="center" src="/images/schemaverse.png" width="450" height="131" title="&lsquo;Schemaverse&rsquo; &lsquo;Schemaverse&rsquo;" ></p>

<p><a href="https://schemaverse.com/">Schemaverse</a>
Un jeux video en prosgresSQL pur. Il y a même une histoire. C&#8217;est assez compliqué.</p>

<h2>Les Regex</h2>

<ul>
<li><a href="http://regexone.com/">regex one</a> Une bonne introduction.</li>
<li><a href="https://regex.alf.nu/">regex.alf.nu</a>. Cela commence doucement, mais les dernières sont très très compliquées.</li>
<li><a href="http://www.postcrashgames.com/finitris/">finitris</a>.Un vieux Jeux que j&#8217;avais noté, c&#8217;est dommage que la prise en main soit affreuse et que le zoom soit péter (control+molette est votre ami)</li>
</ul>


<h3>Des jeux Flash</h3>

<p>Bon je sais que ce n&#8217;est pas super récent.</p>

<p>Tout les jeux Zacktronics</p>

<ul>
<li><a href="http://www.zachtronics.com/spacechem/">SpaceChem</a> (payant et j&#8217;ai pas essayé).</li>
<li><a href="http://www.zachtronics.com/kohctpyktop-engineer-of-the-people/">Kohctpyktop</a> quasiment injouable. mais c&#8217;est de cette facon que sont fait les portes logiques et les microprocesseurs.</li>
<li><a href="http://www.zachtronics.com/the-codex-of-alchemical-engineering/">Codex of Alchemical Engineering</a> assembler des molécules.</li>
<li><a href="http://www.zachtronics.com/ruckingenur-ii/">Ruckingenur</a> voila comment on fait du Reverse Engineering des circuits électroniques (sous windows).</li>
</ul>


<p>Et aussi</p>

<ul>
<li><a href="http://pleasingfungus.com/Manufactoria/">manufactoria</a> facbrique de robots et BDD (il suffit de faire passer le scénario).</li>
</ul>


<h2>En conclusion</h2>

<p>j&#8217;ai vraiment beaucoup aimé et joué à <a href="http://alexnisnevich.github.io/untrusted/">untrusted</a> et <a href="https://www.bloc.io/ruby-warrior#/">ruby-warrior</a></p>

<p>J&#8217;ai probablement oublié d&#8217;autres jeux.</p>
]]></content>
  </entry>
  
</feed>
