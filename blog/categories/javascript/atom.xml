<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Journal d'un panda qui code]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2016-05-17T17:48:54+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VIM : formater le JSON]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/05/08/vim-formater-le-json/"/>
    <updated>2016-05-08T17:51:22+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/05/08/vim-formater-le-json</id>
    <content type="html"><![CDATA[<p>Aujourd&#8217;hui nous allons voir comment formater un json un peu crade pour le transformer en quelques choses de plus sympathique.</p>

<p>Soit le JsonSchema suivant
<code>javascript
{"$schema":"http://json-schema.org/draft-04/schema#","type":"object","properties":{"address":{"type":"object","properties":{"streetAddress":{"type":"string"},"city":{"type":"string"}},"required":["streetAddress","city"]},"phoneNumber":{"type":"array","items":{"type":"object","properties":{"location":{"type":"string"},"code":{"type":"integer"}},"required":["location","code"]}}},"required":["address","phoneNumber"]}
</code>
Pas de retour à la ligne.</p>

<p>Grâce à la commande suivante.
<code>
:%!python -m json.tool
</code>
Le fichier devient
<code>javascript
{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "address": {
            "properties": {
                "city": {
                    "type": "string"
                },
                "streetAddress": {
                    "type": "string"
                }
            },
            "required": [
                "streetAddress",
                "city"
            ],
            "type": "object"
        },
        "phoneNumber": {
            "items": {
                "properties": {
                    "code": {
                        "type": "integer"
                    },
                    "location": {
                        "type": "string"
                    }
                },
                "required": [
                    "location",
                    "code"
                ],
                "type": "object"
            },
            "type": "array"
        }
    },
    "required": [
        "address",
        "phoneNumber"
    ],
    "type": "object"
}
</code></p>

<p>On utilise en pratique python pour réécrire le code.</p>

<p>Vous pouvez essayer
<code>
python -m json.tool &lt;le fichier&gt;.json
</code>
Ce qui est pratique est que python est installé par défaut sous Linux. Il existe aussi <a href="https://stedolan.github.io/jq/">jq</a>, mais il n&#8217;est pas par défaut.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jeu de la vie]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/04/03/jeu-de-la-vie/"/>
    <updated>2016-04-03T21:29:42+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/04/03/jeu-de-la-vie</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Je suis en train de suivre la formation sur <a href="https://www.freecodecamp.com">FreeCodeCamp</a>. Un des exercices et de refaire &ldquo;le jeu de la vie&rdquo; en <a href="https://facebook.github.io/react/">React</a>.</p>

<p>Le jeu de la vie a été crée par <a href="https://fr.wikipedia.org/wiki/John_Horton_Conway">Conway</a>.</p>

<p>Les règles sont très simples.</p>

<ul>
<li>Soit un Damier avec des cellules.</li>
<li>Si une cellule à seulement un voisin autour d&#8217;elle, elle meure de à cause de l&#8217;isolement</li>
<li>Si une cellule a plus de 3 voisins elle meure de surpopulation.</li>
<li>Si il y a exactement trois voisins et que la case est vide, une cellule se crée.</li>
</ul>


<p>Une animation parle mieux..</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/C2vgICfQawE" frameborder="0" allowfullscreen></iframe>




<!--more-->


<p>Vidéo du créateur</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/E8kUJL04ELA" frameborder="0" allowfullscreen></iframe>


<p>Voici le code que j&#8217;ai implémenté.</p>

<p data-height="750" data-theme-id="0" data-slug-hash="pywGaG" data-default-tab="result" data-user="mcamuzat" class="codepen">See the Pen <a href="http://codepen.io/mcamuzat/pen/pywGaG/">Game of life React FreecodeCamp</a> by mcamuzat (<a href="http://codepen.io/mcamuzat">@mcamuzat</a>) on <a href="http://codepen.io">CodePen</a>.</p>


<script async src="//s.codepen.io/assets/embed/ei.js"></script>


<h1>En conclusion</h1>

<p>Au moment ou j&#8217;écris ces lignes, un nouveau type de <a href="http://www.conwaylife.com/wiki/Copperhead">vaisseau</a>  a été découvert <a href="https://niginsblog.wordpress.com/2016/03/07/new-spaceship-speed-in-conways-game-of-life/">voir aussi..</a>. Il y a toujours des amateurs..</p>

<p> Sous google une recherche sur <a href="https://www.google.com/search?q=conway%27s+game+of+life">conway&rsquo;s game of life</a> donne un easter-egg.</p>

<ul>
<li><a href="https://fr.wikipedia.org/wiki/Jeu_de_la_vie">wikipedia</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je joue donc je programme 3]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/01/18/je-joue-donc-je-programme-3/"/>
    <updated>2016-01-18T20:25:01+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/01/18/je-joue-donc-je-programme-3</id>
    <content type="html"><![CDATA[<p>Nous continuons à la recherche de soft donc le but du jeux est d&#8217;apprendre à programmer.</p>

<p><img class="center" src="/images/climurder.png" width="600" height="488" title="&lsquo;Screenshot du dépot CLmurder&rsquo; &lsquo;Screenshot de cli murder&rsquo;" ></p>

<!--more-->


<h2>Les Capture The Flag /Wargame.</h2>

<p>Le but ici est de s&#8217;introduire le premier dans un programme(via connection ssh, iso) et de capturer le drapeau. C&#8217;est un concours et un peu un jeux de piste. On distingue deux types</p>

<ul>
<li><p>les CTF. c&#8217;est un jeu avec une date de début et une date de fin. Je n&#8217;ai jamais participé à ce genre d&#8217;évènement.</p>

<ul>
<li>Actualité <a href="https://ctftime.org/">CTFTime</a></li>
<li><a href="http://en.wikipedia.org/wiki/Capture_the_flag#Computer_security">wikipedia</a></li>
<li>Débuter : <a href="https://www.endgame.com/blog/how-get-started-ctf">How to Get Started in CTF </a> et <a href="https://trailofbits.github.io/ctf/">CTF Field Guide</a></li>
<li>Une liste <a href="https://github.com/apsdehal/awesome-ctf">complète</a></li>
</ul>
</li>
<li><p>Quand on peux rentrer à n&#8217;importe quelle moment on parle de Wargame.</p>

<ul>
<li><a href="http://smashthestack.org/">SmashTheStack</a></li>
<li><a href="http://overthewire.org/wargames/">OverTheWire</a> Le premier challenge <a href="http://overthewire.org/wargames/bandit/">Bandit</a> est vraiment pour un débutant (<strong>Moi!!</strong>)</li>
<li><a href="https://exploit-exercises.com/">Exploit Exercises</a> Les Isos sont téléchargeables</li>
</ul>
</li>
</ul>


<p>Il y a plein de techniques  j&#8217;avoue que je connais assez peu, j&#8217;ai un peu joué avec la backtrack (maintenant connue sur le nom de <a href="https://www.kali.org/">Khali-Linux</a>)</p>

<h2>Xss-Game</h2>

<p>Pour apprendres les failles XSS , C&#8217;est google qui a fais le site suivant</p>

<ul>
<li><a href="https://xss-game.appspot.com/">XSS Game</a></li>
</ul>


<h2>Les concours</h2>

<p>Je suis beaucoup sur <a href="http://www.codewars.com">Codewars</a>. La présentation est clean..</p>

<p>Mais il existe une énorme quantité de site dans le même genre.</p>

<ul>
<li><a href="http://projecteuler.net">Le plus connus le projet Euler</a></li>
<li><a href="http://www.codechef.com">Code Chef</a></li>
<li><a href="http://codeforces.com">Codeforces</a></li>
<li><a href="http://www.codewars.com">Codewars</a></li>
<li><a href="http://eudyptula-challenge.org">Eudyptula Challenge</a>(Kernel Linux)</li>
<li><a href="https://code.google.com/codejam/contests.html">Google Code Jam</a></li>
<li><a href="https://www.hackerrank.com">HackerRank</a></li>
<li><a href="http://ioccc.org">International Obfuscated C Code Contest</a> le code le plus obscure possible..</li>
<li><a href="http://ipsc.ksp.sk">Internet Problem Solving Contest</a></li>
<li><a href="http://www.kaggle.com/competitions">Kaggle</a> (les données fournis proviennent de véritables mesures/études)</li>
<li><a href="http://www.teamleada.com" title="">Leada</a> cours en lignes..</li>
<li><a href="http://community.topcoder.com/tc">Top Coder</a> Il y a des récompenses pour certains challenges.</li>
<li><a href="https://www.codeeval.com">CodeEval</a> Si vous cherchez du travail et mettre en valeur son CV</li>
</ul>


<p>Et aussi</p>

<ul>
<li><a href="http://www.dmoz.org/Computers/Programming/Contests/">Annuaire</a></li>
<li><a href="http://en.wikipedia.org/wiki/Category:Programming_contests">Article wikipedia</a></li>
</ul>


<h2>Cryptologie</h2>

<p>Il existe aussi des concours pour apprendre de la cryptologie</p>

<ul>
<li><a href="https://www.mysterytwisterc3.org/en/">Mystery Twister</a></li>
<li><a href="http://cryptopals.com/">Matasano Challenge</a></li>
</ul>


<h2>Divers</h2>

<ul>
<li><a href="https://github.com/veltman/clmystery">The Command Line Murders</a> résoudre un crime avec la ligne de commande..</li>
<li><a href="https://github.com/git-game/git-game">Git game</a> Un jeu de piste en git.

<h2>Conclusion</h2></li>
</ul>


<p>Je vous laisse j&#8217;ai un crime à résoudre.. Il y a de quoi s&#8217;occuper.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je joue donc je programme 2]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/12/13/je-joue-donc-je-programme-2/"/>
    <updated>2015-12-13T18:05:20+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/12/13/je-joue-donc-je-programme-2</id>
    <content type="html"><![CDATA[<p>J&#8217;avais <a href="blog/2015/05/04/je-joue-donc-je-programme/">déjà parlé</a> de jeux pour apprendre à programmer.
<img class="center" src="/images/thimble.png" width="600" height="345" title="&lsquo;thimble&rsquo; &lsquo;Thimble&rsquo;" ></p>

<!--more-->


<h2>Le CSS</h2>

<h3>Apprendre les selecteurs</h3>

<p>C&#8217;est assez basique mais la présentation est très propre
<a href="flukeout.github.io">Cssdiner</a>
<img class="center" src="/images/cssdiner.png" width="600" height="606" title="&lsquo;Css diner&rsquo; &lsquo;Css diner&rsquo;" ></p>

<h3>Apprendre la balise <code>flex</code></h3>

<p>C&#8217;est relativement récent cela ne marche pas sur tout les navigateurs (pas de problème sous firefox)
<a href="http://flexboxfroggy.com/">flexbox froggy</a></p>

<p><img class="center" src="/images/flexfrog.png" width="600" height="399" title="&lsquo;flexbox froggy&rsquo; &lsquo;flexbox froggy&rsquo;" ></p>

<h3>Créer ses propres pages</h3>

<p>Pas un jeu mais un tutoriel de la part de mozilla
<a href="https://thimble.mozilla.org/en-US">thimble</a></p>

<p><img class="center" src="/images/thimble.png" width="600" height="345" title="&lsquo;thimble&rsquo; &lsquo;Thimble&rsquo;" ></p>

<h2>Javascript</h2>

<p><a href="https://jsfiddle.net/qmmc8mpr/embedded/result/">l&#8217;adresse</a></p>

<p>Le but est à la fois simple et plutôt compliqué faire atteindre x à l&#8217;infini. Sauf que vous devez payer pour ajouter des caractères.</p>

<ul>
<li>1er caractère : 1000 points</li>
<li>2nd caractères : 10000 points</li>
<li>3ème caractères : 100000 points.</li>
</ul>


<p>On ne peux utiliser les caractères  <code>[e, E, *, /, 5, 6, 7, 8, 9, another x]</code>. Ce serait trop simple <code>x+=x</code>.</p>

<p>Quand on connait l&#8217;astuce cela se résout en 30 secondes.</p>

<p><img class="center" src="/images/javascriptinfini.png" width="600" height="450" title="&lsquo;Un petit casse-tête&rsquo; &lsquo;Un petit casse-tête&rsquo;" ></p>

<h2>En conclusion</h2>

<p>Voila de quoi occuper vos soirées.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yield PHP Co-routine]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/09/13/yield-php-co-routine/"/>
    <updated>2015-09-13T20:31:37+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/09/13/yield-php-co-routine</id>
    <content type="html"><![CDATA[<p>Nous allons continuer sur le <em>yield</em> <a href="/blog/2015/09/06/php-yield-les-generateurs/">partie1</a></p>

<p>Nous avons vu la fonction xrange qui permet de générer un million de valeurs pour un coup très faible en mémoire.</p>

<p>Mais il y a mieux ! On peux envoyer des valeurs dans le générateur
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">generateAnimal</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$input</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Panda</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">j</span><span class="s1">&#39;ai reçu $input&amp;rdquo;);</span>
</span><span class='line'><span class="s1">    $input = (yield &amp;lsquo;Lama&amp;rsquo;);</span>
</span><span class='line'><span class="s1">    var_dump(&amp;ldquo;j&#39;</span><span class="nx">ai</span> <span class="nx">reçu</span> <span class="nv">$input</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$gen</span> <span class="o">=</span> <span class="nx">generateAnimal</span><span class="p">();</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">current</span><span class="p">());</span><span class="c1">// string(5) &amp;ldquo;Panda&amp;rdquo;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Canard</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;));</span><span class="c1">//string(16) &amp;ldquo;j&#39;ai recu Canard&amp;rdquo;</span>
</span><span class='line'>                               <span class="c1">//string(4) &amp;ldquo;Lama&amp;rdquo;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Poney</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;));</span> <span class="c1">// j&#39;ai recus Poney.</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Si j&#8217;avais fais deux fois <code>-&gt;next()</code>  au lieux de <code>-&gt;send()</code></p>

<pre><code class="php">$gen = generateAnimal();
var_dump($gen-&gt;current());// string(5) "Panda"
var_dump($gen-&gt;next());//string(16) "j'ai recu NULL"
                               //string(4) "Lama"
var_dump($gen-&gt;next()); // j'ai recus NULL.
</code></pre>

<!--more-->


<h2>Les Co-routines</h2>

<p>Une co-routine est une fonction qui peut se suspendre en reprendre quand on le souhaite.</p>

<p>Nous allons faire une classe <code>Task</code>  pour mieux comprendre.</p>

<pre><code class="php">class Task
{
    protected $generator;

    protected $firstCall = true;

    public function __construct(Generator $generator)
    {
        $this-&gt;generator = $generator;
    }

    public function run()
    {
        if ($this-&gt;firstCall) {
            $this-&gt;generator-&gt;current();
        } else {
            $this-&gt;generator-&gt;next();
        }

        $this-&gt;firstCall = false;
    }

    public function finished()
    {
        return !$this-&gt;generator-&gt;valid();
    }
}
</code></pre>

<p>J&#8217;ai besoin d&#8217;un Runner</p>

<pre><code class="php">
class Runner
{
    public function __construct(Task $task)
    {
        $this-&gt;task = $task;
    }

    public function run()
    {
        while (!$this-&gt;task-&gt;finished()) {
            $this-&gt;task-&gt;run();
        }
    }
}
</code></pre>

<p>Un petit code d&#8217;exemple</p>

<pre><code>function task1() {
    for ($i = 1; $i &lt;= 10; ++$i) {
        echo "This is task 1 iteration $i.\n";
        yield;
    }
}

$task = new Task(task1());
$runner = new Runner($task);
$runner-&gt;run();
</code></pre>

<p>Cela donne</p>

<pre><code>This is task 1 iteration 1.
This is task 1 iteration 2.
This is task 1 iteration 3.
This is task 1 iteration 4.
This is task 1 iteration 5.
This is task 1 iteration 6.
This is task 1 iteration 7.
This is task 1 iteration 8.
This is task 1 iteration 9.
This is task 1 iteration 10.
</code></pre>

<p>J&#8217;ai un objet Task qui appelle une fonction et qui rend la main à chaque itération. Cela semble compliqué pour une seule tache. Mais modifions le code pour avoir plusieurs taches.</p>

<pre><code>class Scheduler
{
    protected $queue;

    public function __construct()
    {
        $this-&gt;queue = new SplQueue();
    }

    public function enqueue(Task $task)
    {
        $this-&gt;queue-&gt;enqueue($task);
    }

    public function run()
    {
        while (!$this-&gt;queue-&gt;isEmpty()) {
            $task = $this-&gt;queue-&gt;dequeue();
            $task-&gt;run();

            if (!$task-&gt;finished()) {
                $this-&gt;enqueue($task);
            }
        }
    }
}
</code></pre>

<p>Bon toute la magie est faite grâce à la <code>SplQueue</code> qui est une file d&#8217;attente. J&#8217;ajoute dans la file d&#8217;attente toutes les taches.</p>

<p>Je prend une tache de la file d&#8217;attente. Je l&#8217;exécute avec <code>-&gt;run()</code>, si la tache n&#8217;est pas finie, je la remets dans la file d&#8217;attente.</p>

<p>Reprenons un code d&#8217;exemple</p>

<pre><code class="php">function task1() {
    for ($i = 1; $i &lt;= 10; ++$i) {
        echo "This is task 1 iteration $i.\n";
        yield;
    }
}

function task2() {
    for ($i = 1; $i &lt;= 5; ++$i) {
        echo "This is task 2 iteration $i.\n";
        yield;
    }
}

$task1 =  new Task(task1());
$task2 = new Task(task2());
$scheduler = new Scheduler();
$scheduler-&gt;enqueue($task1);
$scheduler-&gt;enqueue($task2);
$scheduler-&gt;run();
</code></pre>

<p>Le résultat.</p>

<pre><code>This is task 1 iteration 1.
This is task 2 iteration 1.
This is task 1 iteration 2.
This is task 2 iteration 2.
This is task 1 iteration 3.
This is task 2 iteration 3.
This is task 1 iteration 4.
This is task 2 iteration 4.
This is task 1 iteration 5.
This is task 2 iteration 5.
This is task 1 iteration 6.
This is task 1 iteration 7.
This is task 1 iteration 8.
This is task 1 iteration 9.
This is task 1 iteration 10.
</code></pre>

<p>On voit que j&#8217;exécute en parallèle toutes mes deux taches.</p>

<h2>En conclusion</h2>

<p>Il existe deux librairies qui utilise ce concept</p>

<ul>
<li><a href="https://github.com/icicleio/icicle">Icicle</a></li>
<li><a href="https://github.com/recoilphp/recoil">recoil</a></li>
</ul>


<p>Cette façon d&#8217;implémenter est assez curieuse. Car le code ne ressemble pas au code classique asynchrone avec des callbacks et autre événements. Si on regarde bien cela ressemble beaucoup a du code synchrone. Elle est inspirée du <code>C#</code> <code>async/wait</code>. On a l&#8217;impression que cela ressemble a du code synchrone où on ajoute des <code>yield</code> un peu partout. (en simplifiant beaucoup..)</p>

<p>Il y a peu de documentation et d&#8217;exemple sur le sujet.</p>

<ul>
<li>la référence est ce post de <a href="http://nikic.github.io">Nikic</a>: <a href="https://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html">Cooperative multitasking using coroutines (in PHP!)</a></li>
<li>Une version légèrement simplifié dont je me suis inspiré pour le code <a href="https://medium.com/@assertchris/co-operative-php-multitasking-ce4ef52858a0">Co-operative PHP Multitasking</a></li>
</ul>


<p>Je vais essayer de continuer avec le yield et repartir sur les promises.</p>

<p>Merci de m&#8217;avoir lu.</p>
]]></content>
  </entry>
  
</feed>
