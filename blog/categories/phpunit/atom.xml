<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Phpunit | Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/phpunit/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-11-01T21:07:34+01:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Array_walk, Array_map, Array_walk_recursive]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/26/array-walk/"/>
    <updated>2015-08-26T22:30:55+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/26/array-walk</id>
    <content type="html"><![CDATA[<p>Une question que l&#8217;on m&#8217;a posé.</p>

<p>Quel instruction je n&#8217;ai jamais jamais réussi à utiliser dans php ? Dans le sens jamais trouvé d&#8217;utilisation pratique.</p>

<p>Ma réponse est un <code>array_recursive_walk()</code> et dans la même idée les <code>RecursiveIteratorIterator</code></p>

<p>Et puis on m&#8217;a demander la différence entre un <code>array_walk</code> et un <code>array_map</code>.</p>

<h2><code>array_map</code></h2>

<p>Voici quelques exemples</p>

<pre><code class="php">// via un array_map
$array = ['one', 'two', 'three']
$out = array_map(uc_first, $array);
</code></pre>

<p><code>array_map</code> ne touche pas le tableau original.</p>

<p>En fait <code>array_map</code> fait exactement ceci.</p>

<pre><code>$out = [ ucfirst('one'), ucfirst('two'), ucfirst('three') ];
</code></pre>

<p>De manière générale</p>

<pre><code>array_map(function($a),[a ,b, ..,z]) 
[function(a), function(b), function(c), .. function(z)].
</code></pre>

<ul>
<li>On renvoie un tableau de la <strong>même</strong> taille.</li>
<li>la fonction appelé doit contenir un <strong>return</strong></li>
<li>C&#8217;est de la programmation fonctionnelle (c&#8217;est le <strong>map</strong> de <strong>Map</strong>Reduce).</li>
<li>On ne connais pas l&#8217;index (que l&#8217;on pourrai récupérer dans un <code>foreach($array as $key =&gt; $value)</code>).</li>
</ul>


<h2><code>Array_walk</code></h2>

<pre><code class="php">$array = ['one', 'two', 'three']
function toMaj(&amp;$input, $key) {
    // ucfirst give error with 2 arguments
    $input = ucfirst($input);
}
array_walk($array, 'toMaj');
var_dump($array);
</code></pre>

<p>Constatons:</p>

<ul>
<li>Je passe par référence <code>&amp;input</code>.</li>
<li>Donc je n&#8217;ai pas besoin de <code>return</code>.</li>
<li>Donc nous sommes dans du <strong>procédural</strong>. (ce qui n&#8217;est pas forcément un défaut)</li>
<li>J&#8217;ai économisé une variable</li>
<li>On est obligé d&#8217;écrire des fonctions à deux arguments certaines fonctions comme <code>ucfirst</code> refusent d&#8217;avoir plusieurs arguments.</li>
<li>Par contre, on connait l&#8217;index (<code>$key</code>) mais impossible de le modifier.</li>
<li><code>array_walk</code> renvoie <code>true</code> or <code>false</code> ce qui n&#8217;aide pas beaucoup</li>
</ul>


<pre><code>$array = ['one', 'two', 'three']
function toMaj(&amp;$input, $key) {
    $input = $key.' : 'ucfirst($input);
}
array_walk($array, 'toMaj');
var_dump($array);
</code></pre>

<p>Pour résumer
les deux fonctions ont un peu près le même résultat.</p>

<ul>
<li><code>array_walk</code> prend un array et remplace chaque valeurs par Fonction(valeur).</li>
<li><code>array_map</code> prend un array et recrée un array de la même taille.</li>
</ul>


<h2>Le <code>Array_recursive_walk</code></h2>

<p>Un exemple de code.</p>

<p>Je voulais faire un <code>CamelCase</code> -> <code>snake_case</code> mais comme le <code>array_walk</code> impossible de modifier les clés des index.</p>

<p>Soit l&#8217;exemple suivant</p>

<pre><code class="php">$array =  ["Tortue-ninja" =&gt; ["leonardo" , "donatello", "michelangelo","raphael"], "Mechant" =&gt; ["shredder", "krang"]];
array_walk_recursive($array, function(&amp;$item, $key) {
    if ($key === "Tortue-ninja") {
        echo 'Cowabunga!';
    }
    $item = ucfirst($item);
});

var_dump($array);
</code></pre>

<p>Le programme n&#8217;affiche pas de <code>Cowabunga</code>, mais j&#8217;ai mis en majuscule toutes les valeurs.</p>

<pre><code>array(2) {
  'Tortue-ninja' =&gt;
  array(4) {
    [0] =&gt;
    string(8) "Leonardo"
    [1] =&gt;
    string(9) "Donatello"
    [2] =&gt;
    string(12) "Michelangelo"
    [3] =&gt;
    string(7) "Raphael"
  }
  'mechant' =&gt;
  array(2) {
    [0] =&gt;
    string(8) "Shredder"
    [1] =&gt;
    string(5) "Krang"
  }
}
</code></pre>

<p>On ne passe jamais sur le clé : <code>Tortue-ninja</code>, d&#8217;ailleurs la documentation est claire</p>

<blockquote><p>Toute clé qui est associée à un tableau n&#8217;est pas passée à la fonction de rappel.</p></blockquote>

<p>Un vrai exemple
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>    <span class="nb">array_walk_recursive</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$value</span> <span class="nx">instanceof</span> <span class="nx">\Traversable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$value</span> <span class="o">=</span> <span class="nb">iterator_to_array</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>`</p>

<p>Un exemple que l&#8217;on retrouve dans <a href="">PHPUnit</a> et <a href="">Symfony2</a></p>

<p>On veut logger des objets en les serialisant en Json. Certain objects (comme les ArrayCollection et autres..) sont <em>Traversables</em> (c&#8217;est à dire qu&#8217;il possède un Iterateur (On implémente <code>current</code>, <code>next</code>, <code>rewind</code>, <code>valid</code>). En php il est possible de transformer les Itérateurs en Array avec l&#8217;instruction <code>iterator_to_array()</code>. ainsi on transforme l&#8217;objet en Array pour avoir plus d&#8217;information.</p>

<h2>En conclusion</h2>

<p>Donc je n&#8217;ai jamais réussi à écrire un <code>array_walk_recursive</code> mais au moins j&#8217;ai réussi à écrire un post dessus.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QuickCheck Une Autre Façon De Tester]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/22/quickcheck-une-autre-facon-de-tester/"/>
    <updated>2015-08-22T19:01:42+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/22/quickcheck-une-autre-facon-de-tester</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Nous allons voir ensemble, une nouvelle façon de faire des tests. Nous allons installer utiliser un projet <a href="https://github.com/steos/php-quickcheck">php-quickcheck</a>. L&#8217;idée ici n&#8217;est pas d&#8217;écrire des tests, mais demander au logiciel de les générer.</p>

<h2>Installation.</h2>

<p>Nous allons créer le <code>composer.json</code> suivant.</p>

<pre><code class="json">{
  "require": {
    "steos/php-quickcheck": "dev-master"
  }
}
</code></pre>

<p>Puis créer un fichier <code>test.php</code>.</p>

<pre><code class="php">
require_once __DIR__ . '/vendor/autoload.php'; // Autoload files using Composer autoload

use QCheck\Generator as Gen;
use QCheck\Quick;
</code></pre>

<p>Un petit <code>composer install</code>. Et tout est en place.</p>

<h2>Exemple N°1</h2>

<h3>Affirmation</h3>

<p>Je vais essayer de prouver que <code>array_merge($list1, $list2) == $list1 + $list2</code> (<strong>ce qui est faux</strong>)</p>

<p>Je l&#8217;écris dans la fonction suivante</p>

<pre><code class="php">function isEqual(array $list1, array $list2) {
    return (array_merge($list1, $list2) == $list1 + $list2);
}
</code></pre>

<h3>Mise en place et contre-exemple.</h3>

<p>Voici le code</p>

<pre><code class="php">$test = Gen::forAll(
    [Gen::ints()-&gt;intoArrays(), Gen::ints()-&gt;intoArrays()], isEqual
 );
</code></pre>

<p><code>Gen::ints()-&gt;intoArrays()</code> génère des array avec une taille aléatoire <code>[0, 1], [-15,0,5], ..</code> que  je vais passer à la fonction <code>isEqual</code></p>

<pre><code>print_r(Quick::check(102, $test, ['echo' =&gt; true]));
</code></pre>

<p>Je vais lancer 102 fois mon test.</p>

<p>Voici ce que me dit le programme dès que je lance.</p>

<pre><code>..F
Array
(
    [result] =&gt; 
    [seed] =&gt; 1440263990644
    [failing_size] =&gt; 2
    [num_tests] =&gt; 3
    [fail] =&gt; Array
        (
            [0] =&gt; Array
                (
                    [0] =&gt; 1
                )

            [1] =&gt; Array
                (
                    [0] =&gt; -2
                    [1] =&gt; 1
                )

        )

    [shrunk] =&gt; Array
        (
            [nodes_visited] =&gt; 9
            [depth] =&gt; 3
            [result] =&gt; 
            [smallest] =&gt; Array
                (
                    [0] =&gt; Array
                        (
                            [0] =&gt; 0
                        )

                    [1] =&gt; Array
                        (
                            [0] =&gt; 0
                        )

                )

        )

)
</code></pre>

<p>Le résultat est intéressant, Le logiciel a essayé 3 fois, au troisième essai l&#8217;exemple <code>([1], [-2,1])</code> donne un cas qui ne marche pas.</p>

<p>Vérifions avec <code>php -a</code></p>

<pre><code class="">php &gt; var_dump(array_merge([1], [-2,1]));
array(3) {
  [0] =&gt;
  int(1)
  [1] =&gt;
  int(-2)
  [2] =&gt;
  int(1)
}
php &gt; var_dump([1] + [-2,1]);
array(2) {
  [0] =&gt;
  int(1)
  [1] =&gt;
  int(1)
}
</code></pre>

<p>Effectivement.. Mais il y a mieux. Le logiciel a fais un <em>shrunk</em>, c&#8217;est à dire qu&#8217;il a calculé le plus petit exemple possible qui est <code>([0], [0])</code>.</p>

<p>Donc la librairie me donne tort et en plus me donne le contre-exemple.</p>

<h2>Exemple N°2</h2>

<h3>Affirmation</h3>

<p>J&#8217;affirme que <code>(sort (array) == sort(sort(array))</code> que en gros cela ne sert à rien de trier deux fois un array.</p>

<h3>Mise en place</h3>

<pre><code>$test2 = Gen::forAll(
    [Gen::ints()-&gt;intoArrays()],
    function ($list) {
        $lista = $list;
        $listb = $list;
        sort($lista);
        sort($listb);
        sort($listb);
        return ($lista == $listb);
    }
  );

print_r(Quick::check(101, $test2, ['echo' =&gt; true]));
</code></pre>

<p>Je lance le logiciel</p>

<pre><code>.....................................................................................................Array
(
    [result] =&gt; 1
    [num_tests] =&gt; 101
    [seed] =&gt; 1440265001108
)
</code></pre>

<p>Le logiciel semble d&#8217;accord. Il a fait 101 tests, mais il n&#8217;a pas trouvé de contre-exemple.</p>

<h2>Exemple N°3</h2>

<p>Nous allons encoder en <code>run legth encoding</code> qui est l&#8217;actuel encodage des fichiers bitmaps.</p>

<p>Quelque exemples:
<code>
Input: WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
Output: 12W1B12W3B24W1B14W
</code></p>

<p>Il y a <code>12W</code> puis <code>1B</code> etc .. je compresse ma chaîne de caractères.</p>

<p>Dans l&#8217;autre sens
<code>
Input: 12W1B12W3B24W1B14W
Output: WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
</code></p>

<p>Voici une implémentation en php</p>

<pre><code class="php">function encode($str) {
    return preg_replace_callback(
        '/(.)\1+/',
        function($m) {
            return sprintf('%s%s', strlen($m[0]), $m[1]);
        },
        $str
    );
};
function decode($str) {
    return preg_replace_callback(
        '/(\d+)(\D)/',
        function($m) {
            return str_repeat($m[2], $m[1]);
        },
         $str
     );
}
</code></pre>

<p>Mon implémentation est correcte, mais il y a un petit souci. Pouvez vous deviner le souci de mon programme.</p>

<p>A priori <code>$input == decode(encode($input))</code></p>

<h3>Mise en place.</h3>

<pre><code class="php">$test3 = Gen::forAll(
    [Gen::alphaNumStrings()],
    function ($string) {
      return ($string == decode(encode($string)));
    }
);
print_r(Quick::check(101, $test2, ['echo' =&gt; true]));
</code></pre>

<p>Le logiciel ne tarde pas à trouver le souci</p>

<pre><code>.....F
Array
(
    [result] =&gt; 
    [seed] =&gt; 1440265916923
    [failing_size] =&gt; 5
    [num_tests] =&gt; 6
    [fail] =&gt; Array
        (
            [0] =&gt; G67k}
        )

    [shrunk] =&gt; Array
        (
            [nodes_visited] =&gt; 34
            [depth] =&gt; 7
            [result] =&gt; 
            [smallest] =&gt; Array
                (
                    [0] =&gt; 0 
                )

        )

)
</code></pre>

<p>La chaîne de caractère <code>"G67k"</code> ne marche pas, et en fait la chaîne <code>"0"</code> tout cours ne marche pas.</p>

<h2>Conclusion des 3 exemples.</h2>

<ul>
<li>Je n&#8217;ai pas écris de test. C&#8217;est le logiciel qui génère les tests.</li>
<li>Les tests sont aléatoires. Par exemple si j&#8217;avais limité à 5 tests l&#8217;exemple 3 pourrait passer.</li>
<li>Si le code ne passe pas le logiciel est capable de <em>réduire</em> jusqu&#8217;à trouver un contre-exemple ici la chaine <code>"0"</code> ou l&#8217;entrée <code>([0],[0])</code></li>
<li>Un autre cas, dans le dernier exemple, j&#8217;ai pris un générateur de texte qui prend des chiffres et des lettres, si j&#8217;avais pris un générateur de lettre seulement comme <code>gen::alphaString</code>. Le test passerait sans problème.</li>
</ul>


<p>Ce type de logiciel s&#8217;appelle le <a href="https://en.wikipedia.org/wiki/QuickCheck">QuickCheck</a> du nom du premier logiciel en <a href="https://en.wikipedia.org/wiki/Haskell_%28programming_language%29">Haskell</a>. Ce sont des tests aléatoires.</p>

<p>Il existe deux portage en php.</p>

<ul>
<li><a href="https://github.com/giorgiosironi/eris">eris</a></li>
<li><a href="https://github.com/steos/php-quickcheck">php-quickcheck</a></li>
</ul>


<p>Il y a le même problème que les tests unitaires: Quand les tests unitaires ne passent pas,  il y a un problème. Mais des tests unitaires qui passent ne prouve pas forcement que le logiciel est correct. Néanmoins cette méthode qui génère des milliers de tests donne des résultats assez intéressants. La capacité a trouvé automatiquement un contre-exemple (s&#8217;il y a un contre-exemple) est vraiment un plus.</p>

<p>Cela n&#8217;a pas été évident d&#8217;écrire ce post. J&#8217;ai eu un peu de mal à trouver un exemple pertinent. Je me suis inspiré des exemples de <a href="https://github.com/DRMacIver/hypothesis">hypothesis</a>. L&#8217;implémentation du RLE viens de <a href="http://rosettacode.org/wiki/Run-length_encoding">rosetta</a> mais l&#8217;exemple en php est obsolète (la regex <code>/../e</code> php5.5 n&#8217;en veux pas). J&#8217;ai retraduis le code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Décorer PHPUnit Avec Les Listeners]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/04/decorer-phpunit-avec-les-listeners/"/>
    <updated>2015-08-04T19:44:52+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/04/decorer-phpunit-avec-les-listeners</id>
    <content type="html"><![CDATA[<h2>Des test unitaires plus jolis</h2>

<p>Comme tout les programmeurs vous faites des tests unitaires. En php, On utilise souvent PHPUnit.
quand je lance mes tests je vois cela.</p>

<p><img class="center" src="/images/phpunit_screenshot.png" width="499" height="168" title="&lsquo;Screenshot de phpunit&rsquo; &lsquo;Mon terminal n\'est pas triste..&rsquo;" ></p>

<p>C&#8217;est un peu triste. Et encore j&#8217;ai activé la couleur !.</p>

<p>il existe des variantes avec <code>--testdox</code></p>

<pre><code class="sh">$ bin/phpunit --testdox
PHPUnit 4.8-ge1cc585 by Sebastian Bergmann and contributors.

Spark\Spark
 [x] It creates a string from data
 [x] It dont care if input is string
 [x] It works with float number
 [x] It s not divide by 0
</code></pre>

<p>C&#8217;est un peu mieux.</p>

<p>Il existe aussi <code>--debug</code>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>PHPUnit 4.8-ge1cc585 by Sebastian Bergmann and contributors.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Starting <span class="nb">test</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>Spark<span class="se">\S</span>parkTest::testItCreatesAStringFromData<span class="p">&amp;</span>rsquo<span class="p">;</span>.
</span><span class='line'>.
</span><span class='line'>Starting <span class="nb">test</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>Spark<span class="se">\S</span>parkTest::testItDontCareIfInputIsString<span class="p">&amp;</span>rsquo<span class="p">;</span>.
</span><span class='line'>.
</span><span class='line'>Starting <span class="nb">test</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>Spark<span class="se">\S</span>parkTest::testItWorksWithFloatNumber<span class="p">&amp;</span>rsquo<span class="p">;</span>.
</span><span class='line'>.
</span><span class='line'>Starting <span class="nb">test</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>Spark<span class="se">\S</span>parkTest::testItSNotDivideBy0<span class="p">&amp;</span>rsquo<span class="p">;</span>.
</span><span class='line'>.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Time: <span class="m">69</span> ms, Memory: 4.50Mb&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;OK <span class="o">(</span><span class="m">4</span> tests, <span class="m">4</span> assertions<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Mais on a un peu fait le tour</p>

<h2>Les Listeners de PHPUnit</h2>

<p>On peux surcharger l&#8217;affichage de PHPunit et cela grâce au listener.</p>

<h3> Comment enregistrer un listener</h3>

<p>Il suffit d&#8217;éditer <code>phpunit.xml</code> et de rajouter les lignes suivantes</p>

<pre><code class="xml">  &lt;listeners&gt;
    &lt;listener class="SparkListener" 
        file="../src/un-projet-pro/FooBundle/Tests/Listener/SparkListener.php"&gt;
    &lt;/listener&gt;
  &lt;/listeners&gt;
</code></pre>

<h3>Comment implémenter un listener.</h3>

<p>Le plus propre est d&#8217;implémenter tout les méthodes de l&#8217;interface</p>

<pre><code class="php">&lt;?php

class Monlistener implements PHPUnit_Framework_TestListener {
    public function addError(PHPUnit_Framework_Test $test, Exception $e, $time) {}
    public function addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, $time) {}
    public function addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, $time) {}
    public function addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, $time) {}
    public function startTest(PHPUnit_Framework_Test $test) {}
    public function endTest(PHPUnit_Framework_Test $test, $time) {}
    public function startTestSuite(PHPUnit_Framework_TestSuite $suite) {}
    public function endTestSuite(PHPUnit_Framework_TestSuite $suite) {}

}
</code></pre>

<p>Mais pour aujourd&#8217;hui, Je vais faire plus simple je vais hériter de la classe <code>PHPUnit_TextUI_ResultPrinter</code> si je n&#8217;ai pas envie de réécrire toutes les méthodes.</p>

<h2>Plein d&#8217;utilisation de Listener</h2>

<h3>Des statistiques sur les tests</h3>

<p>Quel est le test qui prend le plus de temps ? Facile avec le Listener suivant.</p>

<pre><code>&lt;?php
class MaxListener extends PHPUnit_TextUI_ResultPrinter
{
    public $maxTime = 0;

    private $suites = 0;
    private $endedSuites = 0;
    public function startTestSuite(PHPUnit_Framework_TestSuite $suite)
    {

        $this-&gt;suites++;
    }
    public function endTestSuite(PHPUnit_Framework_TestSuite $suite)
    {
        $this-&gt;endedSuites++;
        if ($this-&gt;suites &gt; $this-&gt;endedSuites) {
            return;
        }
        echo PHP_EOL;
        echo "le test le plus long prend $this-&gt;maxTime seconde(s)";

    }

    public function endTest(PHPUnit_Framework_Test $test, $time)
    {
        $this-&gt;maxTime = max($time, $this-&gt;maxTime);
    }
}
</code></pre>

<p>Avec ma librairie que j&#8217;ai développé dans les <a href="/blog/2015/07/19/histogramme-et-ligne-de-commande/">posts</a> précédents.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">Spark\Spark</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SparkListener</span> <span class="k">extends</span> <span class="nx">PHPUnit_TextUI_ResultPrinter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$suites</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$endedSuites</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$testTimes</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">public</span> <span class="k">function</span> <span class="nf">startTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">suites</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">endTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">endedSuites</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">suites</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">endedSuites</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nx">Spark</span><span class="o">::</span><span class="na">spark</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">testTimes</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">endTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">testTimes</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$time</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">Voici</span> <span class="nx">le</span> <span class="nx">résultat</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">bin</span><span class="o">/</span><span class="nx">phpunit</span> <span class="o">-</span><span class="nx">c</span> <span class="nx">build</span><span class="o">/</span><span class="nx">phpunit</span><span class="o">.</span><span class="nx">xml</span>
</span><span class='line'><span class="nx">PHPUnit</span> <span class="mf">4.5</span><span class="o">.</span><span class="mi">1</span> <span class="nx">by</span> <span class="nx">Sebastian</span> <span class="nx">Bergmann</span> <span class="k">and</span> <span class="nx">contributors</span><span class="o">.&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Configuration</span> <span class="nx">read</span> <span class="nx">from</span> <span class="o">/</span><span class="nx">home</span><span class="o">/</span><span class="nx">marc</span><span class="o">/</span><span class="nx">prog</span><span class="o">/</span><span class="nx">Un</span><span class="o">-</span><span class="nx">projet</span><span class="o">-</span><span class="nx">pro</span><span class="o">/</span><span class="nx">build</span><span class="o">/</span><span class="nx">phpunit</span><span class="o">.</span><span class="nx">xml</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">..</span>
</span><span class='line'><span class="nx">█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁</span>
</span><span class='line'><span class="nx">le</span> <span class="nx">test</span> <span class="nx">le</span> <span class="nx">plus</span> <span class="nx">long</span> <span class="nx">prend</span> <span class="mf">0.2183518409729</span> <span class="nx">seconde</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Time</span><span class="o">:</span> <span class="mi">971</span> <span class="nx">ms</span><span class="p">,</span> <span class="nx">Memory</span><span class="o">:</span> <span class="mf">17.25</span><span class="nx">Mb</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">OK</span> <span class="p">(</span><span class="mi">53</span> <span class="nx">tests</span><span class="p">,</span> <span class="mi">98</span> <span class="nx">assertions</span><span class="p">)</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="c1">### Libérer de la mémoire</span>
</span><span class='line'>
</span><span class='line'><span class="nx">On</span> <span class="nx">peux</span> <span class="nx">libérer</span> <span class="nx">de</span> <span class="nx">la</span> <span class="nx">mémoire</span> <span class="nx">en</span> <span class="nx">mettant</span> <span class="nx">à</span> <span class="sb">`null`</span> <span class="nx">les</span> <span class="nx">mocks</span> <span class="nx">à</span> <span class="nx">la</span> <span class="nx">fin</span> <span class="nx">du</span> <span class="nx">test</span><span class="o">.</span> <span class="p">(</span><span class="nx">exemple</span> <span class="nx">trouvé</span> <span class="nx">sur</span> <span class="nx">github</span> <span class="p">[</span><span class="nx">mybuilder</span><span class="o">/</span><span class="nx">phpunit</span><span class="o">-</span><span class="nx">accelerator</span><span class="p">](</span><span class="nx">https</span><span class="o">://</span><span class="nx">github</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">mybuilder</span><span class="o">/</span><span class="nx">phpunit</span><span class="o">-</span><span class="nx">accelerator</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">FreeListener</span> <span class="k">implements</span> <span class="nx">PHPUnit_Framework_TestListener</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ..</span>
</span><span class='line'>    <span class="c1">// les autres methodes vides.</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$refl</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReflectionObject</span><span class="p">(</span><span class="nv">$test</span><span class="p">);</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$refl</span><span class="o">-&gt;</span><span class="na">getProperties</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$prop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$prop</span><span class="o">-&gt;</span><span class="na">isStatic</span><span class="p">()</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="mi">0</span> <span class="o">!==</span> <span class="nb">strpos</span><span class="p">(</span><span class="nv">$prop</span><span class="o">-&gt;</span><span class="na">getDeclaringClass</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">(),</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">PHPUnit_</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;))</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$prop</span><span class="o">-&gt;</span><span class="na">setAccessible</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>                <span class="nv">$prop</span><span class="o">-&gt;</span><span class="na">setValue</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>On pourrait faire cela sur un <code>tearDown()</code></p>

<h3>Jouer des fixtures</h3>

<p>Normalement il n&#8217;y a pas de fixture dans PHPUnit. Mais en pratique pour tester certaines méthodes dans les repository, ben il n&#8217;y pas beaucoup le choix.  On peux refaire la base, dropper le schéma, un truncate à chaque test ou <code>memory::sqlite</code>. Mais sur certaines bases de données, c&#8217;est un peu compliqué. Une solution est de vider la base entre chaque suites de tests. Une proposition</p>

<pre><code class="php">class DBListener implements PHPUnit_Framework_TestListener
{
    // .. 
    // les autres methodes vides.

    public function startTestSuite(PHPUnit_Framework_TestSuite $suite)
    {
        $this-&gt;truncateDb();
    }

    public function truncateDb() {
        // vide la table..
    }
    public function fixtureDb() {
        // joue les fixtures
    }
    public function startTest(PHPUnit_Framework_Test $test)
    {
        // si le nom du test contient truncate
        if (strpos($test-&gt;getName(), 'truncate')) {
            $this-&gt;truncateDB();
        }
        //
        if (strpos($test-&gt;getName(), 'fixture')) {
            $this-&gt;truncateDB();
            $this-&gt;fixtureDB();
        }
    }
}
</code></pre>

<p>Si le nom du test contient <code>truncate</code> et <code>fixture</code> alors on force le truncate et/ou fixture. Une autre possibilité est d&#8217;implémenter la méthode <code>setUpBeforeClass</code> dans le test. Cette méthode est jouée juste avant l&#8217;instantiation de la classe. C&#8217;est du statique, donc pas forcement la joie..</p>

<pre><code>    public static function setUpBeforeClass()
    {
        parent::setUpBeforeClass();
        self::TruncateDB()

    }
</code></pre>

<h3>Relancer les tests qui ne passent pas.</h3>

<p>Pour le fun..</p>

<pre><code>&lt;?php
class FailureListener extends PHPUnit_TextUI_ResultPrinter
{
    private $suites = 0;
    private $endedSuites = 0;
    public $failTest = array();

    public function startTestSuite(PHPUnit_Framework_TestSuite $suite)
    {
        $this-&gt;suites++;
    }

    public function addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, $time) {
       $this-&gt;failTest[] = $test-&gt;getName();
    }
    public function startTest(PHPUnit_Framework_Test $test) {}

    public function endTestSuite(PHPUnit_Framework_TestSuite $suite)
    {
        $this-&gt;endedSuites++;
        if ($this-&gt;suites &gt; $this-&gt;endedSuites) {
            return;
        }
        $cli = implode('|', $this-&gt;failTest);
        echo PHP_EOL . "Pour relancer seulement les tests qui ne passent pas ajoutez" . PHP_EOL;
        echo "--filter '($cli)'";
    }

}
</code></pre>

<p>Le script en action.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bin/phpunit -c build/phpunit.xml
</span><span class='line'>PHPUnit 4.5.1 by Sebastian Bergmann and contributors.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Configuration <span class="nb">read </span>from /home/marc/prog/un-projet-pro/build/phpunit.xml&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="p">&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;</span>..F.F<span class="p">&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;&amp;</span>hellip<span class="p">;</span>..
</span><span class='line'>Pour relancer seulement les tests qui ne passent pas ajoutez
</span><span class='line'><span class="p">&amp;</span>ndash<span class="p">;</span>filter <span class="p">&amp;</span>lsquo<span class="p">;</span><span class="o">(</span>testObjectNeedUpdate<span class="p">|</span>testUpdateObject<span class="o">)</span><span class="p">&amp;</span>rsquo<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Time: <span class="m">958</span> ms, Memory: 17.25Mb&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>La seconde fois avec la commande qui va bien.
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;bin/phpunit -c build/phpunit.xml <span class="p">&amp;</span>ndash<span class="p">;</span>filter <span class="p">&amp;</span>lsquo<span class="p">;</span><span class="o">(</span>testObjectNeedUpdate<span class="p">|</span>testUpdateObject<span class="o">)</span><span class="p">&amp;</span>rsquo<span class="p">;</span>                     &lt;br/&gt;
</span><span class='line'>PHPUnit 4.5.1 by Sebastian Bergmann and contributors.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Configuration <span class="nb">read </span>from /home/marc/prog/un-projet-pro/build/phpunit.xml&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;FF&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Time: <span class="m">116</span> ms, Memory: 9.25Mb
</span></code></pre></td></tr></table></div></figure></p>

<h2>Conclusion</h2>

<p>Il y a encore pas mal d&#8217;utilisation je pense au <a href="https://github.com/whatthejeff/nyancat-phpunit-resultprinter">nyan-cat</a> ! Ou l&#8217;utilisation avec des notifications sur le bureau par exemple <a href="https://github.com/llaville/phpunit-LoggerTestListener">ici</a>.</p>

<p>La librairie <a href="https://packagist.org/packages/mcamuzat/spark">mcamuzat/spark</a> a été initialement fait pour ce post. J&#8217;ai passé finalement plus de temps sur la création de la librairie.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Créer Son Dépôt Sous Packagist]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/24/creer-son-depot-sous-packagist/"/>
    <updated>2015-07-24T17:50:58+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/24/creer-son-depot-sous-packagist</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>J&#8217;avais montré dans le précédent <a href="/blog/2015/07/19/histogramme-et-ligne-de-commande/">Post</a>, une fonction qui permet de créer des histogrammes.</p>

<p>J&#8217;ai décidé de la publier sous <a href="https://packagist.org/">Packagist</a>. Je n&#8217;avais jamais fais. Je vous propose de suivre mon cheminement</p>

<ul>
<li>Je mets au propre le fichier</li>
<li>J&#8217;ajoute le <code>composer.json</code></li>
<li>j&#8217;ajoute les tests unitaires</li>
<li>Je crée le dépôt sur Github</li>
<li>J&#8217;enregistre le dépôt sur Packagist</li>
</ul>


<h2>Industrialisation</h2>

<p>Nous sommes partis du code suivant.</p>

<pre><code class="php">function spark($array) {
    $bars = array('▁','▂','▃','▄','▅','▆','▇','█');
    $divide = max($array);
    if ($divide == 0) {
        $divide = 1;
    }
    $countBars = count($bars)-1;
    $out = '';
    foreach ($array as $tick)
        $out .= $bars[round(($tick / $divide) * $countBars)];
    echo $out;
}

// si je n'ai aucun argument ..
if (count($argv) == 0) {
    $str = '';
    // recupère le flux d'entrée
    while (!feof(STDIN)) {
        $str .= fgets(STDIN);
    }
    // explode laisse la derniere ligne vide.
    // d'ou le array_filter
    spark(array_filter(explode("\n", $str),'strlen'));
    return 0;
}

$iDontCare =array_shift($argv);
spark($argv);
return 0;
</code></pre>

<p>Je vais découper cela en plusieurs fichiers et répertoires.</p>

<pre><code class="">.
├── bin
│   └── spark
├── composer.json
├── LICENSE
├── phpunit.xml.dist
├── src
│   └── Spark
│       └── Spark.php
└── tests
    ├── bootstrap.php
    └── Spark
        └── SparkTest.php
</code></pre>

<p>Voici <code>Spark.php</code></p>

<pre><code class="php">&lt;?php
namespace Spark;

class Spark
{

    private static $bars = array('▁','▂','▃','▄','▅','▆','▇','█');
    /**
     *
     */
    public static function spark($array)
    {
        $divide = max($array);

        if ($divide == 0) {
            $divide = 1;
        }
        $countTick = count(self::$bars)-1;
        $out = '';
        foreach ($array as $tick) {
            $out .= self::$bars[round(($tick / $divide) * $countTick)];
        }
        return $out;
    }
}
</code></pre>

<p>Et le fichier <code>spark</code> dans le répertoire <code>bin</code></p>

<pre><code class="php">#!/usr/bin/env php
&lt;?php

require_once __DIR__ . '/../vendor/autoload.php'; // Autoload files using Composer autoload

use Spark\Spark;

$iDontCare =array_shift($argv);
if (count($argv) == 0) {
    $str = '';
    while (!feof(STDIN)) {
        $str .= fgets(STDIN);
    }
    echo Spark::spark(array_filter(explode("\n", $str),'strlen'));
    return 0;
}
echo Spark::spark($argv);
return 0;
</code></pre>

<h2>Le Composer.json</h2>

<p><strong>Pour publier sur Packagist il faut un <code>composer.json</code></strong></p>

<p>C&#8217;est plutôt simple en fait. Il suffit de lancer la commande <code>composer init</code>. Tout se fait de manière interactive.</p>

<p>à la fin j&#8217;obtiens.</p>

<pre><code class="javascript">{
    "name": "mcamuzat/spark",
    "description": "histogram in command line. Clone of holman/spark",
    "require-dev": {
        "phpunit/phpunit": "~4.0",
        "squizlabs/php_codesniffer": "2.*"
    },
    "license": "MIT",
    "authors": [
        {
            "name": "Marc Camuzat",
            "email": "marc.camuzat@gmail.com"
        }
    ],
    "minimum-stability": "dev",
    "require": {},
    "autoload": {
        "psr-0": {
            "Spark": "src/"
        }
    },
    "config": {
        "bin-dir": "bin"
    },
    "bin": ["bin/spark"]
}
</code></pre>

<p>Je crée le Namespace et j&#8217;ajoute que j&#8217;ai un fichier à marquer comme exécutable de le répertoire <code>bin/spark</code>. Je n&#8217;ai aucune dépendance.</p>

<h2>Ajoutons les tests.</h2>

<p>Il faut un minimum de tests.</p>

<p>Pour avoir des tests il faut 3 fichiers</p>

<ul>
<li>Un <code>phpunit.xml.dist</code></li>
<li>Un <code>bootstrap.php</code> pour qui se borne à appeler l&#8217;autoload de composer</li>
<li>Enfin un fichier de test</li>
</ul>


<p>Et installer PHPUnit (qui est déjà dans mon <code>composer.json</code>)</p>

<p>Le <code>phpunit.xml.dist</code></p>

<pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;phpunit backupGlobals="false"
         backupStaticAttributes="false"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="false"
         syntaxCheck="false"
         bootstrap="tests/bootstrap.php"
&gt;
    &lt;testsuites&gt;
        &lt;testsuite name="Spark Test Suite"&gt;
            &lt;directory&gt;./tests/&lt;/directory&gt;
        &lt;/testsuite&gt;
    &lt;/testsuites&gt;

    &lt;filter&gt;
        &lt;whitelist&gt;
            &lt;directory&gt;./src/&lt;/directory&gt;
        &lt;/whitelist&gt;
    &lt;/filter&gt;
&lt;/phpunit&gt;
</code></pre>

<p>On appelle le <code>bootstrap.php</code> qui fait venir l&#8217;autoloader</p>

<pre><code class="php">&lt;?php
$loader = @include __DIR__.'/../vendor/autoload.php';
if (!$loader) {
    $loader = require __DIR__.'/../../../../vendor/autoload.php';
}
</code></pre>

<p>Et enfin les tests</p>

<pre><code class="php">&lt;?php
namespace Spark;
use Spark\Spark;
class SparkTest extends \PHPUnit_Framework_TestCase
{
    public function testItCreateAStringFromData()
    {
        $out = Spark::spark(array(1,5,22,13,5));
        $this-&gt;assertEquals('▁▃█▅▃', $out);
    }
    public function testItDontCareifInputIsString()
    {
        $out = Spark::spark(array("2","4","8"));
        $this-&gt;assertEquals('▃▅█', $out);
    }
    public function testItWorkWithFloatNumber()
    {
        $out = Spark::spark(array("0.2","0.8","0.4"));
        $this-&gt;assertEquals('▃█▅', $out);
    }
    public function testItNotDivideBy0()
    {
        $out = Spark::spark(array(0,0,0));
        $this-&gt;assertEquals('▁▁▁', $out);
    }
}
</code></pre>

<p>Lançons les tests</p>

<pre><code class="sh">$ bin/phpunit 
PHPUnit 4.8-ge1cc585 by Sebastian Bergmann and contributors.

....

Time: 722 ms, Memory: 4.50Mb

OK (4 tests, 4 assertions)
</code></pre>

<h2>Publication</h2>

<p>Je crée le dépôt sur <a href="https://github.com/mcamuzat/spark">GitHub</a> que je clone</p>

<pre><code>git clone mcamuzat/spark.git
git add .
git commit -m"initialize repo"
git push -u origin master
</code></pre>

<p>Je me suis inscris sur <a href="https://packagist.org/">Packagist</a>.</p>

<p>Il suffit de cliquer sur <strong>Submit</strong></p>

<p><img class="center" src="/images/packagist_ajout.png" width="600" height="258" title="&lsquo;Ajouter un dépôt sur Packagist&rsquo; &lsquo;Ajouter un dépôt sur packagist&rsquo;" ></p>

<p>Et de mettre l&#8217;url de Github. Et c&#8217;est tout !</p>

<h2>Des liens</h2>

<ul>
<li>Le projet sur <a href="https://github.com/mcamuzat/spark">Github</a></li>
<li>Le projet sur <a href="https://packagist.org/packages/mcamuzat/spark">Packagist</a></li>
</ul>


<h2>En conclusion</h2>

<p>Il manque encore le <code>README</code> sur Github, car pour l&#8217;instant l&#8217;intérêt du programme est encore un peu mystérieux pour une personne extérieure.</p>

<p>J&#8217;espère que si vous voulez créer votre propre librairie sur Packagist, ce tutoriel vous servira.</p>
]]></content>
  </entry>
  
</feed>
