<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Qa | Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/qa/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-08-15T23:07:17+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Décorer PHPUnit Avec Les Listeners]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/04/decorer-phpunit-avec-les-listeners/"/>
    <updated>2015-08-04T19:44:52+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/04/decorer-phpunit-avec-les-listeners</id>
    <content type="html"><![CDATA[<h2>Des test unitaires plus jolis</h2>

<p>Comme tout les programmeurs vous faites des tests unitaires. En php, On utilise souvent PHPUnit.
quand je lance mes tests je vois cela.</p>

<p>{% img center /images/phpunit_screenshot.png 499 168 &lsquo;Screenshot de phpunit&rsquo; &lsquo;Mon terminal n&#39;est pas triste..&rsquo; %}</p>

<p>C&#8217;est un peu triste. Et encore j&#8217;ai activé la couleur !.</p>

<p>il existe des variantes avec <code>--testdox</code></p>

<pre><code class="sh">$ bin/phpunit --testdox
PHPUnit 4.8-ge1cc585 by Sebastian Bergmann and contributors.

Spark\Spark
 [x] It creates a string from data
 [x] It dont care if input is string
 [x] It works with float number
 [x] It s not divide by 0
</code></pre>

<p>C&#8217;est un peu mieux.</p>

<p>Il existe aussi <code>--debug</code>
&#8220;` sh
PHPUnit 4.8-ge1cc585 by Sebastian Bergmann and contributors.</p>

<p>Starting test &lsquo;Spark\SparkTest::testItCreatesAStringFromData&rsquo;.
.
Starting test &lsquo;Spark\SparkTest::testItDontCareIfInputIsString&rsquo;.
.
Starting test &lsquo;Spark\SparkTest::testItWorksWithFloatNumber&rsquo;.
.
Starting test &lsquo;Spark\SparkTest::testItSNotDivideBy0&rsquo;.
.</p>

<p>Time: 69 ms, Memory: 4.50Mb</p>

<p>OK (4 tests, 4 assertions)
&#8220;`</p>

<p>Mais on a un peu fait le tour</p>

<h2>Les Listeners de PHPUnit</h2>

<p>On peux surcharger l&#8217;affichage de PHPunit et cela grâce au listener.</p>

<h3> Comment enregistrer un listener</h3>

<p>Il suffit d&#8217;éditer <code>phpunit.xml</code> et de rajouter les lignes suivantes</p>

<pre><code class="xml">  &lt;listeners&gt;
    &lt;listener class="SparkListener" 
        file="../src/un-projet-pro/FooBundle/Tests/Listener/SparkListener.php"&gt;
    &lt;/listener&gt;
  &lt;/listeners&gt;
</code></pre>

<h3>Comment implémenter un listener.</h3>

<p>Le plus propre est d&#8217;implémenter tout les méthodes de l&#8217;interface</p>

<pre><code class="php">&lt;?php

class Monlistener implements PHPUnit_Framework_TestListener {
    public function addError(PHPUnit_Framework_Test $test, Exception $e, $time) {}
    public function addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, $time) {}
    public function addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, $time) {}
    public function addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, $time) {}
    public function startTest(PHPUnit_Framework_Test $test) {}
    public function endTest(PHPUnit_Framework_Test $test, $time) {}
    public function startTestSuite(PHPUnit_Framework_TestSuite $suite) {}
    public function endTestSuite(PHPUnit_Framework_TestSuite $suite) {}

}
</code></pre>

<p>Mais pour aujourd&#8217;hui, Je vais faire plus simple je vais hériter de la classe <code>PHPUnit_TextUI_ResultPrinter</code> si je n&#8217;ai pas envie de réécrire toutes les méthodes.</p>

<h2>Plein d&#8217;utilisation de Listener</h2>

<h3>Des statistiques sur les tests</h3>

<p>Quel est le test qui prend le plus de temps ? Facile avec le Listener suivant.</p>

<pre><code>&lt;?php
class MaxListener extends PHPUnit_TextUI_ResultPrinter
{
    public $maxTime = 0;

    private $suites = 0;
    private $endedSuites = 0;
    public function startTestSuite(PHPUnit_Framework_TestSuite $suite)
    {

        $this-&gt;suites++;
    }
    public function endTestSuite(PHPUnit_Framework_TestSuite $suite)
    {
        $this-&gt;endedSuites++;
        if ($this-&gt;suites &gt; $this-&gt;endedSuites) {
            return;
        }
        echo PHP_EOL;
        echo "le test le plus long prend $this-&gt;maxTime seconde(s)";

    }

    public function endTest(PHPUnit_Framework_Test $test, $time)
    {
        $this-&gt;maxTime = max($time, $this-&gt;maxTime);
    }
}
</code></pre>

<p>Avec ma librairie que j&#8217;ai développé dans les <a href="/blog/2015/07/19/histogramme-et-ligne-de-commande/">posts</a> précédents.
&#8220;` php
use Spark\Spark;
class SparkListener extends PHPUnit_TextUI_ResultPrinter
{
    private $suites = 0;
    private $endedSuites = 0;
    public $testTimes = array();</p>

<pre><code>public function startTestSuite(PHPUnit_Framework_TestSuite $suite)
{
    $this-&gt;suites++;
}
public function endTestSuite(PHPUnit_Framework_TestSuite $suite)
{
    $this-&gt;endedSuites++;
    if ($this-&gt;suites &gt; $this-&gt;endedSuites) {
        return;
    }
    echo "\n";
    echo Spark::spark($this-&gt;testTimes);

}

public function endTest(PHPUnit_Framework_Test $test, $time)
{
    $this-&gt;testTimes[] = $time;
}
</code></pre>

<p>}</p>

<pre><code>
Voici le résultat
</code></pre>

<p>bin/phpunit -c build/phpunit.xml
PHPUnit 4.5.1 by Sebastian Bergmann and contributors.</p>

<p>Configuration read from /home/marc/prog/Un-projet-pro/build/phpunit.xml</p>

<p>&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;..
█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁
le test le plus long prend 0.2183518409729 seconde(s)</p>

<p>Time: 971 ms, Memory: 17.25Mb</p>

<p>OK (53 tests, 98 assertions)</p>

<pre><code>
### Libérer de la mémoire

On peux libérer de la mémoire en mettant à `null` les mocks à la fin du test. (exemple trouvé sur github [mybuilder/phpunit-accelerator](https://github.com/mybuilder/phpunit-accelerator))
</code></pre>

<p>class FreeListener implements PHPUnit_Framework_TestListener
{
    // ..
    // les autres methodes vides.
    public function endTest(PHPUnit_Framework_Test $test, $time)
    {
        $refl = new ReflectionObject($test);
        foreach ($refl->getProperties() as $prop) {
            if (!$prop->isStatic() &amp;&amp; 0 !== strpos($prop->getDeclaringClass()->getName(), &lsquo;PHPUnit_&rsquo;)) {
                $prop->setAccessible(true);
                $prop->setValue($this, null);
            }
        }
    }
}
&#8220;`</p>

<p>On pourrait faire cela sur un <code>tearDown()</code></p>

<h3>Jouer des fixtures</h3>

<p>Normalement il n&#8217;y a pas de fixture dans PHPUnit. Mais en pratique pour tester certaines méthodes dans les repository, ben il n&#8217;y pas beaucoup le choix.  On peux refaire la base, dropper le schéma, un truncate à chaque test ou <code>memory::sqlite</code>. Mais sur certaines bases de données, c&#8217;est un peu compliqué. Une solution est de vider la base entre chaque suites de tests. Une proposition</p>

<pre><code class="php">class DBListener implements PHPUnit_Framework_TestListener
{
    // .. 
    // les autres methodes vides.

    public function startTestSuite(PHPUnit_Framework_TestSuite $suite)
    {
        $this-&gt;truncateDb();
    }

    public function truncateDb() {
        // vide la table..
    }
    public function fixtureDb() {
        // joue les fixtures
    }
    public function startTest(PHPUnit_Framework_Test $test)
    {
        // si le nom du test contient truncate
        if (strpos($test-&gt;getName(), 'truncate')) {
            $this-&gt;truncateDB();
        }
        //
        if (strpos($test-&gt;getName(), 'fixture')) {
            $this-&gt;truncateDB();
            $this-&gt;fixtureDB();
        }
    }
}
</code></pre>

<p>Si le nom du test contient <code>truncate</code> et <code>fixture</code> alors on force le truncate et/ou fixture. Une autre possibilité est d&#8217;implémenter la méthode <code>setUpBeforeClass</code> dans le test. Cette méthode est jouée juste avant l&#8217;instantiation de la classe. C&#8217;est du statique, donc pas forcement la joie..</p>

<pre><code>    public static function setUpBeforeClass()
    {
        parent::setUpBeforeClass();
        self::TruncateDB()

    }
</code></pre>

<h3>Relancer les tests qui ne passent pas.</h3>

<p>Pour le fun..</p>

<pre><code>&lt;?php
class FailureListener extends PHPUnit_TextUI_ResultPrinter
{
    private $suites = 0;
    private $endedSuites = 0;
    public $failTest = array();

    public function startTestSuite(PHPUnit_Framework_TestSuite $suite)
    {
        $this-&gt;suites++;
    }

    public function addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, $time) {
       $this-&gt;failTest[] = $test-&gt;getName();
    }
    public function startTest(PHPUnit_Framework_Test $test) {}

    public function endTestSuite(PHPUnit_Framework_TestSuite $suite)
    {
        $this-&gt;endedSuites++;
        if ($this-&gt;suites &gt; $this-&gt;endedSuites) {
            return;
        }
        $cli = implode('|', $this-&gt;failTest);
        echo PHP_EOL . "Pour relancer seulement les tests qui ne passent pas ajoutez" . PHP_EOL;
        echo "--filter '($cli)'";
    }

}
</code></pre>

<p>Le script en action.
&#8220;` sh
bin/phpunit -c build/phpunit.xml
PHPUnit 4.5.1 by Sebastian Bergmann and contributors.</p>

<p>Configuration read from /home/marc/prog/un-projet-pro/build/phpunit.xml</p>

<p>&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;..F.F&hellip;&hellip;&hellip;..
Pour relancer seulement les tests qui ne passent pas ajoutez
&ndash;filter &lsquo;(testObjectNeedUpdate|testUpdateObject)&rsquo;</p>

<p>Time: 958 ms, Memory: 17.25Mb</p>

<pre><code>
La seconde fois avec la commande qui va bien.
</code></pre>

<p>bin/phpunit -c build/phpunit.xml &ndash;filter &lsquo;(testObjectNeedUpdate|testUpdateObject)&rsquo;                     <br/>
PHPUnit 4.5.1 by Sebastian Bergmann and contributors.</p>

<p>Configuration read from /home/marc/prog/un-projet-pro/build/phpunit.xml</p>

<p>FF</p>

<p>Time: 116 ms, Memory: 9.25Mb
&#8220;`</p>

<h2>Conclusion</h2>

<p>Il y a encore pas mal d&#8217;utilisation je pense au <a href="https://github.com/whatthejeff/nyancat-phpunit-resultprinter">nyan-cat</a> ! Ou l&#8217;utilisation avec des notifications sur le bureau par exemple <a href="https://github.com/llaville/phpunit-LoggerTestListener">ici</a>.</p>

<p>La librairie <a href="https://packagist.org/packages/mcamuzat/spark">mcamuzat/spark</a> a été initialement fait pour ce post. J&#8217;ai passé finalement plus de temps sur la création de la librairie.</p>
]]></content>
  </entry>
  
</feed>
