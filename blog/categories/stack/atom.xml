<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: stack | Journal d'un panda qui code]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/stack/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2016-02-21T18:01:12+01:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Haskell : Stack]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/12/27/haskell-stack/"/>
    <updated>2015-12-27T18:39:17+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/12/27/haskell-stack</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Je ne développe pas en <a href="https://www.haskell.org/">Haskell</a> mais je regarde beaucoup. La série que j&#8217;écris sur la programmation fonctionnelle me force à regarder le langage de plus près. Le monde haskell s&#8217;est enrichi d&#8217;un nouvel outil <strong>Stack</strong>.</p>

<h2>Stack et Haskell</h2>

<p>Stack est un logiciel qui gère l&#8217;installation/les packages/la création/le build/les tests d&#8217;un projet Haskell.</p>

<p>Il a plusieurs avantages:</p>

<ul>
<li>Il a été pensé pour automatiser le build.</li>
<li>Il a une ligne de commande sympathique que nous allons voir par la suite.</li>
<li>Il utilise un fichier <code>stack.yml</code> c&#8217;est l&#8217;équivalent d&#8217;un <code>composer.json</code> en php ou un <code>package.json</code> en node.</li>
<li>Tout est installé dans le <code>~/.stack</code> tout les programmes sont <em>isolés</em> et n&#8217;interfèrent pas avec les autres logiciels déjà pré installés.</li>
</ul>


<!--more-->


<h2>Mise en place.</h2>

<p>Il suffit d&#8217;ajouter les clés/et le dépôt sous ubuntu :  <a href="http://docs.haskellstack.org/en/stable/README.html#how-to-install">voir la documentation</a>
Une fois que le logiciel est installé</p>

<h3>Etape 1 : structure d&#8217;un projet.</h3>

<pre><code>$ stack new my-project
</code></pre>

<p>crée une arborescence toute faite</p>

<pre><code>.
├── LICENSE
├── Setup.hs
├── app
│   └── Main.hs
├── my-project.cabal
├── src
│   └── Lib.hs
├── stack.yaml
└── test
    └── Spec.hs

    3 directories, 7 files
</code></pre>

<p>A noter qu&#8217;il existe des templates d&#8217;applications (Un peu comme <a href="http://yeoman.io/">Yeoman</a>)</p>

<p>Par exemple pour créer une application Yesod (Pour faire un serveur web) et Mysql</p>

<pre><code>$ stack new mon-projet yesod-mysql
</code></pre>

<p>Pour lister les différents templates
<code>
$ stack templates
chrisdone
...
...
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite
</code></p>

<h2>Etape 2 : Installation des librairies</h2>

<pre><code>$ cd mon-projet
$ stack setup
</code></pre>

<p>Si Haskell n&#8217;est pas encore installé dans <code>~/.stack</code>, le logiciel s&#8217;occupe de tout, il installe aussi toutes les dépendances.</p>

<h2>Etape 3 : build et compilation</h2>

<pre><code>$ stack build
</code></pre>

<p>Le haskell est un language compilé. Le logiciel compile tout le projet.</p>

<h2>Etape 4 : Lancer le programme</h2>

<p>Pour lancer le programme</p>

<pre><code>$ stack exec mon-projet
</code></pre>

<p>Pour lancer les tests. Tout les projets viennents avec des tests
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack test&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>## Etape 5 : Installer le programme
</span><span class='line'>un peu comme un `make install` 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ stack install</span></code></pre></td></tr></table></div></figure></p>

<h2>Etape 6 : Docker</h2>

<p>Docker c&#8217;est cool et pratique.</p>

<p>dans le <code>stack.yml</code>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&hellip;
</span><span class='line'>&hellip;
</span><span class='line'>image:
</span><span class='line'>  container:
</span><span class='line'>    # Image de base
</span><span class='line'>    base: &ldquo;fpco/ubuntu-with-libgmp:14.04&rdquo;
</span><span class='line'>    # Noms de l'iso.
</span><span class='line'>    name: &ldquo;mcamuzat/mon-projet&rdquo;
</span><span class='line'>    # Nom du programme à lancer
</span><span class='line'>    entrypoints:
</span><span class='line'>      - mon-projet&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>Si l'image de base existe déjà
</span><span class='line'>
</span><span class='line'>Alors
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ stack image container</span></code></pre></td></tr></table></div></figure></p>

<p>Cela génère le container.</p>

<p>Il ne reste plus qu&#8217;à lancer le container
<code>
sudo docker run -t -i mcamuzat/mon-projet mon-projet
</code></p>

<h2>Listes de commandes</h2>

<ul>
<li><code>stack new nom-du-projet nom-du-template</code> crée un nouveau projet</li>
<li><code>stack setup</code> mise en place du projet</li>
<li><code>stack build</code> compile le projet</li>
<li><code>stack exec nom-du-programme</code> lance le programme</li>
<li><code>stack repl</code> Lance le mode interactif</li>
<li><code>stack test</code> Lance les tests</li>
<li><code>stack install</code> installe le programme.</li>
<li><code>stack templates</code> liste tout les templates.</li>
</ul>


<h2>Conclusion</h2>

<p>Je me mets au Haskell. C&#8217;est assez passionnant. Le langage n&#8217;est pas simple (je me casse un peu les dents dessus). Je suis pour l&#8217;instant juste sur les premiers problèmes de <a href="http://www.codewars.com/">codewars</a>. J&#8217;espère faire des post sur haskell par la suite. Il y a déja plein de tutoriels.</p>

<h2>Liens</h2>

<ul>
<li><a href="http://docs.haskellstack.org/en/stable/README.html">Le site officiel</a></li>
<li><a href="http://conscientiousprogrammer.com/blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/">Une introduction en anglais</a></li>
<li><a href="http://www.stephendiehl.com/posts/haskell_2016.html">Un second article an anglais</a></li>
<li><a href="https://www.fpcomplete.com/blog/2015/11/kubernetes">Créer le container Docker</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
