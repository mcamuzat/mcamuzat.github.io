<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-06-28T20:00:19+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Less Is More Et BASH]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/06/28/less-is-more-et-bash/"/>
    <updated>2015-06-28T19:19:59+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/06/28/less-is-more-et-bash</id>
    <content type="html"><![CDATA[<h2>less comme tail -f</h2>

<p>On peux utiliser <code>less</code> pour suivre et parser les logs avec la commande</p>

<pre><code>less +F nom_du_fichier
</code></pre>

<p>Ou tout simplement appuyer sur <code>F</code> quand le fichier est ouvert avec <code>less</code>.</p>

<p>Less est compatible avec les raccourcis VI donc les commandes suivantes marchent</p>

<pre><code>gg # debut du fichier
G # fin du fichier
/ #recherche
&amp; #affiche seulement les lignes qui contiennent le mot 
h,j,k,l les directions
</code></pre>

<p>les touche suivantes marche aussi avec <code>man</code></p>

<p>Je vous conseille ce post sur les <a href="blog/2015/03/08/comprendre-les-raccourcis-claviers-de-vi-slash-vim/">mouvement vi</a></p>

<h2>Éditer une ligne de commande trop complexe</h2>

<p>Si on souhaite récupérer la commande actuelle sous BASH. C&#8217;est <code>Ctrl x + Ctrl e</code>. Cela ouvre la commande actuelle dans <code>vi</code> ou votre éditeur par défaut <code>$EDITOR</code> enregistrer et quitter.</p>

<h2>Copier/Coller dans bash</h2>

<ul>
<li>Coupe toute la ligne : <code>Ctrl u</code></li>
<li>Coupe à droite du curseur: <code>Ctrl k</code></li>
<li>Coller <code>Ctrl y</code></li>
</ul>


<h3>Cas d&#8217;utilisation</h3>

<pre><code>vim /etc/hosts (oups j'ai oublié le sudo..)
&lt;Ctrl u&gt; sudo &lt;Ctrl k&gt;
</code></pre>

<h1>Annuler dans Bash</h1>

<p>C&#8217;est <code>Ctrl _</code></p>

<h1>En conclusion</h1>

<p>Les raccourcis claviers <code>Ctrl _</code> et <code>Ctrl y</code> sont des raccourcis claviers de emacs.</p>

<p>Bien qu&#8217;utilisateur Vim, j&#8217;aime beaucoup Emacs. Notamment le <code>org-mode</code>. Emacs est supérieur à Vim. (plus de mode, plus de personnalisation, une véritable interaction en REPL pour les langage type lisp). Il y a une tendance à utiliser Emacs avec le Evil-mode (ce qui en gros rajoute les raccourcis claviers de vim dans Emacs). Mais je pas encore passé le cap.</p>

<p>Il est possible de passer son BASH en Vi-mode avec la commande suivante. Personnellement j&#8217;aime pas.</p>

<pre><code>set -o vi
</code></pre>

<p>L&#8217;article <a href="http://www.catonmat.net/blog/bash-vi-editing-mode-cheat-sheet/">suivant</a> aide un peu. Mais ce n&#8217;est pas évident de dé-apprendre les raccourcis claviers.</p>

<h1>Quelques liens</h1>

<ul>
<li><a href="https://github.com/jlevy/the-art-of-command-line">the art of the command line</a></li>
<li><a href="http://www.commandlinefu.com">commandlinefu</a></li>
<li><a href="http://orgmode.org/index.html">org-mode</a></li>
<li><a href="http://www.emacswiki.org/emacs/Evil">evil-mode</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copier Coller Dans Vim]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/30/copier-coller-dans-vim/"/>
    <updated>2015-05-30T23:23:37+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/30/copier-coller-dans-vim</id>
    <content type="html"><![CDATA[<h2>Pour commencer : comment sélectionner sous vim</h2>

<h3>solution n°1 : utiliser la souris</h3>

<p>tapez :
<code>bash
set mouse=a
</code>
vous pouvez sélectionnez avec la souris. Pour copier appuyer sur <code>y</code> comme <strong>y</strong>ank</p>

<h3>solution n°2 : utiliser le mode visuel</h3>

<p>avec la touche <code>v</code> ou <code>V</code> pour utiliser la ligne entière. Puis les flèches ou les <a href="/blog/2015/03/08/comprendre-les-raccourcis-claviers-de-vi-slash-vim/">mouvements</a></p>

<h3>solution n°3 : utiliser les touches mouvements</h3>

<p>Quelques exemples:</p>

<ul>
<li><code>y3w</code> copier trois mots (<strong>y</strong>ank <strong>3</strong> words)</li>
<li><code>yG</code> copier jusqu&#8217;à la fin du fichier (<strong>y</strong>ank fin</li>
<li><code>y5j</code> copier 5 lignes vers le bas (<strong>y</strong> <strong>5</strong> lignes vers le bas <code>j</code>)</li>
<li><code>yi(</code> pour copier le texte entre parenthèse (<strong>y</strong>ank <strong>i</strong>nside <code>(</code>)</li>
</ul>


<p>Pour coller on utilise la touche <code>p</code> pour <strong>p</strong>aste ou <code>P</code> (colle avant le curseur)</p>

<h2>Les presse-papiers sous vi ou les registres</h2>

<p>La notion de presse-papier est appelle registre dans Vi.</p>

<p>Pour voir l&#8217;état des registres (et si il ne fallait retenir qu&#8217;une seule commande..)</p>

<pre><code class="bash">:register ou :reg
</code></pre>

<p>Vous devez voir quelques choses dans le genre:</p>

<pre><code>"" dernier texte )
"0 dernier texte copié
... les dix derniers textes copiés
"9 ..  
"a contenu du registre "a" (s'il existe)
...
"% noms du fichier
". dernier texte inséré
"/ dernier texte recherché
": derniere commande.
</code></pre>

<ul>
<li>Pour coller le texte contenue dans le registre <code>a</code> il faut taper<code>"ap</code> pour le registre <code>"a</code> + <code>p</code> paste.</li>
<li>Pour copier le texte dans le registre a c&#8217;est <code>"ay</code></li>
<li>Avec les mouvements de vi <code>"ay3w</code> dans le registre a (<code>"a</code>) copier (<code>y</code> comme <em>yank</em>) 3 mots (3w pour 3 words).</li>
</ul>


<p>Un registre intéressant le registre <code>+</code> ou le registre <code>*</code> les deux registres sont associés au clipboard de Linux ou celui de windows.</p>

<h2>Pour résumer</h2>

<ul>
<li>Pour voir les registres. Il suffit de taper <code>:register</code>.</li>
<li>Pour coller un registre c&#8217;est <code>"&lt;nom du registre&gt;p</code>.</li>
<li>Pour copier c&#8217;est <code>"&lt;nom du registre&gt;y(+mouvement)</code>.</li>
<li>Le registre <code>+</code> est le presse-papier de windows ou linux. Pour copier/coller du presse-papier il suffit de taper <code>"+p</code> et <code>"+y</code>.</li>
<li>On a 26 presse-papiers de <code>a</code> à <code>z</code> personnellement j&#8217;en ai rarement utilisé plus de deux registres en même temps.</li>
</ul>


<p>Nous reparlerons des registres avec les macros dans un prochain post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je Joue Donc Je Programme]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/04/je-joue-donc-je-programme/"/>
    <updated>2015-05-04T22:32:00+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/04/je-joue-donc-je-programme</id>
    <content type="html"><![CDATA[<p>Il existe des jeux vidéos pour apprendre à programmer. Voici quelques exemples.</p>

<h2>VimAdventure</h2>

<p><img class="center" src="/images/vimadventures.jpg" width="600" height="339" title="&lsquo;Vim adventure&rsquo; &lsquo;Vim adventure&rsquo;" >
<a href="http://vim-adventures.com/">Vim adventure</a> permet d&#8217;apprendre les touches de Vim de manière ludique. Personnellement j&#8217;ai beaucoup joué à <a href="http://crawl.develz.org/wordpress/">Dungeon Crawl</a> qui utilise les touches <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code></p>

<h2>Ruby</h2>

<p>Ruby warrior existe en deux versions:
<img class="center" src="/images/ruby-warrior.png" width="600" height="288" title="&lsquo;Ruby warrior&rsquo; &lsquo;Ruby warrior&rsquo;" ></p>

<p>En ligne de commande <a href="https://github.com/ryanb/ruby-warrior">ruby-warrior</a></p>

<p>Le but est ici d&#8217;écrire L&#8217;AI du héros. Cela commence relativement simplement. Au début pas besoin de if, else, object mais les niveaux se corsent vraiment (je dirai que jusqu&#8217;au 6 c&#8217;est relativement tranquille)</p>

<p>Depuis il existe une version web. Beaucoup plus accessible et jolie
<a href="https://www.bloc.io/ruby-warrior#/">ruby-warrior</a></p>

<h2>Javascript</h2>

<h3>Untrusted</h3>

<p><img class="center" src="/images/untrusted.jpg" width="600" height="339" title="&lsquo;Untrusted&rsquo; &lsquo;Untrusted&rsquo;" >
pour passer les niveaux, il faut atteindre le terminal et commencer à hacker le js. C&#8217;est vraiment malin.
<a href="http://alexnisnevich.github.io/untrusted/">untrusted</a></p>

<h3>Elevator Saga</h3>

<p><img class="center" src="/images/elevator-saga.png" width="600" height="288" title="&lsquo;Elevator Saga&rsquo; &lsquo;Elevator Saga&rsquo;" ></p>

<p>Quoi de plus passionnant que simulation d&#8217;ascenseur.On passe assez facilement le niveau 1. Cela se complique vraiment avec le niveau deux et les objectifs.
<a href="http://play.elevatorsaga.com/">elevator-saga</a></p>

<h3>CodeCombat</h3>

<p><a href="http://codecombat.com/">CodeCombat</a>
Diriger un petit combattant, Un peu la même idée que ruby-warror, mais l&#8217;interface est très belle. Il y a du multi-joueurs</p>

<h2>Multi-plateforme</h2>

<p><img class="center" src="/images/codingame.jpg" width="600" height="375" title="&lsquo;Coding game&rsquo; &lsquo;Coding game&rsquo;" ></p>

<p><a href="http://www.codingame.com">Codingame</a>. L&#8217;interface est magnifique, vous pouvez choisir le langage (il y a une vingtaine de langage PHP, Js, Haskell, Bash, C). les exercices sont assez variés. C&#8217;est plus des katas de programmation.</p>

<h2>Le SQL</h2>

<p><img class="center" src="/images/schemaverse.png" width="450" height="131" title="&lsquo;Schemaverse&rsquo; &lsquo;Schemaverse&rsquo;" ></p>

<p><a href="https://schemaverse.com/">Schemaverse</a>
Un jeux video en prosgresSQL pur. Il y a même une histoire. C&#8217;est assez compliqué.</p>

<h2>Les Regex</h2>

<ul>
<li><a href="http://regexone.com/">regex one</a> Une bonne introduction.</li>
<li><a href="https://regex.alf.nu/">regex.alf.nu</a>. Cela commence doucement, mais les dernières sont très très compliquées.</li>
<li><a href="http://www.postcrashgames.com/finitris/">finitris</a>.Un vieux Jeux que j&#8217;avais noté, c&#8217;est dommage que la prise en main soit affreuse et que le zoom soit péter (control+molette est votre ami)</li>
</ul>


<h3>Des jeux Flash</h3>

<p>Bon je sais que ce n&#8217;est pas super récent.</p>

<p>Tout les jeux Zacktronics</p>

<ul>
<li><a href="http://www.zachtronics.com/spacechem/">SpaceChem</a> (payant et j&#8217;ai pas essayé).</li>
<li><a href="http://www.zachtronics.com/kohctpyktop-engineer-of-the-people/">Kohctpyktop</a> quasiment injouable. mais c&#8217;est de cette facon que sont fait les portes logiques et les microprocesseurs.</li>
<li><a href="http://www.zachtronics.com/the-codex-of-alchemical-engineering/">Codex of Alchemical Engineering</a> assembler des molécules.</li>
<li><a href="http://www.zachtronics.com/ruckingenur-ii/">Ruckingenur</a> voila comment on fait du Reverse Engineering des circuits électroniques (sous windows).</li>
</ul>


<p>Et aussi</p>

<ul>
<li><a href="http://pleasingfungus.com/Manufactoria/">manufactoria</a> facbrique de robots et BDD (il suffit de faire passer le scénario).</li>
</ul>


<h2>En conclusion</h2>

<p>j&#8217;ai vraiment beaucoup aimé et joué à <a href="http://alexnisnevich.github.io/untrusted/">untrusted</a> et <a href="https://www.bloc.io/ruby-warrior#/">ruby-warrior</a></p>

<p>J&#8217;ai probablement oublié d&#8217;autres jeux.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Correction Orthographique Et VIM]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/04/22/correction-orthographique-et-vim/"/>
    <updated>2015-04-22T22:26:43+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/04/22/correction-orthographique-et-vim</id>
    <content type="html"><![CDATA[<p>J&#8217;ai assisté à un Meetup sur VIM.</p>

<p>Le speaker parlait de la correction orthographique sous VIM. Je savais que c&#8217;était possible, mais je ne m&#8217;en suis jamais servis. J&#8217;ai donc décidé de réessayer.. Et j&#8217;ai vu de façon différente mes posts sur ce blog. Je suis repasser un peu sur tout.</p>

<p>Voici la commande pour activer/installer la correction automatique</p>

<pre><code>set spell spelllang=fr
</code></pre>

<p>Normalement Vim va télécharger pour vous les différents fichiers sur le Ftp officiel.  Il y a une commande interactive pour vous aider dans l&#8217;installation. Si jamais il a un souci le wiki français indique de se placer dans son répertoire <code>spell</code> (chez moi <code>~/.vim/spell</code>) et de lancer les commandes suivantes</p>

<pre><code class="sh">wget http://ftp.vim.org/vim/runtime/spell/fr.latin1.spl
wget http://ftp.vim.org/vim/runtime/spell/fr.latin1.sug
wget http://ftp.vim.org/vim/runtime/spell/fr.utf-8.spl
wget http://ftp.vim.org/vim/runtime/spell/fr.utf-8.sug
</code></pre>

<p>La touche magique ici est <code>z=</code> puis les touches du <code>0..n</code>. <code>]s</code> pour aller à l&#8217;erreur suivante <code>[s</code> pour l&#8217;erreur précédente. Il y a différentes touches pour ajouter à son propre dictionnaire. J&#8217;avoue que cela ne m&#8217;intéresse pas trop de suite.</p>

<p>On peut aussi faire de l&#8217;auto complétion ou plutôt de l&#8217;auto correction pendant la saisie avec les touche <code>Ctrl-x</code> + <code>s</code>.</p>

<h2>Résumé</h2>

<table>
<thead>
<tr>
<th> Touche      </th>
<th style="text-align:center;"> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>z=</code>               </td>
<td style="text-align:center;"> auto correct si <code>spell</code> est activée</td>
</tr>
<tr>
<td> <code>[s</code>               </td>
<td style="text-align:center;"> erreur précédente</td>
</tr>
<tr>
<td> <code>]s</code>               </td>
<td style="text-align:center;"> erreur suivante</td>
</tr>
<tr>
<td> <code>Crtl-x s</code>      </td>
<td style="text-align:center;">auto complétion via le dictionnaire </td>
</tr>
</tbody>
</table>


<p>Warning : <code>Ctrl-s</code> parfois freeze le terminal (option pratique quand je regarde les tests fonctionnels passés). Pour <em>defreezer</em> le terminal c&#8217;est <code>Ctrl-Q</code></p>

<h2>Conclusion:</h2>

<p>Il manque le correcteur grammatical :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comprendre La Ligne De Commande De Vi]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/03/30/comprendre-la-ligne-de-commande-de-vi/"/>
    <updated>2015-03-30T22:36:21+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/03/30/comprendre-la-ligne-de-commande-de-vi</id>
    <content type="html"><![CDATA[<p>Sous Vi quand on appuie sur <code>:</code> on a la ligne de commande</p>

<p>Tout le monde connaît
<code>
:wq // quitter et enregistrer
:q! // quitter sans enregistrer et sans confirmation !
</code></p>

<p>Mais en pratique il existe plein de commandes.</p>

<p>Par exemple :</p>

<pre><code>:1,10d 
</code></pre>

<p>efface la ligne 1 à 10 (<code>d</code> = delete)</p>

<pre><code>:1,10m 10
</code></pre>

<p>bouge les lignes de 1 à 10 de 10 ligne (ici <code>m</code> = move)</p>

<dl>
<dt>le &ldquo;pattern&rdquo; est toujours le même</dt>
<dt>&#8220;`</dt>
<dd>(début, fin)action
<code>``
| mouvements | traduction|
| ------------- |:-------------:|
|</code>1,10<code>     | entre la ligne 1 et  la ligne 1 à 10 |
|</code>.,10<code>     |</code>.<code>signifie la ligne actuelle      |
|</code>10,$<code>|</code>$<code>signifie la dernière ligne|
|</code>/mot1/,/mot2/<code>| entre le</code>mot1<code>et le</code>mot2<code>|
|</code>., +5<code>| entre la ligne actuelle (</code>.<code>) et les 5 lignes suivantes|
|</code>%` | tout le fichier|</dd>
</dl>

<p>quelques actions</p>

<table>
<thead>
<tr>
<th>racourcci</th>
<th> traduction</th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>d</code> </td>
<td> comme <strong>d</strong>elete</td>
</tr>
<tr>
<td> <code>j</code> </td>
<td> comme <strong>j</strong>oin</td>
</tr>
<tr>
<td><code>sort</code></td>
<td> trier (sort) les lignes</td>
</tr>
<tr>
<td><code>w</code></td>
<td> pour enregistrer</td>
</tr>
<tr>
<td><code>y</code></td>
<td> comme yank</td>
</tr>
</tbody>
</table>


<h2>le plus connu substitute</h2>

<p>vous avez souvent vu cette syntaxe dans les commits <code>s/mot1/mot2</code></p>

<p>ici <code>s</code> signifie <strong>substitute</strong>.</p>

<p>par exemple
<code>
:%s/mot1/mot2/g
</code>
va remplacer le mot 1 par le mot 2
le <code>g</code> active le flag <code>global</code> et remplace si le mot apparait deux fois.</p>

<p>par exemple
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mot1 = $mot1 + 1;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;// s/mot1/mot2
</span><span class='line'>$mot2 = $mot1 + 1 ; // on ne change que le premier mot&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;// s/mot1/mot2/g
</span><span class='line'>$mot2 = $mot2 + 1 // tout les mots</span></code></pre></td></tr></table></div></figure></p>

<h2>Encore un peu plus loin</h2>

<p>la commande suivante permet de grouper les mots
<code>
:g/mot/ #donne toute les lignes contenant mot
</code>
<code>g</code> ici signifie <strong>g</strong>roup</p>

<p>On peut chaîner les differentes actions
par exemple
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:g/pattern/s/mot/mot2/g # toutes les lignes qui contiennent le pattern, remplace mot1 par mot2.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;:g/pattern/d # efface toute les lignes qui contiennent le pattern suivant&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;:g/pattern/p # &lsquo;print toutes lignes qui contienne le pattern suivant</span></code></pre></td></tr></table></div></figure></p>

<p>la derniere ligne est la plus connue. pattern est le plus souvent une <em>regex</em> donc la traduction <code>g/regex/p</code> ->donne la commande <code>grep</code> sous linux.</p>

<p>en faite, toutes les commandes que j&#8217;ai données proviennent de <code>sed</code>. mais ce n&#8217;est pas un hasard. <code>vi</code> est l&#8217;abbreviation de <strong>V</strong>isual <strong>I</strong>nteraction of Sed. un <em>sed interactif</em>.</p>

<p>J&#8217;espère que cela vous fera apprecier <code>sed</code> comme <code>vi</code>. on peut rester très longtemps sur toutes les commandes.</p>

<p>j&#8217;avais expliqué dans un précédent articles les mouvements en mode normal sont
&#8220;`
Action + Nombre de fois + Mouvement</p>

<p>Exemple:
d5w # <em>d</em>elete <em>5</em> word
yG  # copier jusqu&#8217;à la fin du fichier (G)
=4j # indenter (=) 4 lignes vers le bas
di( # efface entre les parenthèses <em>d</em>elete <em>i</em>nside (</p>

<dl>
<dt>Dans le mode commande</dt>
<dd>début, fin action</dd>
</dl>

<p>:%d # efface tout le fichier
:1,10y # copie dans le presse-papier la ligne 1 à 10
:%s/include_one/require_once/gc</p>

<pre><code>
Il me reste à vous parler des buffers et des macros. et on aura presque fait le tour de la magie de `vi`.

##une commande de la vrai vie
</code></pre>

<p>:%s/\s+$//
<code>``
sur tout le fichier (</code>%<code>) remplace(</code>s<code>) un ou plus(</code>+<code>) espaces (</code>\s<code>) à la fin de la ligne (</code>$`) par du vide. cette commande supprime les espaces vides à la fin des lignes..</p>
]]></content>
  </entry>
  
</feed>
