<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | Journal d'un panda qui code]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2016-02-21T18:01:12+01:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim et Markdown]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/15/vim-et-markdown/"/>
    <updated>2016-02-15T20:24:36+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/15/vim-et-markdown</id>
    <content type="html"><![CDATA[<p>Une astuce que je viens d&#8217;apprendre.</p>

<p>Pour écrire du code en Markdown on utilise la syntaxe suivante</p>

<p><code>
</code>php
le code terminé par &#8220;`</p>

<pre><code>C'est pas génial car on perd la coloration syntaxique, et j'ai fais pas mal d'erreurs.

Mais grâce à la commande suivante
</code></pre>

<p>let g:markdown_fenced_languages = [&lsquo;html&rsquo;, &lsquo;vim&rsquo;, &lsquo;php&rsquo;, &lsquo;python&rsquo;, &lsquo;bash=sh&rsquo;]
&#8220;`</p>

<p>Voici un avant et après
<img class="center" src="/images/avantapres.png" width="600" height="189" title="&lsquo;avant et après&rsquo; &lsquo;avant et après&rsquo;" ></p>

<p>C&#8217;est beaucoup mieux ! Un petit bémol pour le PHP (ma joie !) il faut obligatoirement mettre <code>&lt;?php</code>.</p>

<p>Bref un commande que j&#8217;aurai aimé avoir avant.</p>

<p>Il y a plein d&#8217;astuce de ce genre sur le site suivant</p>

<ul>
<li><a href="https://til.hashrocket.com/">til</a> <strong>TIL</strong> est l&#8217;abbrévation de <strong>T</strong>oday <strong>I</strong> <strong>L</strong>ean cela vient de <a href="https://www.reddit.com/r/todayilearned/">reddit</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Insérer avec classe dans VIM]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/07/inserer-avec-classe-dans-vim/"/>
    <updated>2016-02-07T19:20:36+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/07/inserer-avec-classe-dans-vim</id>
    <content type="html"><![CDATA[<p><em>tl;dr : sous vi utilisez <code>a</code> au lieu de <code>i</code></em></p>

<p>Tout le monde utilise VI pour éditer ses fichiers de configs sous linux ou les fichiers sur un serveur distant (il y a aussi <code>nano</code> qui marche super bien). Moi personnellement je code aussi du php/js avec. Pour insérer du texte on utilise la touche <code>i</code> comme insérer puis <code>ESC</code> pour quitter le mode insertion. Je vais parler des autres touches pour insérer du texte.</p>

<p><img class="center" src="/images/viminser.png" width="517" height="220" title="&lsquo;Il y a 6 touches pour insérer&rsquo; &lsquo;Il y a 6 touches pour insérer&rsquo;" ></p>

<!--more-->


<h2>Insérer.</h2>

<p>Le problème de la touche <code>i</code> c&#8217;est justement que l&#8217;on insère le texte. Le curseur n&#8217;est pas à la bonne position. On souhaite plutôt ajouter du texte après le curseur. Et c&#8217;est le principe de la touche <code>a</code> (comme <strong>A</strong>ppend ou <strong>A</strong>jouter).</p>

<p>Si c&#8217;est rajouter une ligne vide. La touche <code>o</code> comme <strong>o</strong>pen une nouvelle ligne.</p>

<h3>Un concept important dans VIM</h3>

<p><strong>la lettre majuscule est la version plus <em>musclée</em> que la minuscule</strong></p>

<ul>
<li><code>i</code> insère au <strong>début du curseur</strong>.</li>
<li><code>I</code> insère au <strong>début de la ligne</strong></li>
<li><code>a</code> ajoute du <strong>texte à la fin du curseur.</strong></li>
<li><code>A</code> ajoute du <strong>texte à la fin de la ligne</strong>.</li>
</ul>


<p><strong>la lettre majuscule est le contraire de la version minuscule</strong></p>

<ul>
<li><code>o</code> ouvre une ligne <strong>après le curseur</strong></li>
<li><code>O</code> ouvre une ligne <strong>avant le curseur</strong></li>
</ul>


<p><img class="center" src="/images/viminser.png" width="517" height="220" title="&lsquo;Il y a 6 touches pour insérer&rsquo; &lsquo;Il y a 6 touches pour insérer&rsquo;" ></p>

<p>En résumé</p>

<ul>
<li>Si vous appuyez sur <code>i</code> et <code>-&gt;</code> : utiliser <code>a</code></li>
<li>Si vous voulez commenter une ligne <code>I</code> suivi de<code>//</code></li>
<li>vous avez oublié une virgule à la fin de la ligne. alors <code>A,</code></li>
<li>vous voulez rajouter une ligne au lieu de <code>i</code> et <code>&lt;enter&gt;</code> , la touche <code>o</code>.</li>
</ul>


<h2>Se répéter</h2>

<p>Essayons de commenter les trois lignes.</p>

<pre><code>instruction 1 &lt;-mon curseur est à cette ligne.
instruction 2
instruction 3
</code></pre>

<p>J&#8217;appuie sur <code>I</code> puis <code>//</code> pour commenter</p>

<p>J&#8217;obtiens
<code>
//instruction 1
instruction 2
instruction 3
</code></p>

<p>J&#8217;appuie sur <code>j</code> ou <code>bas</code></p>

<pre><code>//instruction 1
instruction 2 &lt;-mon curseur
instruction 3
</code></pre>

<p>Si j&#8217;appuie sur la touche <code>.</code> je répète la dernière instruction. La touche <code>.</code> est probablement la touche la plus utile.</p>

<pre><code>//instruction 1
//instruction 2 &lt;-mon curseur
instruction 3
</code></pre>

<p>Et ainsi de suite..</p>

<p>Mais il y a beaucoup de manière sur VIM pour faire la même chose.</p>

<p>Par exemple sélectionnons le texte avec la touche <code>v</code> ou la souris( <code>set mouse=a</code>). puis appuyons sur <code>:</code></p>

<p>Vous deviez voir
<code>
'&lt;,'&gt;`
</code>
alors complétons la ligne par <code>'&lt;,'&gt;norm I//</code> et tout le texte sélectionné est commenté!
La commande précédente se lit sur la zone sélectionnée <code>'&lt;,'&gt;</code>  appuyez(<code>norm</code>)  sur <code>I</code> puis <code>\\</code>.</p>

<h2>Un dernier raccourci-clavier..</h2>

<p>La touche <code>gi</code> vous emmène au dernier endroit ou vous avez inséré du texte et place directement en insertion.</p>

<p>En conclusion, Il n&#8217;y pas que le touche <code>i</code> dans Vi. En fait on se sert assez peu de cette touche.. C&#8217;est pourtant la plus connue..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retour vers le futur avec Vim]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/25/retour-vers-le-futur-avec-vim/"/>
    <updated>2015-10-25T18:52:49+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/25/retour-vers-le-futur-avec-vim</id>
    <content type="html"><![CDATA[<h2>Parlons de retour vers le futur.</h2>

<p>En effet le héros dans le film 2 arrive le 21 octobre 2015. Bon on n&#8217;a pas les voitures volantes. Et c&#8217;est toujours le même éditeur de texte (vi date de 1976 !).</p>

<h2>Annuler dans VIM</h2>

<p>Pour annuler de VIM c&#8217;est plutôt simple <code>u</code> pour <strong>u</strong>ndo. Pour refaire c&#8217;est moins simple <code>&lt;CTRL + r&gt;</code>. Mais en pratique c&#8217;est plus puissant que cela.</p>

<p>En fait on peut voyager dans le temps avec VIM.</p>

<h2>Retour dans le passé</h2>

<p>Grâce à la commande  <code>:earlier</code></p>

<ul>
<li><code>:earlier 5m</code> reviens en arrière de 5 minutes</li>
<li><code>:earlier 10</code> annule 10 modifications</li>
<li><code>:earlier 5h</code> annule 5 heures.</li>
<li><code>:earlier 1f</code> ramène le fichier avant le dernier enregistrement</li>
<li><code>:earlier 2f</code> ramène le fichier à l&#8217;avant-dernier enregistrement</li>
</ul>


<p>Bien sur on peut faire un <em>retour vers futur</em> avec la commande suivante.</p>

<ul>
<li><code>:later 5m</code> retourne 5 minute plus tard.</li>
<li><code>:later 10</code> refait les 10 derniers modifications</li>
</ul>


<p>Encore plus fort se déplacer dans l&#8217;historique de VIM</p>

<!--more-->


<h2>Se déplacer dans les différents passés</h2>

<p>Celui-ci ce comporte comme un arbre.</p>

<p>Par exemple je rentre le texte <code>premier</code>, puis le texte <code>second</code>. Puis je change <code>second</code> en <code>troisième</code> mon historique ressemble à cela.
<code>
   premier
     |
   modif 1
     |
   premier second
     |
   modif 2
     |
   premier troisième
</code></p>

<p>Si j&#8217;annule une étape et que je change le texte mon historique ressemble à cela</p>

<pre><code>                  premier 
                     |
                   modif 1
                     |
                   premier second
                ^    |       \
     annulation |  modif 2    modif 3
                |    |               \
                   premier troisième premier quatrième.
</code></pre>

<p>Impossible de revenir à la modif 2 avec <code>u</code> et <code>Ctrl-r</code>.</p>

<p>Mais les touches <code>g+</code> et <code>g-</code> permette de faire cela.</p>

<p>Par exemple <code>g-</code> va nous ramener à la modif 2, un seconde fois <code>g-</code> nous ramène à la modif 1 etc ..</p>

<p>Pour voir toute les modifications il existe une liste de tous les changements avec <code>:undolist</code></p>

<p>Cela n&#8217;est pas très <em>user-friendly</em> comme vue. C&#8217;est pour cela qu&#8217;il existe un plugin vim <a href="https://github.com/sjl/gundo.vim/">gundo</a> qui rend cela beaucoup plus simple</p>

<pre><code>  Undo graph                          File
+-----------------------------------+---------------------------+
| " Gundo for something.txt [1]     |one                        |
| " j/k  - move between undo states |two                        |
| " &lt;cr&gt; - revert to that state     |three                      |
|                                   |five                       |
| @  [5] 3 hours ago                |                           |
| |                                 |                           |
| | o  [4] 4 hours ago              |                           |
| | |                               |                           |
| o |  [3] 4 hours ago              |                           |
| | |                               |                           |
| o |  [2] 4 hours ago              |                           |
| |/                                |                           |
| o  [1] 4 hours ago                |                           |
| |                                 |                           |
| o  [0] Original                   |                           |
+-----------------------------------+                           |
| --- 3 2010-10-12 06:27:35 PM      |                           |
| +++ 5 2010-10-12 07:38:37 PM      |                           |
| @@ -1,3 +1,4                      |                           |
|  one                              |                           |
|  two                              |                           |
|  three                            |                           |
| +five                             |                           |
+-----------------------------------+---------------------------+
</code></pre>

<h2>Sauvegarder les annulations.</h2>

<p>Parfois on fait des bêtises et que le fichier n&#8217;est pas encore versionné et/ou commité (et cela vous est déjà arrivé non ?). Quand on a quitté vim. On perd tout l&#8217;historique. Ce n&#8217;est plus le cas en précisant un <code>undofile</code></p>

<h2>Conclusion</h2>

<p>Nous avons appris à nous déplacer comme des pros dans l&#8217;historique vim.</p>

<p>Résumé des touches</p>

<ul>
<li><code>u</code> annule, <code>ctrl+r</code> refait</li>
<li><code>:earlier</code> reviens en arrière</li>
<li><code>g-</code> et <code>g+</code> reviens/retourne à l&#8217;état précédent</li>
</ul>


<h2>Références</h2>

<ul>
<li>la documentation de vim <code>help undo</code></li>
<li><a href="https://github.com/sjl/gundo.vim/">Gundo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tig : Status]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/04/tig-status/"/>
    <updated>2015-10-04T21:59:59+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/04/tig-status</id>
    <content type="html"><![CDATA[<p>Tig est un client git en ligne de commande</p>

<p>Il n&#8217;est pas compliqué à installer :</p>

<pre><code class="bash">sudo apt-get install tig
</code></pre>

<p>Néanmoins c&#8217;est la version 1.2 dans les dépôts au moment ou j&#8217;écris ces lignes.</p>

<p>On peut installer la version 2 qui a plus de fonctionnalités et de raccourcis.</p>

<pre><code class="bash">git clone https://github.com/jonas/tig
make
make install
</code></pre>

<p>attention vous aurez probablement besoin d&#8217;avoir installer la librairies <code>libncursesw</code> pour l&#8217;utf-8</p>

<h2>La vue principale</h2>

<p>Elle permet de voir l&#8217;historique du dépôt.</p>

<p><img class="center" src="/images/tig-defaut.png" width="600" height="398" title="&lsquo;la vue par défault&rsquo; &lsquo;la vue par défaut&rsquo;" ></p>

<!--more-->


<p>Appuyer sur <code>&lt;Enter&gt;</code> pour voir la différence. (Dans la version 2, si le terminal fait plus de 160 caractères l&#8217;écran se splitte en 2 verticalement)</p>

<p><img class="center" src="/images/tig-diff.png" width="600" height="399" title="&lsquo;quand on appuie sur la touche entrée, on affiche la différence&rsquo; &lsquo;l'écran de différence&rsquo;" ></p>

<p>Screenshot de la version 2 avec les deux colonnes.</p>

<p><img class="center" src="/images/tig_view_v2.png" width="600" height="366" title="&lsquo;dans la version 2, si le terminal&rsquo; &lsquo;Screenshot de la version 2 avec les deux colonnes.&rsquo;" ></p>

<p>Il va falloir apprendre les touches Vi car on se sert beaucoup de <code>j</code> et <code>k</code> (un rappel <code>j</code> descend vers le bas et <code>k</code> va vers le haut)</p>

<p>De cette écran voici les différents modes (je ne les cites pas tous)</p>

<ul>
<li><code>S</code> ou <code>s</code> pour voir le stage (équivalent de git status)</li>
<li><code>t</code> tree view affichage en explorateur de fichier</li>
<li><code>r</code> permet de voir les différentes branches (<code>H</code> dans la version1</li>
<li><code>l</code> voir les logs</li>
</ul>


<p>Je vais surtout m&#8217;intéresser à la status view.</p>

<h2>La vue Status</h2>

<p>Les touches à connaitre.</p>

<ul>
<li><code>u</code> sur un noms de fichiers pour <strong>u</strong>se cela fait l&#8217;équivalent de <code>git add &lt;nom du fichier&gt;</code></li>
</ul>


<p>Si vous appuyer sur <code>u</code> sur les lignes <code>Changes to be commited</code>, <code>Changed but not updated</code>, <code>Untracked files</code> vous ajoutez tous les fichiers.</p>

<pre><code>Changes to be committed:
M   fichier1
Changed but not updatedy://&lt;---(*curseur*) 
M   fichier2
M   fichier3
M   fichier4
M   fichier5
M   fichier6
M   fichier7
Untracked files:
?   nouveau fichier
</code></pre>

<p>Cela devient</p>

<pre><code>Changes to be committed:
M   fichier1
M   fichier2
M   fichier3
M   fichier4
M   fichier5
M   fichier6
M   fichier7
Changed but not updatedy:
(no files)
Untracked files:
?   nouveau fichier
</code></pre>

<p>Enfin on peut aussi prendre chunk par chunck (l&#8217;équivalent de <code>git add -p</code>)</p>

<p><img class="center" src="/images/tig-revert.png" width="600" height="398" title="&lsquo;la vue par défaut&rsquo; &lsquo;la vue par défaut&rsquo;" ></p>

<p>Il suffit d&#8217;appuyer sur <code>Enter</code> puis de se déplacer dans le commit avec <code>j</code> et <code>k</code> et appuyer sur <code>u</code> pour ajouter ce chunk. Les chunks pour faire simple sont les textes séparés par des <code>@@ ... @@</code>. On se déplace de chunk en chunk grâce à la touche <code>@</code>.</p>

<p>Pour reverter le fichier, On utilise la touche <code>!</code>.</p>

<p>Cela marche aussi sur un chunk. On peut donc reverter partiellement un fichier.</p>

<p>Il est possible d&#8217;ajouter ligne par ligne dans un commit grâce à la touche <code>1</code>.</p>

<p>Pour faire le git commit il suffit d&#8217;appuyer sur <code>C</code> comme <strong>C</strong>ommit.</p>

<p>Enfin la touche <code>e</code> comme <strong>e</strong>dit ouvre le fichier dans l&#8217;éditeur par défaut.</p>

<h2>Le fichier <code>.tigrc</code></h2>

<p>Le fichier <code>.tigrc</code> permet de personnaliser l&#8217;affichage et d&#8217;ajouter des raccourcis claviers.</p>

<p>Voici quelques exemples de ma config.</p>

<pre><code># Delete files in status view (useful for untracked files)
bind status D !@?rm %(file)

# Amend last commit with A
bind status A !git commit --amend

# Create and checkout a new branch; specify custom prompt
bind main B !git checkout -b "%(prompt Enter new branch name: )"
</code></pre>

<p>Les raccourcis claviers que j&#8217;ai rajouté</p>

<ul>
<li>Dans la vue status la touche <code>D</code> efface le fichier</li>
<li>Dans la vue status la touche <code>A</code> fait un <code>git commit --amend</code></li>
<li>Dans la vue principale la touche <code>B</code> permet de créer une branche.</li>
</ul>


<h2>Résumé de touches</h2>

<ul>
<li><code>s</code> ou <code>S</code> voir la vue status</li>
<li><code>u</code> ajouter le commit/chunk</li>
<li><code>!</code> revert</li>
<li><code>1</code> ajoute une lignes au commit</li>
<li><code>@</code> aller au chunck/diff suivant</li>
<li><code>D</code> supprimer le fichier (<em>raccourcis perso</em>)</li>
<li><code>A</code> git amend</li>
<li><code>e</code> ouvre dans l&#8217;éditeur par défaut</li>
</ul>


<h2>Des liens</h2>

<ul>
<li><a href="http://jonas.nitro.dk/tig/">le site officiel</a></li>
<li>la <a href="https://github.com/pmiossec/tig-cheat-sheet">cheat-sheet</a> avec les raccourcis claviers (<em>indispensable</em>)</li>
</ul>


<h2>Conclusion</h2>

<p>Je vais revenir sur les autres vues bientôt.</p>

<p>Merci de m&#8217;avoir lu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lancer des commandes dans Vim]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/31/lancer-des-commandes-dans-vim/"/>
    <updated>2015-08-31T23:49:17+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/31/lancer-des-commandes-dans-vim</id>
    <content type="html"><![CDATA[<p>Soit le fichier texte suivant:</p>

<pre><code> * Alpha
 * Foxtrot
 * Charlie
 * Delta
 * Echo 
 * Bravo
</code></pre>

<p>Dans VIM il suffit de taper.</p>

<pre><code>:%sort ou :%!sort
</code></pre>

<p>Pour obtenir
<code>
 * Alpha
 * Bravo
 * Charlie
 * Delta
 * Echo
 * Foxtrot
</code></p>

<!--more-->


<p>On peux aussi lancer plein de commandes amusantes</p>

<pre><code> * Doublon
 * Pas unique
 * Doublon
 * 
 * ...
</code></pre>

<pre><code>!sort | uniq -c | tr "[A-Z]" "[a-z]"
</code></pre>

<p>Pour ceux qui ne se rappelle plus trop les commandes de Bash</p>

<ul>
<li><code>sort</code> trie le texte</li>
<li><code>uniq -c</code> prend toute les valeurs et les comptes c&#8217;est l&#8217;équivalent d&#8217;un <code>GROUP BY</code> en SQL</li>
<li><code>tr</code> est l&#8217;abréviation de <strong>tr</strong>anspose je remplace les lettres en <code>[A-Z]</code> par leur équivalent en minuscule.</li>
</ul>


<pre><code>      1  * 
      1  * ...
      2  * doublon
      1  * pas unique
</code></pre>

<p>Si vous sélectionnez le texte avec <code>v</code> et que vous appuyer sur <code>:</code></p>

<p>Alors vous devez voir la commande suivante
<code>
:'&lt;,'&gt;
</code>
et Ajoutez la commande que vous allez appliquer à la sélection. Par exemple <code>:'&lt;,'&gt;!sort</code></p>

<p>Plus rigolo. On peux appeler des langages que l&#8217;on veut dans VIM</p>

<pre><code class="php">&lt;?php echo "bonjour";
</code></pre>

<p>Tapez <code>!!</code>
vous devriez voir apparaître
<code>
:.!
</code>
Compléter avec <code>:.!php</code></p>

<p>votre texte va se remplacer
<code>
bonjour
</code></p>

<p>Cela marche aussi avec python</p>

<pre><code class="python">print "olleh"[::-1]
</code></pre>

<p>Avec le curseur sur la ligne, appuyer sur <code>!!</code> puis ajoutez <code>:.!python</code></p>

<p>La ligne devient</p>

<pre><code>hello
</code></pre>

<h2>Exécuter une commande Bash depuis VIM</h2>

<p>La commande suivante</p>

<pre><code>php app/console cache:clear --env=prod
</code></pre>

<p>Si vous voulez exécuter la commande mais ne pas modifiez la ligne.</p>

<pre><code>:.w !bash
</code></pre>

<p>C&#8217;est un peu moins simple.</p>

<ul>
<li><code>:.</code> représente la ligne actuelle.</li>
<li><code>w</code> représente une écriture</li>
<li><code>!bash</code> via Bash.</li>
</ul>


<p>La documentation de VIM <code>:help :w_c</code></p>

<h2>en résumé</h2>

<ul>
<li>Si vous voulez appliquer votre commande sur tout le fichier <code>:%!commande</code></li>
<li>S vous voulez juste la ligne <code>:.!commande</code> ou tapez <code>!!</code>.</li>
<li>Si vous voulez sur une sélection <code>v</code> ou <code>V</code> puis <code>:</code> vous deviez voir ceci <code>:'&lt;,'&gt;</code>, ajoutez la commande souhaitée.</li>
</ul>

]]></content>
  </entry>
  
</feed>
