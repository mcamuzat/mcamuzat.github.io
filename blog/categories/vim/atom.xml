<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | Journal d'un panda qui code]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2016-03-20T22:24:48+01:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les plugins sous VIM : Tabular]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/03/20/les-plugins-sous-vim-tabular/"/>
    <updated>2016-03-20T21:49:10+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/03/20/les-plugins-sous-vim-tabular</id>
    <content type="html"><![CDATA[<p>Nous allons voir ensemble un Plugin sous vim <a href="https://github.com/godlygeek/tabular">Tabular</a>.</p>

<p>Il permet d&#8217;aligner les lignes de codes
par exemple :</p>

<pre><code>|un tableau | une autre colonne|
| ha | Ho|
| bonjour | hello|
</code></pre>

<!--more-->


<p>Si je sélectionne le texte et que j&#8217;appuie sur <code>:</code> et que je tape <code>:Tabularize /|</code></p>

<p>Mon tableau devient</p>

<pre><code>| un tableau | une autre colonne |
| un         | deux              |
| bonjour    | hello             |
</code></pre>

<p>Cela marche avec n&#8217;importe quelle clés
<code>
var var1 = "hello";
var une_variable_tres_longue =  "atchoum";
</code></p>

<p>J&#8217;appuie <code>:Tabularize /=</code></p>

<pre><code>var var1                     = "hello";
var une_variable_tres_longue = "atchoum";
</code></pre>

<p>la syntaxe est <code>:Tabularize /&lt;le ou les caractères que vous voulez indenter&gt;</code>
Pour les tableaux en php
<code>php
[
 "a" =&gt; "b",
 "salut" =&gt; "bonjour",
]
</code></p>

<p>Résultats : <code>:Tabularize /=&gt;</code>:
<code>php
[
 "a"     =&gt; "b",
 "salut" =&gt; "bonjour",
]
</code></p>

<p>Je m&#8217;en sers surtout pour indenter les tableaux dans les features dans <a href="http://docs.behat.org/en/v3.0/">Behat</a>.</p>

<h2>installation</h2>

<p>Si vous avez installé <a href="https://github.com/junegunn/vim-plug">vim-plug</a> il suffit de rajouter la ligne suivante.</p>

<pre><code>Plug 'godlygeek/tabular'
</code></pre>

<h2>Des liens</h2>

<p>Une <a href="http://vimcasts.org/episodes/aligning-text-with-tabular-vim/">video</a> qui explique tout (en anglais).</p>

<h2>La série sur les plugin VIM</h2>

<ul>
<li><a href="/blog/2016/03/13/vim-plug-gestion-des-plugins/">Installation des plugins</a></li>
<li><a href="/blog/2016/03/20/les-plugins-sous-vim-tabular/">Tabularize</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim-plug : Gestion des plugins]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/03/13/vim-plug-gestion-des-plugins/"/>
    <updated>2016-03-13T17:44:53+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/03/13/vim-plug-gestion-des-plugins</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Il existe une quantité monstrueuse de plugin sur Vim. Je vais parler de la gestion de plugin. Avant de commencer une série sur les meilleurs plugins de Vim.</p>

<h2>Installation de Vim-plug</h2>

<p>Nous allons utiliser un gestionnaire de plugin : <a href="https://github.com/junegunn/vim-plug">vim-plug</a>.</p>

<p>Nous allons éditer notre fichier <code>~/.vimrc</code></p>

<!--more-->


<p>Nous collons les lignes suivantes au tout début de votre fichier.</p>

<pre><code>" Auto load / install plugin manager

if !1 | finish | endif

" auto-install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
    echo "Installing VimPlug..."
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall
endif

" VimPlug 
call plug#begin('~/.vim/plugged')


" VIMPROC 
Plug 'Shougo/vimproc', { 'do': 'make' }

" Syntastic  
" https://github.com/scrooloose/syntastic
Plug 'scrooloose/syntastic'

" Fugitive
" fugitive.vim: a Git wrapper so awesome, it should be illegal
" https://github.com/tpope/vim-fugitive
Plug 'tpope/vim-fugitive'

" Surround
" surround.vim: quoting/parenthesizing made simple
" https://github.com/tpope/vim-surround
Plug 'tpope/vim-surround'


call plug#end()
" Required:
filetype plugin indent on
</code></pre>

<p>Voila exactement ce que fais le programme.</p>

<ul>
<li>Si Vim-plug n&#8217;existe pas, On va le télécharger</li>
<li>On donne la liste des plugins à télécharger. Pour rajoutez un plugin il suffit de le rajouter entre <code>call plug#begin('~/.vim/plugged')</code> et <code>call plug#end()</code></li>
</ul>


<p>Par exemple si je souhaite rajoutez le plugin Nerdtree (permet un d&#8217;avoir une affichage en arbre des fichiers)</p>

<pre><code>call plug#begin('~/.vim/plugged')
...
Plug 'scrooloose/nerdtree'
...
call plug#end()
</code></pre>

<p>Pour installer dans vim
<code>
:PlugInstall
</code></p>

<p>Normalement tout les plugins s&#8217;installent en parallèles avec des jolies barres de progressions.</p>

<p>Pour updater les plugins
<code>
:PlugUpdate
</code></p>

<p>Pour supprimer les plugins inutiles
<code>
:PlugClean
</code></p>

<p>Enfin il existe une vue spécifique pour voir le status des plugins
<code>
:PlugStatus
</code></p>

<h2>Mais encore..</h2>

<p>Ce qui est sympa avec Vim-plug est que l&#8217;on peut mettre des conditions dans les plugins</p>

<pre><code>Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
</code></pre>

<p>ici <code>vim-snippets</code> dépends de <code>ultisnips</code></p>

<p>On charge paresseusement les plugins</p>

<pre><code>Plug 'StanAngeloff/php.vim', { 'for': 'php' }
</code></pre>

<p>Je n&#8217;ai besoin du plugin <code>php-vim</code> que si j&#8217;utilise un fichier PHP.</p>

<pre><code>Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
</code></pre>

<p>Je charge le plugin que si je l&#8217;appelle.</p>

<h2>Les alternatives</h2>

<ul>
<li><a href="https://github.com/tpope/vim-pathogen">Pathogen</a> historiquement le premier. Il suffisait de créer un dossier <code>bundle</code> dans <code>.vim</code> et de cloner le plugin vim. Et le plugin était installé. Pour supprimer le plugin, il suffit faire un rm du dépôt</li>
</ul>


<pre><code class="sh">mkdir  .vim/bundle
cd .vim/bundle
// on clone le plugin
git clone https://github.com/tpope/vim-surround.git
git clone https://github.com/scrooloose/nerdtree.git
</code></pre>

<p>J&#8217;ai utilisé ceci pendant des années et cela me suffisait</p>

<ul>
<li><a href="https://github.com/Shougo/neobundle.vim">NeoBundle</a> Un peu près la même chose que vim-plug. Il est censé être un peu plus complet que <a href="https://github.com/junegunn/vim-plug">vim-plug</a>.</li>
</ul>


<h2>Commiter son <code>.vimrc</code></h2>

<p> L&#8217;idée est de versionner son fichier <code>.vimrc</code> sur github. Et de partager les raccourcis claviers, Il n&#8217;est pas rare d&#8217;avoir des fichiers de 1000 lignes. Je suis en train de refaire le mien.</p>

<p> Un vimrc c&#8217;est pour résumer.</p>

<ol>
<li>Je copie/colle tout les <code>.vimrc</code> que je trouve</li>
<li>J&#8217;installe 70 plugins</li>
<li>Je me rend compte que j&#8217;utilise 5 plugins à peine.</li>
<li>Je n&#8217;utilise aucun raccourci donc je supprime tout.</li>
<li>heu..  je ne suis plus du tout à jours sur les plugins,.. On recommence à l&#8217;étape 1</li>
</ol>


<p>Nous allons continuer avec les plugins dans une future série d&#8217;articles.</p>

<p>Merci de m&#8217;avoir lu, Je m&#8217;excuse pour les fautes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim et Markdown]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/15/vim-et-markdown/"/>
    <updated>2016-02-15T20:24:36+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/15/vim-et-markdown</id>
    <content type="html"><![CDATA[<p>Une astuce que je viens d&#8217;apprendre.</p>

<p>Pour écrire du code en Markdown on utilise la syntaxe suivante</p>

<p><code>
</code>php
le code terminé par &#8220;`</p>

<pre><code>C'est pas génial car on perd la coloration syntaxique, et j'ai fais pas mal d'erreurs.

Mais grâce à la commande suivante
</code></pre>

<p>let g:markdown_fenced_languages = [&lsquo;html&rsquo;, &lsquo;vim&rsquo;, &lsquo;php&rsquo;, &lsquo;python&rsquo;, &lsquo;bash=sh&rsquo;]
&#8220;`</p>

<p>Voici un avant et après
<img class="center" src="/images/avantapres.png" width="600" height="189" title="&lsquo;avant et après&rsquo; &lsquo;avant et après&rsquo;" ></p>

<p>C&#8217;est beaucoup mieux ! Un petit bémol pour le PHP (ma joie !) il faut obligatoirement mettre <code>&lt;?php</code>.</p>

<p>Bref un commande que j&#8217;aurai aimé avoir avant.</p>

<p>Il y a plein d&#8217;astuce de ce genre sur le site suivant</p>

<ul>
<li><a href="https://til.hashrocket.com/">til</a> <strong>TIL</strong> est l&#8217;abbrévation de <strong>T</strong>oday <strong>I</strong> <strong>L</strong>ean cela vient de <a href="https://www.reddit.com/r/todayilearned/">reddit</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Insérer avec classe dans VIM]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/07/inserer-avec-classe-dans-vim/"/>
    <updated>2016-02-07T19:20:36+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/07/inserer-avec-classe-dans-vim</id>
    <content type="html"><![CDATA[<p><em>tl;dr : sous vi utilisez <code>a</code> au lieu de <code>i</code></em></p>

<p>Tout le monde utilise VI pour éditer ses fichiers de configs sous linux ou les fichiers sur un serveur distant (il y a aussi <code>nano</code> qui marche super bien). Moi personnellement je code aussi du php/js avec. Pour insérer du texte on utilise la touche <code>i</code> comme insérer puis <code>ESC</code> pour quitter le mode insertion. Je vais parler des autres touches pour insérer du texte.</p>

<p><img class="center" src="/images/viminser.png" width="517" height="220" title="&lsquo;Il y a 6 touches pour insérer&rsquo; &lsquo;Il y a 6 touches pour insérer&rsquo;" ></p>

<!--more-->


<h2>Insérer.</h2>

<p>Le problème de la touche <code>i</code> c&#8217;est justement que l&#8217;on insère le texte. Le curseur n&#8217;est pas à la bonne position. On souhaite plutôt ajouter du texte après le curseur. Et c&#8217;est le principe de la touche <code>a</code> (comme <strong>A</strong>ppend ou <strong>A</strong>jouter).</p>

<p>Si c&#8217;est rajouter une ligne vide. La touche <code>o</code> comme <strong>o</strong>pen une nouvelle ligne.</p>

<h3>Un concept important dans VIM</h3>

<p><strong>la lettre majuscule est la version plus <em>musclée</em> que la minuscule</strong></p>

<ul>
<li><code>i</code> insère au <strong>début du curseur</strong>.</li>
<li><code>I</code> insère au <strong>début de la ligne</strong></li>
<li><code>a</code> ajoute du <strong>texte à la fin du curseur.</strong></li>
<li><code>A</code> ajoute du <strong>texte à la fin de la ligne</strong>.</li>
</ul>


<p><strong>la lettre majuscule est le contraire de la version minuscule</strong></p>

<ul>
<li><code>o</code> ouvre une ligne <strong>après le curseur</strong></li>
<li><code>O</code> ouvre une ligne <strong>avant le curseur</strong></li>
</ul>


<p><img class="center" src="/images/viminser.png" width="517" height="220" title="&lsquo;Il y a 6 touches pour insérer&rsquo; &lsquo;Il y a 6 touches pour insérer&rsquo;" ></p>

<p>En résumé</p>

<ul>
<li>Si vous appuyez sur <code>i</code> et <code>-&gt;</code> : utiliser <code>a</code></li>
<li>Si vous voulez commenter une ligne <code>I</code> suivi de<code>//</code></li>
<li>vous avez oublié une virgule à la fin de la ligne. alors <code>A,</code></li>
<li>vous voulez rajouter une ligne au lieu de <code>i</code> et <code>&lt;enter&gt;</code> , la touche <code>o</code>.</li>
</ul>


<h2>Se répéter</h2>

<p>Essayons de commenter les trois lignes.</p>

<pre><code>instruction 1 &lt;-mon curseur est à cette ligne.
instruction 2
instruction 3
</code></pre>

<p>J&#8217;appuie sur <code>I</code> puis <code>//</code> pour commenter</p>

<p>J&#8217;obtiens
<code>
//instruction 1
instruction 2
instruction 3
</code></p>

<p>J&#8217;appuie sur <code>j</code> ou <code>bas</code></p>

<pre><code>//instruction 1
instruction 2 &lt;-mon curseur
instruction 3
</code></pre>

<p>Si j&#8217;appuie sur la touche <code>.</code> je répète la dernière instruction. La touche <code>.</code> est probablement la touche la plus utile.</p>

<pre><code>//instruction 1
//instruction 2 &lt;-mon curseur
instruction 3
</code></pre>

<p>Et ainsi de suite..</p>

<p>Mais il y a beaucoup de manière sur VIM pour faire la même chose.</p>

<p>Par exemple sélectionnons le texte avec la touche <code>v</code> ou la souris( <code>set mouse=a</code>). puis appuyons sur <code>:</code></p>

<p>Vous deviez voir
<code>
'&lt;,'&gt;`
</code>
alors complétons la ligne par <code>'&lt;,'&gt;norm I//</code> et tout le texte sélectionné est commenté!
La commande précédente se lit sur la zone sélectionnée <code>'&lt;,'&gt;</code>  appuyez(<code>norm</code>)  sur <code>I</code> puis <code>\\</code>.</p>

<h2>Un dernier raccourci-clavier..</h2>

<p>La touche <code>gi</code> vous emmène au dernier endroit ou vous avez inséré du texte et place directement en insertion.</p>

<p>En conclusion, Il n&#8217;y pas que le touche <code>i</code> dans Vi. En fait on se sert assez peu de cette touche.. C&#8217;est pourtant la plus connue..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retour vers le futur avec Vim]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/25/retour-vers-le-futur-avec-vim/"/>
    <updated>2015-10-25T18:52:49+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/25/retour-vers-le-futur-avec-vim</id>
    <content type="html"><![CDATA[<h2>Parlons de retour vers le futur.</h2>

<p>En effet le héros dans le film 2 arrive le 21 octobre 2015. Bon on n&#8217;a pas les voitures volantes. Et c&#8217;est toujours le même éditeur de texte (vi date de 1976 !).</p>

<h2>Annuler dans VIM</h2>

<p>Pour annuler de VIM c&#8217;est plutôt simple <code>u</code> pour <strong>u</strong>ndo. Pour refaire c&#8217;est moins simple <code>&lt;CTRL + r&gt;</code>. Mais en pratique c&#8217;est plus puissant que cela.</p>

<p>En fait on peut voyager dans le temps avec VIM.</p>

<h2>Retour dans le passé</h2>

<p>Grâce à la commande  <code>:earlier</code></p>

<ul>
<li><code>:earlier 5m</code> reviens en arrière de 5 minutes</li>
<li><code>:earlier 10</code> annule 10 modifications</li>
<li><code>:earlier 5h</code> annule 5 heures.</li>
<li><code>:earlier 1f</code> ramène le fichier avant le dernier enregistrement</li>
<li><code>:earlier 2f</code> ramène le fichier à l&#8217;avant-dernier enregistrement</li>
</ul>


<p>Bien sur on peut faire un <em>retour vers futur</em> avec la commande suivante.</p>

<ul>
<li><code>:later 5m</code> retourne 5 minute plus tard.</li>
<li><code>:later 10</code> refait les 10 derniers modifications</li>
</ul>


<p>Encore plus fort se déplacer dans l&#8217;historique de VIM</p>

<!--more-->


<h2>Se déplacer dans les différents passés</h2>

<p>Celui-ci ce comporte comme un arbre.</p>

<p>Par exemple je rentre le texte <code>premier</code>, puis le texte <code>second</code>. Puis je change <code>second</code> en <code>troisième</code> mon historique ressemble à cela.
<code>
   premier
     |
   modif 1
     |
   premier second
     |
   modif 2
     |
   premier troisième
</code></p>

<p>Si j&#8217;annule une étape et que je change le texte mon historique ressemble à cela</p>

<pre><code>                  premier 
                     |
                   modif 1
                     |
                   premier second
                ^    |       \
     annulation |  modif 2    modif 3
                |    |               \
                   premier troisième premier quatrième.
</code></pre>

<p>Impossible de revenir à la modif 2 avec <code>u</code> et <code>Ctrl-r</code>.</p>

<p>Mais les touches <code>g+</code> et <code>g-</code> permette de faire cela.</p>

<p>Par exemple <code>g-</code> va nous ramener à la modif 2, un seconde fois <code>g-</code> nous ramène à la modif 1 etc ..</p>

<p>Pour voir toute les modifications il existe une liste de tous les changements avec <code>:undolist</code></p>

<p>Cela n&#8217;est pas très <em>user-friendly</em> comme vue. C&#8217;est pour cela qu&#8217;il existe un plugin vim <a href="https://github.com/sjl/gundo.vim/">gundo</a> qui rend cela beaucoup plus simple</p>

<pre><code>  Undo graph                          File
+-----------------------------------+---------------------------+
| " Gundo for something.txt [1]     |one                        |
| " j/k  - move between undo states |two                        |
| " &lt;cr&gt; - revert to that state     |three                      |
|                                   |five                       |
| @  [5] 3 hours ago                |                           |
| |                                 |                           |
| | o  [4] 4 hours ago              |                           |
| | |                               |                           |
| o |  [3] 4 hours ago              |                           |
| | |                               |                           |
| o |  [2] 4 hours ago              |                           |
| |/                                |                           |
| o  [1] 4 hours ago                |                           |
| |                                 |                           |
| o  [0] Original                   |                           |
+-----------------------------------+                           |
| --- 3 2010-10-12 06:27:35 PM      |                           |
| +++ 5 2010-10-12 07:38:37 PM      |                           |
| @@ -1,3 +1,4                      |                           |
|  one                              |                           |
|  two                              |                           |
|  three                            |                           |
| +five                             |                           |
+-----------------------------------+---------------------------+
</code></pre>

<h2>Sauvegarder les annulations.</h2>

<p>Parfois on fait des bêtises et que le fichier n&#8217;est pas encore versionné et/ou commité (et cela vous est déjà arrivé non ?). Quand on a quitté vim. On perd tout l&#8217;historique. Ce n&#8217;est plus le cas en précisant un <code>undofile</code></p>

<h2>Conclusion</h2>

<p>Nous avons appris à nous déplacer comme des pros dans l&#8217;historique vim.</p>

<p>Résumé des touches</p>

<ul>
<li><code>u</code> annule, <code>ctrl+r</code> refait</li>
<li><code>:earlier</code> reviens en arrière</li>
<li><code>g-</code> et <code>g+</code> reviens/retourne à l&#8217;état précédent</li>
</ul>


<h2>Références</h2>

<ul>
<li>la documentation de vim <code>help undo</code></li>
<li><a href="https://github.com/sjl/gundo.vim/">Gundo</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
