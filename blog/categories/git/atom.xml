<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Journal d'un panda qui code]]></title>
  <link href="http://mcamuzat.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2016-03-27T22:51:39+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Des jolis dépôts]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/21/des-jolis-depots/"/>
    <updated>2016-02-21T16:26:09+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/21/des-jolis-depots</id>
    <content type="html"><![CDATA[<p>Aujourd&#8217;hui on va se faire plaisir et admirer des images de notre travail.</p>

<p><img class="center" src="/images/codeologyreact.png" width="600" height="578" title="&lsquo;représentation 3D de ReactJs&rsquo; &lsquo;représentation 3D de ReactJs&rsquo;" ></p>

<!--more-->


<h2>Gource</h2>

<p>Cela crée une animation des différents commits. Cela permet de visualiser le travail accompli, les différents intervenants.</p>

<p><img class="center" src="/images/gource.png" width="600" height="353" title="&lsquo;screenshot du site officiel&rsquo; &lsquo;screenshot du site officiel&rsquo;" ></p>

<ul>
<li><a href="http://gource.io/">Gource</a></li>
</ul>


<h2>Codeology</h2>

<p>Crée un modèle 3D du dépots.</p>

<p>C&#8217;est assez bizarre.. On ne comprend pas trop ce qui est représenté. Mais C&#8217;est plûtot joli.</p>

<p><img class="center" src="/images/codeology.png" width="600" height="346" title="&lsquo;representation 3D de Three.js&rsquo; &lsquo;representation 3D de Three.js&rsquo;" ></p>

<ul>
<li><a href="http://codeology.braintreepayments.com/">codeology</a></li>
<li>vue de <a href="http://codeology.braintreepayments.com/featured/facebook/react">ReactJs</a></li>
<li>vue de <a href="http://codeology.braintreepayments.com/featured/django/django">Danjgo</a></li>
</ul>


<h2><a href="http://ghv.artzub.com/">http://ghv.artzub.com/</a></h2>

<p>Rentrez l&#8217;utilisateur et puis le projet (la visualisation s&#8217;inspire de <a href="http://www.michaelogawa.com/code_swarm/">codeswarm</a>)</p>

<ul>
<li><p>Vue par auteur
<img class="center" src="/images/githubvisualbyauthor.png" width="600" height="350" title="&lsquo;vue par auteur&rsquo; &lsquo;vue par auteur&rsquo;" ></p></li>
<li><p>Vue par projet
<img class="center" src="/images/githubvisualbyproject.png" width="600" height="342" title="&lsquo;vue par auteur&rsquo; &lsquo;vue par auteur&rsquo;" ></p></li>
<li><p><a href="http://ghv.artzub.com/">http://ghv.artzub.com</a></p></li>
</ul>


<h2>Conclusion</h2>

<p>Il y a eu des tentatives de générer un CV via le dépôt de github (Notamment <a href="http://resume.github.io/">resumé (down)</a> et <a href="https://github.com/dfm/osrc">The Open Source Report Card (down)</a>. <strong>Les deux sites ne marchent plus depuis la modifcation de l&#8217;API de Github</strong>.</p>

<p>Un Github bien rempli montre que l&#8217;utilisateur est actif et qu&#8217;il participe. Mais le contraire ne prouve rien. Cela fait 7 ans que je bosse dans le monde de l&#8217;informatique. Mon Github est plutôt vide (mais grâce au blog je le remplis chaque semaine..)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remettre au propre son dépot git]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/14/remettre-au-propre-son-depot-git/"/>
    <updated>2016-02-14T17:03:58+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/14/remettre-au-propre-son-depot-git</id>
    <content type="html"><![CDATA[<p>Lorsque l&#8217;on souhaite sauvegarder son travail. Il y a toujours des fichiers modifiés que l&#8217;on ne souhaite pas commiter.</p>

<p><img class="center" src="/images/gitmenage.png" width="387" height="490" title="&lsquo;avant et après&rsquo; &lsquo;avant et après&rsquo;" ></p>

<!--more-->


<h2>Pour éviter de tracker des fichiers.</h2>

<p><strong>Règle N°1 : éviter <code>git add .</code></strong></p>

<p>Personnellement j&#8217;utilise tig. (voir le <a href="/blog/2015/10/04/tig-status/">post</a>)</p>

<p>Solution bis :</p>

<pre><code>git add -p 
</code></pre>

<h2>Pour reverter les fichiers modifiés</h2>

<p><strong>Règle N°2 : éviter le <code>git reset --hard</code></strong></p>

<p>La solution est un peu trop radicale. Comme le <code>git add .</code> vous allez le regretter un jour, car vous perdez tout votre travail. Ce que vous voulez c&#8217;est remettre certain fichier au propre et ce n&#8217;est pas forcement la bonne commande.</p>

<pre><code>git checkout -- .
</code></pre>

<p>A noter que cela réverte tout vos fichiers, mais s&#8217;il faut filtrer.</p>

<pre><code>git checkout -- /web/.
</code></pre>

<p>Bien entendu il existe le mode interactif</p>

<pre><code>git checkout -p
</code></pre>

<h2>Reverter un commit.</h2>

<p><strong>Attention si le commit est déja pushé. Vous serez obliger de faire un <code>push -f</code> donc on évite de faire cela sur les branches master, staging, develop</strong></p>

<p>Vous avez commiter mais le commit est pas bon.</p>

<p>Si c&#8217;est juste le message qui est faux
<code>
git commit --amend
</code></p>

<p>Si un des fichiers n&#8217;est pas bon
<code>
git reset HEAD^ --soft
</code></p>

<p>Vous remarquez que j&#8217;utilise <code>--soft</code> au lieu <code>--hard</code>. Le reset soft me remets avant que j&#8217;ai commité. Je ne perds pas mon travail, même mieux les fichiers sont déjà prêt à être commités.</p>

<h2>Supprimer les fichiers qui ne sont pas trackés</h2>

<p>Vous avez un <code>export.sql</code>, <code>toto.txt</code>, <code>npm-debug.log</code></p>

<p><em>Attention à ne pas perdre du travail.</em></p>

<pre><code>git clean -f -d -x
git clean -fdx
</code></pre>

<p>Avec <code>-f</code> force <strong>Obligatoire</strong> <code>-d</code> pour directory(répertoire) <code>-x</code> virer les fichiers ignorés de git.</p>

<p>Pour voir ce qui pourrait être effacé pendant la commande.</p>

<pre><code>git clean -n
</code></pre>

<p>Enfin il existe aussi un mode interactif
<code>
git clean -i
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git grep]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/05/git-grep/"/>
    <updated>2015-11-05T22:22:13+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/05/git-grep</id>
    <content type="html"><![CDATA[<p>Dans le post <a href="blog/2015/11/02/diff-patch-git">précédent</a> j&#8217;ai parlé des commandes linux <code>patch</code> et <code>diff</code>. des fonctionnalités ou on utiliserait plutôt Git. Ici je vais faire le contraire : utiliser git sans utiliser les commandes linux. Je vais parler de <code>git grep</code>.</p>

<h2>git grep</h2>

<p>l&#8217;utilisation est très simple</p>

<pre><code class="sh">git grep hello
</code></pre>

<p>On peut utiliser une regex
le résultat s&#8217;affiche dans un pager (sous linux c&#8217;est souvent <code>less</code>).</p>

<!--more-->


<p><strong>Rappel des touches sur Less</strong></p>

<table>
<thead>
<tr>
<th> Touche      </th>
<th style="text-align:center;"> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>g</code>               </td>
<td style="text-align:center;"> début du fichier</td>
</tr>
<tr>
<td> <code>G</code>               </td>
<td style="text-align:center;"> fin  du fichier</td>
</tr>
<tr>
<td> <code>/mot</code>            </td>
<td style="text-align:center;"> cherche <code>mot</code>. <code>n</code> pour suivant <code>N</code> pour précédent</td>
</tr>
<tr>
<td> <code>&amp;mot</code>            </td>
<td style="text-align:center;"> seulement le mot</td>
</tr>
</tbody>
</table>


<p><code>git grep</code> utilise un peu près les mêmes options que le <code>grep</code>.</p>

<p>par exemple</p>

<pre><code class="sh">git grep -n -C 10 hello
</code></pre>

<ul>
<li><code>-n</code> numérote les lignes</li>
<li><code>-C 5</code> affiche un contexte de 5 lignes</li>
</ul>


<p>A noter que git grep n&#8217;utilise que les fichiers dans le dépôt qui sont déjà indexé. Donc il est plutôt rapide (alors qu&#8217;un grep devrait faire tous les répertoires).</p>

<h2>Git grep et l&#8217;historique</h2>

<p>Mais la vrai force de git grep est de pouvoir chercher sur toute les branches !</p>

<pre><code class="sh">git grep -n -C 10 -e &lt;ma regex&gt; &lt;la branche&gt;
</code></pre>

<p>D&#8217;ailleurs si vous voulez savoir qui a commité a ajouté un bug qui contient le mot &ldquo;Panda&rdquo;
<code>sh
git rev-list --all | xargs git grep 'Panda'
</code></p>

<p>Il y a des alternatives
<code>sh
git log -G Panda
git log -S Panda
</code></p>

<h2>Git grep et tig</h2>

<p>Depuis la version 2 de <a href="https://github.com/jonas/tig">tig</a> (<strong>pas encore</strong> dans les dépots au moment ou j&#8217;écris ces lignes)
il suffit d&#8217;appuyer sur <code>g</code> de faire la recherche.</p>

<p>Les différentes commandes</p>

<ul>
<li><code>e</code> ouvrir dans l&#8217;éditeur</li>
<li><code>b</code> ouvre la vue blame</li>
<li><code>Enter</code> permet de se déplacer dans le fichiers.</li>
</ul>


<p><img class="center" src="/images/tiggrep.png" width="600" height="398" title="&lsquo;Git grep&rsquo; &lsquo;Git grep&rsquo;" ></p>

<h2>Git grep et vim</h2>

<ul>
<li>Il est dispo dans le plugin <a href="https://github.com/tpope/vim-fugitive">Fugitive</a>.</li>
</ul>


<h2>Conclusion</h2>

<p>L&#8217;intégration dans <em>tig</em> me plait beaucoup, j&#8217;ai beaucoup tapé le commande suivante pour faire mes recherches.
<code>sh
 find . -name '*.php'| xargs grep 'array_walk_recur'
</code></p>

<p>Je me suis forcé à lire un peu la documentation de git grep, et je ne le regrette pas.</p>

<p>Enfin il existe des alternative à <code>grep</code> comme <a href="http://beyondgrep.com/">ack</a> ou plus récemment <a href="https://github.com/ggreer/the_silver_searcher">the silver searcher</a>. Je vais essayer d&#8217;en parler plus tard.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diff et patch, pas besoin de git]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/02/diff-patch-git/"/>
    <updated>2015-11-02T22:24:03+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/02/diff-patch-git</id>
    <content type="html"><![CDATA[<p>Nous allons jouer un peu avec les diff et les patchs.</p>

<h1> Mise en place</h1>

<p>Soit le fichier suivant <code>README.md</code></p>

<pre><code>Ceci est un exemple.


Ceci est une ligne ajoutée
</code></pre>

<p>Modifions le fichier par ceci.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ceci est un exemple.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;j'ai ajouté cette ligne</span></code></pre></td></tr></table></div></figure></p>

<p>Enregistrons celui-ci en <code>README2.md</code></p>

<p>Et lançons la commande suivante</p>

<pre><code class="sh">diff README.md README2.md
</code></pre>

<p>Nous obtenons le résultat suivant</p>

<pre><code class="diff">4d3
&lt; Ceci est une ligne ajoutée
6a6,9
&gt; 
&gt; 
&gt; 
&gt; j'ai ajouté cette ligne
</code></pre>

<p>Il y a en fait plusieurs formats</p>

<p>Essayez la commande suivante</p>

<pre><code class="sh">diff -u README.md README2.md &gt; readme.diff
</code></pre>

<p>On obtient le fichier suivant
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>&amp;mdash; README.md   2015-11-02 22:07:43.728854981 +0100
</span><span class='line'><span class="gi">+++ README2.md  2015-11-02 22:13:58.244839112 +0100</span>
</span><span class='line'><span class="gu">@@ -1,6 +1,9 @@</span>
</span><span class='line'> Ceci est un exemple.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;-Ceci est une ligne ajoutée&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;+
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+j&#39;ai ajouté cette ligne</span>
</span></code></pre></td></tr></table></div></figure></p>

<!--more-->


<p>Cette vision doit vous être assez familière si vous faite du git, svn ou mercurial</p>

<p>c&#8217;est la sortie d&#8217;un <code>git diff</code> si on avait modifié ce fichier.</p>

<h2>Jouer un patch</h2>

<p>Pour ce convaincre nous allons demander à linux de jouer le fichier <code>.diff</code> qui est tout simplement un patch</p>

<p>Grâce à la commande suivante.</p>

<pre><code class="sh">$ patch -p0 &lt; README.diff 
patching file README.md
</code></pre>

<p>Comme toute modification je peux avoir des conflits. Si je modifie mon <code>README.md</code>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>Ceci est un exemple.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Ceci est une autre ligne
</span><span class='line'>Ceci est une ligne ajoutée
</span><span class='line'>Mais celle ci aussi&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;patching file README.md
</span><span class='line'>Hunk #1 FAILED at 1.
</span><span class='line'>1 out of 1 hunk FAILED &amp;ndash; saving rejects to file README.md.rej
</span></code></pre></td></tr></table></div></figure></p>

<p>Vous retrouvez les fameux <code>.orig</code> et <code>.rej</code> qui pourrissent un peu la vie de ceux qui font du mercurial ou git (<code>hg purge</code> et <code>git clean</code> est probablement ce que vous cherchez).</p>

<h2>Merger</h2>

<p>Si vous voulez un merge. c&#8217;est possible
<code>
$ patch -p0 --merge &lt; README.diff
</code>
le résultat
&#8220;`
Ceci est un exemple.</p>

<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt;
Ceci est une autre ligne
Ceci est une ligne ajoutée</p>

<h1>Mais celle ci aussi</h1>

<blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote>

<p>j&#8217;ai ajouté cette ligne</p>

<pre><code>L'option `-p0` ou le plus souvent `-p1` demande à la commande `patch` d'ignorer le chemin sur un niveau.

Voici un exemple avec git et le même fichier
</code></pre>

<p>diff &ndash;git a/README.md b/README.md
index 1030f85..5e8e5f9 100644
&mdash; a/README.md
+++ b/README.md
@@ -1,6 +1,9 @@
 Ceci est un exemple.</p>

<p>-Ceci est une ligne ajoutée</p>

<p>+
+
+
+j&#8217;ai ajouté cette ligne
<code>``
on voit que la ligne</code>a/README.md<code>et</code>b/README.md<code>, ici pour appliquer le patch il faut utiliser</code>-p1<code>pour ignorer le premier niveau (supprime le</code>a/<code>et</code>b/`)</p>

<p>Sous Git c&#8217;est plus simple</p>

<pre><code class="bash">$ git apply lefichier.diff
</code></pre>

<h2>Reverter</h2>

<p>Enfin soyons complet il est possible de reverter un patch avec <code>-R</code>
<code>bash
patch -R -p1 &lt; mon patch
</code></p>

<p>Avec git</p>

<pre><code class="bash">git apply -R &lt;mon fichier diff&gt;
</code></pre>

<h2>Conclusion</h2>

<p>Pas besoin d&#8217;avoir git/mercurial/svn pour créer ou jouer des patchs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retour vers le futur avec Vim]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/25/retour-vers-le-futur-avec-vim/"/>
    <updated>2015-10-25T18:52:49+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/25/retour-vers-le-futur-avec-vim</id>
    <content type="html"><![CDATA[<h2>Parlons de retour vers le futur.</h2>

<p>En effet le héros dans le film 2 arrive le 21 octobre 2015. Bon on n&#8217;a pas les voitures volantes. Et c&#8217;est toujours le même éditeur de texte (vi date de 1976 !).</p>

<h2>Annuler dans VIM</h2>

<p>Pour annuler de VIM c&#8217;est plutôt simple <code>u</code> pour <strong>u</strong>ndo. Pour refaire c&#8217;est moins simple <code>&lt;CTRL + r&gt;</code>. Mais en pratique c&#8217;est plus puissant que cela.</p>

<p>En fait on peut voyager dans le temps avec VIM.</p>

<h2>Retour dans le passé</h2>

<p>Grâce à la commande  <code>:earlier</code></p>

<ul>
<li><code>:earlier 5m</code> reviens en arrière de 5 minutes</li>
<li><code>:earlier 10</code> annule 10 modifications</li>
<li><code>:earlier 5h</code> annule 5 heures.</li>
<li><code>:earlier 1f</code> ramène le fichier avant le dernier enregistrement</li>
<li><code>:earlier 2f</code> ramène le fichier à l&#8217;avant-dernier enregistrement</li>
</ul>


<p>Bien sur on peut faire un <em>retour vers futur</em> avec la commande suivante.</p>

<ul>
<li><code>:later 5m</code> retourne 5 minute plus tard.</li>
<li><code>:later 10</code> refait les 10 derniers modifications</li>
</ul>


<p>Encore plus fort se déplacer dans l&#8217;historique de VIM</p>

<!--more-->


<h2>Se déplacer dans les différents passés</h2>

<p>Celui-ci ce comporte comme un arbre.</p>

<p>Par exemple je rentre le texte <code>premier</code>, puis le texte <code>second</code>. Puis je change <code>second</code> en <code>troisième</code> mon historique ressemble à cela.
<code>
   premier
     |
   modif 1
     |
   premier second
     |
   modif 2
     |
   premier troisième
</code></p>

<p>Si j&#8217;annule une étape et que je change le texte mon historique ressemble à cela</p>

<pre><code>                  premier 
                     |
                   modif 1
                     |
                   premier second
                ^    |       \
     annulation |  modif 2    modif 3
                |    |               \
                   premier troisième premier quatrième.
</code></pre>

<p>Impossible de revenir à la modif 2 avec <code>u</code> et <code>Ctrl-r</code>.</p>

<p>Mais les touches <code>g+</code> et <code>g-</code> permette de faire cela.</p>

<p>Par exemple <code>g-</code> va nous ramener à la modif 2, un seconde fois <code>g-</code> nous ramène à la modif 1 etc ..</p>

<p>Pour voir toute les modifications il existe une liste de tous les changements avec <code>:undolist</code></p>

<p>Cela n&#8217;est pas très <em>user-friendly</em> comme vue. C&#8217;est pour cela qu&#8217;il existe un plugin vim <a href="https://github.com/sjl/gundo.vim/">gundo</a> qui rend cela beaucoup plus simple</p>

<pre><code>  Undo graph                          File
+-----------------------------------+---------------------------+
| " Gundo for something.txt [1]     |one                        |
| " j/k  - move between undo states |two                        |
| " &lt;cr&gt; - revert to that state     |three                      |
|                                   |five                       |
| @  [5] 3 hours ago                |                           |
| |                                 |                           |
| | o  [4] 4 hours ago              |                           |
| | |                               |                           |
| o |  [3] 4 hours ago              |                           |
| | |                               |                           |
| o |  [2] 4 hours ago              |                           |
| |/                                |                           |
| o  [1] 4 hours ago                |                           |
| |                                 |                           |
| o  [0] Original                   |                           |
+-----------------------------------+                           |
| --- 3 2010-10-12 06:27:35 PM      |                           |
| +++ 5 2010-10-12 07:38:37 PM      |                           |
| @@ -1,3 +1,4                      |                           |
|  one                              |                           |
|  two                              |                           |
|  three                            |                           |
| +five                             |                           |
+-----------------------------------+---------------------------+
</code></pre>

<h2>Sauvegarder les annulations.</h2>

<p>Parfois on fait des bêtises et que le fichier n&#8217;est pas encore versionné et/ou commité (et cela vous est déjà arrivé non ?). Quand on a quitté vim. On perd tout l&#8217;historique. Ce n&#8217;est plus le cas en précisant un <code>undofile</code></p>

<h2>Conclusion</h2>

<p>Nous avons appris à nous déplacer comme des pros dans l&#8217;historique vim.</p>

<p>Résumé des touches</p>

<ul>
<li><code>u</code> annule, <code>ctrl+r</code> refait</li>
<li><code>:earlier</code> reviens en arrière</li>
<li><code>g-</code> et <code>g+</code> reviens/retourne à l&#8217;état précédent</li>
</ul>


<h2>Références</h2>

<ul>
<li>la documentation de vim <code>help undo</code></li>
<li><a href="https://github.com/sjl/gundo.vim/">Gundo</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
