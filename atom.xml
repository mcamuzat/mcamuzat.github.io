<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-08-15T23:01:59+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Un Peu De Fun]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/15/git-un-peu-de-fun/"/>
    <updated>2015-08-15T21:35:25+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/15/git-un-peu-de-fun</id>
    <content type="html"><![CDATA[<p>Il est possible de faire des commits qui clignotent avec la commande suivante.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git commit --all-empty -m <span class="s2">&quot;^[[5m Bonjour ^[[0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Attention</strong> le caractère <code>^[</code> est la touche <code>Escape</code> (on parle de caractère d&#8217;échappement). Il n&#8217;est pas très simple à taper. Il faut appuyer sur <code>Ctrl+v</code> puis <code>&lt;ESC&gt;</code></p>

<p>Bienvenue dans le monde du terminal et du ANSI. Il existe de véritable oeuvre d&#8217;art juste en mode texte. Et dans le temps les fichiers pirates contenaient souvent des fichiers textes avec Logo et présentation de la team.</p>

<p>On peut rajouter des trucs plus rigolos</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git commit --allow-empty -F &lt;<span class="o">(</span>curl https://raw.githubusercontent.com/thiderman/doge/master/doge/static/doge.txt<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tout les terminaux ne sont pas égaux.</h2>

<p>Voici un gif animé de mes commits</p>

<p><img class="center" src="http://mcamuzat.github.io/images/outgnome.gif" width="554" height="410" title="So meme" alt="So meme"></p>

<p>Cela ne clignote pas beaucoup sur <code>gnometerminal</code> essayons avec  Xterm</p>

<p><img class="center" src="http://mcamuzat.github.io/images/outxterm.gif" width="585" height="397" title="Gif animé" alt="On a un menu interactif"></p>

<p>C&#8217;est un peu mieux.</p>

<h2>Mais peux-ton commiter si on a rien à commiter</h2>

<p>Avec la commande <code>--allow-empty</code> c&#8217;est parfaitement possible.</p>

<p>Mais a quoi cela sert ?</p>

<ul>
<li>A mettre des annotations</li>
<li>A distinguer différentes parties</li>
</ul>


<h2>On se connait et paranoia ?</h2>

<p>Dans une ligne de commande (aucun danger).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh whoami.filippo.io
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Le résultat est surprenant. Le logiciel me reconnait immédiatement (nom et prénom).</p>

<p><img class="center" src="http://mcamuzat.github.io/images/clesssh.png" width="600" height="392" title="Je ne donne aucun login, pourtant le logiciel me reconnait" alt="On se connait"></p>

<p>Tout cela vient du fait que lorsque on se connecte en ssh, on envoie toujours sa clé publique.. Et la clé publique de mon ordinateur est connue, car je l&#8217;utilise pour me connecter sur github, pour éviter de renseigner à chaque fois mon mot de passe des que je commite. D&#8217;ailleurs votre clé publique est ici en <code>https://github.com/&lt;mon.compte&gt;.keys</code></p>

<h2>Conclusion</h2>

<ul>
<li>Le contenu vient d&#8217;un post sur <a href="https://news.ycombinator.com/item?id=10058967">hacker-news</a>.</li>
<li>pour le ANSI il y a des exemples magnifique sur <a href="http://blocktronics.org/">blocktronics</a> et aussi <a href="http://sixteencolors.net/">sixteencolors</a></li>
</ul>


<p>Voici quelques utilisations de git, cela ne sert pas à grand chose on est d&#8217;accord..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Workshops De Javascript]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/09/workshops-de-javascript/"/>
    <updated>2015-08-09T16:44:33+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/09/workshops-de-javascript</id>
    <content type="html"><![CDATA[<p><em>Et si on essayait un workshop&hellip;</em></p>

<p>Les workshops de javascript sont des cours interactifs de javascript.</p>

<h2>Installation</h2>

<p>Pour installer le cours de Node.js c&#8217;est très simple. A condition d&#8217;avoir node.js installé.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g learnyounode
</span><span class='line'>learnyounode</span></code></pre></td></tr></table></div></figure>


<p>Voila ce que vous devriez voir.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/workshop.png" width="585" height="397" title="screenshot de workshop" alt="On a un menu interactif"></p>

<p>Lançons nous dans le premier exercice.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'> LEARN YOU THE NODE.JS FOR MUCH WIN!
</span><span class='line'>─────────────────────────────────────
</span><span class='line'> HELLO WORLD
</span><span class='line'> Exercise 1 of 13
</span><span class='line'>
</span><span class='line'>Write a program that prints the text "HELLO WORLD" to the console (stdout).
</span><span class='line'>
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>
</span><span class='line'>## HINTS
</span><span class='line'>
</span><span class='line'>To make a Node.js program, create a new file with a .js extension and start writing JavaScript! Execute your program by running it with the
</span><span class='line'>node command. e.g.:
</span><span class='line'>
</span><span class='line'>    $ node program.js
</span><span class='line'>
</span><span class='line'>You can write to the console in the same way as in the browser:
</span><span class='line'>
</span><span class='line'>    console.log("text")
</span><span class='line'>
</span><span class='line'>When you are done, you must run:
</span><span class='line'>
</span><span class='line'>    $ learnyounode verify program.js
</span><span class='line'>
</span><span class='line'>to proceed. Your program will be tested, a report will be generated, and the lesson will be marked 'completed' if you are successful.
</span><span class='line'>
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>
</span><span class='line'> » To print these instructions again, run: learnyounode print
</span><span class='line'> » To execute your program in a test environment, run: learnyounode run program.js
</span><span class='line'> » To verify your program, run: learnyounode verify program.js
</span><span class='line'> » For help run: learnyounode help</span></code></pre></td></tr></table></div></figure>


<p>donc je resume on me demande de programmer un **Hello world&#8221;.</p>

<p>donc je crée un <code>hello.js</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;HELLO WORLD&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je peux tester celui-ci avec un programme de test avec la commande suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>learnyounode run hello.js
</span></code></pre></td></tr></table></div></figure>


<p>Si je suis content du résultat alors je peux faire vérifier le programme par le logiciel.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>learnyounode verify program.js
</span></code></pre></td></tr></table></div></figure>


<p>Si le programme passe, le niveau est marquer comme <code>[COMPLETED]</code> et on peux passer au suivant.</p>

<p>Bon l&#8217;étape 1 n&#8217;est pas très compliqué passons à l&#8217;étape 2.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> LEARN YOU THE NODE.JS FOR MUCH WIN!
</span><span class='line'>─────────────────────────────────────
</span><span class='line'> BABY STEPS
</span><span class='line'> Exercise <span class="m">2</span> of 13
</span><span class='line'>
</span><span class='line'>Write a program that accepts one or more numbers as <span class="nb">command</span>-line arguments and prints the sum of those numbers to the console <span class="o">(</span>stdout<span class="o">)</span>.
</span><span class='line'>
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>
</span><span class='line'><span class="c">## HINTS</span>
</span><span class='line'>
</span><span class='line'>You can access <span class="nb">command</span>-line arguments via the global process object. The process object has an argv property which is an array containing the <span class="nb">complete command</span>-line. i.e. process.argv.
</span><span class='line'>
</span><span class='line'>To get started, write a program that simply contains:
</span><span class='line'>
</span><span class='line'>    console.log<span class="o">(</span>process.argv<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Run it with node program.js and some numbers as arguments. e.g:
</span><span class='line'>
</span><span class='line'>    <span class="nv">$ </span>node program.js <span class="m">1</span> <span class="m">2</span> 3
</span><span class='line'>
</span><span class='line'>In which <span class="k">case</span> the output would be an array looking something like:
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span> <span class="s1">&#39;node&#39;</span>, <span class="s1">&#39;/path/to/your/program.js&#39;</span>, <span class="s1">&#39;1&#39;</span>, <span class="s1">&#39;2&#39;</span>, <span class="s1">&#39;3&#39;</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>You<span class="s1">&#39;ll need to think about how to loop through the number arguments so  you can output just their sum. The first element of the process.argv array is always &#39;</span>node<span class="s1">&#39;, and the second element is always the path to your program.js file, so you need to start at the 3rd element (index 2), adding each item to the total until you reach the end of the array.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Also be aware that all elements of process.argv are strings and you may need to coerce them into numbers. You can do this by prefixing the property with + or passing it to Number(). e.g. +process.argv[2] or Number(process.argv[2]).</span>
</span><span class='line'>
</span><span class='line'><span class="s1">learnyounode will be supplying arguments to your program when you run learnyounode verify program.js so you don&#39;</span>t need to supply them yourself. To <span class="nb">test </span>your program without verifying it, you can invoke it with learnyounode run program.js. When you use run, you are invoking the <span class="nb">test </span>environment that learnyounode sets up <span class="k">for</span> each exercise.
</span><span class='line'>
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>
</span><span class='line'> » To print these instructions again, run: learnyounode print
</span><span class='line'> » To execute your program in a <span class="nb">test </span>environment, run: learnyounode run program.js
</span><span class='line'> » To verify your program, run: learnyounode verify program.js
</span><span class='line'> » For <span class="nb">help </span>run: learnyounode <span class="nb">help</span>
</span></code></pre></td></tr></table></div></figure>


<p>Donc il s&#8217;agit de créer un programme qui prend les nombres en entrée et faire la somme à la fin.</p>

<p>Voici ma solution (atroce &hellip; )</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">;</span>
</span><span class='line'><span class="nx">i</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
</span><span class='line'><span class="nx">i</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span><span class="c1">// supprime les deux premiers arguments (&#39;node&#39;, &#39;programme.js&#39;)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">b</span><span class="p">)},</span><span class="mi">0</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le logiciel donne une implémentation beaucoup plus simple(pas difficile)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">result</span> <span class="o">+=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Etc etc ..</p>

<h2>Une liste de workshop.</h2>

<p>Le site officiel donne la liste suivante en module de base.</p>

<ul>
<li><a href="https://www.github.com/sethvincent/javascripting">javascripting</a> Apprendre les bases du javascript.</li>
<li><a href="https://www.github.com/jlord/git-it">git-it</a> pour apprendre Git et GitHub.</li>
<li><a href="https://www.github.com/jesstelford/scope-chains-closures">Scope Chains &amp; Closures</a> Comprendre les scopes, les closures etc..</li>
<li><a href="https://www.github.com/workshopper/learnyounode">learnyounode</a> les bases de node asynchronous i/o, http.</li>
<li><a href="https://github.com/npm/how-to-npm">How to npm</a> Comment créer des modules Npm</li>
<li><a href="https://www.github.com/substack/stream-adventure">stream-adventure</a> apprennez les streams et comment les composer avec <code>.pipe()</code>.</li>
</ul>


<h2>Mais il y en a plus.</h2>

<p>On peux apprendre un peu près n&#8217;importe quel technologie en pratique.</p>

<ul>
<li><a href="https://github.com/timoxley/functional-javascript-workshop">Functional Javascript</a> : Base de la programmation fonctionnelle en javascript.</li>
<li><a href="https://github.com/azat-co/expressworks">ExpressWorks</a>: Apprendre le framework Express.js.</li>
<li><a href="https://github.com/stevekane/promise-it-wont-hurt">Promise It Won&rsquo;t Hurt</a>:  Apprendre les promesses pour les opération asynchrone.</li>
<li><a href="https://github.com/bulkan/async-you">Async</a>:  La librairie Async.</li>
<li><a href="https://github.com/sporto/planetproto">Planet Proto</a>:  Comprendre l&#8217;héritage prototypal.</li>
<li><a href="https://github.com/finnp/test-anything">Test Anything</a>:  Comment tester son code</li>
<li><a href="https://github.com/evanlucas/learnyoumongo">learnyoumongo</a>:  Débuter avec MongoDB et node.js</li>
<li><a href="https://github.com/gl-modules/shader-school">Shader School</a>:  Comprendre les shaders.</li>
<li><a href="https://github.com/othiym23/bug-clinic">Bug Clinic</a>:  Apprendre de nouveaux outils et debugger plus facilement.</li>
<li><a href="https://github.com/alexmackey/IntroToWebGLWithThreeJS">Intro to WebGL</a>:  Débuter avec <a href="">three.js</a> et le WebGL.</li>
<li><a href="https://github.com/mdunisch/lololodash">LololoDash</a>: Apprendre Lo-Dash (fork de underscore)</li>
<li><a href="https://github.com/robertkowalski/learnyoucouchdb">learnyoucouchdb</a>:  Apprendre CouchDB.</li>
<li><a href="https://github.com/tako-black/learnyoureact">learnyoureact</a>:  Apprenez React.js.</li>
</ul>


<h2>Des liens</h2>

<ul>
<li>le <a href="http://nodeschool.io">site officiel</a> et la version <a href="http://nodeschool.io/fr-fr/">française</a></li>
<li>J&#8217;ai déjà parlé des <a href="http://mcamuzat.github.io/blog/2015/04/29/awesome-et-liste-de-liens/">awesome-list</a>. bien entendu elle existe pour les <a href="https://github.com/therebelrobot/awesome-workshopper">workshops</a>.</li>
</ul>


<h2>Conclusion</h2>

<p>Vous voulez apprendre le js, react.js, écrire des tests je crois que vous savez par ou commencer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gmail Vim Mêmes Raccourcis]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/08/gmail-vim-memes-raccourcis/"/>
    <updated>2015-08-08T18:52:17+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/08/gmail-vim-memes-raccourcis</id>
    <content type="html"><![CDATA[<h2>Les raccourcis de Gmail ressemblent à vi.</h2>

<p><em>Résumé : appuyer sur <code>?</code> dans gmail pour avoir le tableau complet, les raccourcis claviers suivant ne sont pas activés par défaut</em></p>

<p>Le titre est un peu exagéré.. Je vais essayer de montrer que la <em>philosophie</em> est un peu la même.</p>

<p>Mais sur Vi On utilise les flèches de direction <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code> pour <code>gauche</code>, <code>bas</code>, <code>haut</code>, <code>droite</code> pour se déplacer (enfin surtout <code>j</code> et <code>k</code>). Et bien les touches <code>j</code>(bas)  et <code>k</code>(haut) marchent pareilles sous Gmail.</p>

<p>Pour chercher sous Vi on utilise la touche <code>/</code> , essayez sous Gmail et vous aller directement dans la barre de recherche.</p>

<h2>Une lettre = une idée..</h2>

<p>Comme dans vi ou <code>w</code> signifie <strong>w</strong>ord, <code>d</code> signifie <strong>d</strong>elete, <code>u</code> <strong>u</strong>ndo on retrouve la même idée.</p>

<p>Par exemple <code>c</code> est l&#8217;abréviation de <strong>c</strong>omposer.</p>

<ul>
<li><code>c</code> pour <strong>c</strong>ompose Nouveau message</li>
<li><code>n</code> signifie <strong>n</strong>ext Message suivant</li>
<li><code>p</code> signifie <strong>p</strong>revious Message précédent.</li>
<li><code>r</code> pour reply <strong>r</strong>eply Répondre</li>
<li><code>a</code> pour tous <strong>a</strong>ll. Repondre à tous</li>
<li><code>f</code> pour transférer <strong>f</strong>orward.</li>
<li><code>o</code> pour ouvrir le conversation.</li>
</ul>


<h2>La lettre en majuscule = la version minuscule en plus forte</h2>

<p>Dans vi <code>i</code> insere du texte, <code>I</code> insere au début de la ligne, <code>a</code> ajoute du texte , <code>A</code> ajoute le texte à la fin de la ligne.</p>

<ul>
<li><code>C</code> compose un nouveau message dans une nouvelle fenêtre</li>
<li><code>R</code> Répondre dans une nouvelle fenêtre</li>
<li><code>A</code> Répondre à tous dans une nouvelle fenêtre.</li>
<li><code>F</code> Transférer dans une nouvelle fenêtre.</li>
</ul>


<h2>Une lettre = un pictogramme.</h2>

<p>Sous Vi certaine lettre sont des pictogrammes. Par exemple la touche <code>'</code> représente le marque page.</p>

<p>Je n&#8217;ai encore jamais parlé des marques pages sous vi pour faire simple</p>

<ul>
<li>Ouvrez un fichier texte très long</li>
<li>Allez vers le mileu du fichier  appuyer sur <code>m</code> puis <code>a</code></li>
<li>Re-deplacez vous et appuyer sur <code>m</code> puis <code>b</code>.</li>
<li>tapez <code>'a</code> vous ramene ou point a et <code>'b</code> au point b, <code>d'a</code> (effacer jusqu&#8217;au marque-page a)</li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/quote.png" width="431" height="174" title="Le guillement est une pictogramme de marques-pages" alt="le guillemet est le pictogramme du marque-page"></p>

<p>La lettre <code>=</code> est le pictogramme de deux lignes indentées. Quand j&#8217;appuie sur <code>=</code> j&#8217;indente le texte.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/indentation.png" width="600" height="276" title="Indentation" alt="Pour indenter on utilise la touche = "></p>

<p>La lettre <code>z</code> correspond au repli de texte</p>

<p><img class="center" src="http://mcamuzat.github.io/images/repli.png" width="600" height="230" title="z = repli de texte ;" alt="Pour plier déplier le texte on utilise la touche z"></p>

<ul>
<li><code>z</code> + <code>c</code> pour replier (c = close)</li>
<li><code>z</code> + <code>o</code> pour deplier (o = open)</li>
<li><code>z</code> + <code>a</code> pour alterner.</li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/plier.png" width="595" height="214" title="z = repli de texte" alt="Pour plier déplier le texte on utilise la touche z"></p>

<p>Sous gmail, c&#8217;est encore la même idée.  la touche <code>x</code> correspond à une checkbox. appuyer sur x pour sélectionner la conversation. le <code>#</code> correspond à supprimer, le <code>!</code> à SPAM!!!.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/checkanddelete.png" width="543" height="193" title="'le x est le pictogramme d'un checkbox' 'Mon terminal`" ></p>

<h2>Le cas de <code>*</code></h2>

<p>Pour tout selectionner tout les fichiers textes on utilise la commande <code>*.txt</code></p>

<ul>
<li><code>*</code> puis <code>a</code> : Sélectionner toutes les conversations</li>
<li><code>*</code> puis <code>n</code> : Désélectionner toutes les conversations</li>
<li><code>*</code> puis <code>r</code> : Sélectionner les conversations lues</li>
<li><code>*</code> puis <code>u</code> : Sélectionner les conversations non lues</li>
<li><code>*</code> puis <code>s</code> : Sélectionner les conversations dont le suivi est activé</li>
<li><code>*</code> puis <code>t</code> : Sélectionner les conversations dont le suivi n’est pas activé</li>
</ul>


<p>puis après:</p>

<ul>
<li><code>e</code> : Archiver</li>
<li><code>m</code> : Ignorer la conversation</li>
<li><code>!</code> : Signaler comme spam</li>
<li><code>#</code> : Supprimer</li>
<li><code>z</code> : Annuler la dernière action</li>
<li><code>I</code> : Marquer comme lu</li>
<li><code>U</code> : Marquer comme non lu</li>
<li><code>+</code> ou <code>=</code> : Marquer comme important</li>
<li><code>-</code> : Marquer comme non important</li>
</ul>


<h2>Une lettre = Un verbe</h2>

<p>la lettre g signifie <strong>g</strong>o</p>

<ul>
<li><code>g</code> puis <code>i</code> : Ouvrir la boîte de réception (<strong>i</strong>nput)</li>
<li><code>g</code> puis <code>s</code> : Ouvrir les conversations dont le suivi est activé</li>
<li><code>g</code> puis <code>t</code> : Ouvrir le dossier &ldquo;Messages envoyés&rdquo;</li>
<li><code>g</code> puis <code>d</code> : Ouvrir le dossier &ldquo;Brouillons&rdquo; (<strong>d</strong>raft)</li>
<li><code>g</code> puis <code>a</code> : Ouvrir le dossier &ldquo;Tous les messages&rdquo;</li>
<li><code>g</code> puis <code>c</code> : Ouvrir le dossier &ldquo;Contacts&rdquo;</li>
</ul>


<h2>Conclusion</h2>

<p>A mon travail, on utilise Gmail, Je recois beaucoup de mail (BitBucket, Hipchat, Slack, Redmine, Jira, Wordpress, Meetup, Ovh). J&#8217;avoue que des que j&#8217;ai décidé de traiter les mails via raccourcis clavier, j&#8217;ai trouvé cela assez pratique.</p>

<p>On peux retrouver un tableau qui résume tout en tapant &ldquo;?&rdquo; dans Gmail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Décorer PHPUnit Avec Les Listeners]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/04/decorer-phpunit-avec-les-listeners/"/>
    <updated>2015-08-04T19:44:52+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/04/decorer-phpunit-avec-les-listeners</id>
    <content type="html"><![CDATA[<h2>Des test unitaires plus jolis</h2>

<p>Comme tout les programmeurs vous faites des tests unitaires. En php, On utilise souvent PHPUnit.
quand je lance mes tests je vois cela.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/phpunit_screenshot.png" width="499" height="168" title="Screenshot de phpunit" alt="Mon terminal n\"></p>

<p>C&#8217;est un peu triste. Et encore j&#8217;ai activé la couleur !.</p>

<p>il existe des variantes avec <code>--testdox</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bin/phpunit --testdox
</span><span class='line'>PHPUnit 4.8-ge1cc585 by Sebastian Bergmann and contributors.
</span><span class='line'>
</span><span class='line'>Spark<span class="se">\S</span>park
</span><span class='line'> <span class="o">[</span>x<span class="o">]</span> It creates a string from data
</span><span class='line'> <span class="o">[</span>x<span class="o">]</span> It dont care <span class="k">if</span> input is string
</span><span class='line'> <span class="o">[</span>x<span class="o">]</span> It works with float number
</span><span class='line'> <span class="o">[</span>x<span class="o">]</span> It s not divide by 0
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est un peu mieux.</p>

<p>Il existe aussi <code>--debug</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>PHPUnit 4.8-ge1cc585 by Sebastian Bergmann and contributors.
</span><span class='line'>
</span><span class='line'>Starting <span class="nb">test</span> <span class="s1">&#39;Spark\SparkTest::testItCreatesAStringFromData&#39;</span>.
</span><span class='line'>.
</span><span class='line'>Starting <span class="nb">test</span> <span class="s1">&#39;Spark\SparkTest::testItDontCareIfInputIsString&#39;</span>.
</span><span class='line'>.
</span><span class='line'>Starting <span class="nb">test</span> <span class="s1">&#39;Spark\SparkTest::testItWorksWithFloatNumber&#39;</span>.
</span><span class='line'>.
</span><span class='line'>Starting <span class="nb">test</span> <span class="s1">&#39;Spark\SparkTest::testItSNotDivideBy0&#39;</span>.
</span><span class='line'>.
</span><span class='line'>
</span><span class='line'>Time: <span class="m">69</span> ms, Memory: 4.50Mb
</span><span class='line'>
</span><span class='line'>OK <span class="o">(</span><span class="m">4</span> tests, <span class="m">4</span> assertions<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais on a un peu fait le tour</p>

<h2>Les Listeners de PHPUnit</h2>

<p>On peux surcharger l&#8217;affichage de PHPunit et cela grâce au listener.</p>

<h3> Comment enregistrer un listener</h3>

<p>Il suffit d&#8217;éditer <code>phpunit.xml</code> et de rajouter les lignes suivantes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;listeners&gt;</span>
</span><span class='line'>    <span class="nt">&lt;listener</span> <span class="na">class=</span><span class="s">&quot;SparkListener&quot;</span>
</span><span class='line'>      <span class="na">file=</span><span class="s">&quot;../src/un-projet-pro/FooBundle/Tests/Listener/SparkListener.php&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/listener&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/listeners&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Comment implémenter un listener.</h3>

<p>Le plus propre est d&#8217;implémenter tout les méthodes de l&#8217;interface</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Monlistener</span> <span class="k">implements</span> <span class="nx">PHPUnit_Framework_TestListener</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addError</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nx">Exception</span> <span class="nv">$e</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addFailure</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nx">PHPUnit_Framework_AssertionFailedError</span> <span class="nv">$e</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addIncompleteTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nx">Exception</span> <span class="nv">$e</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addSkippedTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nx">Exception</span> <span class="nv">$e</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">startTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">startTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais pour aujourd&#8217;hui, Je vais faire plus simple je vais hériter de la classe <code>PHPUnit_TextUI_ResultPrinter</code> si je n&#8217;ai pas envie de réécrire toutes les méthodes.</p>

<h2>Plein d&#8217;utilisation de Listener</h2>

<h3>Des statistiques sur les tests</h3>

<p>Quel est le test qui prend le plus de temps ? Facile avec le Listener suivant.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MaxListener</span> <span class="k">extends</span> <span class="nx">PHPUnit_TextUI_ResultPrinter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$maxTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$suites</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$endedSuites</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">startTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">suites</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">endedSuites</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">suites</span> <span class="o">&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">endedSuites</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;le test le plus long prend </span><span class="si">$this-&gt;maxTime</span><span class="s2"> seconde(s)&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">maxTime</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$time</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">maxTime</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Avec ma librairie que j&#8217;ai développé dans les <a href="http://mcamuzat.github.io/blog/2015/07/19/histogramme-et-ligne-de-commande/">posts</a> précédents.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">Spark\Spark</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SparkListener</span> <span class="k">extends</span> <span class="nx">PHPUnit_TextUI_ResultPrinter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$suites</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$endedSuites</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$testTimes</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">startTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">suites</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">endedSuites</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">suites</span> <span class="o">&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">endedSuites</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nx">Spark</span><span class="o">::</span><span class="na">spark</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">testTimes</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">testTimes</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$time</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">bin</span><span class="o">/</span><span class="nx">phpunit</span> <span class="o">-</span><span class="nx">c</span> <span class="nx">build</span><span class="o">/</span><span class="nx">phpunit</span><span class="o">.</span><span class="nx">xml</span>
</span><span class='line'><span class="nx">PHPUnit</span> <span class="mf">4.5</span><span class="o">.</span><span class="mi">1</span> <span class="nx">by</span> <span class="nx">Sebastian</span> <span class="nx">Bergmann</span> <span class="k">and</span> <span class="nx">contributors</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Configuration</span> <span class="nx">read</span> <span class="nx">from</span> <span class="o">/</span><span class="nx">home</span><span class="o">/</span><span class="nx">marc</span><span class="o">/</span><span class="nx">prog</span><span class="o">/</span><span class="nx">Un</span><span class="o">-</span><span class="nx">projet</span><span class="o">-</span><span class="nx">pro</span><span class="o">/</span><span class="nx">build</span><span class="o">/</span><span class="nx">phpunit</span><span class="o">.</span><span class="nx">xml</span>
</span><span class='line'>
</span><span class='line'><span class="o">.....................................................</span>
</span><span class='line'><span class="nx">█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁</span>
</span><span class='line'><span class="nx">le</span> <span class="nx">test</span> <span class="nx">le</span> <span class="nx">plus</span> <span class="nx">long</span> <span class="nx">prend</span> <span class="mf">0.2183518409729</span> <span class="nx">seconde</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Time</span><span class="o">:</span> <span class="mi">971</span> <span class="nx">ms</span><span class="p">,</span> <span class="nx">Memory</span><span class="o">:</span> <span class="mf">17.25</span><span class="nx">Mb</span>
</span><span class='line'>
</span><span class='line'><span class="nx">OK</span> <span class="p">(</span><span class="mi">53</span> <span class="nx">tests</span><span class="p">,</span> <span class="mi">98</span> <span class="nx">assertions</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Libérer de la mémoire</h3>

<p>On peux libérer de la mémoire en mettant à <code>null</code> les mocks à la fin du test. (exemple trouvé sur github <a href="https://github.com/mybuilder/phpunit-accelerator">mybuilder/phpunit-accelerator</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">FreeListener</span> <span class="k">implements</span> <span class="nx">PHPUnit_Framework_TestListener</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// .. </span>
</span><span class='line'>    <span class="c1">// les autres methodes vides.</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$refl</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReflectionObject</span><span class="p">(</span><span class="nv">$test</span><span class="p">);</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$refl</span><span class="o">-&gt;</span><span class="na">getProperties</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$prop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$prop</span><span class="o">-&gt;</span><span class="na">isStatic</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="mi">0</span> <span class="o">!==</span> <span class="nb">strpos</span><span class="p">(</span><span class="nv">$prop</span><span class="o">-&gt;</span><span class="na">getDeclaringClass</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">(),</span> <span class="s1">&#39;PHPUnit_&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$prop</span><span class="o">-&gt;</span><span class="na">setAccessible</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>                <span class="nv">$prop</span><span class="o">-&gt;</span><span class="na">setValue</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On pourrait faire cela sur un <code>tearDown()</code></p>

<h3>Jouer des fixtures</h3>

<p>Normalement il n&#8217;y a pas de fixture dans PHPUnit. Mais en pratique pour tester certaines méthodes dans les repository, ben il n&#8217;y pas beaucoup le choix.  On peux refaire la base, dropper le schéma, un truncate à chaque test ou <code>memory::sqlite</code>. Mais sur certaines bases de données, c&#8217;est un peu compliqué. Une solution est de vider la base entre chaque suites de tests. Une proposition</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">DBListener</span> <span class="k">implements</span> <span class="nx">PHPUnit_Framework_TestListener</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// .. </span>
</span><span class='line'>    <span class="c1">// les autres methodes vides.</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">startTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">truncateDb</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">truncateDb</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// vide la table..</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">fixtureDb</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// joue les fixtures</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">startTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// si le nom du test contient truncate</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">strpos</span><span class="p">(</span><span class="nv">$test</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">(),</span> <span class="s1">&#39;truncate&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">truncateDB</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">strpos</span><span class="p">(</span><span class="nv">$test</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">(),</span> <span class="s1">&#39;fixture&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">truncateDB</span><span class="p">();</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fixtureDB</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si le nom du test contient <code>truncate</code> et <code>fixture</code> alors on force le truncate et/ou fixture. Une autre possibilité est d&#8217;implémenter la méthode <code>setUpBeforeClass</code> dans le test. Cette méthode est jouée juste avant l&#8217;instantiation de la classe. C&#8217;est du statique, donc pas forcement la joie..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">setUpBeforeClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">parent</span><span class="o">::</span><span class="na">setUpBeforeClass</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">self</span><span class="o">::</span><span class="na">TruncateDB</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Relancer les tests qui ne passent pas.</h3>

<p>Pour le fun..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FailureListener</span> <span class="k">extends</span> <span class="nx">PHPUnit_TextUI_ResultPrinter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$suites</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$endedSuites</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$failTest</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">startTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">suites</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addFailure</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nx">PHPUnit_Framework_AssertionFailedError</span> <span class="nv">$e</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">failTest</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$test</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">startTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">endedSuites</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">suites</span> <span class="o">&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">endedSuites</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">$cli</span> <span class="o">=</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;|&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">failTest</span><span class="p">);</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nx">PHP_EOL</span> <span class="o">.</span> <span class="s2">&quot;Pour relancer seulement les tests qui ne passent pas ajoutez&quot;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;--filter &#39;(</span><span class="si">$cli</span><span class="s2">)&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le script en action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bin/phpunit -c build/phpunit.xml
</span><span class='line'>PHPUnit 4.5.1 by Sebastian Bergmann and contributors.
</span><span class='line'>
</span><span class='line'>Configuration <span class="nb">read </span>from /home/marc/prog/un-projet-pro/build/phpunit.xml
</span><span class='line'>
</span><span class='line'>............................................................................................F.F...........
</span><span class='line'>Pour relancer seulement les tests qui ne passent pas ajoutez
</span><span class='line'>--filter <span class="s1">&#39;(testObjectNeedUpdate|testUpdateObject)&#39;</span>
</span><span class='line'>
</span><span class='line'>Time: <span class="m">958</span> ms, Memory: 17.25Mb
</span></code></pre></td></tr></table></div></figure>


<p>La seconde fois avec la commande qui va bien.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bin/phpunit -c build/phpunit.xml --filter <span class="s1">&#39;(testObjectNeedUpdate|testUpdateObject)&#39;</span>
</span><span class='line'>PHPUnit 4.5.1 by Sebastian Bergmann and contributors.
</span><span class='line'>
</span><span class='line'>Configuration <span class="nb">read </span>from /home/marc/prog/un-projet-pro/build/phpunit.xml
</span><span class='line'>
</span><span class='line'>FF
</span><span class='line'>
</span><span class='line'>Time: <span class="m">116</span> ms, Memory: 9.25Mb
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Il y a encore pas mal d&#8217;utilisation je pense au <a href="https://github.com/whatthejeff/nyancat-phpunit-resultprinter">nyan-cat</a> ! Ou l&#8217;utilisation avec des notifications sur le bureau par exemple <a href="https://github.com/llaville/phpunit-LoggerTestListener">ici</a>.</p>

<p>La librairie <a href="https://packagist.org/packages/mcamuzat/spark">mcamuzat/spark</a> a été initialement fait pour ce post. J&#8217;ai passé finalement plus de temps sur la création de la librairie.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Code Sniffer Mise en Place]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/01/php-code-sniffer-mise-en-place/"/>
    <updated>2015-08-01T18:33:12+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/01/php-code-sniffer-mise-en-place</id>
    <content type="html"><![CDATA[<h2>Qualité de code et php</h2>

<p>Dans ce post nous allons voir les logiciels qui permettent de respecter les standards de code en PHP.</p>

<p>En pratique il n&#8217;y en a que 2.</p>

<ul>
<li><a href="https://github.com/squizlabs/PHP_CodeSniffer">CodeSniffer</a></li>
<li><a href="http://cs.sensiolabs.org/">PHP Coding Standards Fixer</a></li>
</ul>


<h2>CodeSniffer</h2>

<p>Il y a différentes normes de codage :  les plus connus sont la <a href="http://www.php-fig.org/psr/psr-1/">psr-1</a> et la <a href="http://www.php-fig.org/psr/psr-2/">psr-2</a>. La psr-2 hérite de la psr-1. Mais certain Framework ont leur propres méthodes d&#8217;indentations. On peux personnaliser d&#8217;ailleurs les différentes règles. Les gouts et les couleurs de chacun sur le code est subjectif. L&#8217;intérêt de suivre les recommandations est que cela dépassionne le débat. Cela passe CodeSniffer ou cela ne passe pas. Pour participer au projet Open-source, il faut suivre la norme.</p>

<p>La norme est pointilleuse sur les commentaires aussi. Si pas de commentaire pas de validation. On est quasiment forcer d&#8217;écrire la documentation. Cela a parfois un effet pervers ou le programmeur remplit sans trop réfléchir pour faire passer code sniffer.</p>

<p>Très souvent on ajoute un <em>hook</em> sur les commits de git. Lorsque on commite, git déclenche le logiciel, si un des fichiers n&#8217;est pas valide CodeSniffer on refuse de commiter. C&#8217;est assez peu contraignant quand la codebase est déjà indentée. (quoique parfois cela tombe vraiment au mauvais moment).En général on vérifie seulement sur les fichiers modifiés. Re-indenter tout le projet est souvent trop compliqué, trop long et un peu suicidaire si vous avez des rebases et des merges.</p>

<h2>Installation de CodeSniffer</h2>

<p>Deux possibilités</p>

<h3>Dans le projet</h3>

<p>via une dépendance au projet en l&#8217;ajoutant dans le <code>composer.json</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;require-dev&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;squizlabs/php_codesniffer&quot;</span><span class="p">:</span> <span class="s2">&quot;2.*&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alors dans le projet</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./vendor/bin/phpcs -h
</span></code></pre></td></tr></table></div></figure>


<p>Personnellement je définie toujours un répertoire <code>bin</code> par défaut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;config&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;bin-dir&quot;</span><span class="p">:</span> <span class="s2">&quot;bin&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ainsi la commande précédente devient</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bin/phpcs
</span></code></pre></td></tr></table></div></figure>


<h3>Installation globale</h3>

<p>Soit l&#8217;installer de manière globale</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>composer global require <span class="s2">&quot;squizlabs/php_codesniffer=*&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Attention si vous utilisez Composer de manière globale ne pas oublier de rajouter dans votre <code>$PATH</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>~/.composer/vendor/bin:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Ajoutez les reglès symfony</h3>

<p>par défaut phpcs vient avec les règles suivantes</p>

<ul>
<li><a href="http://www.php-fig.org/psr/psr-1/">psr-1</a></li>
<li><a href="http://www.php-fig.org/psr/psr-2/">psr-2</a></li>
<li><a href="https://github.com/squizlabs/PHP_CodeSniffer/tree/master/CodeSniffer/Standards/Squiz">Squiz</a></li>
<li><a href="http://framework.zend.com/manual/1.12/fr/coding-standard.html">Zend</a></li>
<li><a href="https://pear.php.net/manual/en/standards.php">Pear</a></li>
<li><a href="https://github.com/squizlabs/PHP_CodeSniffer/tree/master/CodeSniffer/Standards/PHPCS">Phpcs</a></li>
</ul>


<p>Il manque Symfony..</p>

<p>Voici une méthode simple (mais pas la méthode officielle) si vous voulez l&#8217;installer de manière globale. Je rajoute dans le répertoire <code>Standards</code> un répertoire <code>Symfony2</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>composer global require <span class="s2">&quot;squizlabs/php_codesniffer=*&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/.composer/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards
</span><span class='line'><span class="nv">$ </span>git clone git@github.com:escapestudios/Symfony2-coding-standard.git Symfony2
</span></code></pre></td></tr></table></div></figure>


<p>On vérifie que les règles symfony2 sont bien installées</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>phpcs -i
</span></code></pre></td></tr></table></div></figure>


<p>Symfony2 en défaut. Ainsi pas besoin de préciser <code>--standard=Symfony2</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>phpcs --config-set default_standard Symfony2
</span></code></pre></td></tr></table></div></figure>


<h3>Php-cbf</h3>

<p>Code sniffer est capable de corriger certaines fautes tout seul. Encore une fois essayer de faire au fur et à mesure. Le commit d&#8217;indentation avec 500 fichiers modifiés est un calvaire à gérer si vous faite des revues de codes ou pire un rebase.</p>

<p>La syntaxe est la même que phpcs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>php-cbf src/
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Php-cs-fixer</h2>

<p>Écris par <a href="http://sensiolabs.com/">Sensio</a> les créateurs de <a href="http://symfony.com/">Symfony</a>. Ce logiciel fixe automatiquement l&#8217;indentation et différentes règles. L&#8217;avantage est qu&#8217;il est simple à installer pas besoin de cloner d&#8217;autre dépôt.</p>

<h2>Avoir tout les outils via docker.</h2>

<p>J&#8217;ai déjà présenté les différentes méthodes avec <a href="https://github.com/jolicode/docker-images/tree/master/languages/php/phaudit">phaudit</a> ans cette article <a href="http://mcamuzat.github.io/blog/2015/04/18/dockers-et-ci/">ici</a></p>

<h2>Méthode par rapport à git</h2>

<p>Pour lancer une vérification avant chaque commit
Il suffit de créer un fichier <code>pre-commit.sh</code> dans le répertoire <code>.git/hook</code>. Il y a plein d&#8217;exemples sur le net. Je n&#8217;ai pas d&#8217;exemple à partager. Le code ne m&#8217;appartient plus..</p>

<h2>Installation sous VIM.</h2>

<p>C&#8217;est très simple Il faut installer le plugin <a href="https://github.com/scrooloose/syntastic">syntastic</a>. C&#8217;est un plugin qui gère un peu près tout les formats possibles.</p>

<p>Code-sniffer doit être installé de manière <strong>globale</strong></p>

<p>Il suffit de rajouter cette ligne dans votre <code>.vimrc</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">let </span>g:syntastic_php_checkers<span class="o">=[</span><span class="s1">&#39;php&#39;</span>, <span class="s1">&#39;phpcs&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>A chaque fois que l&#8217;on enregistre le fichier, le plugin lance automatiquement d&#8217;abord <code>php</code> pour vérifier que le fichier est valide, puis <code>phpcs</code>.</p>

<p>Le résultat est très intuitif on a une flèche <code>&gt;</code> à chaque ligne qui pose problème. Il suffit de passer le curseur pour connaitre l&#8217;erreur. Enfin un screenshot sera plus clair.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/syntastic.png" width="600" height="212" title="Screenshot de syntastic" alt="syntastic"></p>

<h2>Conclusion</h2>

<p>Respecter la norme psr-2 ou autre n&#8217;est pas très compliqué, avec l&#8217;habitude c&#8217;est même plutôt facile. Il est plus facile de d&#8217;intervenir sur un code propre. Sur la mise en place, on a vu qu&#8217;il y a deux possibilités soit des warning dans le code soit une correction automatique. Je ne suis pas <em>fan</em> pas la correction automatique. Je ne veux pas que le logiciel prennent des décisions pour moi.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mise en Place De Travis]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/25/mise-en-place-de-travis/"/>
    <updated>2015-07-25T16:37:49+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/25/mise-en-place-de-travis</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Après la création de la <a href="http://mcamuzat.github.io/blog/2015/07/19/histogramme-et-ligne-de-commande/">librairie</a>, la création et la publication du <a href="blog/2015/07/24/creer-son-depot-sous-packagist/">package</a>, je propose d&#8217;ajouter l&#8217;intégration continue avec Travis. Travis est gratuit pour les projets open-source. (L&#8217;url n&#8217;est d&#8217;ailleurs pas la même c&#8217;est travis-ci.org pour les projets publics, et travis-ci.com pour les projets privés)</p>

<h2>L&#8217;intégration continue.</h2>

<p>Il faut bien entendu s&#8217;inscrire sur Travis. On s&#8217;authentifie grâce à son identifiant github.</p>

<p>Nous allons rajouter le fichier <code>.travis.yml</code> dans notre dépôt.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">php</span>
</span><span class='line'><span class="l-Scalar-Plain">install</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">composer install</span>
</span><span class='line'><span class="l-Scalar-Plain">php</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">5.4</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">5.5</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">5.6</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hhvm</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">nightly</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quand je synchronise mes dépôts. Il suffit de cliquer sur le slider pour activé l&#8217;intégration continue.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/travis_choice.png" width="600" height="234" title="intégration continue" alt="Activée l"></p>

<p>On peux lire les logs, d&#8217;ailleurs on se rend compte que travis utilise Docker</p>

<p><img class="center" src="http://mcamuzat.github.io/images/travis_log.png" width="600" height="405" title="Log de travis" alt="Log de travis"></p>

<p>et voici le résultat</p>

<p><img class="center" src="http://mcamuzat.github.io/images/travis_depot.png" width="600" height="320" title="Dashboard du projet" alt="Dashboard du projet"></p>

<p>A chaque commit je lance un build. J&#8217;ai vraiment été très surpris par la simplicité de la mise en œuvre.</p>

<h2>En conclusion</h2>

<p>On peux lancer un build sans passer par travis grâce à docker et <a href="https://github.com/jolicode/JoliCi">JoliCi</a>, Voir ce <a href="blog/2015/04/18/dockers-et-ci/">post</a> à la fin</p>

<p>Dans le prochain article, nous allons parler de CodeSniffer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Créer Son Dépôt Sous Packagist]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/24/creer-son-depot-sous-packagist/"/>
    <updated>2015-07-24T17:50:58+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/24/creer-son-depot-sous-packagist</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>J&#8217;avais montré dans le précédent <a href="http://mcamuzat.github.io/blog/2015/07/19/histogramme-et-ligne-de-commande/">Post</a>, une fonction qui permet de créer des histogrammes.</p>

<p>J&#8217;ai décidé de la publier sous <a href="https://packagist.org/">Packagist</a>. Je n&#8217;avais jamais fais. Je vous propose de suivre mon cheminement</p>

<ul>
<li>Je mets au propre le fichier</li>
<li>J&#8217;ajoute le <code>composer.json</code></li>
<li>j&#8217;ajoute les tests unitaires</li>
<li>Je crée le dépôt sur Github</li>
<li>J&#8217;enregistre le dépôt sur Packagist</li>
</ul>


<h2>Industrialisation</h2>

<p>Nous sommes partis du code suivant.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">spark</span><span class="p">(</span><span class="nv">$array</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$bars</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;▁&#39;</span><span class="p">,</span><span class="s1">&#39;▂&#39;</span><span class="p">,</span><span class="s1">&#39;▃&#39;</span><span class="p">,</span><span class="s1">&#39;▄&#39;</span><span class="p">,</span><span class="s1">&#39;▅&#39;</span><span class="p">,</span><span class="s1">&#39;▆&#39;</span><span class="p">,</span><span class="s1">&#39;▇&#39;</span><span class="p">,</span><span class="s1">&#39;█&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$divide</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$array</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$divide</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$divide</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$countBars</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$bars</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$out</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$array</span> <span class="k">as</span> <span class="nv">$tick</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">$out</span> <span class="o">.=</span> <span class="nv">$bars</span><span class="p">[</span><span class="nb">round</span><span class="p">((</span><span class="nv">$tick</span> <span class="o">/</span> <span class="nv">$divide</span><span class="p">)</span> <span class="o">*</span> <span class="nv">$countBars</span><span class="p">)];</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$out</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// si je n&#39;ai aucun argument ..</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$argv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$str</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// recupère le flux d&#39;entrée</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nb">feof</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$str</span> <span class="o">.=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// explode laisse la derniere ligne vide.</span>
</span><span class='line'>    <span class="c1">// d&#39;ou le array_filter</span>
</span><span class='line'>    <span class="nx">spark</span><span class="p">(</span><span class="nb">array_filter</span><span class="p">(</span><span class="nb">explode</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="nv">$str</span><span class="p">),</span><span class="s1">&#39;strlen&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$iDontCare</span> <span class="o">=</span><span class="nb">array_shift</span><span class="p">(</span><span class="nv">$argv</span><span class="p">);</span>
</span><span class='line'><span class="nx">spark</span><span class="p">(</span><span class="nv">$argv</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je vais découper cela en plusieurs fichiers et répertoires.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">.</span>
</span><span class='line'><span class="nx">├──</span> <span class="nx">bin</span>
</span><span class='line'><span class="nx">│  </span> <span class="nx">└──</span> <span class="nx">spark</span>
</span><span class='line'><span class="nx">├──</span> <span class="nx">composer</span><span class="o">.</span><span class="nx">json</span>
</span><span class='line'><span class="nx">├──</span> <span class="nx">LICENSE</span>
</span><span class='line'><span class="nx">├──</span> <span class="nx">phpunit</span><span class="o">.</span><span class="nx">xml</span><span class="o">.</span><span class="nx">dist</span>
</span><span class='line'><span class="nx">├──</span> <span class="nx">src</span>
</span><span class='line'><span class="nx">│  </span> <span class="nx">└──</span> <span class="nx">Spark</span>
</span><span class='line'><span class="nx">│  </span>     <span class="nx">└──</span> <span class="nx">Spark</span><span class="o">.</span><span class="nx">php</span>
</span><span class='line'><span class="nx">└──</span> <span class="nx">tests</span>
</span><span class='line'>    <span class="nx">├──</span> <span class="nx">bootstrap</span><span class="o">.</span><span class="nx">php</span>
</span><span class='line'>    <span class="nx">└──</span> <span class="nx">Spark</span>
</span><span class='line'>        <span class="nx">└──</span> <span class="nx">SparkTest</span><span class="o">.</span><span class="nx">php</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici <code>Spark.php</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Spark</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Spark</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">static</span> <span class="nv">$bars</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;▁&#39;</span><span class="p">,</span><span class="s1">&#39;▂&#39;</span><span class="p">,</span><span class="s1">&#39;▃&#39;</span><span class="p">,</span><span class="s1">&#39;▄&#39;</span><span class="p">,</span><span class="s1">&#39;▅&#39;</span><span class="p">,</span><span class="s1">&#39;▆&#39;</span><span class="p">,</span><span class="s1">&#39;▇&#39;</span><span class="p">,</span><span class="s1">&#39;█&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">spark</span><span class="p">(</span><span class="nv">$array</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$divide</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$array</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$divide</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$divide</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">$countTick</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$bars</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$out</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$array</span> <span class="k">as</span> <span class="nv">$tick</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$out</span> <span class="o">.=</span> <span class="nx">self</span><span class="o">::</span><span class="nv">$bars</span><span class="p">[</span><span class="nb">round</span><span class="p">((</span><span class="nv">$tick</span> <span class="o">/</span> <span class="nv">$divide</span><span class="p">)</span> <span class="o">*</span> <span class="nv">$countTick</span><span class="p">)];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$out</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et le fichier <code>spark</code> dans le répertoire <code>bin</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">#!/usr/bin/env php</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">require_once</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/../vendor/autoload.php&#39;</span><span class="p">;</span> <span class="c1">// Autoload files using Composer autoload</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Spark\Spark</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$iDontCare</span> <span class="o">=</span><span class="nb">array_shift</span><span class="p">(</span><span class="nv">$argv</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$argv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$str</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nb">feof</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$str</span> <span class="o">.=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nx">Spark</span><span class="o">::</span><span class="na">spark</span><span class="p">(</span><span class="nb">array_filter</span><span class="p">(</span><span class="nb">explode</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="nv">$str</span><span class="p">),</span><span class="s1">&#39;strlen&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Spark</span><span class="o">::</span><span class="na">spark</span><span class="p">(</span><span class="nv">$argv</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Le Composer.json</h2>

<p><strong>Pour publier sur Packagist il faut un <code>composer.json</code></strong></p>

<p>C&#8217;est plutôt simple en fait. Il suffit de lancer la commande <code>composer init</code>. Tout se fait de manière interactive.</p>

<p>à la fin j&#8217;obtiens.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;mcamuzat/spark&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;histogram in command line. Clone of holman/spark&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;require-dev&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;phpunit/phpunit&quot;</span><span class="o">:</span> <span class="s2">&quot;~4.0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;squizlabs/php_codesniffer&quot;</span><span class="o">:</span> <span class="s2">&quot;2.*&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;license&quot;</span><span class="o">:</span> <span class="s2">&quot;MIT&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;authors&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;Marc Camuzat&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;email&quot;</span><span class="o">:</span> <span class="s2">&quot;marc.camuzat@gmail.com&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;minimum-stability&quot;</span><span class="o">:</span> <span class="s2">&quot;dev&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;require&quot;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>    <span class="s2">&quot;autoload&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;psr-0&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;Spark&quot;</span><span class="o">:</span> <span class="s2">&quot;src/&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;config&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;bin-dir&quot;</span><span class="o">:</span> <span class="s2">&quot;bin&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;bin&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;bin/spark&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je crée le Namespace et j&#8217;ajoute que j&#8217;ai un fichier à marquer comme exécutable de le répertoire <code>bin/spark</code>. Je n&#8217;ai aucune dépendance.</p>

<h2>Ajoutons les tests.</h2>

<p>Il faut un minimum de tests.</p>

<p>Pour avoir des tests il faut 3 fichiers</p>

<ul>
<li>Un <code>phpunit.xml.dist</code></li>
<li>Un <code>bootstrap.php</code> pour qui se borne à appeler l&#8217;autoload de composer</li>
<li>Enfin un fichier de test</li>
</ul>


<p>Et installer PHPUnit (qui est déjà dans mon <code>composer.json</code>)</p>

<p>Le <code>phpunit.xml.dist</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;phpunit</span> <span class="na">backupGlobals=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">backupStaticAttributes=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">colors=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>         <span class="na">convertErrorsToExceptions=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>         <span class="na">convertNoticesToExceptions=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>         <span class="na">convertWarningsToExceptions=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>         <span class="na">processIsolation=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">stopOnFailure=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">syntaxCheck=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>         <span class="na">bootstrap=</span><span class="s">&quot;tests/bootstrap.php&quot;</span>
</span><span class='line'><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;testsuites&gt;</span>
</span><span class='line'>        <span class="nt">&lt;testsuite</span> <span class="na">name=</span><span class="s">&quot;Spark Test Suite&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;directory&gt;</span>./tests/<span class="nt">&lt;/directory&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/testsuite&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/testsuites&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;filter&gt;</span>
</span><span class='line'>        <span class="nt">&lt;whitelist&gt;</span>
</span><span class='line'>            <span class="nt">&lt;directory&gt;</span>./src/<span class="nt">&lt;/directory&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/whitelist&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/filter&gt;</span>
</span><span class='line'><span class="nt">&lt;/phpunit&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On appelle le <code>bootstrap.php</code> qui fait venir l&#8217;autoloader</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$loader</span> <span class="o">=</span> <span class="o">@</span><span class="k">include</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$loader</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$loader</span> <span class="o">=</span> <span class="k">require</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../../../../vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et enfin les tests</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Spark</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Spark\Spark</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SparkTest</span> <span class="k">extends</span> <span class="nx">\PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">testItCreateAStringFromData</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$out</span> <span class="o">=</span> <span class="nx">Spark</span><span class="o">::</span><span class="na">spark</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">5</span><span class="p">));</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="s1">&#39;▁▃█▅▃&#39;</span><span class="p">,</span> <span class="nv">$out</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">testItDontCareifInputIsString</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$out</span> <span class="o">=</span> <span class="nx">Spark</span><span class="o">::</span><span class="na">spark</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">,</span><span class="s2">&quot;4&quot;</span><span class="p">,</span><span class="s2">&quot;8&quot;</span><span class="p">));</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="s1">&#39;▃▅█&#39;</span><span class="p">,</span> <span class="nv">$out</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">testItWorkWithFloatNumber</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$out</span> <span class="o">=</span> <span class="nx">Spark</span><span class="o">::</span><span class="na">spark</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;0.2&quot;</span><span class="p">,</span><span class="s2">&quot;0.8&quot;</span><span class="p">,</span><span class="s2">&quot;0.4&quot;</span><span class="p">));</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="s1">&#39;▃█▅&#39;</span><span class="p">,</span> <span class="nv">$out</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">testItNotDivideBy0</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$out</span> <span class="o">=</span> <span class="nx">Spark</span><span class="o">::</span><span class="na">spark</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="s1">&#39;▁▁▁&#39;</span><span class="p">,</span> <span class="nv">$out</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lançons les tests</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bin/phpunit
</span><span class='line'>PHPUnit 4.8-ge1cc585 by Sebastian Bergmann and contributors.
</span><span class='line'>
</span><span class='line'>....
</span><span class='line'>
</span><span class='line'>Time: <span class="m">722</span> ms, Memory: 4.50Mb
</span><span class='line'>
</span><span class='line'>OK <span class="o">(</span><span class="m">4</span> tests, <span class="m">4</span> assertions<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Publication</h2>

<p>Je crée le dépôt sur <a href="https://github.com/mcamuzat/spark">GitHub</a> que je clone</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone mcamuzat/spark.git
</span><span class='line'>git add .
</span><span class='line'>git commit -m<span class="s2">&quot;initialize repo&quot;</span>
</span><span class='line'>git push -u origin master
</span></code></pre></td></tr></table></div></figure>


<p>Je me suis inscris sur <a href="https://packagist.org/">Packagist</a>.</p>

<p>Il suffit de cliquer sur <strong>Submit</strong></p>

<p><img class="center" src="http://mcamuzat.github.io/images/packagist_ajout.png" width="600" height="258" title="Ajouter un dépôt sur Packagist" alt="Ajouter un dépôt sur packagist"></p>

<p>Et de mettre l&#8217;url de Github. Et c&#8217;est tout !</p>

<h2>Des liens</h2>

<ul>
<li>Le projet sur <a href="https://github.com/mcamuzat/spark">Github</a></li>
<li>Le projet sur <a href="https://packagist.org/packages/mcamuzat/spark">Packagist</a></li>
</ul>


<h2>En conclusion</h2>

<p>Il manque encore le <code>README</code> sur Github, car pour l&#8217;instant l&#8217;intérêt du programme est encore un peu mystérieux pour une personne extérieure.</p>

<p>J&#8217;espère que si vous voulez créer votre propre librairie sur Packagist, ce tutoriel vous servira.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Histogramme Et Ligne De Commande]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/19/histogramme-et-ligne-de-commande/"/>
    <updated>2015-07-19T18:16:57+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/19/histogramme-et-ligne-de-commande</id>
    <content type="html"><![CDATA[<h2>Un petit utilitaire.</h2>

<p>J&#8217;ai reprogrammé en php un clone de <a href="https://github.com/holman/spark">spark</a>.</p>

<p>Un petit exemple est plus parlant</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spark([1,2,3,4,4,5,6,1,2]); // ▂▃▅▆▆▇█▂▃
</span><span class='line'>spark([1,2,3,4,5,1,2,3,4,5]); //▂▄▅▇█▂▄▅▇█</span></code></pre></td></tr></table></div></figure>


<p>Voici l&#8217;implémentation</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">spark</span><span class="p">(</span><span class="nv">$array</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$bars</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;▁&#39;</span><span class="p">,</span><span class="s1">&#39;▂&#39;</span><span class="p">,</span><span class="s1">&#39;▃&#39;</span><span class="p">,</span><span class="s1">&#39;▄&#39;</span><span class="p">,</span><span class="s1">&#39;▅&#39;</span><span class="p">,</span><span class="s1">&#39;▆&#39;</span><span class="p">,</span><span class="s1">&#39;▇&#39;</span><span class="p">,</span><span class="s1">&#39;█&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$divide</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$array</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$divide</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$divide</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$countBars</span> <span class="o">=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$bars</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$out</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$array</span> <span class="k">as</span> <span class="nv">$tick</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">$out</span> <span class="o">.=</span> <span class="nv">$bars</span><span class="p">[</span><span class="nb">round</span><span class="p">((</span><span class="nv">$tick</span> <span class="o">/</span> <span class="nv">$divide</span><span class="p">)</span> <span class="o">*</span> <span class="nv">$countBars</span><span class="p">)];</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$out</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>L&#8217;appeler en ligne de commande.</h2>

<p>La documentation de spark donne cette ligne de commande</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">spark</span> <span class="mi">0</span> <span class="mi">30</span> <span class="mi">55</span> <span class="mi">80</span> <span class="mi">33</span> <span class="mi">150</span>
</span></code></pre></td></tr></table></div></figure>


<p>Est ce qu&#8217;on peux faire la même chose ? Il suffit de rajouter les deux lignes suivantes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$iDontCare</span> <span class="o">=</span><span class="nb">array_shift</span><span class="p">(</span><span class="nv">$argv</span><span class="p">);</span>
</span><span class='line'><span class="nx">spark</span><span class="p">(</span><span class="nv">$argv</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On utilise la variable <code>$argv</code> qui est le tableau de paramètres passer dans la ligne de commande. L&#8217;argument <code>$argv[0]</code>est le nom du programme, c&#8217;est pour cela que l&#8217;on fait un <code>array_shift</code> cela supprime la première valeur du tableau.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">spark</span><span class="o">.</span><span class="nx">php</span> <span class="mi">0</span> <span class="mi">30</span> <span class="mi">55</span> <span class="mi">80</span> <span class="mi">33</span> <span class="mi">150</span>
</span><span class='line'><span class="nx">▁▂▄▅▃█</span>
</span></code></pre></td></tr></table></div></figure>


<h2>L&#8217;appeler via les pipes</h2>

<p>Un peu plus compliqué via les pipes du Shell.</p>

<p>Les implémentations des Pipes se présentent toujours un peu de la même manière. On utilise <code>STDIN</code>  qui représente l&#8217;entrée standard.</p>

<p>Un exemple qui traduit les caractères accentués. <code>é-&gt;&amp;eacute</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">#!/usr/bin/env php</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nb">feof</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">echo</span> <span class="nb">htmlentities</span><span class="p">(</span><span class="nb">fgets</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La ligne <code>!/usr/bin/env php</code> s&#8217;appelle le <a href="https://fr.wikipedia.org/wiki/Shebang">shebang</a></p>

<p>Puis rendre exécutable le fichier</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">chmod</span> <span class="o">+</span><span class="nx">x</span> <span class="nb">htmlentities</span><span class="o">.</span><span class="nx">php</span>
</span></code></pre></td></tr></table></div></figure>


<p>Des exemples</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="err">$</span> <span class="k">echo</span> <span class="s1">&#39;énergie&#39;</span> <span class="o">|</span> <span class="o">./</span><span class="nb">htmlentities</span><span class="o">.</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="o">&amp;</span><span class="nx">eacute</span><span class="p">;</span><span class="nx">nergie</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="nx">cat</span> <span class="nb">file</span><span class="o">.</span><span class="nx">txt</span> <span class="o">|</span> <span class="o">./</span><span class="nb">htmlentities</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce qui est cool c&#8217;est que l&#8217;on peux chainer les opérateur.</p>

<p>Un programme qui passe la première lettre en majuscule.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">#!/usr/bin/env php</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nb">feof</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">echo</span> <span class="nb">ucfirst</span><span class="p">(</span><span class="nb">trim</span><span class="p">(</span><span class="nb">fgets</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un programme qui aime crier !!!!.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">#!/usr/bin/env php</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nb">feof</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">echo</span> <span class="nb">trim</span><span class="p">(</span><span class="nb">fgets</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">))</span><span class="o">.</span><span class="s1">&#39;!!!!&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="err">$</span> <span class="k">echo</span> <span class="s1">&#39;récuperation&#39;</span> <span class="o">|</span> <span class="o">./</span><span class="nx">shoot</span><span class="o">.</span><span class="nx">php</span> <span class="o">|</span> <span class="o">./</span><span class="nx">capitalize</span><span class="o">.</span><span class="nx">php</span> <span class="o">|</span> <span class="o">./</span><span class="nb">htmlentities</span><span class="o">.</span><span class="nx">php</span>
</span><span class='line'><span class="nx">R</span><span class="o">&amp;</span><span class="nx">eacute</span><span class="p">;</span><span class="nx">cup</span><span class="o">&amp;</span><span class="nx">eacute</span><span class="p">;</span><span class="nx">ration</span><span class="o">!!!!</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est un peu plus compliqué dans la vrai vie avec les retours à la ligne vide. Mais j&#8217;espère que vous avez compris mon idée.</p>

<p>Retour à notre script.</p>

<p>Voici la partie pour récupérer de la ligne de commande.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// si je n&#39;ai aucun argument ..</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$argv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$str</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// recupère le flux d&#39;entrée</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nb">feof</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$str</span> <span class="o">.=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// explode laisse la derniere ligne vide.</span>
</span><span class='line'>    <span class="c1">// d&#39;ou le array_filter</span>
</span><span class='line'>    <span class="nx">spark</span><span class="p">(</span><span class="nb">array_filter</span><span class="p">(</span><span class="nb">explode</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="nv">$str</span><span class="p">),</span><span class="s1">&#39;strlen&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Essayons une commande sur le dépôt git du blog que vous lisez.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">git</span> <span class="nx">shortlog</span> <span class="o">-</span><span class="nx">s</span> <span class="o">|</span> <span class="nx">cut</span> <span class="o">-</span><span class="nx">f1</span> <span class="o">|</span> <span class="nx">php</span> <span class="o">~/</span><span class="nx">prog</span><span class="o">/</span><span class="nx">spark</span><span class="o">/</span><span class="nx">spark</span><span class="o">.</span><span class="nx">php</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git shortlog -s
</span><span class='line'><span class="o">(</span>...<span class="o">)</span>
</span><span class='line'>   <span class="m">2</span>  Manu
</span><span class='line'>   <span class="m">37</span>  Marc Camuzat
</span><span class='line'>   <span class="m">1</span>  Marcus Young
</span><span class='line'><span class="o">(</span>..<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On ne garde que la colonne 1 avec <code>cut -f1</code> puis on passe au script php</p>

<p>On obtient</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>▁▁▁▁▁▁▁▁▁▁▁▁▃▁▁▁▁▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>J&#8217;avais besoin pour un futur article (le prochain ?) de cette fonction.
La philosophie de Linux est de créer plein de petits programmes et que ceux-ci communiquent via une interface très simple et universelle qui est le fichier texte. Ainsi il n&#8217;y a aucune dépendance le programme 1 est en bash, le programme 2 est en C, le programme 3 est en PHP. Et tout cela ne pose aucun problème.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Processing Et Souvenir]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/17/processing-et-souvenir/"/>
    <updated>2015-07-17T22:52:27+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/17/processing-et-souvenir</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://mcamuzat.github.io/images/voiture.png" width="499" height="300" title="Vrooum!!" alt="Screenshot du programme avec le micro"></p>

<p>Aujourd&#8217;hui, je ressors un vieux code que j&#8217;avais écris pour le CNAM. Le sujet était faire que l&#8217;image à l&#8217;écran bouge quand on parle dans un microphone. Mais pas d&#8217;animation à la Winamp (j&#8217;ai des vieilles références :-) ou le player de Windows. J&#8217;avais donc programmé une voiture sur un circuit, pour le réalisme j&#8217;avais connecté un Wii-chuck via un Arduino pour faire le volant. Imaginez une personne avec un Wiichuk et un micro en train de faire &ldquo;Vrrrooum&rdquo; et vous aurez un idée de ma soutenance (qui s&#8217;est bien passée d&#8217;ailleurs).</p>

<p>Les conditions étaient :</p>

<ul>
<li>Utiliser un Micro</li>
<li>La langage imposé est Processing</li>
</ul>


<h2>Processing Késako</h2>

<p>Processing est une variante de Java en plus simple. C&#8217;est un langage destiné à faire des oeuvres d&#8217;arts numériques. Il est souvent enseigné en école d&#8217;art. Il vient avec son propre éditeur. à noter que les <a href="https://fr.wikipedia.org/wiki/Arduino">Arduinos</a> se programment aussi en processing.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/processing.png" width="499" height="533" title="Processing" alt="Screenshot de processing avec son interface"></p>

<p>Il suffit d&#8217;implémenter deux méthodes :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void setup() // sera appelé à l'initialisation
</span><span class='line'>void draw() // sera appellé 30 à 50 fois par seconde</span></code></pre></td></tr></table></div></figure>


<p>Un exemple très simple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">size</span><span class="o">(</span><span class="mi">640</span><span class="o">,</span> <span class="mi">360</span><span class="o">);</span> <span class="c1">//j&#39;initialise la taille 640*</span>
</span><span class='line'>  <span class="n">stroke</span><span class="o">(</span><span class="mi">255</span><span class="o">);</span> <span class="c1">// le trait est blanc</span>
</span><span class='line'>  <span class="n">fill</span><span class="o">(</span><span class="mi">255</span><span class="o">);</span> <span class="c1">// remplissage de blanc</span>
</span><span class='line'>  <span class="n">background</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// couleur de fond blanche</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">draw</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// si la souris est appuyer</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">mousePressed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="c1">// ellipse x, y ,hauteur, largeur</span>
</span><span class='line'>    <span class="n">ellipse</span><span class="o">(</span><span class="n">mouseX</span><span class="o">,</span> <span class="n">mouseY</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Appuyez sur la touche play</p>

<p><img class="center" src="http://mcamuzat.github.io/images/processing_exemple.png" width="535" height="375" title="Processing" alt="le résultat"></p>

<p>Je viens de faire un petit painbrush. C&#8217;est assez facile d&#8217;obtenir un truc plutôt joli avec assez peu de lignes de code. Il y a des librairies toutes prêtes pour la video, webcam.</p>

<p>Il y a de nombreux livres donc le <a href="http://www.amazon.com/Visualizing-Data-Explaining-Processing-Environment/dp/0596514557">Visualizing Data</a>. Pour 2007, le livre est impressionnant. On parle de traitement de donnée et acquisitions des données bien avant la mode du Big data.</p>

<h1>Installez Processing</h1>

<p>Nous allons d&#8217;abord installer Java si vous n&#8217;avez pas. J&#8217;installe le paquet officiel</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">purge</span> <span class="n">openjdk</span><span class="o">*</span>    <span class="c1">// Supprime opendjdk</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">software</span><span class="o">-</span><span class="n">properties</span><span class="o">-</span><span class="n">common</span>   <span class="c1">//ajout de librairie</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">add</span><span class="o">-</span><span class="n">apt</span><span class="o">-</span><span class="n">repository</span> <span class="nl">ppa:</span><span class="n">webupd8team</span><span class="o">/</span><span class="n">java</span> <span class="c1">// ajout du depot</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>                 <span class="c1">// et on met à jour les videos</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">oracle</span><span class="o">-</span><span class="n">java7</span><span class="o">-</span><span class="n">installer</span> <span class="c1">// On installe</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">oracle</span><span class="o">-</span><span class="n">java7</span><span class="o">-</span><span class="n">set</span><span class="o">-</span><span class="k">default</span> <span class="c1">// et on mets par défaut</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis nous allons installer Processing
On télécharge le binaire à l&#8217;<a href="https://processing.org/download/?processing">adresse officielle</a></p>

<p>Puis on décompresse</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">tar</span> <span class="n">xf</span> <span class="n">processing</span><span class="o">-*.</span><span class="na">tgz</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">mkdir</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">processing</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">mv</span> <span class="n">processing</span><span class="o">-*</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">processing</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il n&#8217;y a plus qu&#8217;à lancer processing</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">sh</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">processing</span><span class="o">/</span><span class="n">processing</span><span class="o">-</span><span class="mf">2.2</span><span class="o">.</span><span class="mi">1</span><span class="o">/</span><span class="n">processing</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vous devriez voir apparaitre l&#8217;interface</p>

<p>Faire marcher mon code:</p>

<ul>
<li>Il faut utiliser la librairie Ess pour analyser le signal (marrant c&#8217;était déja vieux à l&#8217;époque)</li>
<li>Aller sur le site <a href="http://www.tree-axis.com/Ess">suivant</a>.</li>
<li>Décompressez et copier le répertoire ESS dans /usr/share/processing/processing-2.2.1/modes/java/libraries/</li>
</ul>


<h2>Le code</h2>

<p>Il est disponible <a href="https://github.com/mcamuzat/processing-car">ici</a> sous Github. J&#8217;ai commenté la partie avec le Numchuck+Arduino (car peux de gens ont le matériel). A l&#8217;époque impossible de faire marcher la connection USB/Wiichuck sous Linux, j&#8217;ai passé la soutenance sous un vieux PC sous windows XP. Tout est mis dans le même fichier car j&#8217;avais pas trouver comment découper un projet. C&#8217;est d&#8217;ailleurs ce que je reproche un peu à Processing, c&#8217;est un langage simple pour débuter, mais faire un MVC ou un programme très complexe. Il faut quasiment tout refaire à la main.</p>

<h2>Quelques liens</h2>

<ul>
<li>le <a href="https://processing.org/">site officiel</a></li>
<li>Des <a href="http://www.openprocessing.org/">galeries interactives</a></li>
<li><a href="http://processingjs.org/">ProcessingJs</a> (fait par le programmeur de JQuery Jon Resig)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Quines]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/11/les-quines/"/>
    <updated>2015-07-11T19:39:53+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/11/les-quines</id>
    <content type="html"><![CDATA[<p>Aujourd&#8217;hui commençons par un petit programme</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  <span class="c">#!/bin/sh</span>
</span><span class='line'>  quine <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">echo</span> -e <span class="s2">&quot;#!/bin/sh\n$1&quot;</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;quine &#39;$1&#39;&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  quine <span class="s1">&#39;quine () {</span>
</span><span class='line'><span class="s1">  echo -e &quot;#!/bin/sh\\n$1&quot;</span>
</span><span class='line'><span class="s1">  echo &quot;quine \047$1\047&quot;</span>
</span><span class='line'><span class="s1">  }</span>
</span><span class='line'><span class="s1">  &#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pouvez vous devinez que fais ce programme ?</p>

<p>Une quine est un code donc la sortie est exactement son code source.</p>

<p>Cela ressemble à une exercice de programmation.</p>

<p>Mais toute en quelque sorte peuvent se résumer à l&#8217;idée suivante.</p>

<blockquote><p>Écrivez, puis écrivez entre guillemets et suivi d&#8217;un point, « Écrivez, puis écrivez entre guillemets et suivi d&#8217;un point, ».</p></blockquote>

<p>Le code python suivant est une interprétation littérale.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">a</span><span class="o">=</span><span class="s">&#39;a=</span><span class="si">%r</span><span class="s">;print(a</span><span class="si">%%</span><span class="s">a)&#39;</span><span class="p">;</span><span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">%</span><span class="n">a</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>En php</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nv">$a</span><span class="o">=</span><span class="s1">&#39;&lt;?$a=%c%s%c;printf($a,39,$a,39);&#39;</span><span class="p">;</span><span class="nb">printf</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span><span class="mi">39</span><span class="p">,</span><span class="nv">$a</span><span class="p">,</span><span class="mi">39</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seulement possible en php</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">echo</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A quoi cela sert ?</h2>

<p>On parle de code qui se réplique. Il existe une quine dans tout les langages de programmations complets(c&#8217;est à dire turing-complet). Une des applications les plus curieuses est l&#8217;injection de code malicieux dans les compilateurs. C&#8217;est un des papiers les plus célèbres de Ken Thompson (Inventeur de B, Unix, UTF8, Go bref un monstre..). C&#8217;est un publication académique très facilement lisible et qui ne fait que trois pages. Il décrit une méthode d&#8217;injection dans le compilateur lui-même pour créer un compilateur infecté. Le plus bizarre dans cette histoire est que cette attaque est théorique. Mais personne n&#8217;y croyait. Il existe pourtant réellement un virus qui utilise cette faille.</p>

<ul>
<li><a href="https://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf">Reflections on Trusting Trust</a></li>
<li><a href="https://lists.owasp.org/pipermail/owasp-cincinnati/2009-August/000187.html">la faille de sécurité</a></li>
</ul>


<h2>Des liens et bibliographie.</h2>

<p>Il y a un chapitre complet dans le <a href="https://fr.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach_:_Les_Brins_d%27une_Guirlande_%C3%89ternelle">Gödel Escher Bach</a>
quelques phrases issues de ce livre passionnant</p>

<blockquote><p>&ldquo;est un fragment de phrase&rdquo; est un fragment de phrase</p>

<p>&ldquo;se compose de cinq mots&rdquo; se compose de cinq mots</p>

<p>&ldquo;Donne une fausseté si précédée d&#8217;elle-même entre guillemets&rdquo; Donne une fausseté si précédée d&#8217;elle-même entre guillemets.</p></blockquote>

<p>Cette dernière est de <a href="https://en.wikipedia.org/wiki/Willard_Van_Orman_Quine">W. V. Quine</a> qui est la première personne à écrire dessus et qui donne le noms de quine.</p>

<p>la plupart des exemples viens de l&#8217;article <a href="https://fr.wikipedia.org/wiki/Quine_%28informatique%29">quine</a> sur Wikipedia. Voir aussi <a href="http://c2.com/cgi/wiki?QuineProgram">quine</a> sur c2.com</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Des Tests Behat Plus Rapides Sous Symfony]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/06/des-tests-plus-rapides-sous-symfony/"/>
    <updated>2015-07-06T19:46:43+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/06/des-tests-plus-rapides-sous-symfony</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Nous allons voir comment multiplier par 5 voir 10 les tests et l&#8217;environnement de test et de dev. L&#8217;astuce ici est de mettre le répertoire <code>cache</code> et <code>log</code> dans la Ram de l&#8217;ordinateur. Ainsi plus d&#8217;écriture sur le disque dur. C&#8217;est très pratique aussi pour les tests Behat. Attention à ne pas utiliser cette astuce sur une instance en production.</p>

<h2>Mise en Oeuvre</h2>

<h3>Méthode 1 : modification du code</h3>

<p>Il suffit de modifier le <code>AppKernel.php</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">getCacheDir</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">environment</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;dev&#39;</span><span class="p">,</span> <span class="s1">&#39;test&#39;</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;/run/shm/&lt;MonProjet&gt;/cache/&#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">environment</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">parent</span><span class="o">::</span><span class="na">getCacheDir</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">getLogDir</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">environment</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;dev&#39;</span><span class="p">,</span> <span class="s1">&#39;test&#39;</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;/run/shm/&lt;Monprojet&gt;/logs&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">parent</span><span class="o">::</span><span class="na">getLogDir</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il faut bien entendu créer les répertoires suivants. <code>/run/shm/&lt;Monprojet&gt;/logs</code> et <code>/run/shm/&lt;Monprojet&gt;/cache</code>.</p>

<p>Le problème de cette méthode est que l&#8217;on modifie le code. Et que ce genre de modification ne marche pas très bien avec les tests automatiques Jenkins. Bref pratique sur son poste mais pas en production.</p>

<h3>Fixer les problèmes de droit.</h3>

<p>Suivant comme est configuré votre projet et votre apache. Il peux y avoir des problème de droit.</p>

<h4>Solution a : mettre les permissions à l&#8217;utilisateur apache</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">chown</span> <span class="o">-</span><span class="nx">R</span> <span class="nx">www</span><span class="o">-</span><span class="nx">data</span><span class="o">:</span><span class="nx">www</span><span class="o">-</span><span class="nx">data</span> <span class="o">/</span><span class="nx">run</span><span class="o">/</span><span class="nx">shm</span><span class="o">/&lt;</span><span class="nx">MonProjet</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Solution b : mettre l&#8217;utilisateur actuel en utilisateur apache.</h4>

<p>Normalement apache utilise l&#8217;utilisateur www-data, mais rien n&#8217;empêche de changer celui-ci par votre utilisateur.</p>

<p>Il suffit de modifier votre <code>/etc/apache2/httpd.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">User</span> <span class="o">&lt;</span><span class="nx">mon</span> <span class="nx">user</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">Group</span> <span class="o">&lt;</span><span class="nx">mon</span> <span class="nx">user</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>que je lance symfony de la console, ou du site c&#8217;est toujours le même utilisateur.</p>

<h4>Solution c : Fixer juste pour le projet votre utilisateur.</h4>

<p>La solution la plus simple à mettre en oeuvre est <code>mpm-itk</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">sudo</span> <span class="nx">apt</span><span class="o">-</span><span class="nx">get</span> <span class="nx">install</span> <span class="nx">apache2</span><span class="o">-</span><span class="nx">mpm</span><span class="o">-</span><span class="nx">itk</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans mon fichier de conf <code>/etc/apache2/site-available/&lt;monprojet&gt;.conf</code></p>

<p>J&#8217;ajoute les lignes suivantes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">IfModule</span> <span class="nx">mpm_itk_module</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">AssignUserId</span> <span class="o">&lt;</span><span class="nx">mon</span> <span class="nx">user</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="nx">mon</span> <span class="nx">group</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">IfModule</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il faut redémarrer apache. Les plus courageux tenterons le fast-cgi et autre fpm</p>

<h4>Un petit HS:</h4>

<ul>
<li>Vous pouvez créer un utilisateur par projet.</li>
<li>Et installer le projet dans /home/projet1</li>
<li>dans le /etc/apache2/site-available/projet1.conf</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">IfModule</span> <span class="nx">mpm_itk_module</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">AssignUserId</span> <span class="o">&lt;</span><span class="nx">projet1</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="nx">projet1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">IfModule</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si l&#8217;utilisateur <em>projet1</em> est compromis, il ne peux modifier que son home. Il y a plus de risque avec l&#8217;utilisateur apache <code>www-data</code> qui peux modifier l&#8217;ensemble de projet dans le /www/var.</p>

<h3>Solution N°2 : Aucune modification du code.</h3>

<p>Nous allons tout simplement supprimer les répertoires <code>cache</code> et <code>logs</code> du projet et remplacer par un lien symbolique.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">rm</span> <span class="o">-</span><span class="nx">rf</span> <span class="nx">app</span><span class="o">/</span><span class="nx">cache</span>
</span><span class='line'><span class="nx">ln</span> <span class="o">-</span><span class="nx">s</span> <span class="o">/</span><span class="nx">run</span><span class="o">/</span><span class="nx">shm</span><span class="o">/&lt;</span><span class="nx">mon</span> <span class="nx">projet</span><span class="o">&gt;/</span><span class="nx">cache</span>  <span class="nx">app</span><span class="o">/</span><span class="nx">cache</span>
</span><span class='line'><span class="nx">ln</span> <span class="o">-</span><span class="nx">s</span> <span class="o">/</span><span class="nx">run</span><span class="o">/</span><span class="nx">shm</span><span class="o">/&lt;</span><span class="nx">mon</span> <span class="nx">projet</span><span class="o">&gt;/</span><span class="nx">logs</span>  <span class="nx">app</span><span class="o">/</span><span class="nx">logs</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le code n&#8217;est pas modifié. Donc pas de commit bizarre et pas de problème en Prod. Le seul souci est qu&#8217;il y a souvent un <code>.gitkeep</code> sur <code>cache</code> et <code>log</code> donc les <code>git stash</code> et autre se comporte un peu bizarrement.</p>

<h3>des chiffres</h3>

<p>J&#8217;ai pris un projet de mon boulot voici la différence pour les tests Behat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Avant</span>
</span><span class='line'><span class="mi">49</span> <span class="nx">scenarios</span> <span class="p">(</span><span class="mi">49</span> <span class="nx">passed</span><span class="p">)</span>
</span><span class='line'><span class="mi">396</span> <span class="nx">steps</span> <span class="p">(</span><span class="mi">396</span> <span class="nx">passed</span><span class="p">)</span>
</span><span class='line'><span class="mi">5</span><span class="nx">m12</span><span class="o">.</span><span class="mi">80</span><span class="nx">s</span> <span class="p">(</span><span class="mf">66.61</span><span class="nx">Mb</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Après</span>
</span><span class='line'><span class="mi">49</span> <span class="nx">scenarios</span> <span class="p">(</span><span class="mi">49</span> <span class="nx">passed</span><span class="p">)</span>
</span><span class='line'><span class="mi">396</span> <span class="nx">steps</span> <span class="p">(</span><span class="mi">396</span> <span class="nx">passed</span><span class="p">)</span>
</span><span class='line'><span class="mi">0</span><span class="nx">m23</span><span class="o">.</span><span class="mi">74</span><span class="nx">s</span> <span class="p">(</span><span class="mf">72.85</span><span class="nx">Mb</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>je suis passé de 5 minutes à 24 secondes. Les fixtures sur le SQLite sont plus rapides. Bref un gain de temps énorme.</p>

<h2>Conclusion</h2>

<p>Nous avons vu deux solutions.
Un Post un peu bizarre, puisque c&#8217;est un collègue qui m&#8217;a montré l&#8217;astuce. J&#8217;avais envie d&#8217;écrire un post dessus. Merci à <a href="https://github.com/floyoops">lui</a></p>

<h2>Des liens</h2>

<ul>
<li><a href="http://www.whitewashing.de/2013/08/19/speedup_symfony2_on_vagrant_boxes.html">le liens le plus cité</a></li>
<li>sur Npm-itk en <a href="http://bibabox.fr/apache2-mpm-itk-utiliser-un-utiliser-un-utilisateur-different-pour-chaque-vhost/">français</a> ou en <a href="http://blog.stuartherbert.com/php/2008/04/19/using-mpm-itk-to-secure-a-shared-server/">anglais</a> les deux sont biens.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Et Debbuger]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/05/vim-et-debbuger/"/>
    <updated>2015-07-05T17:12:57+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/05/vim-et-debbuger</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Je vais montrer aujourd&#8217;hui comment interfacer Vim et xdebug pour debugger du php.</p>

<ul>
<li>Installer xdebug</li>
<li>Paramétrer xdebug</li>
<li>Présentation de deux plugins <strong>Vdebug</strong> et <strong>DBGPavim</strong></li>
<li>Comment installer les deux plugin avec</li>
</ul>


<h2>Installer xdebug</h2>

<p>Je connais deux méthodes</p>

<p>Utiliser PECL</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pecl install xdebug</span></code></pre></td></tr></table></div></figure>


<p>il faut alors ajouter dans votre <code>php.ini</code> la ligne suivante</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zend_extension=/usr/lib/php5/20090626/xdebug.so</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Ou plus propre rajouter dans un nouveau fichier  <code>/etc/php5/apache2/conf.d/xdebug.ini</code> et pareil pour la ligne de commande <code>/etc/php5/cli/conf.d/xdebug.ini</code></p>

<p>utiliser apt-get sous Ubuntu</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install php5-xdebug</span></code></pre></td></tr></table></div></figure>


<p>sur mon Ubuntu, les fichier conf.d était déjà crée</p>

<h2>Paramétrer xdebug pour le debugger</h2>

<p>Il faut rajouter les lignes suivantes le <code>xdebug.ini</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xdebug.remote_enable=on
</span><span class='line'>xdebug.remote_handler=dbgp
</span><span class='line'>xdebug.remote_host=localhost
</span><span class='line'>xdebug.remote_port=9000</span></code></pre></td></tr></table></div></figure>


<p>Puis aller sur l&#8217;url en ajoutant</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://monsite.com/?XDEBUG_SESSION_START=1</span></code></pre></td></tr></table></div></figure>


<p>Il y a des plugins Firefox et Chrome qui s&#8217;occupe de cela.</p>

<p>Pour que le debugger soit lancer par défaut. Vous pouvez rajouter la ligne suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">xdebug.remote_autostart</span><span class="o">=</span><span class="s">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour tester en ligne de commande.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>php -dxdebug.remote_autostart<span class="o">=</span><span class="m">1</span> test.php
</span></code></pre></td></tr></table></div></figure>


<p>un simple script bash fait l&#8217;affaire. <code>php-debug</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>/usr/bin/php -dxdebug.remote_autostart<span class="o">=</span><span class="m">1</span> <span class="s2">&quot;$@&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Les plugins VIM</h2>

<p>Je vais pas trop insister sur comment installer un plugin sous Vim. Ce n&#8217;est pas très compliqué. Il faut passer par un gestionnaire de plugin (la gestion des plugins par défaut dans Vim n&#8217;est pas pratique)</p>

<h2> Vdebug</h2>

<h3>Utilisation</h3>

<ul>
<li>appuyer sur <code>&lt;F5&gt;</code></li>
<li>vous avez 20 seconde pour lancer le script ou aller sur le serveur apache.</li>
<li>Une fois le signal capturé</li>
</ul>


<h3>Liste des raccourcis claviers</h3>

<p><img class="center" src="http://mcamuzat.github.io/images/VDebug.png" width="600" height="375" title="Vdebug" alt="Screenshot de VDebug"></p>

<ul>
<li><code>&lt;F5&gt;</code>: start/run (to next breakpoint/end of script)</li>
<li><code>&lt;F2&gt;</code>: step over</li>
<li><code>&lt;F3&gt;</code>: step into</li>
<li><code>&lt;F4&gt;</code>: step out</li>
<li><code>&lt;F6&gt;</code>: stop debugging</li>
<li><code>&lt;F7&gt;</code>: detach script from debugger</li>
<li><code>&lt;F9&gt;</code>: run to cursor</li>
<li><code>&lt;F10&gt;</code>: toggle line breakpoint</li>
<li><code>&lt;F11&gt;</code>: show context variables (e.g. after &ldquo;eval&rdquo;)</li>
<li><code>&lt;F12&gt;</code>: evaluate variable under cursor</li>
<li><code>:VdebugEval &lt;code&gt;</code>: evaluate some code and display the result</li>
<li><code>&lt;Leader&gt;e</code>: evaluate the expression under visual highlight and display the result</li>
</ul>


<p>La touche <code>&lt;Leader&gt;</code> est par défault <code>\</code> sur un clavier anglais. <code>&lt;Leader&gt;e</code> correspond à <code>\e</code>. Pas simple à taper sur un clavier azerty. la touche <code>&lt;Leader&gt;</code> est réglable grâce à cette configuration du <code>.vimrc</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">let </span><span class="nv">mapleader</span> <span class="o">=</span> <span class="s2">&quot;,&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sur mon poste, je tape <code>,e</code></p>

<h3>Un avis</h3>

<p>Marche plutôt bien, mais par défaut Le debugger commence au début du script et pas au premier breakpoint.</p>

<p>Il faut rajouter cette ligne dans votre <code>.vimrc</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">let </span>g:vdebug_options<span class="o">[</span><span class="s2">&quot;break_on_open&quot;</span><span class="o">]=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;histoire des 20 secondes pour se connecter est un peu frustrante.</p>

<p>Par contre le code python est super propre.</p>

<h2>DBGPavim</h2>

<p><img class="center" src="http://mcamuzat.github.io/images/DBGPAVIM.png" width="600" height="375" title="DBGPavim" alt="Screenshot de DBGPavim"></p>

<p>Ce plugin résout les deux problèmes de Vdebug (aucune limitation de temps, démarre au premier point d&#8217;arrêt). Je le trouve moins intuitif. Mais il est visiblement plus puissant, il gère plusieurs sessions.</p>

<p>Sur les screenshots la différence est plutôt minime.</p>

<p>Les touches sont un peu près les mêmes.</p>

<h2>Installations sous vim</h2>

<p>Suivant le plugin que vous avez choisi</p>

<p>Par <a href="https://github.com/tpope/vim-pathogen">Pathogen</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git://github.com/joonty/vdebug.git bundle/vdebug
</span><span class='line'>ou
</span><span class='line'>git://github.com/joonty/vdebug.git brookhong/DBGPavim.git
</span></code></pre></td></tr></table></div></figure>


<p>Ou avec les submodules de Git</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git submodule add git://github.com/joonty/vdebug.git bundle/vdebug
</span><span class='line'><span class="c"># ou </span>
</span><span class='line'>git submodule add git://github.com/brookhong/DBGPavim.git bundle/DBGPavim
</span></code></pre></td></tr></table></div></figure>


<p>Ajouter cette ligne à votre <code>.vimrc</code></p>

<p>par <a href="https://github.com/gmarik/Vundle.vim">Vundle</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Bundle <span class="s2">&quot;joonty/vdebug&quot;</span>
</span><span class='line'><span class="c"># ou</span>
</span><span class='line'>Bundle <span class="s1">&#39;brookhong/DBGPavim&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>par <a href="https://github.com/Shougo/neobundle.vim">NeoBundle</a> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>NeoBundle <span class="s2">&quot;joonty/vdebug&quot;</span>
</span><span class='line'><span class="c"># ou</span>
</span><span class='line'>NeoBundle <span class="s1">&#39;brookhong/DBGPavim&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>En conclusion</h2>

<p>Le debugger c&#8217;est chouette et cela rends un peu obsolète ce bon vieux <code>var_dump(); die();</code></p>

<p>D&#8217;ailleurs sur le <code>var_dump</code>. Il est plus simple de taper cette commande directement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>die<span class="o">(</span>var_dump<span class="o">(</span><span class="nv">$foo</span><span class="o">))</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enfin sur les versions récentes de Symfony la commande <code>dump()</code> est pratique.</p>

<p>Je vais reparler de xdebug. J&#8217;ai plein d&#8217;astuce à partager.</p>

<h2>Des liens</h2>

<ul>
<li><a href="https://github.com/joonty/vdebug">Vdebug</a></li>
<li><a href="https://github.com/brookhong/DBGPavim">DBGPAVIM</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Less Is More Et BASH]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/06/28/less-is-more-et-bash/"/>
    <updated>2015-06-28T19:19:59+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/06/28/less-is-more-et-bash</id>
    <content type="html"><![CDATA[<h2>less comme tail -f</h2>

<p>On peux utiliser <code>less</code> pour suivre et parser les logs avec la commande</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>less +F nom_du_fichier</span></code></pre></td></tr></table></div></figure>


<p>Ou tout simplement appuyer sur <code>F</code> quand le fichier est ouvert avec <code>less</code>.</p>

<p>Less est compatible avec les raccourcis VI donc les commandes suivantes marchent</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gg # debut du fichier
</span><span class='line'>G # fin du fichier
</span><span class='line'>/ #recherche
</span><span class='line'>& #affiche seulement les lignes qui contiennent le mot 
</span><span class='line'>h,j,k,l les directions</span></code></pre></td></tr></table></div></figure>


<p>les touche suivantes marche aussi avec <code>man</code></p>

<p>Je vous conseille ce post sur les <a href="blog/2015/03/08/comprendre-les-raccourcis-claviers-de-vi-slash-vim/">mouvement vi</a></p>

<h2>Éditer une ligne de commande trop complexe</h2>

<p>Si on souhaite récupérer la commande actuelle sous BASH. C&#8217;est <code>Ctrl x + Ctrl e</code>. Cela ouvre la commande actuelle dans <code>vi</code> ou votre éditeur par défaut <code>$EDITOR</code> enregistrer et quitter.</p>

<h2>Copier/Coller dans bash</h2>

<ul>
<li>Coupe toute la ligne : <code>Ctrl u</code></li>
<li>Coupe à droite du curseur: <code>Ctrl k</code></li>
<li>Coller <code>Ctrl y</code></li>
</ul>


<h3>Cas d&#8217;utilisation</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim /etc/hosts (oups j'ai oublié le sudo..)
</span><span class='line'>&lt;Ctrl u&gt; sudo &lt;Ctrl k&gt;</span></code></pre></td></tr></table></div></figure>


<h1>Annuler dans Bash</h1>

<p>C&#8217;est <code>Ctrl _</code></p>

<h1>En conclusion</h1>

<p>Les raccourcis claviers <code>Ctrl _</code> et <code>Ctrl y</code> sont des raccourcis claviers de emacs.</p>

<p>Bien qu&#8217;utilisateur Vim, j&#8217;aime beaucoup Emacs. Notamment le <code>org-mode</code>. Emacs est supérieur à Vim. (plus de mode, plus de personnalisation, une véritable interaction en REPL pour les langage type lisp). Il y a une tendance à utiliser Emacs avec le Evil-mode (ce qui en gros rajoute les raccourcis claviers de vim dans Emacs). Mais je pas encore passé le cap.</p>

<p>Il est possible de passer son BASH en Vi-mode avec la commande suivante. Personnellement j&#8217;aime pas.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set -o vi</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;article <a href="http://www.catonmat.net/blog/bash-vi-editing-mode-cheat-sheet/">suivant</a> aide un peu. Mais ce n&#8217;est pas évident de dé-apprendre les raccourcis claviers.</p>

<h1>Quelques liens</h1>

<ul>
<li><a href="https://github.com/jlevy/the-art-of-command-line">the art of the command line</a></li>
<li><a href="http://www.commandlinefu.com">commandlinefu</a></li>
<li><a href="http://orgmode.org/index.html">org-mode</a></li>
<li><a href="http://www.emacswiki.org/emacs/Evil">evil-mode</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If Hemingway Wrote Javascript]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/06/21/if-hemingway-wrote-javascript/"/>
    <updated>2015-06-21T19:06:54+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/06/21/if-hemingway-wrote-javascript</id>
    <content type="html"><![CDATA[<p>Je suis tombé un peu par hasard sur ce livre &ldquo;If Hemingway Wrote JavaScript&rdquo;. Cela part de l&#8217;idée que tout les auteurs ont un certain style. Et que s&#8217;il devait programmer en javascript le résultat serait diffèrent. L&#8217;auteur est un expert du javascript.</p>

<p>On trouve dans les auteurs</p>

<ul>
<li>Ernest Hemingway</li>
<li>William Shakespeare</li>
<li>André Breton</li>
<li>Roberto Bolaño</li>
<li>Dan Brown</li>
<li>Jack Kerouac</li>
<li>Jane Austen</li>
<li>Samuel Johnson</li>
<li>Sir Arthur Conan Doyle</li>
<li>James Joyce</li>
<li>J.D. Salinger</li>
<li>Tupac Shakur</li>
<li>Virginia Woolf</li>
<li>Geoffrey Chaucer</li>
<li>Vladimir Nabokov</li>
<li>Jorge Luis Borges</li>
<li>Lewis Carroll</li>
<li>Douglas Adams</li>
<li>Charles Dickens</li>
<li>David Foster Wallace</li>
<li>Sylvia Plath</li>
<li>Italo Calvino</li>
<li>J.K. Rowling</li>
<li>Arundhati Roy</li>
<li>Franz Kafka</li>
</ul>


<p>Bien sur un livre en anglais implique plutôt de la littérature anglaise. Certain choix sont curieux Dan Brown (Da vinci code) entre Kerouac et Joyce, Voir Tupac (si si le rappeur). Je venais de lire le livre le plus connus de Borges.</p>

<p>On trouve 7-8 implémentation du Fibonnaci et autre factorielle. Vous allez apprendre plein de trucs sur le javascript, bien que je doute que cela serve. L&#8217;auteur montre des utilisations de <code>with</code> ou l&#8217;atroce mais absolument correct <code>Function('return this/4').call(2*2)</code>. Il y a toutes les subtilités du javascript qui sont évoquées : Héritage, scope, hoisting, variable, etc..</p>

<p>La présentation est classe. Je l&#8217;avais pas reconnu mais les dessins sont de Miran Lipovača. C&#8217;est l&#8217;auteur du magnifique <a href="http://learnyouahaskell.com">Learn You a Haskell for Great Good!</a> si vous ne connaissez pas foncer.</p>

<h2>En conclusion</h2>

<p>Un bouquin qui aime les écrivains et qui aime le javascript. Il vous faudra aimer un peu les deux pour apprécier le contenu. Je m&#8217;en sors pas trop mal, je connaissais la plupart des écrivains. Pour moi c&#8217;est une curiosité et j&#8217;adore ce genre de livre. J&#8217;aime beaucoup la présentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copier Coller Dans Vim]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/30/copier-coller-dans-vim/"/>
    <updated>2015-05-30T23:23:37+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/30/copier-coller-dans-vim</id>
    <content type="html"><![CDATA[<h2>Pour commencer : comment sélectionner sous vim</h2>

<h3>solution n°1 : utiliser la souris</h3>

<p>tapez :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set </span><span class="nv">mouse</span><span class="o">=</span>a
</span></code></pre></td></tr></table></div></figure>


<p>vous pouvez sélectionnez avec la souris. Pour copier appuyer sur <code>y</code> comme <strong>y</strong>ank</p>

<h3>solution n°2 : utiliser le mode visuel</h3>

<p>avec la touche <code>v</code> ou <code>V</code> pour utiliser la ligne entière. Puis les flèches ou les <a href="http://mcamuzat.github.io/blog/2015/03/08/comprendre-les-raccourcis-claviers-de-vi-slash-vim/">mouvements</a></p>

<h3>solution n°3 : utiliser les touches mouvements</h3>

<p>Quelques exemples:</p>

<ul>
<li><code>y3w</code> copier trois mots (<strong>y</strong>ank <strong>3</strong> words)</li>
<li><code>yG</code> copier jusqu&#8217;à la fin du fichier (<strong>y</strong>ank fin</li>
<li><code>y5j</code> copier 5 lignes vers le bas (<strong>y</strong> <strong>5</strong> lignes vers le bas <code>j</code>)</li>
<li><code>yi(</code> pour copier le texte entre parenthèse (<strong>y</strong>ank <strong>i</strong>nside <code>(</code>)</li>
</ul>


<p>Pour coller on utilise la touche <code>p</code> pour <strong>p</strong>aste ou <code>P</code> (colle avant le curseur)</p>

<h2>Les presse-papiers sous vi ou les registres</h2>

<p>La notion de presse-papier est appelle registre dans Vi.</p>

<p>Pour voir l&#8217;état des registres (et si il ne fallait retenir qu&#8217;une seule commande..)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:register ou :reg
</span></code></pre></td></tr></table></div></figure>


<p>Vous devez voir quelques choses dans le genre:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot;&quot;</span> dernier texte <span class="o">)</span>
</span><span class='line'><span class="s2">&quot;0 dernier texte copié</span>
</span><span class='line'><span class="s2">... les dix derniers textes copiés</span>
</span><span class='line'><span class="s2">&quot;</span><span class="m">9</span> ..
</span><span class='line'><span class="s2">&quot;a contenu du registre &quot;</span>a<span class="s2">&quot; (s&#39;il existe)</span>
</span><span class='line'><span class="s2">...</span>
</span><span class='line'><span class="s2">&quot;</span>% noms du fichier
</span><span class='line'><span class="s2">&quot;. dernier texte inséré</span>
</span><span class='line'><span class="s2">&quot;</span>/ dernier texte recherché
</span><span class='line'><span class="err">&quot;</span>: derniere commande.
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Pour coller le texte contenue dans le registre <code>a</code> il faut taper<code>"ap</code> pour le registre <code>"a</code> + <code>p</code> paste.</li>
<li>Pour copier le texte dans le registre a c&#8217;est <code>"ay</code></li>
<li>Avec les mouvements de vi <code>"ay3w</code> dans le registre a (<code>"a</code>) copier (<code>y</code> comme <em>yank</em>) 3 mots (3w pour 3 words).</li>
</ul>


<p>Un registre intéressant le registre <code>+</code> ou le registre <code>*</code> les deux registres sont associés au clipboard de Linux ou celui de windows.</p>

<h2>Pour résumer</h2>

<ul>
<li>Pour voir les registres. Il suffit de taper <code>:register</code>.</li>
<li>Pour coller un registre c&#8217;est <code>"&lt;nom du registre&gt;p</code>.</li>
<li>Pour copier c&#8217;est <code>"&lt;nom du registre&gt;y(+mouvement)</code>.</li>
<li>Le registre <code>+</code> est le presse-papier de windows ou linux. Pour copier/coller du presse-papier il suffit de taper <code>"+p</code> et <code>"+y</code>.</li>
<li>On a 26 presse-papiers de <code>a</code> à <code>z</code> personnellement j&#8217;en ai rarement utilisé plus de deux registres en même temps.</li>
</ul>


<p>Nous reparlerons des registres avec les macros dans un prochain post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Koan Et Programmation]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/25/koan-et-programmation/"/>
    <updated>2015-05-25T20:53:23+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/25/koan-et-programmation</id>
    <content type="html"><![CDATA[<p>Un koan est dixit wikipedia</p>

<blockquote><blockquote><p>koan est une une brève anecdote ou un court échange entre un maître et son disciple, absurde, énigmatique ou paradoxal, ne sollicitant pas la logique ordinaire.</p></blockquote></blockquote>

<p>Un exemple de Koan</p>

<blockquote><blockquote><p>Quel est le son d’une seule main qui applaudit ?</p></blockquote></blockquote>

<p>Il existe des Koan pour la programmation. Ce sont des mini problèmes pour s&#8217;initier à une technologie.</p>

<h2>RubyKoan</h2>

<p>Le plus connu et le premier est <a href="http://rubykoans.com/">RubyKoan</a>.</p>

<p>Regardons ensemble la première utilisation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>koans
</span><span class='line'>/home/marc/.rvm/rubies/ruby-2.2.0/bin/ruby path_to_enlightenment.rb
</span><span class='line'>AboutAsserts#test_assert_truth has damaged your karma.
</span><span class='line'>
</span><span class='line'>The Master says:
</span><span class='line'>  You have not yet reached enlightenment.
</span><span class='line'>
</span><span class='line'>The answers you seek...
</span><span class='line'>  Failed assertion.
</span><span class='line'>
</span><span class='line'>Please meditate on the following code:
</span><span class='line'>  /home/marc/prog/ruby_koans/koans/about_asserts.rb:10:in <span class="sb">`</span>test_assert_truth<span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'>mountains are merely mountains
</span><span class='line'>your path thus far <span class="o">[</span>X_________________________________________________<span class="o">]</span> 0/282
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ouvre le fichier <code>about_asserts.rb</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># -*- ruby -*-</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/neo&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AboutAsserts</span> <span class="o">&lt;</span> <span class="no">Neo</span><span class="o">::</span><span class="no">Koan</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># We shall contemplate truth by testing reality, via asserts.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_assert_truth</span>
</span><span class='line'>    <span class="n">assert</span> <span class="kp">false</span>                <span class="c1"># This should be true</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il suffit de changer le <code>false</code> en <code>true</code></p>

<p>Relancons, On avance petit à petit et toutes les notions du ruby sont expliquées.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>koans
</span><span class='line'>/home/marc/.rvm/rubies/ruby-2.2.0/bin/ruby path_to_enlightenment.rb
</span><span class='line'>AboutAsserts#test_assert_truth has expanded your awareness.
</span><span class='line'>AboutAsserts#test_assert_with_message has damaged your karma.
</span><span class='line'>
</span><span class='line'>The Master says:
</span><span class='line'>  You have not yet reached enlightenment.
</span><span class='line'>  You are progressing. Excellent. <span class="m">1</span> completed.
</span><span class='line'>
</span><span class='line'>The answers you seek...
</span><span class='line'>  This should be <span class="nb">true</span> -- Please fix this
</span><span class='line'>
</span><span class='line'>Please meditate on the following code:
</span><span class='line'>  /home/marc/prog/ruby_koans/koans/about_asserts.rb:16:in <span class="sb">`</span>test_assert_with_message<span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'>learn the rules so you know how to <span class="nb">break </span>them properly
</span><span class='line'>your path thus far <span class="o">[</span>.X________________________________________________<span class="o">]</span> 1/282
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est un moyen facile et rapide pour apprendre un langage. Ceci dit j&#8217;ai personnellement fini les rubykoans. Mais 1 mois plus tard, j&#8217;étais incapable d&#8217;aligner une ligne de code en ruby. Faire passer les tests n&#8217;est pas très compliqué quelque soit le langage.</p>

<p>Il y a aussi les Katas de programmation, Mais c&#8217;est plus un cahier des charges avec des tests d&#8217;acceptations (On parle de BDD) alors que les koan sont plutôt dans la notion d&#8217;unitaire.</p>

<h2>Quelques Koan.</h2>

<p>Bien sur les <a href="http://rubykoans.com/">RubyKoans</a> il existe une version <a href="http://koans.herokuapp.com/en/about_asserts">en ligne</a>.</p>

<p>Les <a href="https://github.com/gregmalcolm/python_koans">python-koans</a> sont vraiment chouettes Il y a python 2.7 et python 3. Si les premiers problèmes sont faciles. Les derniers sont plutôt durs.</p>

<p>En javascript on peux citer</p>

<ul>
<li><a href="https://github.com/mrdavidlaing/javascript-koans">javascript-koans</a></li>
<li><a href="https://github.com/larrymyers/backbone-koans">backbone-koans</a></li>
<li><a href="https://github.com/bjpbakker/angular-koans">angular-koans</a></li>
</ul>


<p>J&#8217;ai été un peu déçus de ne pas trouver des Koans en php. Cela reste très basique.
je citerai:</p>

<ul>
<li><a href="https://github.com/TorontoPHPSoftwareCraftsmanship/PHPUnit-Koans">PHPUnit-koans</a></li>
<li>et celui-ci par votre serviteur (mais c&#8217;était il y a bien longtemps) <a href="https://github.com/mcamuzat/PHPUnitRegexKoan">mcamuzat/PHPUnitRegexKoan</a></li>
</ul>


<h2>Conclusion</h2>

<p>Je vous avais parler des <a href="http://mcamuzat.github.io/blog/2015/04/29/awesome-et-liste-de-liens/">awesome-list</a> et bien il existe une liste de <a href="https://github.com/ahmdrefat/awesome-koans">awesome-koans</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go Hello Server]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/18/go-hello-server/"/>
    <updated>2015-05-18T23:00:46+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/18/go-hello-server</id>
    <content type="html"><![CDATA[<h2> Introduction</h2>

<p>Je continue mon apprentissage en go. Nous allons essayer de faire un hello world via une page web.</p>

<p>L&#8217;exemple le plus simple de la <a href="https://gowalker.org/net/http#HandleFunc">documentation officielle</a>.</p>

<h2>Mise en place</h2>

<p>Je me place dans mon répertoire <code>go</code></p>

<p>Je vais dans le répertoire <code>src/github.com/&lt;username&gt;/</code></p>

<p>Je crée un répertoire <code>hello-server</code></p>

<p>Dans ce répertoire je crée le fichier server.go</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;io&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// hello world, the web server</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">HelloServer</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">req</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">io</span><span class="p">.</span><span class="nx">WriteString</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;hello, world!\n&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">HelloServer</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:12345&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="s">&quot;ListenAndServe: &quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il suffit pour tester de lancer</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">go</span> <span class="nx">run</span> <span class="nx">server</span><span class="p">.</span><span class="k">go</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ou sinon dans le répertoire <code>src/github.com/&lt;username&gt;/hello-server</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">go</span> <span class="nx">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans votre répertoire <code>bin</code> vous avez un exécutable <code>hello-server</code></p>

<p>si on reprend notre répertoire <code>go</code> avec le précédent post</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>├── bin
</span><span class='line'>│   ├── hello
</span><span class='line'>│   └── hello-server
</span><span class='line'>└── src
</span><span class='line'>    └── github.com
</span><span class='line'>        └── mcamuzat
</span><span class='line'>            ├── hello
</span><span class='line'>            │   ├── hello.go
</span><span class='line'>            │   ├── LICENSE
</span><span class='line'>            │   └── README.md
</span><span class='line'>            └── hello-server
</span><span class='line'>                └── server.go
</span></code></pre></td></tr></table></div></figure>


<p>Avec votre navigateur aller à l&#8217;adresse suivante <a href="http://localhost:12345/">http://localhost:12345/</a></p>

<h3>Micro analyse</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>http.HandleFunc<span class="o">(</span><span class="s2">&quot;/&quot;</span>, HelloServer<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On initialise un router qui associe à la route <code>/</code> (la route vide) un <em>callback</em> <code>HelloServer</code> (qui ne fait qu&#8217;un simple <code>hello world!</code>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>err :<span class="o">=</span> http.ListenAndServe<span class="o">(</span><span class="s2">&quot;:12345&quot;</span>, nil<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On demande à go d&#8217;écouter le port <code>:12345</code></p>

<p>Et il n&#8217;y a pas grand chose à dire d&#8217;autre.</p>

<h2>En conclusion</h2>

<p>Cela ressemble à beaucoup de micro-framework, en tant que développeur PHP je ne suis pas vraiment perdu.
Je vais essayer de continuer un peu sur le serveur web (récupération des posts).</p>

<p>L&#8217;avantage ici est que le fichier <code>hello-server</code> est exécutable et n&#8217;a besoin d&#8217;aucune dépendance (donc pas besoin de apache, PHP, etc..).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go Introduction]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/10/go-introduction/"/>
    <updated>2015-05-10T18:21:31+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/10/go-introduction</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>J&#8217;ai regardé Docker. Docker est en Go ainsi que pas mal de projets en fait. J&#8217;ai donc décidé d&#8217;essayer.</p>

<p>Dans ce chapitre nous n&#8217;allons pas trop discuter du langage mais surtout mettre en place tout les outils.</p>

<h2>Installation(linux)</h2>

<ul>
<li><p>Nous allons télécharger les fichiers <a href="https://golang.org/dl/">ici</a></p></li>
<li><p>On décompresse le fichier</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo tar -C /usr/local -xzf go1.4.2.linux-amd64.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>Créer un répertoire go dans votre <code>/usr/local</code></p>

<ul>
<li>enfin il faut l&#8217;ajouter à votre <code>$PATH</code> en modifiant le <code>.profile</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/go/bin
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>testons dans notre ligne de commande.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go version
</span><span class='line'>go version go1.4.2 linux/amd64
</span></code></pre></td></tr></table></div></figure>


<h2>Hello world !</h2>

<p>Ouvrons un fichier <code>hello.go</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;hello, world\n&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour l&#8217;exécuter</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>go run hello.go
</span><span class='line'>hello, world
</span></code></pre></td></tr></table></div></figure>


<p>Tout va bien ! Nous avons installé Go</p>

<h2>Organisation d&#8217;un projet</h2>

<p>L&#8217;organisation d&#8217;un projet sous Go est fixe ! Comprendre qu&#8217;il faut un <strong>workspace</strong></p>

<p>Nous allons ensemble créer le projet <code>Hello</code></p>

<ul>
<li><p>Créer un répertoire <code>go</code></p></li>
<li><p>Assigner la variable d&#8217;environnement <code>$GOPATH</code></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> <span class="nb">export </span><span class="nv">GOPATH</span><span class="o">=</span><span class="nv">$HOME</span>/go
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>enfin rajouter le $GOPATH/bin dans le PATH</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$GOPATH</span>/bin
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Nous voulons sauvegarder notre code quelques part. ici github!</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir -p <span class="nv">$GOPATH</span>/src/github.com/&lt;votreusername&gt;/hello
</span></code></pre></td></tr></table></div></figure>


<p>Votre <code>username</code> est votre namespace pour les packages (un peu comme java).</p>

<ul>
<li><p>dans notre répertoire <code>src/github.com/&lt;votreusername&gt;/hello</code> nous allons copier notre <code>hello.go</code></p></li>
<li><p>Tout est en place. Il n&#8217;y a plus qu&#8217;a taper <code>go install github.com/user/hello</code>.</p></li>
<li><p>autre possibilité se rendre dans le répertoire <code>src/github.com/&lt;votreusername&gt;/hello</code></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>go install
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Nous pouvons vérifier que dans le répertoire <code>$HOME/go</code> il y a un dossier <code>bin/</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$GOPATH</span>/bin/hello
</span><span class='line'>hello world
</span><span class='line'><span class="c"># de manière plus simple puisque nous avons ajouter dans le path $GOPATH/bin</span>
</span><span class='line'>hello
</span><span class='line'>hello world
</span></code></pre></td></tr></table></div></figure>


<p>voici la structure finale</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>├── bin
</span><span class='line'>│   └── hello
</span><span class='line'>└── src
</span><span class='line'>    └── github.com
</span><span class='line'>        └── mcamuzat
</span><span class='line'>            └── hello
</span><span class='line'>                ├── hello.go
</span><span class='line'>                ├── LICENSE
</span><span class='line'>                └── README.md
</span></code></pre></td></tr></table></div></figure>


<h2>Sauvegarde d&#8217;un projet</h2>

<p>Nous allons sauvegarder celui-ci sous <a href="https://github.com/">Github</a>. Ce n&#8217;est pas obligatoire.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> <span class="nv">$GOPATH</span>/src/github.com/user/hello
</span><span class='line'>git init
</span><span class='line'>git add .
</span><span class='line'>git commit -m<span class="s2">&quot;create project&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sous github, j&#8217;ai crée un nouveau repository <code>hello-go</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote add origin git@github.com:mcamuzat/hello-go.git
</span><span class='line'>git pull --rebase
</span><span class='line'>git push origin master
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Nous avons d&#8217;installer Go.</p>

<p>Je viens juste de m&#8217;y mettre, Je ne sais pas encore ce que la suite nous réserve..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker-machine]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/09/docker-machine/"/>
    <updated>2015-05-09T18:29:45+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/09/docker-machine</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Nous allons voir <a href="https://docs.docker.com/machine/">docker-machine</a>. Docker-machine permet de simplifier l&#8217;installation/gestion/déploiement de Docker.</p>

<h2>Installation</h2>

<p>Tout d&#8217;abord il faut connaitre votre architecture <code>x86_64</code>ou <code>i386</code>.</p>

<p>La commande classique est <code>uname -a</code>.</p>

<p>Puis télécharger l&#8217;exécutable via <code>curl</code></p>

<p>Sous linux.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -L https://github.com/docker/machine/releases/download/v0.2.0/docker-machine_linux-amd64 &gt; docker-machine
</span><span class='line'>sudo mv docker-machine /usr/local/bin/docker-machine
</span></code></pre></td></tr></table></div></figure>


<p>Puis le marquer comme exécutable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chmod +x /usr/local/bin/docker-machine
</span></code></pre></td></tr></table></div></figure>


<p>Testons notre application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-machine -v
</span></code></pre></td></tr></table></div></figure>


<p>Enfin vous avez besoin d&#8217;avoir <a href="https://www.virtualbox.org/wiki/Downloads">Virtual-Box</a></p>

<h2>Mise en route.</h2>

<p>Voici la commande pour tout lancer</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-machine create --driver virtualbox dev
</span></code></pre></td></tr></table></div></figure>


<p>Cette ligne demande à docker-machine de créer une environnement que l&#8217;on appelle <strong>dev</strong> qui sera sur Virtual-box.
docker-machine va télécharger une iso (boot2docker) contenant docker. Et lancer Virtualbox.</p>

<p>Jusqu&#8217;à maintenant on avait installé docker sur notre ordi local.
Ici on installe docker sur une VM.
Toutes les commandes seront passer de manière transparente à la machine virtuelle.
L&#8217;avantage de cette méthode est que tout le monde utilise la même iso virtuelle (boot2docker). Il n&#8217;y a moins le risque du &ldquo;chez moi ça marche&rdquo; qui est une remarque au combien rageante.</p>

<p>Je veux travailler sur mon environnement de dev</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(docker-machine env dev)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Toutes mes commandes sont directement envoyées sur la vm à distance</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run busybox <span class="nb">echo </span>hello
</span></code></pre></td></tr></table></div></figure>


<p>Je peux rajouter un environnement (ici <strong>prod</strong>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-machine create --driver amazon prod --les options qui vont bien..
</span></code></pre></td></tr></table></div></figure>


<p>Il suffit de changer l&#8217;environnement pour automatiquement déployer sur Amazon.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(docker-machine env prod)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Plein de drivers sont fournis:</p>

<ul>
<li><a href="https://docs.docker.com/machine/#amazon-web-services">Amazon Web Services</a></li>
<li><a href="https://docs.docker.com/machine/#digital-ocean">Digital Ocean</a></li>
<li><a href="https://docs.docker.com/machine/#google-compute-engine">Google Compute Engine</a></li>
<li><a href="https://docs.docker.com/machine/#ibm-softlayer">IBM Softlayer</a></li>
<li><a href="https://docs.docker.com/machine/#microsoft-azure">Microsoft Azure</a></li>
<li><a href="https://docs.docker.com/machine/#microsoft-hyper-v">Microsoft Hyper-V</a></li>
<li><a href="https://docs.docker.com/machine/#openstack">Openstack</a></li>
<li><a href="https://docs.docker.com/machine/#rackspace">Rackspace</a></li>
<li><a href="https://docs.docker.com/machine/#oracle-virtualbox">Oracle VirtualBox</a></li>
<li><a href="https://docs.docker.com/machine/#vmware-fusion">VMware Fusion</a></li>
<li><a href="https://docs.docker.com/machine/#vmware-vcloud-air">VMware vCloud Air</a></li>
<li><a href="https://docs.docker.com/machine/#vmware-vsphere">VMware vSphere</a></li>
</ul>


<h2>L&#8217;avantage de docker-machine</h2>

<ul>
<li>Simplifie l&#8217;installation. il n&#8217;y a que docker-machine à installer. Arès docker-machine s&#8217;occupe de tout installer. (il installe docker sur un vm/instance)</li>
<li>Simplifie le déploiement, il suffit de changer l&#8217;environnement</li>
<li>Enfin il s&#8217;interface avec docker-swarm (qui permet de gérer plusieurs nodes de Dockers).</li>
</ul>


<h2>En conclusion</h2>

<p>Le slogan &ldquo;a way to get from zero to Docker&rdquo; est plutôt juste.</p>

<ul>
<li>Cela simplifie beaucoup l&#8217;installation sous windows (pas testé :-)).</li>
<li>Et harmonise les environnements de dev (tout le monde utilise la même iso)</li>
<li>Facilite le déploiement. Il n&#8217;y a pas a se soucier si c&#8217;est du Amazon/OpenStack/Azure..</li>
</ul>


<p>Dans un prochain post nous allons essayer de voir docker-swarm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je Joue Donc Je Programme]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/04/je-joue-donc-je-programme/"/>
    <updated>2015-05-04T22:32:00+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/04/je-joue-donc-je-programme</id>
    <content type="html"><![CDATA[<p>Il existe des jeux vidéos pour apprendre à programmer. Voici quelques exemples.</p>

<h2>VimAdventure</h2>

<p><img class="center" src="http://mcamuzat.github.io/images/vimadventures.jpg" width="600" height="339" title="Vim adventure" alt="Vim adventure">
<a href="http://vim-adventures.com/">Vim adventure</a> permet d&#8217;apprendre les touches de Vim de manière ludique. Personnellement j&#8217;ai beaucoup joué à <a href="http://crawl.develz.org/wordpress/">Dungeon Crawl</a> qui utilise les touches <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code></p>

<h2>Ruby</h2>

<p>Ruby warrior existe en deux versions:
<img class="center" src="http://mcamuzat.github.io/images/ruby-warrior.png" width="600" height="288" title="Ruby warrior" alt="Ruby warrior"></p>

<p>En ligne de commande <a href="https://github.com/ryanb/ruby-warrior">ruby-warrior</a></p>

<p>Le but est ici d&#8217;écrire L&#8217;AI du héros. Cela commence relativement simplement. Au début pas besoin de if, else, object mais les niveaux se corsent vraiment (je dirai que jusqu&#8217;au 6 c&#8217;est relativement tranquille)</p>

<p>Depuis il existe une version web. Beaucoup plus accessible et jolie
<a href="https://www.bloc.io/ruby-warrior#/">ruby-warrior</a></p>

<h2>Javascript</h2>

<h3>Untrusted</h3>

<p><img class="center" src="http://mcamuzat.github.io/images/untrusted.jpg" width="600" height="339" title="Untrusted" alt="Untrusted">
pour passer les niveaux, il faut atteindre le terminal et commencer à hacker le js. C&#8217;est vraiment malin.
<a href="http://alexnisnevich.github.io/untrusted/">untrusted</a></p>

<h3>Elevator Saga</h3>

<p><img class="center" src="http://mcamuzat.github.io/images/elevator-saga.png" width="600" height="288" title="Elevator Saga" alt="Elevator Saga"></p>

<p>Quoi de plus passionnant que simulation d&#8217;ascenseur.On passe assez facilement le niveau 1. Cela se complique vraiment avec le niveau deux et les objectifs.
<a href="http://play.elevatorsaga.com/">elevator-saga</a></p>

<h3>CodeCombat</h3>

<p><a href="http://codecombat.com/">CodeCombat</a>
Diriger un petit combattant, Un peu la même idée que ruby-warror, mais l&#8217;interface est très belle. Il y a du multi-joueurs</p>

<h2>Multi-plateforme</h2>

<p><img class="center" src="http://mcamuzat.github.io/images/codingame.jpg" width="600" height="375" title="Coding game" alt="Coding game"></p>

<p><a href="http://www.codingame.com">Codingame</a>. L&#8217;interface est magnifique, vous pouvez choisir le langage (il y a une vingtaine de langage PHP, Js, Haskell, Bash, C). les exercices sont assez variés. C&#8217;est plus des katas de programmation.</p>

<h2>Le SQL</h2>

<p><img class="center" src="http://mcamuzat.github.io/images/schemaverse.png" width="450" height="131" title="Schemaverse" alt="Schemaverse"></p>

<p><a href="https://schemaverse.com/">Schemaverse</a>
Un jeux video en prosgresSQL pur. Il y a même une histoire. C&#8217;est assez compliqué.</p>

<h2>Les Regex</h2>

<ul>
<li><a href="http://regexone.com/">regex one</a> Une bonne introduction.</li>
<li><a href="https://regex.alf.nu/">regex.alf.nu</a>. Cela commence doucement, mais les dernières sont très très compliquées.</li>
<li><a href="http://www.postcrashgames.com/finitris/">finitris</a>.Un vieux Jeux que j&#8217;avais noté, c&#8217;est dommage que la prise en main soit affreuse et que le zoom soit péter (control+molette est votre ami)</li>
</ul>


<h3>Des jeux Flash</h3>

<p>Bon je sais que ce n&#8217;est pas super récent.</p>

<p>Tout les jeux Zacktronics</p>

<ul>
<li><a href="http://www.zachtronics.com/spacechem/">SpaceChem</a> (payant et j&#8217;ai pas essayé).</li>
<li><a href="http://www.zachtronics.com/kohctpyktop-engineer-of-the-people/">Kohctpyktop</a> quasiment injouable. mais c&#8217;est de cette facon que sont fait les portes logiques et les microprocesseurs.</li>
<li><a href="http://www.zachtronics.com/the-codex-of-alchemical-engineering/">Codex of Alchemical Engineering</a> assembler des molécules.</li>
<li><a href="http://www.zachtronics.com/ruckingenur-ii/">Ruckingenur</a> voila comment on fait du Reverse Engineering des circuits électroniques (sous windows).</li>
</ul>


<p>Et aussi</p>

<ul>
<li><a href="http://pleasingfungus.com/Manufactoria/">manufactoria</a> facbrique de robots et BDD (il suffit de faire passer le scénario).</li>
</ul>


<h2>En conclusion</h2>

<p>j&#8217;ai vraiment beaucoup aimé et joué à <a href="http://alexnisnevich.github.io/untrusted/">untrusted</a> et <a href="https://www.bloc.io/ruby-warrior#/">ruby-warrior</a></p>

<p>J&#8217;ai probablement oublié d&#8217;autres jeux.</p>
]]></content>
  </entry>
  
</feed>
