<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Journal d'un panda qui code]]></title>
  <link href="http://mcamuzat.github.io/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-12-27T21:30:58+01:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Haskell : Stack]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/12/27/haskell-stack/"/>
    <updated>2015-12-27T18:39:17+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/12/27/haskell-stack</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Je ne développe pas en <a href="https://www.haskell.org/">Haskell</a> mais je regarde beaucoup. La série que j&#8217;écris sur la programmation fonctionnelle me force à regarder le langage de plus près. Le monde haskell s&#8217;est enrichi d&#8217;un nouvel outil <strong>Stack</strong>.</p>

<h2>Stack et Haskell</h2>

<p>Stack est un logiciel qui gère l&#8217;installation/les packages/la création/le build/les tests d&#8217;un projet Haskell.</p>

<p>Il a plusieurs avantages:</p>

<ul>
<li>Il a été pensé pour automatiser le build.</li>
<li>Il a une ligne de commande sympathique que nous allons voir par la suite.</li>
<li>Il utilise un fichier <code>stack.yml</code> c&#8217;est l&#8217;équivalent d&#8217;un <code>composer.json</code> en php ou un <code>package.json</code> en node.</li>
<li>Tout est installé dans le <code>~/.stack</code> tout les programmes sont <em>isolés</em> et n&#8217;interfèrent pas avec les autres logiciels déjà pré installés.</li>
</ul>


<!--more-->


<h2>Mise en place.</h2>

<p>Il suffit d&#8217;ajouter les clés/et le dépôt sous ubuntu :  <a href="http://docs.haskellstack.org/en/stable/README.html#how-to-install">voir la documentation</a>
Une fois que le logiciel est installé</p>

<h3>Etape 1 : structure d&#8217;un projet.</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack new my-project</span></code></pre></td></tr></table></div></figure>


<p>crée une arborescence toute faite</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>├── LICENSE
</span><span class='line'>├── Setup.hs
</span><span class='line'>├── app
</span><span class='line'>│   └── Main.hs
</span><span class='line'>├── my-project.cabal
</span><span class='line'>├── src
</span><span class='line'>│   └── Lib.hs
</span><span class='line'>├── stack.yaml
</span><span class='line'>└── test
</span><span class='line'>    └── Spec.hs
</span><span class='line'>
</span><span class='line'>    3 directories, 7 files</span></code></pre></td></tr></table></div></figure>


<p>A noter qu&#8217;il existe des templates d&#8217;applications (Un peu comme <a href="http://yeoman.io/">Yeoman</a>)</p>

<p>Par exemple pour créer une application Yesod (Pour faire un serveur web) et Mysql</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack new mon-projet yesod-mysql</span></code></pre></td></tr></table></div></figure>


<p>Pour lister les différents templates</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack templates
</span><span class='line'>chrisdone
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>yesod-minimal
</span><span class='line'>yesod-mongo
</span><span class='line'>yesod-mysql
</span><span class='line'>yesod-postgres
</span><span class='line'>yesod-postgres-fay
</span><span class='line'>yesod-simple
</span><span class='line'>yesod-sqlite</span></code></pre></td></tr></table></div></figure>


<h2>Etape 2 : Installation des librairies</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd mon-projet
</span><span class='line'>$ stack setup</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Si Haskell n&#8217;est pas encore installé dans <code>~/.stack</code>, le logiciel s&#8217;occupe de tout, il installe aussi toutes les dépendances.</p>

<h2>Etape 3 : build et compilation</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack build</span></code></pre></td></tr></table></div></figure>


<p>Le haskell est un language compilé. Le logiciel compile tout le projet.</p>

<h2>Etape 4 : Lancer le programme</h2>

<p>Pour lancer le programme</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack exec mon-projet</span></code></pre></td></tr></table></div></figure>


<p>Pour lancer les tests. Tout les projets viennents avec des tests</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack test
</span></code></pre></td></tr></table></div></figure>


<h2>Etape 5 : Installer le programme</h2>

<p>un peu comme un <code>make install</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack install</span></code></pre></td></tr></table></div></figure>


<h2>Etape 6 : Docker</h2>

<p>Docker c&#8217;est cool et pratique.</p>

<p>dans le <code>stack.yml</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>...
</span><span class='line'>image:
</span><span class='line'>  container:
</span><span class='line'>    # Image de base
</span><span class='line'>    base: "fpco/ubuntu-with-libgmp:14.04"
</span><span class='line'>    # Noms de l'iso.
</span><span class='line'>    name: "mcamuzat/mon-projet"
</span><span class='line'>    # Nom du programme à lancer 
</span><span class='line'>    entrypoints:
</span><span class='line'>      - mon-projet
</span></code></pre></td></tr></table></div></figure>


<p>Si l&#8217;image de base existe déjà</p>

<p>Alors</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack image container</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Cela génère le container.</p>

<p>Il ne reste plus qu&#8217;à lancer le container</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo docker run -t -i mcamuzat/mon-projet mon-projet</span></code></pre></td></tr></table></div></figure>


<h2>Listes de commandes</h2>

<ul>
<li><code>stack new nom-du-projet nom-du-template</code> crée un nouveau projet</li>
<li><code>stack setup</code> mise en place du projet</li>
<li><code>stack build</code> compile le projet</li>
<li><code>stack exec nom-du-programme</code> lance le programme</li>
<li><code>stack repl</code> Lance le mode interactif</li>
<li><code>stack test</code> Lance les tests</li>
<li><code>stack install</code> installe le programme.</li>
<li><code>stack templates</code> liste tout les templates.</li>
</ul>


<h2>Conclusion</h2>

<p>Je me mets au Haskell. C&#8217;est assez passionnant. Le langage n&#8217;est pas simple (je me casse un peu les dents dessus). Je suis pour l&#8217;instant juste sur les premiers problèmes de <a href="http://www.codewars.com/">codewars</a>. J&#8217;espère faire des post sur haskell par la suite. Il y a déja plein de tutoriels.</p>

<h2>Liens</h2>

<ul>
<li><a href="http://docs.haskellstack.org/en/stable/README.html">Le site officiel</a></li>
<li><a href="http://conscientiousprogrammer.com/blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/">Une introduction en anglais</a></li>
<li><a href="http://www.stephendiehl.com/posts/haskell_2016.html">Un second article an anglais</a></li>
<li><a href="https://www.fpcomplete.com/blog/2015/11/kubernetes">Créer le container Docker</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les monades 5: les applicatives]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives/"/>
    <updated>2015-12-20T15:49:14+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives</id>
    <content type="html"><![CDATA[<p>Nous allons voir les foncteurs applicatifs.</p>

<p>Reprenons le container Maybe</p>

<p><img class="center" src="http://mcamuzat.github.io/images/applicative.png" width="428" height="212" title="Avec évaluation partielle" alt="avec évaluation partielle"></p>

<p>Ce que j&#8217;aimerai c&#8217;est pouvoir faire ce genre d&#8217;opération</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Maybe</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="nx">Maybe</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">=</span> <span class="nx">Maybe</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="nx">Container</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="o">*</span> <span class="nx">Container</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="o">=</span> <span class="nx">Container</span><span class="p">(</span><span class="mi">40</span><span class="p">)</span>
</span><span class='line'><span class="nb">str_repeat</span><span class="p">(</span><span class="nx">Maybe</span><span class="p">(</span><span class="s2">&quot;.oOo&quot;</span><span class="p">),</span> <span class="nx">Maybe</span><span class="p">(</span><span class="s2">&quot;3&quot;</span><span class="p">))</span> <span class="o">=</span> <span class="nx">Maybe</span><span class="p">(</span><span class="s2">&quot;.oOo.oOo.oOo&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>La bonne nouvelle c&#8217;est que c&#8217;est possible.</p>

<!--more-->


<p>J&#8217;ai besoin de 2 étapes:</p>

<ul>
<li>Nous allons mettre en place la librairie <a href="https://github.com/widmogrod/php-functional">php-functionnal</a>. Il devient difficile d&#8217;utiliser sa propre librairie.</li>
<li>Nous avons besoin d&#8217;une nouvelle opération <code>ap</code> pour applicative.</li>
</ul>


<h2>installation de php-functionnal</h2>

<p>Grâce à composer c&#8217;est très simple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">composer</span> <span class="k">require</span> <span class="nx">widmogrod</span><span class="o">/</span><span class="nx">php</span><span class="o">-</span><span class="nx">functional</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici le fichier php dans la racine du projet</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">require_once</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span> <span class="c1">// Autoload files using Composer autoload</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Monad\Maybe</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Functional</span> <span class="k">as</span> <span class="nx">f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="nx">Maybe\Just</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nv">$b</span> <span class="o">=</span> <span class="nv">$a</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;});</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$b</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si vous obtenez ceci</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Monad\Maybe\Just</span><span class="c1">#4 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tout va bien!!</p>

<p>Je n&#8217;ai pas utilisé les mêmes noms que la librairie voici les traductions</p>

<ul>
<li>Container -> Identity</li>
<li>Collection -> Collection</li>
<li>Some -> Just</li>
<li>Nothing -> Nothing</li>
<li><code>Maybe\just(10)</code> est un helper <code>Maybe\Just::of(10)</code></li>
<li><code>Maybe\nothing()</code> -> <code>Maybe\Nothing::of(10)</code></li>
</ul>


<p>Nous allons faire quelque chose de curieux puisque nous ne mettons pas une valeur dans notre Maybe mais une fonction !</p>

<p>Regardons un exemple simple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$addOne</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;});</span>
</span><span class='line'><span class="nv">$value</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$addOne</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans le premier Maybe on a mis une fonction. <code>ap</code> prend en entrée un Maybe.</p>

<p>Nous obtenons</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Monad\Maybe\Just</span><span class="c1">#5 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">int</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Essayons avec <code>Nothing</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$addOne</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;});</span>
</span><span class='line'><span class="nv">$value</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Maybe\nothing</span><span class="p">();</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$addOne</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Monad\Maybe\Nothing</span><span class="c1">#4 (0) {</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cela ne semble pas très utiles</p>

<p>Nous allons utiliser notre fonction <code>curryN</code> du <a href="">post précédent</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="nv">$b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$add</span> <span class="o">=</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="nx">f\curryN</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;add&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$add</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">MayBe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// just(10)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>la fonction add est une addition et prend deux arguments. <code>(? + ?)</code></li>
<li>Je la transforme en évaluation partielle avec CurryN() et je la place dans un <code>just(? + ?)</code></li>
<li>Au premier <code>ap</code> je soumet le premier argument, il manque encore un argument , la fonction devient <code>just( 5 + ?)</code>.</li>
<li>Au second <code>ap</code> l&#8217;argument manquant est fournis. La fonction est complète <code>just( 5 + 5)</code> -> <code>just(10)</code>.</li>
</ul>


<p>La recette est simple, Je mets la fonction à plusieurs arguments dans mon Maybe avec le curryN. et j&#8217;applique chacun des arguments.</p>

<p>En fait si on fait une image</p>

<p><img class="center" src="http://mcamuzat.github.io/images/applicative.png" width="428" height="212" title="Avec évaluation partielle" alt="avec évaluation partielle"></p>

<p>Mais nous pouvons faire cela avec toutes les fonctions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$superStrRepeat</span> <span class="o">=</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="nx">f\curryN</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;str_repeat&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//alors </span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>   <span class="nv">$superStrRepeat</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\just</span><span class="p">(</span><span class="s2">&quot;.o0o&quot;</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="c1">//Maybe\just(&quot;.oOo.oOo.oOo&quot;);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>   <span class="nv">$superStrRepeat</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\nothing</span><span class="p">())</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="c1">//Maybe\Nothing();</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>   <span class="nv">$superStrRepeat</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\nothing</span><span class="p">())</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\nothing</span><span class="p">()))</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="c1">// Maybe\Nothing</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est pratique car nous pouvons maintenant appliquer des fonctions à plusieurs arguments. et des fonctions qui ne travaillent pas avec des object Maybe, Nothing.</p>

<p>Quand on &ldquo;augmente&rdquo; les fonctions pour travailler avec d&#8217;autre types,  on appelle cela le <code>Lift</code></p>

<p>D&#8217;ailleurs cela s&#8217;exprime en 1 ligne avec la librairie</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nx">f\liftA2</span><span class="p">(</span><span class="s2">&quot;add&quot;</span><span class="p">,</span> <span class="nx">MayBe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">)));</span>
</span><span class='line'><span class="c1">// Maybe\Just(10)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nx">f\liftA2</span><span class="p">(</span><span class="s2">&quot;str_repeat&quot;</span><span class="p">,</span><span class="nx">MayBe\just</span><span class="p">(</span><span class="s2">&quot;.o0o&quot;</span><span class="p">),</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">)));</span>
</span><span class='line'><span class="c1">// Maybe\just(&quot;.o0o.o0o.o0o.o0o.o0o&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://mcamuzat.github.io/images/str_repeataveccontainer.png" width="517" height="425" title="On utilise la fonction LiftA2" ></p>

<h2>Pour résumer.</h2>

<ul>
<li>Les <em>functors</em> implémentent la fonction <code>map</code> qui prend en entrée une fonction.</li>
<li>Les <em>applicatives</em> implémentent la fonction <code>ap</code> prend en entrée un applicative. Cela permet d&#8217;appliquer des fonctions à plusieurs arguments.</li>
<li>Les <em>monades</em> implémentent la fonction <code>bind</code> qui prend entrée une fonction <em>monadique</em> c&#8217;est à dire qui renvoie une Nomade.</li>
</ul>


<p>Tous les monades que j&#8217;ai présenté implémentent les 3 fonctions (Maybe, Collection, Identity(Container)).</p>

<h2>En conclusion.</h2>

<p>Dans le prochain Post nous allons voir le cas particulier de <code>ap</code> pour les collections.</p>

<ul>
<li>Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
<li>Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a></li>
<li>Partie 5 : <a href="2015/12/20/les-monades-5-les-applicatives/">Les applicatives</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je joue donc je programme 2]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/12/13/je-joue-donc-je-programme-2/"/>
    <updated>2015-12-13T18:05:20+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/12/13/je-joue-donc-je-programme-2</id>
    <content type="html"><![CDATA[<p>J&#8217;avais <a href="blog/2015/05/04/je-joue-donc-je-programme/">déjà parlé</a> de jeux pour apprendre à programmer.
<img class="center" src="http://mcamuzat.github.io/images/thimble.png" width="600" height="345" title="thimble" alt="Thimble"></p>

<!--more-->


<h2>Le CSS</h2>

<h3>Apprendre les selecteurs</h3>

<p>C&#8217;est assez basique mais la présentation est très propre
<a href="flukeout.github.io">Cssdiner</a>
<img class="center" src="http://mcamuzat.github.io/images/cssdiner.png" width="600" height="606" title="Css diner" alt="Css diner"></p>

<h3>Apprendre la balise <code>flex</code></h3>

<p>C&#8217;est relativement récent cela ne marche pas sur tout les navigateurs (pas de problème sous firefox)
<a href="http://flexboxfroggy.com/">flexbox froggy</a></p>

<p><img class="center" src="http://mcamuzat.github.io/images/flexfrog.png" width="600" height="399" title="flexbox froggy" alt="flexbox froggy"></p>

<h3>Créer ses propres pages</h3>

<p>Pas un jeu mais un tutoriel de la part de mozilla
<a href="https://thimble.mozilla.org/en-US">thimble</a></p>

<p><img class="center" src="http://mcamuzat.github.io/images/thimble.png" width="600" height="345" title="thimble" alt="Thimble"></p>

<h2>Javascript</h2>

<p><a href="https://jsfiddle.net/qmmc8mpr/embedded/result/">l&#8217;adresse</a></p>

<p>Le but est à la fois simple et plutôt compliqué faire atteindre x à l&#8217;infini. Sauf que vous devez payer pour ajouter des caractères.</p>

<ul>
<li>1er caractère : 1000 points</li>
<li>2nd caractères : 10000 points</li>
<li>3ème caractères : 100000 points.</li>
</ul>


<p>On ne peux utiliser les caractères  <code>[e, E, *, /, 5, 6, 7, 8, 9, another x]</code>. Ce serait trop simple <code>x+=x</code>.</p>

<p>Quand on connait l&#8217;astuce cela se résout en 30 secondes.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/javascriptinfini.png" width="600" height="450" title="Un petit casse-tête" alt="Un petit casse-tête"></p>

<h2>En conclusion</h2>

<p>Voila de quoi occupé vos soirées.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades : Evaluation partielle]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/"/>
    <updated>2015-12-06T18:49:49+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle</id>
    <content type="html"><![CDATA[<h2>Interlude.</h2>

<p>J&#8217;ai besoin pour le prochain chapitre d&#8217;introduire la notion d&#8217;application partielle. Cela consiste à évaluer une partie de la fonction même si je n&#8217;ai pas tous les arguments.</p>

<p>Soit la fonction suivante.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">plus</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="nv">$b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Que donne l&#8217;exécution ?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">plus</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>Une erreur bien entendu, puisque il manque un argument..</p>

<p>Voici une fonction tirée de la librairie <a href="https://github.com/widmogrod/php-functional">php-functionnal</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">push</span><span class="p">(</span><span class="k">array</span> <span class="nv">$array</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$values</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$values</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$array</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$array</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">curryN</span><span class="p">(</span><span class="nv">$numberOfArguments</span><span class="p">,</span> <span class="nx">callable</span> <span class="nv">$function</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$args</span> <span class="o">=</span> <span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$numberOfArguments</span><span class="p">,</span> <span class="nv">$function</span><span class="p">,</span> <span class="nv">$args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$argsLeft</span> <span class="o">=</span> <span class="nv">$numberOfArguments</span> <span class="o">-</span> <span class="nb">func_num_args</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$argsLeft</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="o">?</span> <span class="nb">call_user_func_array</span><span class="p">(</span><span class="nv">$function</span><span class="p">,</span> <span class="nx">push</span><span class="p">(</span><span class="nv">$args</span><span class="p">,</span> <span class="nb">func_get_args</span><span class="p">()))</span>
</span><span class='line'>            <span class="o">:</span> <span class="nx">curryN</span><span class="p">(</span><span class="nv">$argsLeft</span><span class="p">,</span> <span class="nv">$function</span><span class="p">,</span> <span class="nx">push</span><span class="p">(</span><span class="nv">$args</span><span class="p">,</span> <span class="nb">func_get_args</span><span class="p">()));</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et maintenant reprenons ma première fonction</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$add</span> <span class="o">=</span> <span class="nx">curryN</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="nv">$b</span><span class="p">;});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maintenant réessayons notre commande</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$add10</span> <span class="o">=</span> <span class="nv">$add</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je n&#8217;ai pas d&#8217;erreur mais il y a mieux !</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$add10</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c1">// 20.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Varions encore un peu avec aucun argument</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$addition</span> <span class="o">=</span> <span class="nv">$add</span><span class="p">();</span>
</span><span class='line'><span class="nx">result</span> <span class="o">=</span> <span class="nv">$addition</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span><span class="c1">//20</span>
</span></code></pre></td></tr></table></div></figure>


<p>S&#8217;il manque un argument, la fonction ne renvoie pas de résultat mais une nouvelle fonction.</p>

<p>On appelle cela l&#8217;évaluation partielle.</p>

<p>C&#8217;est plutôt pratique..</p>

<h2>Quelques applications pratiques</h2>

<h3>On réutilise mieux les calculs.</h3>

<p>Par exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result1</span> <span class="o">=</span> <span class="nv">$valeurTresComplique</span> <span class="o">+</span> <span class="nv">$valeursTresSimple1</span><span class="p">;</span>
</span><span class='line'><span class="nv">$result2</span> <span class="o">=</span> <span class="nv">$valeurTresComplique</span> <span class="o">+</span> <span class="nv">$valeursTresSimple2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Devient</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$partiel</span> <span class="o">=</span> <span class="nv">$add</span><span class="p">(</span><span class="nv">$valeurTresComplique</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result1</span> <span class="o">=</span> <span class="nv">$partiel</span><span class="p">(</span><span class="nv">$valeursTresSimple1</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result2</span> <span class="o">=</span> <span class="nv">$partiel</span><span class="p">(</span><span class="nv">$valeursTresSimple2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>C&#8217;est plus simple à tester.</h3>

<p>Si toute les fonctions ne prennent qu&#8217;un argument, Il y a moins de cas à tester.
De plus cela permet une meilleure isolation du code. Une fonction à 5-6 arguments est rarement un bon signe dans le code.</p>

<h3>Cela permet de chainer les fonctions.</h3>

<p>Nous allons nous servir de cette astuce pour nos monades/functors. Depuis le début on ne peux mettre qu&#8217;une seule valeur dans mon <em>container</em> donc comment faire pour faire des fonctions à plusieurs arguments ?</p>

<h2>Les évaluations partielles</h2>

<p>Il faut quand même noter que le langage PHP n&#8217;est pas génial pour le coup.</p>

<p>L&#8217;expression suivante en javascript est parfaitement légale.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">result</span> <span class="o">=</span> <span class="nx">add</span><span class="p">(</span><span class="mi">10</span><span class="p">)(</span><span class="mi">5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>je suis obligé d&#8217;utiliser une variable intermédiaire en PHP.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$add10</span><span class="o">=</span> <span class="nx">add</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$add10</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bref la syntaxe n&#8217;est pas très pratique.</p>

<h2>Conclusion</h2>

<p>En Haskell et <a href="https://fr.wikipedia.org/wiki/OCaml">OCaml</a> l&#8217;évaluation partielle est la norme.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">max</span> <span class="mi">10</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>En fait le langage fait.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">(</span><span class="n">max</span> <span class="mi">10</span><span class="p">)</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>Transformer une fonction à plusieurs arguments en une série de fonction à un argument s&#8217;appelle la <em>Curryfication</em>. Cela vient du prénom de la première personne a avoir écris sur le sujet <a href="https://fr.wikipedia.org/wiki/Haskell_Curry">Haskell Curry</a>. Le nom de famille doit voir dire quelque chose aussi..</p>

<p>Cela semble un peu compliqué et pas forcement intéressant sur les exemples que j&#8217;ai choisi. Mais dans le prochain post nous allons utiliser cette notion.</p>

<p>Merci de m&#8217;avoir lu.</p>

<ul>
<li>Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
<li>Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a></li>
<li>Partie 5 : <a href="2015/12/20/les-monades-5-les-applicatives/">Les applicative</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades : Les listes]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/"/>
    <updated>2015-11-29T21:44:52+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes</id>
    <content type="html"><![CDATA[<p>Nous continuons notre exploration des Monades/Functors, nous allons parler de Collection, de lapins, de marteaux et de non-déterminisme.</p>

<p>Voici notre nouveau <em>container</em> Le container <strong>List</strong>. Il prend en entrée un tableau (Array) ou en Php un <code>Traversable</code>.
<img class="center" src="http://mcamuzat.github.io/images/collection.png" width="600" height="450" title="Le container Collection" alt="Le container collection"></p>

<p>Nous allons voir ensemble les listes, Collections. Nous allons voir le <code>map</code>, le <code>bind</code> nous allons voir que le comportement n&#8217;est pas exactement le même..</p>

<!--more-->


<p>Ne nous embêtons pas allons directement dans l&#8217;implémentation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Collection</span> <span class="k">extends</span> <span class="nx">Container</span><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param array $value</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">isNativeTraversable</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>            <span class="o">?</span> <span class="nv">$value</span>
</span><span class='line'>            <span class="o">:</span> <span class="p">[</span><span class="nv">$value</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">isNativeTraversable</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">is_array</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="o">||</span> <span class="nv">$value</span> <span class="nx">instanceof</span> <span class="nx">\Traversable</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">map</span><span class="p">(</span><span class="nx">callable</span> <span class="nv">$transformation</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$result</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">=</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">extract</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$value</span> <span class="nx">instanceof</span> <span class="nx">Container</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$result</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$result</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On garde toujours la même définition. <code>map</code> prend toujours une fonction et renvoie un Objet du même type. <code>extract</code> renvoie la valeur, <code>Collection::of</code> renvoie une collection.</p>

<p>Quelques exemples</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>   <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">value</span><span class="p">;})</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nv">$value</span><span class="o">-</span><span class="mi">1</span><span class="p">;})</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">);</span> <span class="c1">// [ 1, 3, 5, 7]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;one&quot;</span><span class="p">,</span><span class="s2">&quot;two&quot;</span><span class="p">,</span><span class="s2">&quot;three&quot;</span><span class="p">))</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;strtoupper&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$value</span><span class="o">.</span><span class="s2">&quot;!!!!&quot;</span><span class="p">;})</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">);</span><span class="c1">// [&quot;ONE!!!!&quot;, &quot;TWO!!!!&quot;,&quot;THREE!!!!&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous allons reprendre notre liste du post <a href="blog/2015/11/22/les-monades-3-le-maybe-suite/">précédent</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;id_article&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;titre&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;titre1&#39;</span><span class="p">,</span> <span class="s1">&#39;meta&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;images&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;//first.jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;//second.jpg&#39;</span><span class="p">]]],</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;id_article&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;titre&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;titre2&#39;</span><span class="p">,</span> <span class="s1">&#39;meta&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;images&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;//third.jpg&#39;</span><span class="p">]]],</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;id_article&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;titre&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;titre3&#39;</span><span class="p">],</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://mcamuzat.github.io/images/arraydanscontainer.png" width="600" height="450" title="Un array dans le container" alt="Un array dans le container"></p>

<ul>
<li>Nous allons transformer chaque ligne en <code>maybe</code> grâce à l&#8217;instruction <code>maybeFromValue</code> (<a href="blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">post2</a>)</li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/collectionmaybe.png" width="600" height="450" title="Un array dans le container" alt="Un array dans le container"></p>

<p>Nous aimerions utiliser notre instruction <code>get</code>.</p>

<p>l&#8217;algo :</p>

<ul>
<li>je récupère le maybe.</li>
<li>J&#8217;appelle la fonction bind du maybe avec le get</li>
</ul>


<p>Cela donne ..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">get</span><span class="p">(</span><span class="nv">$key</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$value</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$array</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$array</span><span class="p">[</span><span class="nv">$key</span><span class="p">])</span> <span class="o">?</span> <span class="nx">Some</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$array</span><span class="p">[</span><span class="nv">$key</span><span class="p">])</span> <span class="o">:</span> <span class="nx">Nothing</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oui vous ne rêvez pas c&#8217;est une fonction qui renvoie une fonction qui renvoie une fonction.</p>

<p>L&#8217;implémentation est sympathique..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Collection</span><span class="o">:</span><span class="nx">of</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">fromValue</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;meta&quot;</span><span class="p">))</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;images&quot;</span><span class="p">))</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous obtenons en une ligne <em>sans if sans condition</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="s2">&quot;//first.jpg&quot;</span><span class="p">,</span> <span class="s2">&quot;//third.jpg&quot;</span><span class="p">,</span> <span class="k">null</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Le bind</h2>

<p>Je n&#8217;ai pas donnée le code du bind qui se résume à</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">bind</span><span class="p">(</span><span class="nx">callable</span> <span class="nv">$transformation</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">concat</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je vais essayer de justifier tout cela.</p>

<p>Partons d&#8217;abord du principe que <code>$this-&gt;concat</code> n&#8217;existe pas..</p>

<p>Donc mon <code>bind</code> devient</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">bind</span><span class="p">(</span><span class="nx">callable</span> <span class="nv">$transformation</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">addOne</span><span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$input</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">addOne</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Collection</span><span class="c1">#6 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Collection</span><span class="c1">#5 (1) {</span>
</span><span class='line'>      <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>      <span class="k">array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">Collection</span><span class="c1">#2 (1) {</span>
</span><span class='line'>          <span class="o">...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">Collection</span><span class="c1">#3 (1) {</span>
</span><span class='line'>          <span class="o">...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">Collection</span><span class="c1">#4 (1) {</span>
</span><span class='line'>          <span class="o">...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous avons une collection qui contient une collection (double container!!) et pire dans chaque valeur est encore une collection !. On perd aussi le chainage.</p>

<p>Bref nous avons tout perdu.</p>

<h3>Solution le marteau.</h3>

<p><img class="center" src="http://mcamuzat.github.io/images/marteau.png" width="515" height="150" title="Le marteau comme solution." alt="Le marteau comme solution"></p>

<p>Nous allons aplatir le résultat.</p>

<p>C&#8217;est a dire que nous allons transformer notre collection <code>[[a],[b],[c]]</code> en <code>[a, b, c]</code></p>

<p>Voici l&#8217;implémentation en code.. C&#8217;est un peu long n&#8217;hésitez pas à sauter cette partie..</p>

<p>Partons du principe que c&#8217;est un array..</p>

<p>On aplati notre liste ainsi</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$flatten</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="s2">&quot;d&quot;</span><span class="p">),</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;b&quot;</span><span class="p">),</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="p">));</span>
</span><span class='line'><span class="nv">$result</span><span class="p">;</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$flatten</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$value</span> <span class="k">as</span> <span class="nv">$subvalue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$subvalue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span> <span class="c1">//array(&quot;a&quot;, &quot;d&quot;, &quot;b&quot;, &quot;c&quot;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le problème est que notre collection n&#8217;est pas un <code>Array</code>.. Mais essayons avec une fonction un peu plus tordue</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nb">array_reduce</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">$flatten</span><span class="p">,</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">(</span><span class="nv">$acc</span><span class="p">,</span> <span class="nv">$value</span><span class="p">){</span>
</span><span class='line'>    <span class="nb">array_reduce</span><span class="p">(</span><span class="nv">$value</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$idontcare</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="k">use</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$acc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$acc</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$acc</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="p">[]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est un façon un peu plus complexe d&#8217;exprimer la même chose que le code plus haut. Sans utiliser les boucles <code>foreach</code>.</p>

<p>Le reduce pour notre collection est facilement exprimable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// dans la classe Collection</span>
</span><span class='line'> <span class="k">public</span> <span class="k">function</span> <span class="nf">reduce</span><span class="p">(</span><span class="nx">callable</span> <span class="nv">$function</span><span class="p">,</span> <span class="nv">$accumulator</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="k">as</span> <span class="nv">$item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$accumulator</span> <span class="o">=</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$function</span><span class="p">,</span> <span class="nv">$accumulator</span><span class="p">,</span> <span class="nv">$item</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$accumulator</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Reprenons le code du <code>array_reduce</code> et utilisons notre <code>reduce</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="c1">// dans la classe Collection</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">concat</span><span class="p">(</span><span class="nx">Collection</span> <span class="nv">$collection</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$collection</span><span class="o">-&gt;</span><span class="na">reduce</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$agg</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$value</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$value</span> <span class="nx">instanceof</span> <span class="nx">Collection</span><span class="p">)</span> <span class="o">?</span> <span class="nv">$value</span> <span class="o">:</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$value</span><span class="o">-&gt;</span><span class="na">reduce</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$agg</span><span class="p">,</span> <span class="nv">$v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$agg</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$v</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$agg</span><span class="p">;</span>
</span><span class='line'>            <span class="p">},</span> <span class="nv">$agg</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span> <span class="p">[]);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici comment on aplatit notre fonction et on sauvegarde le chainage. Mais il y a mieux..</p>

<h2>Si j&#8217;avais un marteau..</h2>

<p>Montrons quelque exemples de bind.</p>

<h3>Exemple 1 : Les lapins.</h3>

<p>Soit le fonction suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">reproduction</span><span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$input</span><span class="p">,</span> <span class="nv">$input</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$lapin</span> <span class="o">=</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;lapin&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;reproduction&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;reproduction&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Le résultat</p>

<p><img class="center" src="http://mcamuzat.github.io/images/reproductionlapin.png" width="594" height="482" title="Un array dans le container" alt="Un array dans le container"></p>

<ul>
<li>premier bind</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="s2">&quot;lapin&quot;</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="na">map</span> <span class="o">-&gt;</span><span class="p">[[</span><span class="s2">&quot;lapin&quot;</span><span class="p">,</span> <span class="s2">&quot;lapin&quot;</span><span class="p">,</span><span class="s2">&quot;lapin&quot;</span><span class="p">]]</span> <span class="o">-&gt;</span> <span class="na">concat</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="s2">&quot;lapin&quot;</span><span class="p">,</span> <span class="s2">&quot;lapin&quot;</span><span class="p">,</span><span class="s2">&quot;lapin&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>second bind</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="s2">&quot;lapin&quot;</span><span class="p">,</span> <span class="s2">&quot;lapin&quot;</span><span class="p">,</span><span class="s2">&quot;lapin&quot;</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="na">map</span> <span class="p">[[</span><span class="s2">&quot;lapin&quot;</span><span class="p">,</span><span class="s2">&quot;lapin&quot;</span><span class="p">,</span><span class="s2">&quot;lapin&quot;</span><span class="p">][</span><span class="o">..</span><span class="p">][</span><span class="o">..</span><span class="p">]]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="s2">&quot;lapin&quot;</span> <span class="o">..</span> <span class="o">*</span><span class="mi">9</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous commençons avec un lapin, nous multiplions par 3 à chaque interaction. Comme la liste est aplatie à chaque fois.</p>

<h3>Exemple 2 : les fractales</h3>

<p>Soit la fonction suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">fractale</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$value</span> <span class="o">==</span> <span class="s2">&quot;#&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span><span class="p">)));</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">,</span> <span class="s2">&quot;_&quot;</span><span class="p">,</span><span class="s2">&quot;_&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;#&quot;</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;fractale&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;fractale&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;fractale&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span><span class='line'><span class="k">echo</span> <span class="nb">implode</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'><span class="c1">//#_#___#_#_________#_#___#_#</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Exemple 3 : avec les chiffres</h3>

<p>Soit la fonction suivante</p>

<p>La fonction inférieure à 20 renvoie un array vide.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">moiEtMonSuccesseur</span><span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$input</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">inferieurA20</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">if</span><span class="p">(</span><span class="nv">$value</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">([]);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="p">(</span><span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$value</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">])</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;moiEtMonSuccesseur&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;inferieurA20&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;moiEtMonSuccesseur&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>premier <code>bind</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="na">map</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">],[</span><span class="mi">20</span><span class="p">,</span><span class="mi">21</span><span class="p">],[</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">]]</span><span class="o">-&gt;</span><span class="na">concat</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>second <code>bind</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="na">map</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="mi">10</span><span class="p">],[</span><span class="mi">11</span><span class="p">],[</span><span class="mi">20</span><span class="p">],[],[],[]]</span><span class="o">-&gt;</span> <span class="na">concat</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>troisième <code>bind</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="na">map</span> <span class="p">[[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">],</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">],</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="p">]]</span><span class="o">-&gt;</span> <span class="na">concat</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">21</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Exemple 4: Trouver les positions possibles d&#8217;un jeux de société</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">donneTousLesCoupsPossibles</span><span class="p">(</span><span class="nv">$position</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//renvoie toutes les positions légales</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nx">position_possible</span><span class="o">..</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$postion1</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">donneTousLesCoupsPossibles</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">donneTousLesCoupsPossibles</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>cette fonction donne toute les parties possibles dans deux coup.</p>

<h2>Conclusion</h2>

<p>On comprend assez bien l&#8217;intérêt de cette monade pour gérer des listes, mais il y a une autre vision possible. La collection avec le bind est considérée comme une façon de gérer des entrées <em>non déterministes</em>. J&#8217;ai eu un peu de mal à comprendre, mais voici l&#8217;idée.
La valeur 3 n&#8217;a qu&#8217;une valeur qui est <code>3</code> facile, la valeur <code>[1, 2, 3]</code> est une représentation de la même valeur sauf qu&#8217;elle à trois états possible <code>1, 2, 3</code>. Grâce au <code>bind</code> je prend en compte tous les états possibles.</p>

<p>Pour résumer :</p>

<ul>
<li>Le Maybe prend le cas ou la valeur est présente.</li>
<li>La liste permet de gérer le Non-determinisme.</li>
</ul>


<p>Il reste encore beaucoup de chose à parler. Nous avons parlé des functors(<code>map</code> ou <code>fmap</code>), des monades (<code>of</code> et <code>bind</code>) nous allons voir les applicatives..</p>

<h1>des liens.</h1>

<ul>
<li>Ma référence pour l&#8217;implémentation est <a href="https://github.com/widmogrod/php-functional">php-functional</a>.</li>
<li>La bible pour le haskell est <a href="learnyouahaskell.com">Learn You a Haskell for Great Good!</a> Le livre est gratuit avec des jolis dessins. Enfin le fond et la forme sont vraiment bon.</li>
<li><p>Il existe en français !! <a href="http://lyah.haskell.fr/">Apprendre Haskell vous fera le plus grand bien !</a></p></li>
<li><p>Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></p></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
<li>Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a></li>
<li>Partie 5 : <a href="2015/12/20/les-monades-5-les-applicatives/">Les applicatives</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades 3 Le Maybe (suite)]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/"/>
    <updated>2015-11-22T16:59:31+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite</id>
    <content type="html"><![CDATA[<p>Dans la partie de 3 : Nous allons utiliser le functor Maybe avec l&#8217;instruction <code>bind</code>.</p>

<p>Soit le tableau suivant.</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;id_article&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;titre&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;titre1&#39;</span><span class="p">,</span> <span class="s1">&#39;meta&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;images&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;//first.jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;//second.jpg&#39;</span><span class="p">]]],</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;id_article&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;titre&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;titre2&#39;</span><span class="p">,</span> <span class="s1">&#39;meta&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;images&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;//third.jpg&#39;</span><span class="p">]]],</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;id_article&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;titre&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;titre3&#39;</span><span class="p">],</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>nous voulons afficher une liste avec une titre et et une image.</p>

<p>Nous allons utilisez la fonction suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">get</span><span class="p">(</span><span class="nv">$key</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$array</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$array</span><span class="p">[</span><span class="nv">$key</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$array</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exemple d&#8217;utilisation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$getTitre</span> <span class="o">=</span> <span class="nx">get</span><span class="p">(</span><span class="s2">&quot;titre&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$data</span> <span class="k">as</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">var_dump</span> <span class="nv">$getTitre</span><span class="p">(</span><span class="nv">$line</span><span class="s2">&quot;);</span>
</span><span class='line'><span class="s2">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>string <span class="o">(</span>6<span class="o">)</span> <span class="s2">&quot;titre1&quot;</span>
</span><span class='line'>string <span class="o">(</span>6<span class="o">)</span> <span class="s2">&quot;titre2&quot;</span>
</span><span class='line'>string <span class="o">(</span>6<span class="o">)</span> <span class="s2">&quot;titre3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour extraire les images utilisons notre Maybe</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$data</span> <span class="k">as</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">maybeFromValue</span><span class="p">(</span><span class="nv">$line</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;meta&quot;</span><span class="p">))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;images&quot;</span><span class="p">))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="s2">&quot;noimage.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="s2">&quot;//first.jpg&quot;</span>
</span><span class='line'><span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="s2">&quot;//third.jpg&quot;</span>
</span><span class='line'><span class="nx">string</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="s2">&quot;no-image.png&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Avec le <code>bind</code></h2>

<p>Ré-ecrivons pour utiliser le bind. (Nous utilisons l&#8217;idée que la fonction que j&#8217;injecte dans le container renvoie elle-mème un <code>Some</code> ou <code>Nothing</code>)</p>

<p><img class="center" src="http://mcamuzat.github.io/images/functionretourneSome.png" width="600" height="450" title="la fonction renvoie un maybe" alt="la fonction renvoie un maybe"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">get</span><span class="p">(</span><span class="nv">$key</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$array</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$array</span><span class="p">[</span><span class="nv">$key</span><span class="p">])</span> <span class="o">?</span> <span class="nx">Some</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$array</span><span class="p">[</span><span class="nv">$key</span><span class="p">])</span> <span class="o">:</span> <span class="nx">Nothing</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La fonction devient.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$data</span> <span class="k">as</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nb">var_dump</span><span class="p">(</span><span class="nx">maybeFromValue</span><span class="p">(</span><span class="nv">$line</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;meta&quot;</span><span class="p">))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;images&quot;</span><span class="p">))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="s2">&quot;noimage.png&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>En conclusion</h2>

<ul>
<li>Si j&#8217;utilise la fonction <code>map</code> (parfois on parle aussi de <code>fmap</code>) j&#8217;utilise le Maybe en tant que Functor.</li>
<li>Si j&#8217;utilise la fonction <code>bind</code> j&#8217;utilise le Maybe en tant que Monad.</li>
</ul>


<p>Nous allons continuer notre voyage avec les listes dans le prochain post.</p>

<ul>
<li>Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
<li>Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a></li>
<li>Partie 5 : <a href="2015/12/20/les-monades-5-les-applicatives/">Les applicatives</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades (suite): Le Functor Maybe..]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/"/>
    <updated>2015-11-15T16:43:42+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://mcamuzat.github.io/images/lesdeuxcontainerMaybe.png" width="512" height="313" title="Il y a deux container" alt="Il y a deux containers"></p>

<p>Nous avons vue dans le précédent <a href="blog/2015/11/11/les-monades-en-php-cest-possible-dot/">post</a> un pseudo-container qui nous permet d&#8217;emballer nos valeurs. Nous allons muscler un peu notre container mais partons d&#8217;un exemple.</p>

<p>Je souhaite récupérer le mail du client &ldquo;bob&rdquo; ou afficher &ldquo;pas de mail&rdquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">getMail</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="nv">$mail</span> <span class="o">=</span> <span class="nx">getUserByName</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">getAddress</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getMail</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nv">$mail</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="s2">&quot;pas de mail&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="nv">$mail</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Facile non ?</p>

<!--more-->


<p>Si <code>getAdress()</code> renvoie null, Outch &hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">PHP</span> <span class="nx">Fatal</span> <span class="nx">error</span><span class="o">:</span> <span class="nx">Call</span> <span class="nx">to</span> <span class="nx">a</span> <span class="nx">member</span> <span class="k">function</span> <span class="nf">getMail</span><span class="p">()</span> <span class="nx">on</span> <span class="nx">a</span> <span class="nx">non</span><span class="o">-</span><span class="nx">object</span><span class="o">..</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;utilisateur n&#8217;existe pas forcement et puis l&#8217;adresse est peut-être vide.. Une implémentation naïve</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">getMail</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$user</span> <span class="o">=</span> <span class="nx">getUserByName</span><span class="p">(</span><span class="nv">$name</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$address</span> <span class="o">=</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">getAddress</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$address</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">//etc ...</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$adresse</span><span class="o">-&gt;</span><span class="na">getMail</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="s2">&quot;pas de mail&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce code vous le connaissez, vous l&#8217;avez probablement déjà écris, il y a moyen d&#8217;optimiser de faire plus propre.</p>

<h2>Deux containers pour le prix d&#8217;un.</h2>

<p>Le Maybe à la rescousse..</p>

<p>Voici le Maybe en dessin.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/lesdeuxcontainerMaybe.png" width="512" height="313" title="Il y a deux container" alt="Il y a deux containers"></p>

<p>J&#8217;ai un container <code>Some</code> et un Container <code>Nothing</code>.</p>

<p>Le container <code>Nothing</code> est un container qui n&#8217;a aucune valeurs. La méthode <code>map</code> renvoie toujours un container <code>Nothing</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Nothing</span> <span class="k">extends</span> <span class="nx">Container</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">map</span><span class="p">(</span><span class="nv">$function</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="k">static</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">of</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="k">static</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">bind</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">static</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getOrElse</span><span class="p">(</span><span class="nv">$default</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$default</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le container <code>Some</code> le résultats de <code>map</code> est un nouveau container <code>Some</code> s&#8217;il y a un résultat non-null sinon c&#8217;est un container <code>Nothing</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Some</span> <span class="k">extends</span> <span class="nx">Container</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">map</span><span class="p">(</span><span class="nv">$function</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nv">$function</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$result</span> <span class="o">===</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">Nothing</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">static</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">of</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="k">static</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">bind</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getOrElse</span><span class="p">(</span><span class="nv">$default</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enfin j&#8217;ai besoin d&#8217;un helper</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">maybeFromValue</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="nv">$value</span> <span class="o">===</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>   <span class="k">return</span> <span class="nx">Nothing</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'> <span class="k">return</span> <span class="nx">Some</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notons que j&#8217;ai une méthode qui me permet de sortir avec une valeurs par défaut</p>

<p>Quelques exemples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">echo</span> <span class="nx">maybeFromValue</span><span class="p">(</span><span class="k">null</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;ucfirst&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="s2">&quot;non!!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// non!!</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">maybeFromValue</span><span class="p">(</span><span class="s2">&quot;oui!!&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;ucfirst&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="s2">&quot;non!!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Oui!!</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Some</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="s2">&quot;oui&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;ucfirst&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="k">null</span><span class="p">;})</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="s2">&quot;Non!!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Non !!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous pouvons simplifier notre problème</p>

<p>En le refactorisant ainsi</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// example</span>
</span><span class='line'><span class="c1">// method(&quot;name&quot;) return function($obj) {return $obj-&gt;getName()};</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">method</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$obj</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$obj</span><span class="o">-&gt;</span><span class="nv">$name</span><span class="p">();</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$mail</span> <span class="o">=</span> <span class="nx">maybeFromValue</span><span class="p">(</span><span class="nx">getUserByName</span><span class="p">(</span><span class="nv">$name</span><span class="p">))</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">method</span><span class="p">(</span><span class="s2">&quot;getAddress&quot;</span><span class="p">))</span> <span class="c1">// $value-&gt;getAdress()</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">method</span><span class="p">(</span><span class="s2">&quot;getMail&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="s2">&quot;pas de mail&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quelques dessins
Le cas ou tout marche</p>

<p><img class="center" src="http://mcamuzat.github.io/images/maybechainageok.png" width="516" height="260" title="chainage tout va bien" alt="chainage tout va bien"></p>

<p>Le cas ou <code>getUser()</code> renvoie null</p>

<p><img class="center" src="http://mcamuzat.github.io/images/chainagepasok.png" width="516" height="216" title="getAdress renvoie null, on prend la valeur par défault" alt="getAdress renvoie null, on prend la valeur par défaults"></p>

<p>Sympa la refactorisation. On peux supprimer ainsi une partie de la logique (la plupart des if, les nulls ont tous disparus).</p>

<h2>Une librairie toute faite</h2>

<p>Je vais parler de <a href="https://github.com/schmittjoh/php-option">php-option</a>. Si vous faite du <a href="https://symfony.com/">symfony2</a> vous l&#8217;avez déja dans votre <code>/vendor</code> et vous ne le saviez pas.</p>

<p>La syntaxe est un peu près le même</p>

<p>Mais il y a plein de fonctionnalités</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$entity</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">findSomeEntity</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="k">new</span> <span class="nx">Entity</span><span class="p">());</span>
</span><span class='line'><span class="nv">$entity</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">findSomeEntity</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getOrCall</span><span class="p">(</span><span class="s1">&#39;createAnNewAddress&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$entity</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">findSomeEntity</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getOrThrow</span><span class="p">(</span><span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s1">&#39;ha!!!!!&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il y a aussi des possibilité de chainer les réponses si pas de résultats</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$entity</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">findSomeEntity</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">orElse</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">findSomeOtherEntity</span><span class="p">())</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">orElse</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createEntity</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous n&#8217;utilisons que l&#8217;instruction <code>map</code> pour le moment. Donc nous n&#8217;utilisons pas le container en tant que monade mais plutôt en tant que functor. Nous verrons cela dans le troisième post.</p>

<h2>Conclusion</h2>

<p>Je suis désolé si certain termes sont inexacts comme le container. Je ne suis pas un expert, mais j&#8217;admets bien volontiers mon erreur.</p>

<p>Si vous avez un code ou vous vérifiez tout le temps si les valeurs sont nulles. Il y a probablement moyen que cette structure vous aide.</p>

<p>Dans le prochain Post nous utiliserons le Maybe avec l&#8217;instruction <code>bind</code>.</p>

<ul>
<li>Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
<li>Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a></li>
<li>Partie 5 : <a href="2015/12/20/les-monades-5-les-applicatives/">Les applicatives</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades en PHP c'est possible..]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/"/>
    <updated>2015-11-11T19:28:39+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Nous allons voir ensemble les monades. Nous allons voir la monade <strong>Identity</strong>. elle n&#8217;est pas très utile mais nécessaire si vous voulez comprendre la monade/functor  <strong>Maybe</strong> qui j&#8217;espère va changer votre façon de voir votre code mais ce sera dans le post suivant.</p>

<p>Les monades sont des structures de la programmation fonctionnelle. Très utilisées dans le langage <a href="https://www.haskell.org/">Haskell</a>. En pratique Haskell serait moins attractifs sans cette structure. <em>(Je ne suis absolument pas développeur Haskell.)</em></p>

<!--more-->


<p>Je ne sais pas trop les définir puisque il existe un nombre incalculable de définitions</p>

<ul>
<li>C&#8217;est un triplet d&#8217;après <a href="https://fr.wikipedia.org/wiki/Monade_%28informatique%29">wikipédia en français</a></li>
<li>Une Interface, de l&#8217;injection de dépendances, Structure, Une base spatiale, Un <a href="https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/">burrito</a></li>
<li>Des catégories</li>
</ul>


<p>Il existe une infinité de tutoriels dessus (Le site officiel de Haskell à un compteur <a href="https://wiki.haskell.org/Monad_tutorials_timeline">plutôt amusant</a> pour quantifier l&#8217;avalanche de tuto), écris par les plus grands Douglas Crowford <a href="https://www.youtube.com/watch?v=b0EF0VTs9Dc">Youtube</a> (La référence du Javascript). Donc probablement que mon explication ne sera pas forcément la meilleure.</p>

<p>Pour comprendre les monades je vais vous parler de container (Rien à voir avec <a href="https://www.docker.com/">docker</a>, ni container de <a href="https://symfony.com/">Symfony</a>).</p>

<h2>des valeurs sympas et pas sympa.</h2>

<p>J&#8217;ai des valeurs sympas, et des valeurs <strong>pas sympas</strong>.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/sympa-passympa.png" width="600" height="233" title="des valeurs sympas et pas sympas" alt="des valeurs sympas et pas sympas"></p>

<p>Par <strong>pas sympa</strong>, j&#8217;entends toute les valeurs que je ne maitrise pas trop
par exemple</p>

<ul>
<li>la variable n&#8217;est pas instanciée le fabuleux <code>Null</code></li>
<li>le résultat n&#8217;est pas forcément le même. je lance la fonction deux fois, je n&#8217;ai pas le même résultat.</li>
<li>le résultat dépend d&#8217;autre chose, par exemple la lecture d&#8217;un fichier (le réseau est coupé, le disque dur est plein, etc ..) et peux entrainer des erreurs et des exceptions.</li>
<li>le résultat n&#8217;a pas forcement la même taille. je pense à un résultat de base de donnée, je peux avoir 0 lignes commes des milliards.</li>
<li>enfin le résultat utilise des ressources qui sont partagés avec d&#8217;autre programme.</li>
</ul>


<h2>La solution le container</h2>

<p>La solution :</p>

<blockquote><blockquote><p>utiliser un container ou un emballage</p></blockquote></blockquote>

<p><img class="center" src="http://mcamuzat.github.io/images/valeurdanscontainer.png" width="600" height="450" title="Ma valeur dans un container" alt="Ma valeur dans un container"></p>

<p>L&#8217;idée est simple, je mets en <strong>quarantaine</strong> ma valeur.</p>

<p>Ainsi je suis protégé des effets néfastes.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/valeurquicasse.png" width="600" height="450" title="Si problème.." alt="Si problème.."></p>

<p>Voici le début de l&#8217;implémentation</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Container</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var mixed</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">of</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="k">static</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai deux méthodes:  un constructeur, et une factory statique.
deux possibilités</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$valueNotSecure</span> <span class="o">=</span> <span class="s2">&quot;Je ne suis pas sympa&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="k">new</span> <span class="nx">Container</span><span class="p">(</span><span class="nv">$valueNotSecure</span><span class="p">));</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$valueNotSecure</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Container</span><span class="c1">#1 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">string</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="s2">&quot;Je ne suis pas sympa&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Container</span><span class="c1">#1 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">string</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="s2">&quot;Je ne suis pas sympa&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ma valeur est dans un container, la propriété est <code>protected</code>. Donc impossible à atteindre de l&#8217;extérieur, à priori on ne craint pas grand chose..</p>

<p>Mais voila mon container aussi sécure qu&#8217;il soit ne sert à rien. Puisque rien ne sort, mais rien de rentre..</p>

<h2>Un Sas de décontamination.</h2>

<p>Je vais ajouter un sas de décontamination à ma structure via l&#8217;instruction <code>map</code> qui prend une fonction. Il applique la fonction à la valeur à l&#8217;intérieur. Il a une petite particularité. Il ne donne pas le résultat mais un nouveau container qui contient le résultat.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/containeravecsas.png" width="600" height="450" title="ajoute un sas" alt="J"></p>

<p>Soit la fonction suivante qui ajoute 1 à la valeur en entrée.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">addOne</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$value</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Regardons le dessin suivant:</p>

<p><img class="center" src="http://mcamuzat.github.io/images/containeravecsasexemple.png" width="600" height="450" title="Je place la fonction +1 dans le sas" alt="Je place la fonction +1 dans le sas"></p>

<ul>
<li>Je crée un container qui contient la valeur &ldquo;5&rdquo;.</li>
<li>Je mets la fonction <code>addOne</code> dans le <code>map</code>. Je fais le calcul. Que je m&#8217;empresse de remettre dans un container tout neuf.</li>
<li>j&#8217;ai un Container avec &ldquo;6&rdquo;.</li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/containertoutneuf.png" width="600" height="450" title="ajoute un sas" alt="J"></p>

<p>Voici l&#8217;implémentation de <code>map</code> dans ma classe container.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">map</span><span class="p">(</span><span class="nv">$function</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// call_user_func =&gt; $function($this-&gt;value)</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">static</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$function</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et le code d&#8217;exemple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$output</span> <span class="o">=</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Container</span><span class="c1">#2 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">int</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quelques remarques</p>

<ul>
<li>Comme le résultat n&#8217;est pas sur, Je remet le résultat dans un nouveau container. Je ne réutilise plus l&#8217;ancien container (puisque contaminé). Comme on ne peux changer le contenu, il est <strong>immutable</strong></li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/containertoutneuf.png" width="600" height="450" title="des valeurs sympas et pas sympas" alt="des valeurs sympas et pas sympas"></p>

<ul>
<li>Le container avec l&#8217;instruction <code>map</code> par définition <strong>Chainable</strong>.</li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/chainagecontainer.png" width="600" height="450" title="ajoute un sas" alt="J"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$output</span> <span class="o">=</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//class Container#3 (1) {</span>
</span><span class='line'><span class="c1">//  protected $value =&gt;</span>
</span><span class='line'><span class="c1">//  int(9)</span>
</span><span class='line'><span class="c1">//}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bien sur il est parfaitement possible d&#8217;utiliser des callbacks</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$output</span> <span class="o">=</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$value</span> <span class="o">*</span> <span class="mi">4</span><span class="p">;});</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//class Container#3 (1) {</span>
</span><span class='line'><span class="c1">//  protected $value =&gt;</span>
</span><span class='line'><span class="c1">//  int(24)</span>
</span><span class='line'><span class="c1">//}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Donc j&#8217;ai un Sas d&#8217;entrée qui me permet d&#8217;interagir avec ma valeur. Je n&#8217;ai toujours pas fais sortir la fonction.</p>

<h2>Une sortie.</h2>

<p>C&#8217;est pas très spectaculaire, j&#8217;ajoute une fonction extract() qui n&#8217;est qu&#8217;un simple return</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>     <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="s2">&quot;je suis tranquille&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nb">strtoupper</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'> <span class="c1">//string(18) JE SUIS TRANQUILLE</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Une application : Le décorateur de texte.</h2>

<p>Nous allons utiliser la capacité de chainage de notre container pour faire un pseudo-décorateur.</p>

<p>Soit les fonctions suivantes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">h1</span><span class="p">(</span><span class="nv">$text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$output</span> <span class="o">=</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="s2">&quot;  la réponse est Non   &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;trim&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;htmlentities&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;h1&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;html&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici le fonctionnement</p>

<ul>
<li>je supprime les espaces en trop avec <a href="http://php.net/manual/fr/function.trim.php">trim</a></li>
<li>Je code en Html <a href="http://php.net/manual/fr/function.htmlentities.php">htmlentities</a></li>
<li>j&#8217;encadre de &ldquo;h1&rdquo; puis &ldquo;body&rdquo; puis &ldquo;html&rdquo;.</li>
</ul>


<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;&lt;body&gt;&lt;h1&gt;</span>la r<span class="ni">&amp;eacute;</span>ponse est Non<span class="nt">&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>En image</p>

<h2>Une autre idée</h2>

<p>Nous pouvons aussi imagine une fonction qui renvoie un Container.</p>

<p>Par exemple reprenons notre fonction <code>addOne</code></p>

<p><img class="center" src="http://mcamuzat.github.io/images/functionretournecontainer.png" width="600" height="450" title="Ma fonction renvoie un container" alt="ma fonction renvoie un container"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">addOne</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$value</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Donc ma fonction me renvoie forcement un container.</p>

<p>Si j&#8217;utilise l&#8217;instruction <code>map</code>, je risque de mettre un container dans le container.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/containerdanscontainer.png" width="600" height="450" title="container dans un container" alt="container dans un container"></p>

<p>D&#8217;où l&#8217;ajout de la méthode <code>bind</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">bind</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On remarque que mon résultat reste chaînable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$output</span> <span class="o">=</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//class Container#3 (1) {</span>
</span><span class='line'><span class="c1">//  protected $value =&gt;</span>
</span><span class='line'><span class="c1">//  int(9)</span>
</span><span class='line'><span class="c1">//}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Mon container bien que pour le moment est assez peu utilise mais.</p>

<ul>
<li><p>Il implémente une fonction <code>map</code> qui est chainable. Nous venons d&#8217;implémenter un <strong>functor</strong> ou <strong>foncteur</strong> en français. Cela a un rapport avec les mathématiques. Et il m&#8217;est difficile au moment ou j&#8217;écris ces lignes de vous l&#8217;expliquer. Le Functor s&#8217;occupe d&#8217;appeler la fonction pour nous et de retourner un résultat correct. Il s&#8217;occupe de tout. C&#8217;est une sorte d&#8217;abstraction. On lui confie le calcul et il se débrouille. (Nous le retrouverons dans le post suivant)</p></li>
<li><p>Nous implémentons la méthode <code>of</code> et <code>bind</code> qui est elle aussi chainable (à condition de lui donner des fonctions qui renvoient des Containers). Nous venons d&#8217;implémenter une <em>monade</em> même principe que le functor.</p></li>
</ul>


<p>Si vous avez compris le container, vous pouvez le renommer en IdentityMonad.</p>

<p>Dans le prochain post nous allons implémenter un  la Monade/Functor Maybe.</p>

<p>Elle nous permettra de réfactoriser le code suivant</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">getAbonnementByUserConnected</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$user</span> <span class="o">=</span> <span class="nx">getUserConnected</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// l&#39;utilisateur est anonyme pas d&#39;abonnement</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nv">$user</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// l&#39;utilisateur n&#39;a pas d&#39;abonnement</span>
</span><span class='line'>    <span class="nv">$abonnement</span> <span class="o">=</span> <span class="nx">getAbonnementByUser</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nv">$abonnement</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$abonnement</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">getPromotion</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$abo</span> <span class="o">=</span> <span class="nx">getAbonnementByUserConnected</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nx">getAbonnementByUser</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">Promotion</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$abo</span><span class="o">-&gt;</span><span class="na">getPromotion</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour devenir</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$promotion</span> <span class="o">=</span> <span class="nx">Maybe</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="s2">&quot;getUserConnected&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;getAbonnementByUser&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;getPromotion&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">orElse</span><span class="p">(</span><span class="k">new</span> <span class="nx">Promotion</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je me suis lancé dans une tache bien compliqué mais passionnante. Je m&#8217;excuse d&#8217;avance pour certaines approximations. J&#8217;avais confondu <code>map</code> et <code>bind</code> dans la première version</p>

<p>Je vous remercies de m&#8217;avoir lu..</p>

<ul>
<li>Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
<li>Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a></li>
<li>Partie 5 : <a href="2015/12/20/les-monades-5-les-applicatives/">Les applicatives</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faire des jointures sur des fichiers csv]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/08/faire-des-jointures-sur-des-fichiers-csv/"/>
    <updated>2015-11-08T20:27:16+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/08/faire-des-jointures-sur-des-fichiers-csv</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Un problème que j&#8217;ai eu au travail.</p>

<p>Soit les deux fichiers suivants csv suivant</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ID_1,Noms1,Personne1
</span><span class='line'>ID_2,Noms2,Personne1
</span><span class='line'>ID_2,Noms2,Personne2
</span><span class='line'>ID_3,Noms3,Personne1
</span><span class='line'>ID_5,Noms5,Personne5</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SIRET1,Adresse1,Noms1Annuaire,ID_1
</span><span class='line'>SIRET2,Adresse2,Noms2Annuaire,ID_2
</span><span class='line'>SIRET3,Adresse3,Noms3Annuaire,ID_3
</span><span class='line'>SIRET4,Adresse4,Noms4Annuaire,ID_4</span></code></pre></td></tr></table></div></figure>


<p>Je souhaite faire un merge de ces deux csv. Comment faire ?</p>

<!--more-->


<p>En solution 1 j&#8217;ai pensé.</p>

<ul>
<li>Créer une table temporaire</li>
<li>dumper les deux fichiers</li>
<li>faire un jointure sql</li>
<li>faire un export</li>
</ul>


<p>Et puis je me suis souvenu de la commande <code>join</code></p>

<p>Voici la commande que j&#8217;ai utilisé</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>join -11 -24 file1.csv file2.csv  -t,
</span></code></pre></td></tr></table></div></figure>


<p>Voici le détail de la commande</p>

<ul>
<li><code>-11</code> <code>-24</code> faire une jointure entre la colonne <strong>1</strong> du <code>file1.csv</code> et la colonne <strong>4</strong> du <code>file2.csv</code></li>
<li><code>-t,</code> définie le séparateur dans le fichier ici c&#8217;est un <code>csv</code> <strong>C</strong>omma <strong>S</strong>epared <strong>V</strong>alue, donc le séparateur est <code>,</code></li>
</ul>


<p>Voici le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ID_1,Noms1,Personne1,SIRET1,Adresse1,Noms1Annuaire
</span><span class='line'>ID_2,Noms2,Personne1,SIRET2,Adresse2,Noms2Annuaire
</span><span class='line'>ID_2,Noms2,Personne2,SIRET2,Adresse2,Noms2Annuaire
</span><span class='line'>ID_3,Noms3,Personne1,SIRET3,Adresse3,Noms3Annuaire
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est une jointure classique <code>ID_5</code> n&#8217;apparait pas dans le résultats pas plus que <code>Adresse4</code></p>

<h2>Faire un select</h2>

<p>On précise les colonnes que l&#8217;on souhaite avec l&#8217;option <code>-o</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>join -11 -24 file1.txt file2.txt  -t, -o1.2,2.1
</span></code></pre></td></tr></table></div></figure>


<p><code>-o1.2,2.1</code> la colonne <strong>2</strong> du <code>file1.csv</code> et la colonne <strong>1</strong> du <code>file2.csv</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Noms1,SIRET1
</span><span class='line'>Noms2,SIRET2
</span><span class='line'>Noms2,SIRET2
</span><span class='line'>Noms3,SIRET3
</span></code></pre></td></tr></table></div></figure>


<h2>Left-join et Right Join</h2>

<p>C&#8217;est possible à émuler avec l&#8217;option <code>-a</code> et <code>-e</code> <code>-a</code> affiche le fichier <strong>1</strong> ou <strong>2</strong>  même s&#8217;il n&#8217;y a pas de jointure et  et <code>-e</code>  la valeur par défaut à l&#8217;affichage</p>

<p>deux possibilités</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Left-join</span>
</span><span class='line'>join -11 -24 file1.txt file2.txt  -t, -o1.2,2.1,2.2 -a <span class="m">1</span> -e NULL
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Noms1,SIRET1,Adresse1
</span><span class='line'>Noms2,SIRET2,Adresse2
</span><span class='line'>Noms2,SIRET2,Adresse2
</span><span class='line'>Noms3,SIRET3,Adresse3
</span><span class='line'>Noms5,NULL,NULL
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Right-join</span>
</span><span class='line'>join -11 -24 file1.txt file2.txt  -t, -o1.2,2.1,2.2 -a <span class="m">2</span> -e NULL
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Noms1,SIRET1,Adresse1
</span><span class='line'>Noms2,SIRET2,Adresse2
</span><span class='line'>Noms2,SIRET2,Adresse2
</span><span class='line'>Noms3,SIRET3,Adresse3
</span><span class='line'>NULL,SIRET4,Adresse4
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Si un jour vous avez besoin de merger deux fichiers sans forcement sortir un script complexe, penser à linux.</p>

<p>Pour le csv et PHP, c&#8217;est inclus dans l&#8217;instruction <code>fgetcsv</code> mais ce n&#8217;est pas la joie, la librairie suivante <a href="http://csv.thephpleague.com/">thephpleague/csv</a> rend cela nettement plus agréable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git grep]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/05/git-grep/"/>
    <updated>2015-11-05T22:22:13+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/05/git-grep</id>
    <content type="html"><![CDATA[<p>Dans le post <a href="blog/2015/11/02/diff-patch-git">précédent</a> j&#8217;ai parlé des commandes linux <code>patch</code> et <code>diff</code>. des fonctionnalités ou on utiliserait plutôt Git. Ici je vais faire le contraire : utiliser git sans utiliser les commandes linux. Je vais parler de <code>git grep</code>.</p>

<h2>git grep</h2>

<p>l&#8217;utilisation est très simple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git grep hello
</span></code></pre></td></tr></table></div></figure>


<p>On peut utiliser une regex
le résultat s&#8217;affiche dans un pager (sous linux c&#8217;est souvent <code>less</code>).</p>

<!--more-->


<p><strong>Rappel des touches sur Less</strong></p>

<table>
<thead>
<tr>
<th> Touche      </th>
<th style="text-align:center;"> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>g</code>               </td>
<td style="text-align:center;"> début du fichier</td>
</tr>
<tr>
<td> <code>G</code>               </td>
<td style="text-align:center;"> fin  du fichier</td>
</tr>
<tr>
<td> <code>/mot</code>            </td>
<td style="text-align:center;"> cherche <code>mot</code>. <code>n</code> pour suivant <code>N</code> pour précédent</td>
</tr>
<tr>
<td> <code>&amp;mot</code>            </td>
<td style="text-align:center;"> seulement le mot</td>
</tr>
</tbody>
</table>


<p><code>git grep</code> utilise un peu près les mêmes options que le <code>grep</code>.</p>

<p>par exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git grep -n -C <span class="m">10</span> hello
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>-n</code> numérote les lignes</li>
<li><code>-C 5</code> affiche un contexte de 5 lignes</li>
</ul>


<p>A noter que git grep n&#8217;utilise que les fichiers dans le dépôt qui sont déjà indexé. Donc il est plutôt rapide (alors qu&#8217;un grep devrait faire tous les répertoires).</p>

<h2>Git grep et l&#8217;historique</h2>

<p>Mais la vrai force de git grep est de pouvoir chercher sur toute les branches !</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git grep -n -C <span class="m">10</span> -e &lt;ma regex&gt; &lt;la branche&gt;
</span></code></pre></td></tr></table></div></figure>


<p>D&#8217;ailleurs si vous voulez savoir qui a commité a ajouté un bug qui contient le mot &ldquo;Panda&rdquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git rev-list --all <span class="p">|</span> xargs git grep <span class="s1">&#39;Panda&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il y a des alternatives</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git log -G Panda
</span><span class='line'>git log -S Panda
</span></code></pre></td></tr></table></div></figure>


<h2>Git grep et tig</h2>

<p>Depuis la version 2 de <a href="https://github.com/jonas/tig">tig</a> (<strong>pas encore</strong> dans les dépots au moment ou j&#8217;écris ces lignes)
il suffit d&#8217;appuyer sur <code>g</code> de faire la recherche.</p>

<p>Les différentes commandes</p>

<ul>
<li><code>e</code> ouvrir dans l&#8217;éditeur</li>
<li><code>b</code> ouvre la vue blame</li>
<li><code>Enter</code> permet de se déplacer dans le fichiers.</li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/tiggrep.png" width="600" height="398" title="Git grep" alt="Git grep"></p>

<h2>Git grep et vim</h2>

<ul>
<li>Il est dispo dans le plugin <a href="https://github.com/tpope/vim-fugitive">Fugitive</a>.</li>
</ul>


<h2>Conclusion</h2>

<p>L&#8217;intégration dans <em>tig</em> me plait beaucoup, j&#8217;ai beaucoup tapé le commande suivante pour faire mes recherches.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> find . -name <span class="s1">&#39;*.php&#39;</span><span class="p">|</span> xargs grep <span class="s1">&#39;array_walk_recur&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je me suis forcé à lire un peu la documentation de git grep, et je ne le regrette pas.</p>

<p>Enfin il existe des alternative à <code>grep</code> comme <a href="http://beyondgrep.com/">ack</a> ou plus récemment <a href="https://github.com/ggreer/the_silver_searcher">the silver searcher</a>. Je vais essayer d&#8217;en parler plus tard.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diff et patch, pas besoin de git]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/02/diff-patch-git/"/>
    <updated>2015-11-02T22:24:03+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/02/diff-patch-git</id>
    <content type="html"><![CDATA[<p>Nous allons jouer un peu avec les diff et les patchs.</p>

<h1> Mise en place</h1>

<p>Soit le fichier suivant <code>README.md</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ceci est un exemple.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Ceci est une ligne ajoutée
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Modifions le fichier par ceci.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ceci est un exemple.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>j'ai ajouté cette ligne</span></code></pre></td></tr></table></div></figure>


<p>Enregistrons celui-ci en <code>README2.md</code></p>

<p>Et lançons la commande suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>diff README.md README2.md
</span></code></pre></td></tr></table></div></figure>


<p>Nous obtenons le résultat suivant</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>4d3
</span><span class='line'>&lt; Ceci est une ligne ajoutée
</span><span class='line'>6a6,9
</span><span class='line'>&gt;
</span><span class='line'>&gt;
</span><span class='line'>&gt;
</span><span class='line'>&gt; j&#39;ai ajouté cette ligne
</span></code></pre></td></tr></table></div></figure>


<p>Il y a en fait plusieurs formats</p>

<p>Essayez la commande suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>diff -u README.md README2.md &gt; readme.diff
</span></code></pre></td></tr></table></div></figure>


<p>On obtient le fichier suivant</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- README.md   2015-11-02 22:07:43.728854981 +0100</span>
</span><span class='line'><span class="gi">+++ README2.md  2015-11-02 22:13:58.244839112 +0100</span>
</span><span class='line'><span class="gu">@@ -1,6 +1,9 @@</span>
</span><span class='line'> Ceci est un exemple.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="gd">-Ceci est une ligne ajoutée</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+j&#39;ai ajouté cette ligne</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>Cette vision doit vous être assez familière si vous faite du git, svn ou mercurial</p>

<p>c&#8217;est la sortie d&#8217;un <code>git diff</code> si on avait modifié ce fichier.</p>

<h2>Jouer un patch</h2>

<p>Pour ce convaincre nous allons demander à linux de jouer le fichier <code>.diff</code> qui est tout simplement un patch</p>

<p>Grâce à la commande suivante.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>patch -p0 &lt; README.diff
</span><span class='line'>patching file README.md
</span></code></pre></td></tr></table></div></figure>


<p>Comme toute modification je peux avoir des conflits. Si je modifie mon <code>README.md</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Ceci est un exemple.
</span><span class='line'>
</span><span class='line'>Ceci est une autre ligne
</span><span class='line'>Ceci est une ligne ajoutée
</span><span class='line'>Mais celle ci aussi
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>patching file README.md
</span><span class='line'>Hunk <span class="c">#1 FAILED at 1.</span>
</span><span class='line'><span class="m">1</span> out of <span class="m">1</span> hunk FAILED -- saving rejects to file README.md.rej
</span></code></pre></td></tr></table></div></figure>


<p>Vous retrouvez les fameux <code>.orig</code> et <code>.rej</code> qui pourrissent un peu la vie de ceux qui font du mercurial ou git (<code>hg purge</code> et <code>git clean</code> est probablement ce que vous cherchez).</p>

<h2>Merger</h2>

<p>Si vous voulez un merge. c&#8217;est possible</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>patch -p0 --merge &lt; README.diff
</span></code></pre></td></tr></table></div></figure>


<p>
le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Ceci est un exemple.
</span><span class='line'>
</span><span class='line'><span class="o">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt;
</span><span class='line'>Ceci est une autre ligne
</span><span class='line'>Ceci est une ligne ajoutée
</span><span class='line'>Mais celle ci <span class="nv">aussi</span>
</span><span class='line'><span class="o">=======</span>
</span><span class='line'>&gt;&gt;&gt;&gt;&gt;&gt;&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>j<span class="err">&#39;</span>ai ajouté cette ligne
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;option <code>-p0</code> ou le plus souvent <code>-p1</code> demande à la commande <code>patch</code> d&#8217;ignorer le chemin sur un niveau.</p>

<p>Voici un exemple avec git et le même fichier</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/README.md b/README.md</span>
</span><span class='line'><span class="gh">index 1030f85..5e8e5f9 100644</span>
</span><span class='line'><span class="gd">--- a/README.md</span>
</span><span class='line'><span class="gi">+++ b/README.md</span>
</span><span class='line'><span class="gu">@@ -1,6 +1,9 @@</span>
</span><span class='line'> Ceci est un exemple.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="gd">-Ceci est une ligne ajoutée</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+j&#39;ai ajouté cette ligne</span>
</span></code></pre></td></tr></table></div></figure>


<p>on voit que la ligne <code>a/README.md</code> et <code>b/README.md</code>, ici pour appliquer le patch il faut utiliser <code>-p1</code> pour ignorer le premier niveau (supprime le <code>a/</code> et <code>b/</code>)</p>

<p>Sous Git c&#8217;est plus simple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git apply lefichier.diff
</span></code></pre></td></tr></table></div></figure>


<h2>Reverter</h2>

<p>Enfin soyons complet il est possible de reverter un patch avec <code>-R</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>patch -R -p1 &lt; mon patch
</span></code></pre></td></tr></table></div></figure>


<p>Avec git</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git apply -R &lt;mon fichier diff&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Pas besoin d&#8217;avoir git/mercurial/svn pour créer ou jouer des patchs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Listes Chainées Iterator]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/01/listes-chainees-iterator/"/>
    <updated>2015-11-01T19:46:40+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/01/listes-chainees-iterator</id>
    <content type="html"><![CDATA[<p>Troisième partie sur la SPL et les listes chainées.</p>

<ul>
<li>partie 1 <a href="blog/2015/10/03/spl-surcharge-magique">SPL et surcharge</a></li>
<li>partie 2 <a href="blog/2015/10/10/liste-chainees-implementation">Implémentation</a></li>
</ul>


<p>Nous allons implémenter l&#8217;interface <code>ArrayAccess</code>. Donc notre liste chainée va se comporter comme un array.</p>

<p>Je vais rajouter deux méthodes. Attention les <code>Array</code> commencent traditionnellement à 0 d&#8217;où le <code>$this-&gt;count -1</code></p>

<!--more-->


<ul>
<li>Supprimer le chainon N</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">removeAtPosition</span><span class="p">(</span><span class="nv">$position</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validateInterval</span><span class="p">(</span><span class="nv">$position</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s2">&quot;L&#39;index doit être valide&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">removeFirstValue</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span>  <span class="o">==</span>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">removeLastValue</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$last</span> <span class="o">=</span> <span class="nv">$current</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$position</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$last</span> <span class="o">=</span> <span class="nv">$current</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$last</span><span class="o">-&gt;</span><span class="na">setNext</span><span class="p">(</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Récupérer le chainon N</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">getAtPosition</span><span class="p">(</span><span class="nv">$position</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validateInterval</span><span class="p">(</span><span class="nv">$position</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s2">&quot;L&#39;index doit être numerique&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span> <span class="o">==</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$position</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour avoir le 9999 chainon,  il faut parcourir les 9998 chainons précédents.</p>

<p>Avec les deux méthodes précédentes. Il suffit d&#8217;implémenter les méthodes suivantes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetSet</span><span class="p">(</span><span class="nv">$offset</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$offset</span> <span class="o">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">insertAtEnd</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validateInterval</span><span class="p">(</span><span class="nv">$offset</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s2">&quot;L&#39;index doit être valide&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">insertAtPosition</span><span class="p">(</span><span class="nv">$offset</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetExists</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validInterval</span><span class="p">(</span><span class="nv">$offset</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetUnset</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">removeAtPosition</span><span class="p">(</span><span class="nv">$offset</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetGet</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getAtPosition</span><span class="p">(</span><span class="nv">$offset</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour vérifier que les valeurs en entrée sont correctes j&#8217;utilise la fonction suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">private</span> <span class="k">function</span> <span class="nf">validateInterval</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="k">false</span> <span class="o">!==</span> <span class="nb">filter_var</span><span class="p">(</span>
</span><span class='line'>        <span class="nv">$offset</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">FILTER_VALIDATE_INT</span><span class="p">,</span>
</span><span class='line'>        <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;options&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;min_range&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;max_range&#39;</span> <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bon cela semble un peu abstrait, voici quelques exemples d&#8217;utilisations.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="nv">$list</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;first&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$list</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;second&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$list</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;third&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$list</span><span class="p">[</span><span class="mi">1</span><span class="p">]));</span><span class="c1">// =&gt; true</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$list</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="c1">// =&gt; &quot;second&quot;</span>
</span><span class='line'><span class="nb">unset</span><span class="p">(</span><span class="nv">$list</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$list</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="c1">// =&gt; third</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous avons une liste qui se comporte comme un array. c&#8217;est pratique, mais on ne peux pas faire de <code>foreach</code> dessus.. Enfin pas encore.</p>

<h2>Ajout de l&#8217;itérator</h2>

<p>Pour faire un itérator il faut implémenter l&#8217;interface suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="nx">Iterator</span> <span class="k">extends</span> <span class="nx">Traversable</span> <span class="p">{</span>
</span><span class='line'><span class="cm">/* Méthodes */</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">public</span> <span class="nx">mixed</span> <span class="nb">current</span> <span class="p">(</span> <span class="nx">void</span> <span class="p">)</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">public</span> <span class="nx">scalar</span> <span class="nb">key</span> <span class="p">(</span> <span class="nx">void</span> <span class="p">)</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">public</span> <span class="nx">void</span> <span class="nb">next</span> <span class="p">(</span> <span class="nx">void</span> <span class="p">)</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">public</span> <span class="nx">void</span> <span class="nb">rewind</span> <span class="p">(</span> <span class="nx">void</span> <span class="p">)</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">public</span> <span class="nx">boolean</span> <span class="nx">valid</span> <span class="p">(</span> <span class="nx">void</span> <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans le cas de notre liste chainée cela n&#8217;est pas très compliqué.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="k">class</span> <span class="nc">LinkedList</span> <span class="k">implements</span> <span class="nx">Countable</span><span class="p">,</span> <span class="nx">ArrayAccess</span><span class="p">,</span> <span class="o">*</span><span class="nx">Iterator</span><span class="o">*</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">.....</span>  
</span><span class='line'>    <span class="k">private</span> <span class="nv">$current</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$position</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="o">....</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">current</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">current</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">key</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">position</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">next</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">position</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">rewind</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">position</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">valid</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">current</span> <span class="o">!==</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un petit code d&#8217;exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="nv">$list</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;first&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$list</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;second&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$list</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;third&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$list</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">$key</span><span class="s2"> =&gt; </span><span class="si">$value</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// string(10) &quot;0 =&gt; first&quot;</span>
</span><span class='line'><span class="c1">// string(11) &quot;1 =&gt; second&quot;</span>
</span><span class='line'><span class="c1">// string(10) &quot;2 =&gt; third&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je peux a tout moment le retransformer en <code>array</code> grâce à la méthode <code>iterator_to_array($list)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">string</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="s2">&quot;first&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">string</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="s2">&quot;second&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">string</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="s2">&quot;third&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour faire dans l&#8217;autre sens nous pouvons implémenter le constructor</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$input</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="o">||</span> <span class="nv">$input</span> <span class="nx">instanceof</span> <span class="nx">Traversable</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s2">&quot;Un array ou Un iterator..&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">foreach</span><span class="p">(</span><span class="nv">$input</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">insertAtEnd</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mon constructor prend un array ou un Objet qui implémente <code>Traversable</code> (en gros un Itérateur);</p>

<p>Quelques exemples</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;one&quot;</span><span class="p">,</span> <span class="s2">&quot;two&quot;</span><span class="p">,</span> <span class="s2">&quot;three&quot;</span><span class="p">));</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$list</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//string(3) &quot;one&quot;</span>
</span><span class='line'><span class="c1">//string(3) &quot;two&quot;</span>
</span><span class='line'><span class="c1">//string(5) &quot;three&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$spl</span> <span class="o">=</span> <span class="k">New</span> <span class="nx">SplQueue</span><span class="p">();</span>
</span><span class='line'><span class="nv">$spl</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;travail1&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$spl</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;travail2&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$spl</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;travail3&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">(</span><span class="nv">$spl</span><span class="p">));</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$list</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// string(8) &quot;travail1&quot;</span>
</span><span class='line'><span class="c1">// string(8) &quot;travail2&quot;</span>
</span><span class='line'><span class="c1">// string(8) &quot;travail3&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$linked</span> <span class="o">=</span> <span class="k">New</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="nv">$linked</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;valeur 1&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$linked</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;valeur 2&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$linked</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;valeur 3&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">(</span><span class="nv">$linked</span><span class="p">);</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$list</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// string(9) &quot;valeur 1&quot;</span>
</span><span class='line'><span class="c1">// string(8) &quot;valeur 2&quot;</span>
</span><span class='line'><span class="c1">// string(8) &quot;valeur 3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>En conclusion.</h2>

<p>Nous avons implémenter Les listes chainées avec toutes les méthodes. Mon exemple est un peu théorique. Mais je vous conseille de re-regarder les doctrines collections.</p>

<p>Merci de m&#8217;avoir lu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retour vers le futur avec Vim]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/25/retour-vers-le-futur-avec-vim/"/>
    <updated>2015-10-25T18:52:49+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/25/retour-vers-le-futur-avec-vim</id>
    <content type="html"><![CDATA[<h2>Parlons de retour vers le futur.</h2>

<p>En effet le héros dans le film 2 arrive le 21 octobre 2015. Bon on n&#8217;a pas les voitures volantes. Et c&#8217;est toujours le même éditeur de texte (vi date de 1976 !).</p>

<h2>Annuler dans VIM</h2>

<p>Pour annuler de VIM c&#8217;est plutôt simple <code>u</code> pour <strong>u</strong>ndo. Pour refaire c&#8217;est moins simple <code>&lt;CTRL + r&gt;</code>. Mais en pratique c&#8217;est plus puissant que cela.</p>

<p>En fait on peut voyager dans le temps avec VIM.</p>

<h2>Retour dans le passé</h2>

<p>Grâce à la commande  <code>:earlier</code></p>

<ul>
<li><code>:earlier 5m</code> reviens en arrière de 5 minutes</li>
<li><code>:earlier 10</code> annule 10 modifications</li>
<li><code>:earlier 5h</code> annule 5 heures.</li>
<li><code>:earlier 1f</code> ramène le fichier avant le dernier enregistrement</li>
<li><code>:earlier 2f</code> ramène le fichier à l&#8217;avant-dernier enregistrement</li>
</ul>


<p>Bien sur on peut faire un <em>retour vers futur</em> avec la commande suivante.</p>

<ul>
<li><code>:later 5m</code> retourne 5 minute plus tard.</li>
<li><code>:later 10</code> refait les 10 derniers modifications</li>
</ul>


<p>Encore plus fort se déplacer dans l&#8217;historique de VIM</p>

<!--more-->


<h2>Se déplacer dans les différents passés</h2>

<p>Celui-ci ce comporte comme un arbre.</p>

<p>Par exemple je rentre le texte <code>premier</code>, puis le texte <code>second</code>. Puis je change <code>second</code> en <code>troisième</code> mon historique ressemble à cela.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   premier 
</span><span class='line'>     |
</span><span class='line'>   modif 1
</span><span class='line'>     |
</span><span class='line'>   premier second
</span><span class='line'>     |
</span><span class='line'>   modif 2
</span><span class='line'>     |
</span><span class='line'>   premier troisième</span></code></pre></td></tr></table></div></figure>


<p>Si j&#8217;annule une étape et que je change le texte mon historique ressemble à cela</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>              premier 
</span><span class='line'>                 |
</span><span class='line'>               modif 1
</span><span class='line'>                 |
</span><span class='line'>               premier second
</span><span class='line'>            ^    |       \
</span><span class='line'> annulation |  modif 2    modif 3
</span><span class='line'>            |    |               \
</span><span class='line'>               premier troisième premier quatrième.
</span></code></pre></td></tr></table></div></figure>


<p>Impossible de revenir à la modif 2 avec <code>u</code> et <code>Ctrl-r</code>.</p>

<p>Mais les touches <code>g+</code> et <code>g-</code> permette de faire cela.</p>

<p>Par exemple <code>g-</code> va nous ramener à la modif 2, un seconde fois <code>g-</code> nous ramène à la modif 1 etc ..</p>

<p>Pour voir toute les modifications il existe une liste de tous les changements avec <code>:undolist</code></p>

<p>Cela n&#8217;est pas très <em>user-friendly</em> comme vue. C&#8217;est pour cela qu&#8217;il existe un plugin vim <a href="https://github.com/sjl/gundo.vim/">gundo</a> qui rend cela beaucoup plus simple</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Undo graph                          File
</span><span class='line'>+-----------------------------------+---------------------------+
</span><span class='line'>| " Gundo for something.txt [1]     |one                        |
</span><span class='line'>| " j/k  - move between undo states |two                        |
</span><span class='line'>| " &lt;cr&gt; - revert to that state     |three                      |
</span><span class='line'>|                                   |five                       |
</span><span class='line'>| @  [5] 3 hours ago                |                           |
</span><span class='line'>| |                                 |                           |
</span><span class='line'>| | o  [4] 4 hours ago              |                           |
</span><span class='line'>| | |                               |                           |
</span><span class='line'>| o |  [3] 4 hours ago              |                           |
</span><span class='line'>| | |                               |                           |
</span><span class='line'>| o |  [2] 4 hours ago              |                           |
</span><span class='line'>| |/                                |                           |
</span><span class='line'>| o  [1] 4 hours ago                |                           |
</span><span class='line'>| |                                 |                           |
</span><span class='line'>| o  [0] Original                   |                           |
</span><span class='line'>+-----------------------------------+                           |
</span><span class='line'>| --- 3 2010-10-12 06:27:35 PM      |                           |
</span><span class='line'>| +++ 5 2010-10-12 07:38:37 PM      |                           |
</span><span class='line'>| @@ -1,3 +1,4                      |                           |
</span><span class='line'>|  one                              |                           |
</span><span class='line'>|  two                              |                           |
</span><span class='line'>|  three                            |                           |
</span><span class='line'>| +five                             |                           |
</span><span class='line'>+-----------------------------------+---------------------------+</span></code></pre></td></tr></table></div></figure>


<h2>Sauvegarder les annulations.</h2>

<p>Parfois on fait des bêtises et que le fichier n&#8217;est pas encore versionné et/ou commité (et cela vous est déjà arrivé non ?). Quand on a quitté vim. On perd tout l&#8217;historique. Ce n&#8217;est plus le cas en précisant un <code>undofile</code></p>

<h2>Conclusion</h2>

<p>Nous avons appris à nous déplacer comme des pros dans l&#8217;historique vim.</p>

<p>Résumé des touches</p>

<ul>
<li><code>u</code> annule, <code>ctrl+r</code> refait</li>
<li><code>:earlier</code> reviens en arrière</li>
<li><code>g-</code> et <code>g+</code> reviens/retourne à l&#8217;état précédent</li>
</ul>


<h2>Références</h2>

<ul>
<li>la documentation de vim <code>help undo</code></li>
<li><a href="https://github.com/sjl/gundo.vim/">Gundo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les fractales en php Mandelbrot]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/18/les-fractales-en-php-mandelbrot/"/>
    <updated>2015-10-18T20:02:28+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/18/les-fractales-en-php-mandelbrot</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>______________________________________
</span><span class='line'>______________________________________
</span><span class='line'>___________________________*__________
</span><span class='line'>_________________________****_________
</span><span class='line'>_________________________****_________
</span><span class='line'>_________________________****_________
</span><span class='line'>______________________________________
</span><span class='line'>___________________*__**********______
</span><span class='line'>___________________**************_**__
</span><span class='line'>___________________*****************__
</span><span class='line'>__________________*****************___
</span><span class='line'>_________________*******************__
</span><span class='line'>________________*********************_
</span><span class='line'>________________*********************_
</span><span class='line'>______*__*_____**********************_
</span><span class='line'>______*******__**********************_
</span><span class='line'>_____*********_**********************_
</span><span class='line'>_____*********_**********************_
</span><span class='line'>___*_*********_*********************__
</span><span class='line'>***********************************___
</span><span class='line'>___*_*********_*********************__
</span><span class='line'>_____*********_**********************_
</span><span class='line'>_____*********_**********************_
</span><span class='line'>______*******__**********************_
</span><span class='line'>______*__*_____**********************_
</span><span class='line'>________________*********************_
</span><span class='line'>________________*********************_
</span><span class='line'>_________________*******************__
</span><span class='line'>__________________*****************___
</span><span class='line'>___________________*****************__
</span><span class='line'>___________________**************_**__
</span><span class='line'>___________________*__**********______
</span><span class='line'>______________________________________
</span><span class='line'>_________________________****_________
</span><span class='line'>_________________________****_________
</span><span class='line'>_________________________****_________
</span><span class='line'>___________________________*__________
</span><span class='line'>_____________________________________</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>Voici le code :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Mandelbrot</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">Mandelbrot</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">19</span><span class="p">;</span> <span class="nv">$x</span> <span class="o">&lt;</span> <span class="mi">19</span><span class="p">;</span> <span class="nv">$x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nv">$y</span> <span class="o">=</span> <span class="o">-</span><span class="mi">19</span><span class="p">;</span> <span class="nv">$y</span> <span class="o">&lt;</span> <span class="mi">19</span><span class="p">;</span> <span class="nv">$y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">((</span><span class="nv">$out</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">iterate</span><span class="p">(</span><span class="nv">$x</span><span class="o">/</span><span class="mf">20.0</span><span class="p">,</span><span class="nv">$y</span><span class="o">/</span><span class="mf">20.0</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;*&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">iterate</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$cr</span> <span class="o">=</span> <span class="nv">$y</span><span class="o">-</span><span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$ci</span> <span class="o">=</span> <span class="nv">$x</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$zi</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$zr</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$zr2</span> <span class="o">=</span> <span class="nv">$zr</span> <span class="o">*</span> <span class="nv">$zr</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$zi2</span> <span class="o">=</span> <span class="nv">$zi</span> <span class="o">*</span> <span class="nv">$zi</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// Calul de la nouvelle valeur de z</span>
</span><span class='line'>            <span class="k">list</span><span class="p">(</span><span class="nv">$zr</span><span class="p">,</span> <span class="nv">$zi</span><span class="p">)</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="nv">$zr2</span> <span class="o">-</span> <span class="nv">$zi2</span> <span class="o">+</span> <span class="nv">$cr</span><span class="p">,</span>
</span><span class='line'>                <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="nv">$zr</span> <span class="o">*</span> <span class="nv">$zi</span><span class="p">)</span> <span class="o">+</span> <span class="nv">$ci</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>            <span class="c1">// Si le module est supérieur à 2</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$zi2</span> <span class="o">+</span> <span class="nv">$zr2</span> <span class="o">&gt;</span> <span class="nx">BAILOUT</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// si cela fait la millieme boucle.</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">&gt;</span> <span class="nx">MAX_ITERATIONS</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$m</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mandelbrot</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span>
</span></code></pre></td></tr></table></div></figure>


<p>Comment cela marche.</p>

<p>Rappel sur les complexes</p>

<ul>
<li>un nombre complexe est composé d&#8217;une partie réelle et une partie imaginaire : <code>a + i b</code> ici <strong>a</strong> est la partie réelle et <strong>b</strong> est la partie imaginaire</li>
<li>le module d&#8217;un nombre complexe représente la distance entre les coordonnées du point et le centre. <code>|module|^2 = a^2 + b ^2</code></li>
<li>la multiplication d&#8217;un nombre complexe donne <code>(a + ib)^2 = (a^2-b^2)+2ab * i</code></li>
</ul>


<h2>La version simple</h2>

<p>il existe une video en anglais qui explique cela très bien.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/NGMRB4O922I" frameborder="0" allowfullscreen></iframe>


<ul>
<li>Je crée un tableau (x,y) de 20 * 20 qui va de [1, -1] en largeur et en hauteur</li>
<li>j&#8217;effectue la boucle suivante.</li>
<li>je calcule la valeur <code>z1</code> qui est égale à <code>z0^2 + c</code> avec c qui est <code>x+i*y</code>.</li>
<li>puis je calcule la valeur de <code>z2 = z1^2 + c</code> puis <code>z3</code>..</li>
<li>je quitte la boucle pour deux raisons.

<ul>
<li>si le module est supérieur à 2, le module devient de plus en plus grand et dépasse 2.</li>
<li>au bout de 1000 boucles la valeurs n&#8217;a toujours pas dépassé 2. Je renvoie 0</li>
</ul>
</li>
</ul>


<p>C&#8217;est le code de la fonction <code>iterate</code>. le php ne connaît pas les complexes(c&#8217;est natif en python..) donc le chiffre z est divisé en 2 <code>zr</code> la partie réelle et <code>zi</code> la partie imaginaire.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">iterate</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$cr</span> <span class="o">=</span> <span class="nv">$y</span><span class="o">-</span><span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$ci</span> <span class="o">=</span> <span class="nv">$x</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$zi</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$zr</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$zr2</span> <span class="o">=</span> <span class="nv">$zr</span> <span class="o">*</span> <span class="nv">$zr</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$zi2</span> <span class="o">=</span> <span class="nv">$zi</span> <span class="o">*</span> <span class="nv">$zi</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// Calul de la nouvelle valeur de z</span>
</span><span class='line'>        <span class="k">list</span><span class="p">(</span><span class="nv">$zr</span><span class="p">,</span> <span class="nv">$zi</span><span class="p">)</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="nv">$zr2</span> <span class="o">-</span> <span class="nv">$zi2</span> <span class="o">+</span> <span class="nv">$cr</span><span class="p">,</span>
</span><span class='line'>            <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="nv">$zr</span> <span class="o">*</span> <span class="nv">$zi</span><span class="p">)</span> <span class="o">+</span> <span class="nv">$ci</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>        <span class="c1">// Si le module est supérieur à 2</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$zi2</span> <span class="o">+</span> <span class="nv">$zr2</span> <span class="o">&gt;</span> <span class="nx">BAILOUT</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// si cela fait la millieme boucle.</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">&gt;</span> <span class="nx">MAX_ITERATIONS</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si on compte le nombre d&#8217;étapes pour dépasser 2 on obtient le schéma suivant.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">Mandelbrot</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">19</span><span class="p">;</span> <span class="nv">$x</span> <span class="o">&lt;</span> <span class="mi">19</span><span class="p">;</span> <span class="nv">$x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$y</span> <span class="o">=</span> <span class="o">-</span><span class="mi">19</span><span class="p">;</span> <span class="nv">$y</span> <span class="o">&lt;</span> <span class="mi">19</span><span class="p">;</span> <span class="nv">$y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="nv">$out</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">iterate</span><span class="p">(</span><span class="nv">$x</span><span class="o">/</span><span class="mf">20.0</span><span class="p">,</span><span class="nv">$y</span><span class="o">/</span><span class="mf">20.0</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="k">echo</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="k">echo</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="mi">41</span><span class="o">+</span><span class="nv">$out</span><span class="o">%</span><span class="mi">16</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">--------------.......///</span><span class="mi">1241410</span><span class="o">/....--</span>
</span><span class='line'><span class="o">-------------.......///</span><span class="mf">023.2520</span><span class="c1">//....-</span>
</span><span class='line'><span class="o">------------.......///</span><span class="mo">053</span><span class="p">)</span><span class="mi">1</span> <span class="p">,</span><span class="o">*</span><span class="mi">1</span><span class="c1">///....</span>
</span><span class='line'><span class="o">-----------.......//</span><span class="mo">0012</span><span class="mi">8</span>    <span class="p">,</span><span class="mi">20</span><span class="c1">////..</span>
</span><span class='line'><span class="o">----------......//</span><span class="mo">0001130</span>    <span class="p">,</span><span class="mi">2100</span><span class="c1">///.</span>
</span><span class='line'><span class="o">--------......//</span><span class="mo">01222234</span><span class="mi">8</span>    <span class="mi">7432000</span><span class="p">,</span><span class="o">/</span>
</span><span class='line'><span class="o">-------.....///</span><span class="mo">017</span><span class="o">+</span><span class="mf">644.</span><span class="o">*</span><span class="mi">1865</span><span class="o">+</span><span class="mi">1</span><span class="o">/</span><span class="mi">73222</span><span class="p">)</span><span class="mi">1</span>
</span><span class='line'><span class="o">------....////</span><span class="mo">00164</span> <span class="o">*</span><span class="mi">4</span>          <span class="o">.</span><span class="mi">68</span><span class="p">)</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'><span class="o">-----..//////</span><span class="mo">00024</span><span class="o">-</span>              <span class="mi">6</span>  <span class="mi">23</span>
</span><span class='line'><span class="o">---..///////</span><span class="mo">0002</span><span class="mi">868</span>                 <span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="o">-../</span><span class="mo">000</span><span class="c1">///00011/23                 ,61</span>
</span><span class='line'><span class="o">.//</span><span class="mf">1611111111125.</span>                   <span class="o">+</span><span class="mi">3</span>
</span><span class='line'><span class="c1">//01)3326422224,                     8</span>
</span><span class='line'><span class="c1">//014*.67-753352                     )</span>
</span><span class='line'><span class="c1">//113) 2) 73757                      8</span>
</span><span class='line'><span class="o">/</span><span class="mo">0125</span><span class="p">,</span>       <span class="p">)</span><span class="o">*</span>                      <span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="o">+</span><span class="mi">34</span><span class="o">-</span>         <span class="mi">0</span>                      <span class="mi">6</span>
</span><span class='line'><span class="mi">26780</span>         <span class="o">+</span>                      <span class="mi">2</span>
</span><span class='line'><span class="mi">48</span><span class="o">/</span> <span class="mi">6</span>         <span class="p">)</span>                     <span class="mi">41</span>
</span><span class='line'>                                   <span class="mi">621</span>
</span><span class='line'><span class="mi">48</span><span class="o">/</span> <span class="mi">6</span>         <span class="p">)</span>                     <span class="mi">41</span>
</span><span class='line'><span class="mi">26780</span>         <span class="o">+</span>                      <span class="mi">2</span>
</span><span class='line'><span class="mi">1</span><span class="o">+</span><span class="mi">34</span><span class="o">-</span>         <span class="mi">0</span>                      <span class="mi">6</span>
</span><span class='line'><span class="o">/</span><span class="mo">0125</span><span class="p">,</span>       <span class="p">)</span><span class="o">*</span>                      <span class="p">)</span>
</span><span class='line'><span class="c1">//113) 2) 73757                      8</span>
</span><span class='line'><span class="c1">//014*.67-753352                     )</span>
</span><span class='line'><span class="c1">//01)3326422224,                     8</span>
</span><span class='line'><span class="o">.//</span><span class="mf">1611111111125.</span>                   <span class="o">+</span><span class="mi">3</span>
</span><span class='line'><span class="o">-../</span><span class="mo">000</span><span class="c1">///00011/23                 ,61</span>
</span><span class='line'><span class="o">---..///////</span><span class="mo">0002</span><span class="mi">868</span>                 <span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="o">-----..//////</span><span class="mo">00024</span><span class="o">-</span>              <span class="mi">6</span>  <span class="mi">23</span>
</span><span class='line'><span class="o">------....////</span><span class="mo">00164</span> <span class="o">*</span><span class="mi">4</span>          <span class="o">.</span><span class="mi">68</span><span class="p">)</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'><span class="o">-------.....///</span><span class="mo">017</span><span class="o">+</span><span class="mf">644.</span><span class="o">*</span><span class="mi">1865</span><span class="o">+</span><span class="mi">1</span><span class="o">/</span><span class="mi">73222</span><span class="p">)</span><span class="mi">1</span>
</span><span class='line'><span class="o">--------......//</span><span class="mo">01222234</span><span class="mi">8</span>    <span class="mi">7432000</span><span class="p">,</span><span class="o">/</span>
</span><span class='line'><span class="o">----------......//</span><span class="mo">0001130</span>    <span class="p">,</span><span class="mi">2100</span><span class="c1">///.</span>
</span><span class='line'><span class="o">-----------.......//</span><span class="mo">0012</span><span class="mi">8</span>    <span class="p">,</span><span class="mi">20</span><span class="c1">////..</span>
</span><span class='line'><span class="o">------------.......///</span><span class="mo">053</span><span class="p">)</span><span class="mi">1</span> <span class="p">,</span><span class="o">*</span><span class="mi">1</span><span class="c1">///....</span>
</span><span class='line'><span class="o">-------------.......///</span><span class="mf">023.2520</span><span class="c1">//....-</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est ce qui est assez amusant dans les fractales, les formules sont très simples. Mais le résultat est très impressionnant.</p>

<h2>Des liens</h2>

<ul>
<li>article <a href="https://en.wikipedia.org/wiki/Mandelbrot_set">wikipédia</a></li>
<li>les videos hypnotiques de <a href="https://en.wikipedia.org/wiki/Electric_Sheep">electric sheep</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Listes chainées : implémentation]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/10/liste-chainees-implementation/"/>
    <updated>2015-10-10T21:12:47+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/10/liste-chainees-implementation</id>
    <content type="html"><![CDATA[<p>Dans la <a href="http://mcamuzat.github.io/blog/2015/10/03/spl-surcharge-magique/">partie 1</a> nous avons appris à surcharger le <code>count</code> ainsi que les différentes méthodes de <code>ArrayAccess</code>. Pour faire un exemple un peu plus concret, je vais impémenter les listes chainées. Les listes doublement chainée sont <strong>déja</strong> implémentées dans la SPL via <a href="http://php.net/manual/fr/class.spldoublylinkedlist.php">SplDoublyLinkedList</a>.</p>

<p>Le liste chainée (linked list en anglais) est une structure de donnée. Nous allons essayer d&#8217;implémenter une liste chainée en PHP. Cela nous permettra de comprendre l&#8217;idée. Nous allons implémenter l&#8217;interface <code>Countable</code>. (J&#8217;implémente <code>ArrayAccess</code> et <code>Iterator</code> dans le post suivant).</p>

<p>Une liste chainée est constituée de <code>Node</code> ou noeud/chainon.</p>

<p>Un node a deux propriétés.</p>

<ul>
<li>Sa valeurs</li>
<li>Le liens vers le noeud suivant</li>
</ul>


<!--more-->


<p>En php</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Node</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$next</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nx">Node</span> <span class="nv">$next</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">next</span> <span class="o">=</span> <span class="nv">$next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">setData</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getData</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getNext</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">setNext</span><span class="p">(</span><span class="nx">Node</span> <span class="nv">$next</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">next</span> <span class="o">=</span> <span class="nv">$next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>pour créer une liste rien de bien compliqué.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$noeud1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'><span class="nv">$noeud2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="mi">99</span><span class="p">);</span>
</span><span class='line'><span class="nv">$noeud3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="mi">37</span><span class="p">);</span>
</span><span class='line'><span class="nv">$noeud1</span><span class="o">-&gt;</span><span class="na">setNext</span><span class="p">(</span><span class="nv">$noeud2</span><span class="p">);</span>
</span><span class='line'><span class="nv">$neoud2</span><span class="o">-&gt;</span><span class="na">setNext</span><span class="p">(</span><span class="nv">$noeud3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Résultat le dessin suivant (wikipedia)</p>

<p><img class="center" src="http://mcamuzat.github.io/images/linked-list.png" width="408" height="41" title="'Une liste chainée' 'Une liste chainée" ></p>

<h2>Implementation de la liste</h2>

<p>Nous allons créer des méthodes pour ajouter simplement nos chainons.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">LinkedList</span> <span class="k">implements</span> <span class="nx">Countable</span><span class="p">,</span> <span class="nx">ArrayAccess</span><span class="p">,</span> <span class="nx">Iterator</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$first</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$last</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="c1">// pour l&#39;iterateur</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$current</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$position</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Permet d&#39;afficher le contenu de la chaine. </span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">printMe</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;-</span><span class="si">{</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">()</span><span class="si">}</span><span class="s2">-&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous allons traquer le premier élément de la chaine (<code>$this-&gt;first</code>) et le dernier (<code>$this-&gt;last</code>)</p>

<h3>Ajout d&#8217;un chainon à la fin</h3>

<p>C&#8217;est assez simple.</p>

<ul>
<li>Créer un nouveau noeud</li>
<li>Récupérer le dernier chainon</li>
<li>Faire pointer la propriété <code>next</code> du dernier chainon vers notre nouveau noeud.</li>
<li>Notre nouveau noeud devient le dernier noeud.</li>
<li>On augmente la taille de 1</li>
</ul>


<p>en code cela donne</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">insertAtEnd</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// nouveau noeud</span>
</span><span class='line'>    <span class="nv">$node</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// si la liste est vide</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span> <span class="o">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span> <span class="o">=</span> <span class="nv">$node</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// on ajoute le liens vers le suivant</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span> <span class="o">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span><span class="o">-&gt;</span><span class="na">setNext</span><span class="p">(</span><span class="nv">$node</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="c1">// notre nouveau noeud devient le dernier</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span> <span class="o">=</span> <span class="nv">$node</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// on augmente la taille.</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="nv">$list</span><span class="o">-&gt;</span><span class="na">insertAtEnd</span><span class="p">(</span><span class="s2">&quot;ha&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">insertAtEnd</span><span class="p">(</span><span class="s2">&quot;hi&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$list</span><span class="o">-&gt;</span><span class="na">printMe</span><span class="p">()</span> <span class="c1">// -ha-hi</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Ajout d&#8217;un chainon au début</h3>

<p>C&#8217;est un peu près la même idée.</p>

<ul>
<li>Créer un nouveau noeud</li>
<li>Récupérer le premier noeud.</li>
<li>Notre noeud pointe vers le premier noeud.</li>
<li>On pointe le <code>first</code> vers notre nouveau noeud.</li>
</ul>


<p>En code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">insertFirstValue</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="nv">$node</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">);</span>
</span><span class='line'>   <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>   <span class="c1">// si la liste est vide</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span> <span class="o">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span> <span class="o">=</span> <span class="nv">$node</span><span class="p">;</span>
</span><span class='line'>   <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="nv">$list</span><span class="o">-&gt;</span><span class="na">insertAtEnd</span><span class="p">(</span><span class="s2">&quot;first&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">insertFirstValue</span><span class="p">(</span><span class="s2">&quot;second&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$list</span><span class="o">-&gt;</span><span class="na">printMe</span><span class="p">();</span> <span class="c1">// -second-first</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Suppression d&#8217;un chainon au début.</h3>

<p>Il faut faire dans l&#8217;autre sens.</p>

<p>En code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">removeFirstValue</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s1">&#39;La liste est vide&#39;</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'>   <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>   <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">();</span>
</span><span class='line'>   <span class="c1">// si la liste est vide , reinitialiser le last</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span> <span class="o">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="nv">$list</span><span class="o">-&gt;</span><span class="na">insertAtEnd</span><span class="p">(</span><span class="s2">&quot;first&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">insertAtEnd</span><span class="p">(</span><span class="s2">&quot;second&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$list</span><span class="o">-&gt;</span><span class="na">printMe</span><span class="p">();</span> <span class="c1">// -first-second</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$list</span><span class="o">-&gt;</span><span class="na">removeFirstValue</span><span class="p">());</span>
</span><span class='line'><span class="nv">$list</span><span class="o">-&gt;</span><span class="na">printMe</span><span class="p">();</span> <span class="c1">//</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Suppression d&#8217;un chainon à la fin</h3>

<p>Comme le dernier chainon ne connait pas son prédécesseur. C&#8217;est beaucoup plus compliqué. On est obligé de repartir depuis le début. Donc pour supprimer le dernier chainon d&#8217;un liste d&#8217;un million de chainon, il nous faut parcourir les 1 millions de chainons.</p>

<p>En Code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">RemoveLastValue</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// cas particulier la liste est vide</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s1">&#39;la Liste est vide&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// Il n&#39;y a qu&#39;un noeud.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// On parcours tout les chainons jusqu&#39;à l&#39;avant-dernier</span>
</span><span class='line'>    <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$previous</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>         <span class="nv">$previous</span> <span class="o">=</span> <span class="nv">$current</span><span class="p">;</span>
</span><span class='line'>         <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// on supprime le liens</span>
</span><span class='line'>    <span class="nv">$previous</span><span class="o">-&gt;</span><span class="na">setNext</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// On déplace le last</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span> <span class="o">=</span> <span class="nv">$previous</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// on décremente</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Ajouter une valeurs au milieu de la chaine</h3>

<p>Même punition que pour supprimer un lien à la fin de la liste. Si on a une liste de 1 Millions de chainons. Pour insérer à la position 99999, nous sommes obligés de parcourir les 99999 chainons. Et pour la suppression ce sera pareil..</p>

<p><img class="center" src="http://mcamuzat.github.io/images/LinkedLists-addingnode.png" width="474" height="116" title="un chainon" alt="Ajout d"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">insertAtPosition</span><span class="p">(</span><span class="nv">$position</span><span class="p">,</span> <span class="nv">$data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">insertFirstValue</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span> <span class="o">&gt;=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">insertAtEnd</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$position</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$node</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">());</span>
</span><span class='line'>    <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">setNext</span><span class="p">(</span><span class="nv">$node</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Implementer le <code>count</code></h2>

<p>Si vous avez lu le <a href="">post précédent</a> il suffit d&#8217;ajouter une méthode <code>count</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">count</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Des applications avec la Liste chainée.</h2>

<p>Si on renomme la méthode <code>insertAtEnd($data)</code> par <code>enqueue($job)</code> et la méthode <code>removeFirstValue()</code> par <code>dequeue()</code></p>

<p>On obtient une file d&#8217;attente ou une <code>Queue</code> en anglais.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$fileAttente</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="nv">$fileAttente</span><span class="o">-&gt;</span><span class="na">enqueue</span><span class="p">(</span><span class="s2">&quot;job1&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">enqueue</span><span class="p">(</span><span class="s2">&quot;job2&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$fileAttente</span><span class="o">-&gt;</span><span class="na">dequeue</span><span class="p">());</span> <span class="c1">// job1</span>
</span><span class='line'><span class="c1">// je rajoute un travail </span>
</span><span class='line'><span class="nv">$fileAttente</span><span class="o">-&gt;</span><span class="na">enqueue</span><span class="p">(</span><span class="s2">&quot;OtherJob&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$fileAttente</span><span class="o">-&gt;</span><span class="na">dequeue</span><span class="p">());</span> <span class="c1">// job2</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$fileAttente</span><span class="o">-&gt;</span><span class="na">dequeue</span><span class="p">());</span> <span class="c1">// OtherJob</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si on renomme la méthode <code>insertFirstValue</code> en <code>push</code> et la méthode <code>removeFirstValue()</code> par <code>pop()</code> On obtient une Stack.</p>

<p>Voici le code pour inverser un array sans utiliser <code>array_reverse</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$list1</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nv">$stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$list</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">push</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$list2</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nx">stack</span><span class="o">-&gt;</span><span class="na">count</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$list2</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$list2</span><span class="p">)</span> <span class="c1">//[5,4,3,2,1];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Un ancien livre est titré</p>

<blockquote><blockquote><p>Algorithms + Data Structures = Programs</p></blockquote></blockquote>

<p>On a tendance en language php à penser tout en Object et en Array. Parfois la façon dont on représente nos données est importante.</p>

<ul>
<li>Certaines opérations comme ajouter un lien au début/fin de la chaine sont très peu couteuses (une étape) on parle de complexité O(1);</li>
<li>supprimer un lien à la fin de la liste par contre prend N étapes On dit que la complexité est de O(N)</li>
</ul>


<p>Pour résoudre ce problème on a inventé les listes doublements chainées. Voir le dessin (Wikipédia);</p>

<p><img class="center" src="http://mcamuzat.github.io/images/Doubly-linked-list.png" width="610" height="41" title="doubles listes chainée" alt="double liste chainée"></p>

<p>Cela prend beaucoup plus de mémoire, mais on simplifie beaucoup l&#8217;ajout et la suppression au début et à la fin de liste. par contre la recherche dans une liste chainée est toujours aussi longue.</p>

<p>Mon post sur les <a href="blog/2015/08/29/stacks-structures-meconnues/">Stack</a>.</p>

<p>Dans le post suivant on implémentera les méthodes de <code>ArrayAccess</code> et <code>Iterator</code>, ce qui nous permettra de faire des <code>foreach</code> ou <code>isset($list[2])</code> etc ..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tig : Status]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/04/tig-status/"/>
    <updated>2015-10-04T21:59:59+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/04/tig-status</id>
    <content type="html"><![CDATA[<p>Tig est un client git en ligne de commande</p>

<p>Il n&#8217;est pas compliqué à installer :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install tig
</span></code></pre></td></tr></table></div></figure>


<p>Néanmoins c&#8217;est la version 1.2 dans les dépôts au moment ou j&#8217;écris ces lignes.</p>

<p>On peut installer la version 2 qui a plus de fonctionnalités et de raccourcis.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/jonas/tig
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>attention vous aurez probablement besoin d&#8217;avoir installer la librairies <code>libncursesw</code> pour l&#8217;utf-8</p>

<h2>La vue principale</h2>

<p>Elle permet de voir l&#8217;historique du dépôt.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/tig-defaut.png" width="600" height="398" title="la vue par défault" alt="la vue par défaut"></p>

<!--more-->


<p>Appuyer sur <code>&lt;Enter&gt;</code> pour voir la différence. (Dans la version 2, si le terminal fait plus de 160 caractères l&#8217;écran se splitte en 2 verticalement)</p>

<p><img class="center" src="http://mcamuzat.github.io/images/tig-diff.png" width="600" height="399" title="quand on appuie sur la touche entrée, on affiche la différence" alt="l"></p>

<p>Screenshot de la version 2 avec les deux colonnes.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/tig_view_v2.png" width="600" height="366" title="dans la version 2, si le terminal" alt="Screenshot de la version 2 avec les deux colonnes."></p>

<p>Il va falloir apprendre les touches Vi car on se sert beaucoup de <code>j</code> et <code>k</code> (un rappel <code>j</code> descend vers le bas et <code>k</code> va vers le haut)</p>

<p>De cette écran voici les différents modes (je ne les cites pas tous)</p>

<ul>
<li><code>S</code> ou <code>s</code> pour voir le stage (équivalent de git status)</li>
<li><code>t</code> tree view affichage en explorateur de fichier</li>
<li><code>r</code> permet de voir les différentes branches (<code>H</code> dans la version1</li>
<li><code>l</code> voir les logs</li>
</ul>


<p>Je vais surtout m&#8217;intéresser à la status view.</p>

<h2>La vue Status</h2>

<p>Les touches à connaitre.</p>

<ul>
<li><code>u</code> sur un noms de fichiers pour <strong>u</strong>se cela fait l&#8217;équivalent de <code>git add &lt;nom du fichier&gt;</code></li>
</ul>


<p>Si vous appuyer sur <code>u</code> sur les lignes <code>Changes to be commited</code>, <code>Changed but not updated</code>, <code>Untracked files</code> vous ajoutez tous les fichiers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Changes to be committed:
</span><span class='line'>M   fichier1
</span><span class='line'>Changed but not updatedy://&lt;---<span class="o">(</span>*curseur*<span class="o">)</span>
</span><span class='line'>M   fichier2
</span><span class='line'>M   fichier3
</span><span class='line'>M   fichier4
</span><span class='line'>M   fichier5
</span><span class='line'>M   fichier6
</span><span class='line'>M   fichier7
</span><span class='line'>Untracked files:
</span><span class='line'>?   nouveau fichier
</span></code></pre></td></tr></table></div></figure>


<p>Cela devient</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Changes to be committed:
</span><span class='line'>M   fichier1
</span><span class='line'>M   fichier2
</span><span class='line'>M   fichier3
</span><span class='line'>M   fichier4
</span><span class='line'>M   fichier5
</span><span class='line'>M   fichier6
</span><span class='line'>M   fichier7
</span><span class='line'>Changed but not updatedy:
</span><span class='line'><span class="o">(</span>no files<span class="o">)</span>
</span><span class='line'>Untracked files:
</span><span class='line'>?   nouveau fichier
</span></code></pre></td></tr></table></div></figure>


<p>Enfin on peut aussi prendre chunk par chunck (l&#8217;équivalent de <code>git add -p</code>)</p>

<p><img class="center" src="http://mcamuzat.github.io/images/tig-revert.png" width="600" height="398" title="la vue par défaut" alt="la vue par défaut"></p>

<p>Il suffit d&#8217;appuyer sur <code>Enter</code> puis de se déplacer dans le commit avec <code>j</code> et <code>k</code> et appuyer sur <code>u</code> pour ajouter ce chunk. Les chunks pour faire simple sont les textes séparés par des <code>@@ ... @@</code>. On se déplace de chunk en chunk grâce à la touche <code>@</code>.</p>

<p>Pour reverter le fichier, On utilise la touche <code>!</code>.</p>

<p>Cela marche aussi sur un chunk. On peut donc reverter partiellement un fichier.</p>

<p>Il est possible d&#8217;ajouter ligne par ligne dans un commit grâce à la touche <code>1</code>.</p>

<p>Pour faire le git commit il suffit d&#8217;appuyer sur <code>C</code> comme <strong>C</strong>ommit.</p>

<p>Enfin la touche <code>e</code> comme <strong>e</strong>dit ouvre le fichier dans l&#8217;éditeur par défaut.</p>

<h2>Le fichier <code>.tigrc</code></h2>

<p>Le fichier <code>.tigrc</code> permet de personnaliser l&#8217;affichage et d&#8217;ajouter des raccourcis claviers.</p>

<p>Voici quelques exemples de ma config.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Delete files in status view (useful for untracked files)</span>
</span><span class='line'><span class="nb">bind </span>status D !@?rm %<span class="o">(</span>file<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Amend last commit with A</span>
</span><span class='line'><span class="nb">bind </span>status A !git commit --amend
</span><span class='line'>
</span><span class='line'><span class="c"># Create and checkout a new branch; specify custom prompt</span>
</span><span class='line'><span class="nb">bind </span>main B !git checkout -b <span class="s2">&quot;%(prompt Enter new branch name: )&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Les raccourcis claviers que j&#8217;ai rajouté</p>

<ul>
<li>Dans la vue status la touche <code>D</code> efface le fichier</li>
<li>Dans la vue status la touche <code>A</code> fait un <code>git commit --amend</code></li>
<li>Dans la vue principale la touche <code>B</code> permet de créer une branche.</li>
</ul>


<h2>Résumé de touches</h2>

<ul>
<li><code>s</code> ou <code>S</code> voir la vue status</li>
<li><code>u</code> ajouter le commit/chunk</li>
<li><code>!</code> revert</li>
<li><code>1</code> ajoute une lignes au commit</li>
<li><code>@</code> aller au chunck/diff suivant</li>
<li><code>D</code> supprimer le fichier (<em>raccourcis perso</em>)</li>
<li><code>A</code> git amend</li>
<li><code>e</code> ouvre dans l&#8217;éditeur par défaut</li>
</ul>


<h2>Des liens</h2>

<ul>
<li><a href="http://jonas.nitro.dk/tig/">le site officiel</a></li>
<li>la <a href="https://github.com/pmiossec/tig-cheat-sheet">cheat-sheet</a> avec les raccourcis claviers (<em>indispensable</em>)</li>
</ul>


<h2>Conclusion</h2>

<p>Je vais revenir sur les autres vues bientôt.</p>

<p>Merci de m&#8217;avoir lu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SPL surcharge magique]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/03/spl-surcharge-magique/"/>
    <updated>2015-10-03T17:17:33+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/03/spl-surcharge-magique</id>
    <content type="html"><![CDATA[<p>Nous allons repartir sur la <a href="http://php.net/manual/fr/book.spl.php">SPL</a>.</p>

<p>Je vais parler des différentes méthodes amusantes à surcharger.</p>

<h2>Count</h2>

<p>Soit la classe suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">BadCounter</span> <span class="k">implements</span> <span class="nx">countable</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">count</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$counter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BadCounter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$counter</span><span class="p">));</span><span class="c1">// int(42)</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>On peux surcharger la méthode <code>count</code>. C&#8217;est d&#8217;ailleurs le cas dans le cas du <a href="http://doctrine-orm.readthedocs.org/en/latest/tutorials/pagination.html">Paginator</a> de doctrine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>
</span><span class='line'><span class="nv">$dql</span> <span class="o">=</span> <span class="s2">&quot;SELECT p, c FROM BlogPost p JOIN p.comments c&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$query</span> <span class="o">=</span> <span class="nv">$entityManager</span><span class="o">-&gt;</span><span class="na">createQuery</span><span class="p">(</span><span class="nv">$dql</span><span class="p">)</span>
</span><span class='line'>                       <span class="o">-&gt;</span><span class="na">setFirstResult</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                       <span class="o">-&gt;</span><span class="na">setMaxResults</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$paginator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Paginator</span><span class="p">(</span><span class="nv">$query</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">count</span><span class="p">(</span><span class="nv">$paginator</span><span class="p">)</span> <span class="c1">// nombre de lignes dans la base</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Les ArrayObjects</h2>

<p>On peut aussi changer toutes les méthodes pour un tableau.</p>

<ul>
<li><code>isset(counter['valeur'])</code></li>
<li><code>unset(counter['valeur'])</code></li>
<li><code>counter['valeur'] = 3</code></li>
<li><code>counter[] = 3</code></li>
<li><code>counter['valeur']</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">GeekCounter</span> <span class="k">implements</span> <span class="nx">Countable</span><span class="p">,</span> <span class="nx">ArrayAccess</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">count</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetSet</span><span class="p">(</span><span class="nv">$offset</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">is_null</span><span class="p">(</span><span class="nv">$offset</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;on ajoute </span><span class="si">$value</span><span class="s2"> </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;on change la clé </span><span class="si">$offset</span><span class="s2"> par </span><span class="si">$value</span><span class="s2"> </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetExists</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;on teste la clé  </span><span class="si">$offset</span><span class="s2"> </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetUnset</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;on unset la clé </span><span class="si">$offset</span><span class="s2"> </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetGet</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;on me demande la clé </span><span class="si">$offset</span><span class="s2"> </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$counter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GeekCounter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$counter</span><span class="p">[</span><span class="s2">&quot;IdontCare&quot;</span><span class="p">]));</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$counter</span><span class="p">[</span><span class="s2">&quot;IdontCare&quot;</span><span class="p">]);</span>
</span><span class='line'><span class="nb">unset</span><span class="p">(</span><span class="nv">$counter</span><span class="p">[</span><span class="s2">&quot;IdontCare&quot;</span><span class="p">]);</span>
</span><span class='line'><span class="nv">$counter</span><span class="p">[]</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="nv">$counter</span><span class="p">[</span><span class="s2">&quot;IdontCare&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">on</span> <span class="nx">teste</span> <span class="nx">la</span> <span class="nx">clé</span>  <span class="nx">IdontCare</span>
</span><span class='line'><span class="nx">bool</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'><span class="nx">on</span> <span class="nx">me</span> <span class="nx">demande</span> <span class="nx">la</span> <span class="nx">clé</span> <span class="nx">IdontCare</span>
</span><span class='line'><span class="nx">int</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span><span class='line'><span class="nx">on</span> <span class="nb">unset</span> <span class="nx">la</span> <span class="nx">clé</span> <span class="nx">IdontCare</span>
</span><span class='line'><span class="nx">on</span> <span class="nx">ajoute</span> <span class="mi">3</span>
</span><span class='line'><span class="nx">on</span> <span class="nx">change</span> <span class="nx">la</span> <span class="nx">clé</span> <span class="nx">IdontCare</span> <span class="nx">par</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>On trouve la même idée dans les collections de doctrine.(l&#8217;interface <code>Collection</code> n&#8217;est qu&#8217;une surcharge);</p>

<p>Si on ne souhaite pas tout implémenter il suffit de surcharger la Classe <code>ArrayObject</code></p>

<p>Par exemple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">ZooDeBeauval</span> <span class="k">extends</span> <span class="nx">ArrayObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetSet</span><span class="p">(</span><span class="nv">$offset</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$value</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;Panda&quot;</span><span class="p">,</span> <span class="s2">&quot;Koala&quot;</span><span class="p">,</span> <span class="s2">&quot;Otarie&quot;</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;non cet animal </span><span class="si">$value</span><span class="s2"> n&#39;est pas autorisé&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">parent</span><span class="o">::</span><span class="na">offsetSet</span><span class="p">(</span><span class="nv">$offset</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$zoo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ZooParcDeBeauval</span><span class="p">();</span>
</span><span class='line'><span class="nv">$zoo</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39;Panda&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$zoo</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39;Koala&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;liste :  &quot;</span><span class="o">.</span><span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">,</span> <span class="nb">iterator_to_array</span><span class="p">(</span><span class="nv">$zoo</span><span class="p">))</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="nv">$zoo</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39;Lama&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">liste</span> <span class="o">:</span>  <span class="nx">Panda</span><span class="p">,</span> <span class="nx">Koala</span>
</span><span class='line'><span class="nx">non</span> <span class="nx">cet</span> <span class="nx">animal</span> <span class="nx">Lama</span> <span class="nx">n</span><span class="err">&#39;</span><span class="nx">est</span> <span class="nx">pas</span> <span class="nx">autorisé</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour les <code>foreach</code> j&#8217;ai déjà parlé des iterators et des <a href="blog/2015/09/06/php-yield-les-generateurs/">générateurs</a>.</p>

<h2>Conclusion</h2>

<p>Maintenant les interfaces <code>ArrayAccess</code> et <code>Countable</code> n&#8217;ont plus de secrets pour vous. Nous verrons dans un prochain Post les listes chainées. L&#8217;avantage de ces méthode est que l&#8217;on obtient une structure qui se comporte comme un <code>array</code> mais avec une occupation mémoire moindre.</p>

<p>Dans un prochain post, je vais parler des listes chainées et des différentes structure de la SPL (j&#8217;ai déja parlé de la <a href="blog/2015/08/29/stacks-structures-meconnues/">SplStack</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Des commandes au top]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/09/27/des-commandes-au-top/"/>
    <updated>2015-09-27T16:04:40+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/09/27/des-commandes-au-top</id>
    <content type="html"><![CDATA[<p>J&#8217;utilise souvent le programme htop. mais il y en a d&#8217;autre.</p>

<h2>atop</h2>

<p>Plus austère. Beaucoup d&#8217;information sur toutes les ressources. C&#8217;est plus un outils d&#8217;audit. Le logicel donne toutes informations possibles. processeurs, disques, carte réseau. En pratique il peut même être lancer au démarrage. En pratique on parle de <code>sar</code> (<strong>S</strong>ystem <strong>A</strong>ctivity <strong>R</strong>eport). Il permet de surveiller la tailles des processus avec la colonne <code>VGROW</code> (<em>Virtual Memory Grow</em>) et <code>RGROW</code>(Resident memory Grow)
<img class="center" src="http://mcamuzat.github.io/images/atop.png" width="600" height="381" title="atop" alt="atop"></p>

<p>voir <a href="https://en.wikipedia.org/wiki/Sar_%28Unix%29">sar</a></p>

<h2>vtop</h2>

<p>Un clone en Nodejs. voir le screenshot c&#8217;est vraiment très joli</p>

<p><img class="center" src="http://mcamuzat.github.io/images/vtop.png" width="600" height="383" title="vtop" alt="vtop"></p>

<p>installation via npm</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo npm install -g vtop
</span></code></pre></td></tr></table></div></figure>


<p>dépot <a href="https://github.com/MrRio/vtop">Github</a></p>

<!--more-->


<h2>Htop</h2>

<h3>Quelques options</h3>

<h3>filtrer par utilisateur</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>htop -umarc
</span></code></pre></td></tr></table></div></figure>


<p>ou <code>u</code> dans Htop</p>

<h4>Sélectionner un process</h4>

<p>Utilisez la barre d&#8217;espace pour sélectionner un process. Cela permet de le suivre.</p>

<ul>
<li><code>F7</code> ou  <code>F8</code> pour augmenter la priorité du process</li>
<li><code>F9</code> ou <code>k</code> pour killer un process</li>
<li><code>F5</code> affichage en arbre.</li>
<li><code>a</code> pour assigner le process à un CPU.</li>
<li><code>U</code> pour désélectionnér tous les process</li>
</ul>


<h4>Personnalisez l&#8217;affichage</h4>

<p>La touche magique ici est <code>&lt;F2&gt;</code>. Vous pouvez personnaliser les deux colonnes avec les raccourcis claviers suivants. La colonne toutes à droite donne les widgets disponibles</p>

<ul>
<li><code>&lt;F5&gt;</code> ajouter le widget à la colonne de droite.</li>
<li><code>&lt;F6&gt;</code> ajouter le widget à la colonne de gauche.</li>
</ul>


<p>Sur une colonne vous pouvez sélectionniez le type d&#8217;affiche (texte simple, histogramme, etc..) via la touche <code>&lt;F4&gt;</code></p>

<p>Voir le screenshot (<code>Text</code>, <code>Graph</code>,<code>Led</code>, <code>Bar</code>)
<img class="center" src="http://mcamuzat.github.io/images/typeaffichage.png" width="600" height="133" title="affichage" alt="les quatre types d"></p>

<h3>Les codes couleurs</h3>

<p>La touche <code>h</code> permet d&#8217;obtenir de l&#8217;aide, les raccourcis claviers et la significations des couleurs.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/codecouleur.png" width="600" height="104" title="les différentes couleurs et leurs significations" alt="les différentes couleurs et leurs significations"></p>

<h2>En conclusion</h2>

<p>J&#8217;espère que vous appris un nouveau raccourci sur htop.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guzzle Asynchrone avec les promises]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/09/21/guzzle-asynchrone-avec-les-promises/"/>
    <updated>2015-09-21T21:39:06+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/09/21/guzzle-asynchrone-avec-les-promises</id>
    <content type="html"><![CDATA[<p>Nous continuons sur les promises et le yield.</p>

<ul>
<li><a href="http://mcamuzat.github.io/blog/2015/09/05/les-promises-et-php-via-react/">partie 1 les promises</a></li>
<li><a href="http://mcamuzat.github.io/blog/2015/09/06/php-yield-les-generateurs/">partie 2 le Yield</a></li>
<li><a href="http://mcamuzat.github.io/blog/2015/09/13/yield-php-co-routine/">partie 3 les co-routines</a></li>
</ul>


<p>Je vais parler de <a href="https://github.com/guzzle">Guzzle</a> qui est un client HTTP. Nous allons voir la version 6 qui utilise Php5.5</p>

<h2>Promise et Guzzle.</h2>

<p><em>Guzzle</em> connait les promises et possède sa propre <a href="https://github.com/guzzle/promises">implémentation</a>.</p>

<p>la signature de la fonction est un peu près la même que <a href="https://github.com/reactphp/promise">react/promise</a>.</p>

<p>Attention <em>Guzzle</em> ne fait pas la différence entre le <em>Deferred</em> qui est un travail dont la réponse est encore inconnu et représenter par une <em>promise</em>. Dans <em>Guzzle</em> le travail et la réponse sont la même chose.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">GuzzleHttp\Promise\Promise</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
</span><span class='line'><span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>    <span class="c1">// $onFulfilled</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s1">&#39;Tout va bien.&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="c1">// $onRejected</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">(</span><span class="nv">$reason</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s1">&#39;On a un problème.&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">resolve</span><span class="p">(</span><span class="k">null</span><span class="p">);</span> <span class="c1">// &#39;Tout va bien.&#39;;</span>
</span><span class='line'><span class="c1">// Ou </span>
</span><span class='line'><span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">reject</span><span class="p">(</span><span class="k">null</span><span class="p">);</span> <span class="c1">// &#39;On a un problème.&#39;;</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p><em>Guzzle</em> est un client Web essayons un cas concret.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GuzzleHttp\Client</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$promise</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">requestAsync</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;http://httpbin.org/get&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$res</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;j&#39;ai recu un code </span><span class="si">$value</span><span class="s2">&quot;</span><span class="p">}</span> <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Notre requète n&#39;est pas encore partie. Il faut lancer manuellement l&#39;appel.</span>
</span><span class='line'><span class="nv">$client</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;avantage ici est que je décide quand je lance l&#8217;appel. Par exemple on peut lancer en parallèle les requêtes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://httpbin.org/&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Je crée toute mes requetes</span>
</span><span class='line'><span class="nv">$promises</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;image&#39;</span> <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;png&#39;</span>   <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/png&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;jpeg&#39;</span>  <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/jpeg&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;webp&#39;</span>  <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/webp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// je resouds tout en même temps</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$results</span> <span class="o">=</span> <span class="nx">Promise\unwrap</span><span class="p">(</span><span class="nv">$promises</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peux créer des pools. Si on souhaite limiter le nombre de requête en même temps.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://httpbin.org/&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$batch</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;image&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;/image&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;png&#39;</span>   <span class="o">=&gt;</span> <span class="s1">&#39;/image/png&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;jpeg&#39;</span>  <span class="o">=&gt;</span> <span class="s1">&#39;/image/jpeg&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;webp&#39;</span>  <span class="o">=&gt;</span> <span class="s1">&#39;/image/webp&#39;</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$requests</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$batch</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$batch</span> <span class="k">as</span> <span class="nv">$url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">yield</span> <span class="k">new</span> <span class="nx">Request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$pool</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Pool</span><span class="p">(</span><span class="nv">$client</span><span class="p">,</span> <span class="nv">$requests</span><span class="p">(</span><span class="nv">$batch</span><span class="p">),</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;fulfilled&#39;</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$response</span><span class="p">,</span> <span class="nv">$index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$index</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="err">&#39;</span><span class="nx">concurrency</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'><span class="nv">$promise</span> <span class="o">=</span> <span class="nv">$pool</span><span class="o">-&gt;</span><span class="na">promise</span><span class="p">();</span>
</span><span class='line'><span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>le résultat ici.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">int</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="nx">int</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="nx">int</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nx">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On reconnait aussi notre nouvel ami le <code>yield</code>.</p>

<h2>Le premier arrivé</h2>

<p>Nous allons utiliser l&#8217;instruction <code>any()</code> toutes les requêtes sont lancées en concurrences. C&#8217;est la première arrivée qui l&#8217;emporte.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://httpbin.org/&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// je crée toute mes requetes</span>
</span><span class='line'><span class="nv">$promises</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;image&#39;</span> <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;png&#39;</span>   <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/png&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;jpeg&#39;</span>  <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/jpeg&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;webp&#39;</span>  <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/webp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Promise\any</span><span class="p">(</span><span class="nv">$promises</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">){</span><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$value</span><span class="o">-&gt;</span><span class="na">getHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">));});</span>
</span><span class='line'><span class="nv">$result</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je veux juste les deux premières réponses <code>some(2, $promise)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://httpbin.org/&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// je crée toute mes requetes</span>
</span><span class='line'><span class="nv">$promises</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;image&#39;</span> <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;png&#39;</span>   <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/png&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;jpeg&#39;</span>  <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/jpeg&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;webp&#39;</span>  <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/webp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Promise\some</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nv">$promises</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$results</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span><span class="k">foreach</span> <span class="p">(</span><span class="nv">$results</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$value</span><span class="o">-&gt;</span><span class="na">getHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Yield + Promise == Coroutine promise</h2>

<p>Bon Nous allons complexifier encore un peu.</p>

<p>Soit le code suivant</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://httpbin.org/&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$promiseGenerator</span> <span class="o">=</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$client</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">yield</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">yield</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/png&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">yield</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/jpeg&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">yield</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/webp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="nv">$promise</span> <span class="o">=</span> <span class="nx">Promise\each_limit</span><span class="p">(</span><span class="nv">$promiseGenerator</span><span class="p">(),</span> <span class="mi">2</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">,</span> <span class="nv">$idx</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">$result</span><span class="p">)</span> <span class="p">{</span><span class="nv">$result</span><span class="p">[</span><span class="nv">$idx</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;});</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je mets à la suite toute les promises que je souhaite exécuter en ajoutant <code>yield</code> devant.</p>

<p>Je laisse Guzzle gérer avec un limitation de 2. des que le programme a une place de libre, il appelle le générateur pour avoir un nouvelle promise.</p>

<p>Mais il existe dans Guzzle des co-routines..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://httpbin.org/&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$myfunction</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$url</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$client</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Promise\coroutine</span><span class="p">(</span>
</span><span class='line'>        <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$client</span><span class="p">,</span> <span class="nv">$url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$value</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="nv">$url</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">\Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">yield</span> <span class="k">New</span> <span class="nx">RejectedPromise</span><span class="p">(</span><span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">());</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$images</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$promises</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Build an array of promises.</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$images</span> <span class="k">as</span> <span class="nv">$image</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$promises</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$myfunction</span><span class="p">(</span><span class="nv">$image</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$aggregate</span> <span class="o">=</span> <span class="nx">Promise\all</span><span class="p">(</span><span class="nv">$promises</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>    <span class="k">function</span><span class="p">(</span><span class="nv">$values</span><span class="p">)</span> <span class="p">{</span><span class="k">echo</span> <span class="s1">&#39;ok&#39;</span> <span class="p">;},</span> <span class="k">function</span><span class="p">(</span><span class="nv">$values</span><span class="p">){</span><span class="k">echo</span> <span class="s1">&#39;nope&#39;</span><span class="p">;});</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$aggregate</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le code est complètement asynchrone.</p>

<p>Il est intéressant de voir le code synchrone et non parallèle.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://httpbin.org/&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$getImages</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$url</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$client</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">\Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$images</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$promises</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Build an array of promises.</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$images</span> <span class="k">as</span> <span class="nv">$image</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$result</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$getImages</span><span class="p">(</span><span class="nv">$image</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>En gros, j&#8217;ai retiré le <code>async</code> et les <code>yields</code> mais les deux codes se ressemblent non ?</p>

<h2>Conclusion</h2>

<p>Les promises sont pratiques.</p>

<ul>
<li>elles sont chainables</li>
<li>elles sont asynchrones, annulables, rejetables</li>
<li>On peut faire des foreach dessus.</li>
<li>On peut les combiner.</li>
</ul>


<p>Ce n&#8217;est pas vraiment un hasard. Les promises sont des <strong>Monades</strong>. Il n&#8217;est pas simple d&#8217;expliquer les monades. Les monades viennent de la programmation fonctionnelle et c&#8217;est surtout <a href="https://www.haskell.org/">haskell</a> qui a popularisé cette structure. J&#8217;espère que je reviendrai dessus.</p>

<p><em>Guzzle</em> est vraiment très sympathique à utiliser. Le coté asynchrone n&#8217;est pas simple, la fonction <code>co-routine</code> n&#8217;est pas dans la documentation. Il a été très difficile de trouver un code d&#8217;exemple. Je regrette que parfois le seul moyen de déclencher la résolution est d&#8217;appeler de manière synchrone <code>-&gt;wait()</code> ce qui est dommage.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yield PHP Co-routine]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/09/13/yield-php-co-routine/"/>
    <updated>2015-09-13T20:31:37+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/09/13/yield-php-co-routine</id>
    <content type="html"><![CDATA[<p>Nous allons continuer sur le <em>yield</em> <a href="http://mcamuzat.github.io/blog/2015/09/06/php-yield-les-generateurs/">partie1</a></p>

<p>Nous avons vu la fonction xrange qui permet de générer un million de valeurs pour un coup très faible en mémoire.</p>

<p>Mais il y a mieux ! On peux envoyer des valeurs dans le générateur</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">generateAnimal</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$input</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="s1">&#39;Panda&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="s2">&quot;j&#39;ai reçu </span><span class="si">$input</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$input</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="s1">&#39;Lama&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="s2">&quot;j&#39;ai reçu </span><span class="si">$input</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$gen</span> <span class="o">=</span> <span class="nx">generateAnimal</span><span class="p">();</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">current</span><span class="p">());</span><span class="c1">// string(5) &quot;Panda&quot;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">(</span><span class="s1">&#39;Canard&#39;</span><span class="p">));</span><span class="c1">//string(16) &quot;j&#39;ai recu Canard&quot;</span>
</span><span class='line'>                               <span class="c1">//string(4) &quot;Lama&quot;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">(</span><span class="s1">&#39;Poney&#39;</span><span class="p">));</span> <span class="c1">// j&#39;ai recus Poney.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si j&#8217;avais fais deux fois <code>-&gt;next()</code>  au lieux de <code>-&gt;send()</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$gen</span> <span class="o">=</span> <span class="nx">generateAnimal</span><span class="p">();</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">current</span><span class="p">());</span><span class="c1">// string(5) &quot;Panda&quot;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">());</span><span class="c1">//string(16) &quot;j&#39;ai recu NULL&quot;</span>
</span><span class='line'>                               <span class="c1">//string(4) &quot;Lama&quot;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">());</span> <span class="c1">// j&#39;ai recus NULL.</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h2>Les Co-routines</h2>

<p>Une co-routine est une fonction qui peut se suspendre en reprendre quand on le souhaite.</p>

<p>Nous allons faire une classe <code>Task</code>  pour mieux comprendre.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Task</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$generator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$firstCall</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">Generator</span> <span class="nv">$generator</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generator</span> <span class="o">=</span> <span class="nv">$generator</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">firstCall</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generator</span><span class="o">-&gt;</span><span class="na">current</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generator</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">firstCall</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">finished</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generator</span><span class="o">-&gt;</span><span class="na">valid</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai besoin d&#8217;un Runner</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Runner</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">Task</span> <span class="nv">$task</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">task</span> <span class="o">=</span> <span class="nv">$task</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">task</span><span class="o">-&gt;</span><span class="na">finished</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">task</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un petit code d&#8217;exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">task1</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;This is task 1 iteration </span><span class="si">$i</span><span class="s2">.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">yield</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$task</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">(</span><span class="nx">task1</span><span class="p">());</span>
</span><span class='line'><span class="nv">$runner</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Runner</span><span class="p">(</span><span class="nv">$task</span><span class="p">);</span>
</span><span class='line'><span class="nv">$runner</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cela donne</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">1.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">2.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">3.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">4.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">5.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">6.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">7.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">8.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">9.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">10.</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai un objet Task qui appelle une fonction et qui rend la main à chaque itération. Cela semble compliqué pour une seule tache. Mais modifions le code pour avoir plusieurs taches.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Scheduler</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$queue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SplQueue</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">enqueue</span><span class="p">(</span><span class="nx">Task</span> <span class="nv">$task</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">queue</span><span class="o">-&gt;</span><span class="na">enqueue</span><span class="p">(</span><span class="nv">$task</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">queue</span><span class="o">-&gt;</span><span class="na">isEmpty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$task</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">queue</span><span class="o">-&gt;</span><span class="na">dequeue</span><span class="p">();</span>
</span><span class='line'>            <span class="nv">$task</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$task</span><span class="o">-&gt;</span><span class="na">finished</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">enqueue</span><span class="p">(</span><span class="nv">$task</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bon toute la magie est faite grâce à la <code>SplQueue</code> qui est une file d&#8217;attente. J&#8217;ajoute dans la file d&#8217;attente toutes les taches.</p>

<p>Je prend une tache de la file d&#8217;attente. Je l&#8217;exécute avec <code>-&gt;run()</code>, si la tache n&#8217;est pas finie, je la remets dans la file d&#8217;attente.</p>

<p>Reprenons un code d&#8217;exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">task1</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;This is task 1 iteration </span><span class="si">$i</span><span class="s2">.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">yield</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">task2</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="o">++</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;This is task 2 iteration </span><span class="si">$i</span><span class="s2">.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">yield</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$task1</span> <span class="o">=</span>  <span class="k">new</span> <span class="nx">Task</span><span class="p">(</span><span class="nx">task1</span><span class="p">());</span>
</span><span class='line'><span class="nv">$task2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">(</span><span class="nx">task2</span><span class="p">());</span>
</span><span class='line'><span class="nv">$scheduler</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Scheduler</span><span class="p">();</span>
</span><span class='line'><span class="nv">$scheduler</span><span class="o">-&gt;</span><span class="na">enqueue</span><span class="p">(</span><span class="nv">$task1</span><span class="p">);</span>
</span><span class='line'><span class="nv">$scheduler</span><span class="o">-&gt;</span><span class="na">enqueue</span><span class="p">(</span><span class="nv">$task2</span><span class="p">);</span>
</span><span class='line'><span class="nv">$scheduler</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">1.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">2</span> <span class="nx">iteration</span> <span class="mf">1.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">2.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">2</span> <span class="nx">iteration</span> <span class="mf">2.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">3.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">2</span> <span class="nx">iteration</span> <span class="mf">3.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">4.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">2</span> <span class="nx">iteration</span> <span class="mf">4.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">5.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">2</span> <span class="nx">iteration</span> <span class="mf">5.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">6.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">7.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">8.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">9.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">10.</span>
</span></code></pre></td></tr></table></div></figure>


<p>On voit que j&#8217;exécute en parallèle toutes mes deux taches.</p>

<h2>En conclusion</h2>

<p>Il existe deux librairies qui utilise ce concept</p>

<ul>
<li><a href="https://github.com/icicleio/icicle">Icicle</a></li>
<li><a href="https://github.com/recoilphp/recoil">recoil</a></li>
</ul>


<p>Cette façon d&#8217;implémenter est assez curieuse. Car le code ne ressemble pas au code classique asynchrone avec des callbacks et autre événements. Si on regarde bien cela ressemble beaucoup a du code synchrone. Elle est inspirée du <code>C#</code> <code>async/wait</code>. On a l&#8217;impression que cela ressemble a du code synchrone où on ajoute des <code>yield</code> un peu partout. (en simplifiant beaucoup..)</p>

<p>Il y a peu de documentation et d&#8217;exemple sur le sujet.</p>

<ul>
<li>la référence est ce post de <a href="http://nikic.github.io">Nikic</a>: <a href="https://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html">Cooperative multitasking using coroutines (in PHP!)</a></li>
<li>Une version légèrement simplifié dont je me suis inspiré pour le code <a href="https://medium.com/@assertchris/co-operative-php-multitasking-ce4ef52858a0">Co-operative PHP Multitasking</a></li>
</ul>


<p>Je vais essayer de continuer avec le yield et repartir sur les promises.</p>

<p>Merci de m&#8217;avoir lu.</p>
]]></content>
  </entry>
  
</feed>
