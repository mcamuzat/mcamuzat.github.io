<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-10-25T19:23:59+01:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Retour Vers Le Futur Avec Vim]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/25/retour-vers-le-futur-avec-vim/"/>
    <updated>2015-10-25T18:52:49+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/25/retour-vers-le-futur-avec-vim</id>
    <content type="html"><![CDATA[<h2>Parlons de retour vers le futur.</h2>

<p>En effet le héros dans le film 2 arrive le 21 octobre 2015. Bon on n&#8217;a pas les voitures volantes. Et c&#8217;est toujours le même éditeur de texte (vi date de 1976 !).</p>

<h2>Annuler dans VIM</h2>

<p>Pour annuler de VIM c&#8217;est plutôt simple <code>u</code> pour <strong>u</strong>ndo. Pour refaire c&#8217;est moins simple <code>&lt;CTRL + r&gt;</code>. Mais en pratique c&#8217;est plus puissant que cela.</p>

<p>En fait on peut voyager dans le temps avec VIM.</p>

<h2>Retour dans le passé</h2>

<p>Grâce à la commande  <code>:earlier</code></p>

<ul>
<li><code>:earlier 5m</code> reviens en arrière de 5 minutes</li>
<li><code>:earlier 10</code> annule 10 modifications</li>
<li><code>:earlier 5h</code> annule 5 heures.</li>
<li><code>:earlier 1f</code> ramène le fichier avant le dernier enregistrement</li>
<li><code>:earlier 2f</code> ramène le fichier à l&#8217;avant-dernier enregistrement</li>
</ul>


<p>Bien sur on peut faire un <em>retour vers futur</em> avec la commande suivante.</p>

<ul>
<li><code>:later 5m</code> retourne 5 minute plus tard.</li>
<li><code>:later 10</code> refait les 10 derniers modifications</li>
</ul>


<p>Encore plus fort se déplacer dans l&#8217;historique de VIM</p>

<h2>Se déplacer dans les différents passés</h2>

<p>Celui-ci ce comporte comme un arbre.</p>

<p>Par exemple je rentre le texte <code>premier</code>, puis le texte <code>second</code>. Puis je change <code>second</code> en <code>troisième</code> mon historique ressemble à cela.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   premier 
</span><span class='line'>     |
</span><span class='line'>   modif 1
</span><span class='line'>     |
</span><span class='line'>   premier second
</span><span class='line'>     |
</span><span class='line'>   modif 2
</span><span class='line'>     |
</span><span class='line'>   premier troisième</span></code></pre></td></tr></table></div></figure>


<p>Si j&#8217;annule une étape et que je change le texte mon historique ressemble à cela</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>              premier 
</span><span class='line'>                 |
</span><span class='line'>               modif 1
</span><span class='line'>                 |
</span><span class='line'>               premier second
</span><span class='line'>            ^    |       \
</span><span class='line'> annulation |  modif 2    modif 3
</span><span class='line'>            |    |               \
</span><span class='line'>               premier troisième premier quatrième.
</span></code></pre></td></tr></table></div></figure>


<p>Impossible de revenir à la modif 2 avec <code>u</code> et <code>Ctrl-r</code>.</p>

<p>Mais les touches <code>g+</code> et <code>g-</code> permette de faire cela.</p>

<p>Par exemple <code>g-</code> va nous ramener à la modif 2, un seconde fois <code>g-</code> nous ramène à la modif 1 etc ..</p>

<p>Pour voir toute les modifications il existe une liste de tous les changements avec <code>:undolist</code></p>

<p>Cela n&#8217;est pas très <em>user-friendly</em> comme vue. C&#8217;est pour cela qu&#8217;il existe un plugin vim <a href="https://github.com/sjl/gundo.vim/">gundo</a> qui rend cela beaucoup plus simple</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Undo graph                          File
</span><span class='line'>+-----------------------------------+---------------------------+
</span><span class='line'>| " Gundo for something.txt [1]     |one                        |
</span><span class='line'>| " j/k  - move between undo states |two                        |
</span><span class='line'>| " &lt;cr&gt; - revert to that state     |three                      |
</span><span class='line'>|                                   |five                       |
</span><span class='line'>| @  [5] 3 hours ago                |                           |
</span><span class='line'>| |                                 |                           |
</span><span class='line'>| | o  [4] 4 hours ago              |                           |
</span><span class='line'>| | |                               |                           |
</span><span class='line'>| o |  [3] 4 hours ago              |                           |
</span><span class='line'>| | |                               |                           |
</span><span class='line'>| o |  [2] 4 hours ago              |                           |
</span><span class='line'>| |/                                |                           |
</span><span class='line'>| o  [1] 4 hours ago                |                           |
</span><span class='line'>| |                                 |                           |
</span><span class='line'>| o  [0] Original                   |                           |
</span><span class='line'>+-----------------------------------+                           |
</span><span class='line'>| --- 3 2010-10-12 06:27:35 PM      |                           |
</span><span class='line'>| +++ 5 2010-10-12 07:38:37 PM      |                           |
</span><span class='line'>| @@ -1,3 +1,4                      |                           |
</span><span class='line'>|  one                              |                           |
</span><span class='line'>|  two                              |                           |
</span><span class='line'>|  three                            |                           |
</span><span class='line'>| +five                             |                           |
</span><span class='line'>+-----------------------------------+---------------------------+</span></code></pre></td></tr></table></div></figure>


<h2>Sauvegarder les annulations.</h2>

<p>Parfois on fait des bêtises et que le fichier n&#8217;est pas encore versionné et/ou commité (et cela vous est déjà arrivé non ?). Quand on a quitté vim. On perd tout l&#8217;historique. Ce n&#8217;est plus le cas en précisant un <code>undofile</code></p>

<h2>Conclusion</h2>

<p>Nous avons appris à nous déplacer comme des pros dans l&#8217;historique vim.</p>

<p>Résumé des touches</p>

<ul>
<li><code>u</code> annule, <code>ctrl+r</code> refait</li>
<li><code>:earlier</code> reviens en arrière</li>
<li><code>g-</code> et <code>g+</code> reviens/retourne à l&#8217;état précédent</li>
</ul>


<h2>Références</h2>

<ul>
<li>la documentation de vim <code>help undo</code></li>
<li><a href="https://github.com/sjl/gundo.vim/">Gundo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Fractales en Php Mandelbrot]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/18/les-fractales-en-php-mandelbrot/"/>
    <updated>2015-10-18T20:02:28+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/18/les-fractales-en-php-mandelbrot</id>
    <content type="html"><![CDATA[<p>Voici le code :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Mandelbrot</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">Mandelbrot</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">19</span><span class="p">;</span> <span class="nv">$x</span> <span class="o">&lt;</span> <span class="mi">19</span><span class="p">;</span> <span class="nv">$x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nv">$y</span> <span class="o">=</span> <span class="o">-</span><span class="mi">19</span><span class="p">;</span> <span class="nv">$y</span> <span class="o">&lt;</span> <span class="mi">19</span><span class="p">;</span> <span class="nv">$y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">((</span><span class="nv">$out</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">iterate</span><span class="p">(</span><span class="nv">$x</span><span class="o">/</span><span class="mf">20.0</span><span class="p">,</span><span class="nv">$y</span><span class="o">/</span><span class="mf">20.0</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;*&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">iterate</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$cr</span> <span class="o">=</span> <span class="nv">$y</span><span class="o">-</span><span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$ci</span> <span class="o">=</span> <span class="nv">$x</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$zi</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$zr</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$zr2</span> <span class="o">=</span> <span class="nv">$zr</span> <span class="o">*</span> <span class="nv">$zr</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$zi2</span> <span class="o">=</span> <span class="nv">$zi</span> <span class="o">*</span> <span class="nv">$zi</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// Calul de la nouvelle valeur de z</span>
</span><span class='line'>            <span class="k">list</span><span class="p">(</span><span class="nv">$zr</span><span class="p">,</span> <span class="nv">$zi</span><span class="p">)</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="nv">$zr2</span> <span class="o">-</span> <span class="nv">$zi2</span> <span class="o">+</span> <span class="nv">$cr</span><span class="p">,</span>
</span><span class='line'>                <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="nv">$zr</span> <span class="o">*</span> <span class="nv">$zi</span><span class="p">)</span> <span class="o">+</span> <span class="nv">$ci</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>            <span class="c1">// Si le module est supérieur à 2</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$zi2</span> <span class="o">+</span> <span class="nv">$zr2</span> <span class="o">&gt;</span> <span class="nx">BAILOUT</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// si cela fait la millieme boucle.</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">&gt;</span> <span class="nx">MAX_ITERATIONS</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$m</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mandelbrot</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    </span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">______________________________________</span>
</span><span class='line'><span class="nx">______________________________________</span>
</span><span class='line'><span class="nx">___________________________</span><span class="o">*</span><span class="nx">__________</span>
</span><span class='line'><span class="nx">_________________________</span><span class="o">****</span><span class="nx">_________</span>
</span><span class='line'><span class="nx">_________________________</span><span class="o">****</span><span class="nx">_________</span>
</span><span class='line'><span class="nx">_________________________</span><span class="o">****</span><span class="nx">_________</span>
</span><span class='line'><span class="nx">______________________________________</span>
</span><span class='line'><span class="nx">___________________</span><span class="o">*</span><span class="nx">__</span><span class="o">**********</span><span class="nx">______</span>
</span><span class='line'><span class="nx">___________________</span><span class="o">**************</span><span class="nx">_</span><span class="o">**</span><span class="nx">__</span>
</span><span class='line'><span class="nx">___________________</span><span class="o">*****************</span><span class="nx">__</span>
</span><span class='line'><span class="nx">__________________</span><span class="o">*****************</span><span class="nx">___</span>
</span><span class='line'><span class="nx">_________________</span><span class="o">*******************</span><span class="nx">__</span>
</span><span class='line'><span class="nx">________________</span><span class="o">*********************</span><span class="nx">_</span>
</span><span class='line'><span class="nx">________________</span><span class="o">*********************</span><span class="nx">_</span>
</span><span class='line'><span class="nx">______</span><span class="o">*</span><span class="nx">__</span><span class="o">*</span><span class="nx">_____</span><span class="o">**********************</span><span class="nx">_</span>
</span><span class='line'><span class="nx">______</span><span class="o">*******</span><span class="nx">__</span><span class="o">**********************</span><span class="nx">_</span>
</span><span class='line'><span class="nx">_____</span><span class="o">*********</span><span class="nx">_</span><span class="o">**********************</span><span class="nx">_</span>
</span><span class='line'><span class="nx">_____</span><span class="o">*********</span><span class="nx">_</span><span class="o">**********************</span><span class="nx">_</span>
</span><span class='line'><span class="nx">___</span><span class="o">*</span><span class="nx">_</span><span class="o">*********</span><span class="nx">_</span><span class="o">*********************</span><span class="nx">__</span>
</span><span class='line'><span class="o">***********************************</span><span class="nx">___</span>
</span><span class='line'><span class="nx">___</span><span class="o">*</span><span class="nx">_</span><span class="o">*********</span><span class="nx">_</span><span class="o">*********************</span><span class="nx">__</span>
</span><span class='line'><span class="nx">_____</span><span class="o">*********</span><span class="nx">_</span><span class="o">**********************</span><span class="nx">_</span>
</span><span class='line'><span class="nx">_____</span><span class="o">*********</span><span class="nx">_</span><span class="o">**********************</span><span class="nx">_</span>
</span><span class='line'><span class="nx">______</span><span class="o">*******</span><span class="nx">__</span><span class="o">**********************</span><span class="nx">_</span>
</span><span class='line'><span class="nx">______</span><span class="o">*</span><span class="nx">__</span><span class="o">*</span><span class="nx">_____</span><span class="o">**********************</span><span class="nx">_</span>
</span><span class='line'><span class="nx">________________</span><span class="o">*********************</span><span class="nx">_</span>
</span><span class='line'><span class="nx">________________</span><span class="o">*********************</span><span class="nx">_</span>
</span><span class='line'><span class="nx">_________________</span><span class="o">*******************</span><span class="nx">__</span>
</span><span class='line'><span class="nx">__________________</span><span class="o">*****************</span><span class="nx">___</span>
</span><span class='line'><span class="nx">___________________</span><span class="o">*****************</span><span class="nx">__</span>
</span><span class='line'><span class="nx">___________________</span><span class="o">**************</span><span class="nx">_</span><span class="o">**</span><span class="nx">__</span>
</span><span class='line'><span class="nx">___________________</span><span class="o">*</span><span class="nx">__</span><span class="o">**********</span><span class="nx">______</span>
</span><span class='line'><span class="nx">______________________________________</span>
</span><span class='line'><span class="nx">_________________________</span><span class="o">****</span><span class="nx">_________</span>
</span><span class='line'><span class="nx">_________________________</span><span class="o">****</span><span class="nx">_________</span>
</span><span class='line'><span class="nx">_________________________</span><span class="o">****</span><span class="nx">_________</span>
</span><span class='line'><span class="nx">___________________________</span><span class="o">*</span><span class="nx">__________</span>
</span><span class='line'><span class="nx">_____________________________________</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comment cela marche.</p>

<p>Rappel sur les complexes</p>

<ul>
<li>un nombre complexe est composé d&#8217;une partie réelle et une partie imaginaire : <code>a + i b</code> ici <strong>a</strong> est la partie réelle et <strong>b</strong> est la partie imaginaire</li>
<li>le module d&#8217;un nombre complexe représente la distance entre les coordonnées du point et le centre. <code>|module|^2 = a^2 + b ^2</code></li>
<li>la multiplication d&#8217;un nombre complexe donne <code>(a + ib)^2 = (a^2-b^2)+2ab * i</code></li>
</ul>


<h2>La version simple</h2>

<p>il existe une video en anglais qui explique cela très bien.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/NGMRB4O922I" frameborder="0" allowfullscreen></iframe>


<ul>
<li>Je crée un tableau (x,y) de 20 * 20 qui va de [1, -1] en largeur et en hauteur</li>
<li>j&#8217;effectue la boucle suivante.</li>
<li>je calcule la valeur <code>z1</code> qui est égale à <code>z0^2 + c</code> avec c qui est <code>x+i*y</code>.</li>
<li>puis je calcule la valeur de <code>z2 = z1^2 + c</code> puis <code>z3</code>..</li>
<li>je quitte la boucle pour deux raisons.

<ul>
<li>si le module est supérieur à 2, le module devient de plus en plus grand et dépasse 2.</li>
<li>au bout de 1000 boucles la valeurs n&#8217;a toujours pas dépassé 2. Je renvoie 0</li>
</ul>
</li>
</ul>


<p>C&#8217;est le code de la fonction <code>iterate</code>. le php ne connaît pas les complexes(c&#8217;est natif en python..) donc le chiffre z est divisé en 2 <code>zr</code> la partie réelle et <code>zi</code> la partie imaginaire.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">iterate</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$cr</span> <span class="o">=</span> <span class="nv">$y</span><span class="o">-</span><span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$ci</span> <span class="o">=</span> <span class="nv">$x</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$zi</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$zr</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$zr2</span> <span class="o">=</span> <span class="nv">$zr</span> <span class="o">*</span> <span class="nv">$zr</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$zi2</span> <span class="o">=</span> <span class="nv">$zi</span> <span class="o">*</span> <span class="nv">$zi</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// Calul de la nouvelle valeur de z</span>
</span><span class='line'>        <span class="k">list</span><span class="p">(</span><span class="nv">$zr</span><span class="p">,</span> <span class="nv">$zi</span><span class="p">)</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="nv">$zr2</span> <span class="o">-</span> <span class="nv">$zi2</span> <span class="o">+</span> <span class="nv">$cr</span><span class="p">,</span>
</span><span class='line'>            <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="nv">$zr</span> <span class="o">*</span> <span class="nv">$zi</span><span class="p">)</span> <span class="o">+</span> <span class="nv">$ci</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>        <span class="c1">// Si le module est supérieur à 2</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$zi2</span> <span class="o">+</span> <span class="nv">$zr2</span> <span class="o">&gt;</span> <span class="nx">BAILOUT</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// si cela fait la millieme boucle.</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">&gt;</span> <span class="nx">MAX_ITERATIONS</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si on compte le nombre d&#8217;étapes pour dépasser 2 on obtient le schéma suivant.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">Mandelbrot</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">19</span><span class="p">;</span> <span class="nv">$x</span> <span class="o">&lt;</span> <span class="mi">19</span><span class="p">;</span> <span class="nv">$x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$y</span> <span class="o">=</span> <span class="o">-</span><span class="mi">19</span><span class="p">;</span> <span class="nv">$y</span> <span class="o">&lt;</span> <span class="mi">19</span><span class="p">;</span> <span class="nv">$y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="nv">$out</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">iterate</span><span class="p">(</span><span class="nv">$x</span><span class="o">/</span><span class="mf">20.0</span><span class="p">,</span><span class="nv">$y</span><span class="o">/</span><span class="mf">20.0</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="k">echo</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="k">echo</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="mi">41</span><span class="o">+</span><span class="nv">$out</span><span class="o">%</span><span class="mi">16</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">--------------.......///</span><span class="mi">1241410</span><span class="o">/....--</span>
</span><span class='line'><span class="o">-------------.......///</span><span class="mf">023.2520</span><span class="c1">//....-</span>
</span><span class='line'><span class="o">------------.......///</span><span class="mo">053</span><span class="p">)</span><span class="mi">1</span> <span class="p">,</span><span class="o">*</span><span class="mi">1</span><span class="c1">///....</span>
</span><span class='line'><span class="o">-----------.......//</span><span class="mo">0012</span><span class="mi">8</span>    <span class="p">,</span><span class="mi">20</span><span class="c1">////..</span>
</span><span class='line'><span class="o">----------......//</span><span class="mo">0001130</span>    <span class="p">,</span><span class="mi">2100</span><span class="c1">///.</span>
</span><span class='line'><span class="o">--------......//</span><span class="mo">01222234</span><span class="mi">8</span>    <span class="mi">7432000</span><span class="p">,</span><span class="o">/</span>
</span><span class='line'><span class="o">-------.....///</span><span class="mo">017</span><span class="o">+</span><span class="mf">644.</span><span class="o">*</span><span class="mi">1865</span><span class="o">+</span><span class="mi">1</span><span class="o">/</span><span class="mi">73222</span><span class="p">)</span><span class="mi">1</span>
</span><span class='line'><span class="o">------....////</span><span class="mo">00164</span> <span class="o">*</span><span class="mi">4</span>          <span class="o">.</span><span class="mi">68</span><span class="p">)</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'><span class="o">-----..//////</span><span class="mo">00024</span><span class="o">-</span>              <span class="mi">6</span>  <span class="mi">23</span>
</span><span class='line'><span class="o">---..///////</span><span class="mo">0002</span><span class="mi">868</span>                 <span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="o">-../</span><span class="mo">000</span><span class="c1">///00011/23                 ,61</span>
</span><span class='line'><span class="o">.//</span><span class="mf">1611111111125.</span>                   <span class="o">+</span><span class="mi">3</span>
</span><span class='line'><span class="c1">//01)3326422224,                     8</span>
</span><span class='line'><span class="c1">//014*.67-753352                     )</span>
</span><span class='line'><span class="c1">//113) 2) 73757                      8</span>
</span><span class='line'><span class="o">/</span><span class="mo">0125</span><span class="p">,</span>       <span class="p">)</span><span class="o">*</span>                      <span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="o">+</span><span class="mi">34</span><span class="o">-</span>         <span class="mi">0</span>                      <span class="mi">6</span>
</span><span class='line'><span class="mi">26780</span>         <span class="o">+</span>                      <span class="mi">2</span>
</span><span class='line'><span class="mi">48</span><span class="o">/</span> <span class="mi">6</span>         <span class="p">)</span>                     <span class="mi">41</span>
</span><span class='line'>                                   <span class="mi">621</span>
</span><span class='line'><span class="mi">48</span><span class="o">/</span> <span class="mi">6</span>         <span class="p">)</span>                     <span class="mi">41</span>
</span><span class='line'><span class="mi">26780</span>         <span class="o">+</span>                      <span class="mi">2</span>
</span><span class='line'><span class="mi">1</span><span class="o">+</span><span class="mi">34</span><span class="o">-</span>         <span class="mi">0</span>                      <span class="mi">6</span>
</span><span class='line'><span class="o">/</span><span class="mo">0125</span><span class="p">,</span>       <span class="p">)</span><span class="o">*</span>                      <span class="p">)</span>
</span><span class='line'><span class="c1">//113) 2) 73757                      8</span>
</span><span class='line'><span class="c1">//014*.67-753352                     )</span>
</span><span class='line'><span class="c1">//01)3326422224,                     8</span>
</span><span class='line'><span class="o">.//</span><span class="mf">1611111111125.</span>                   <span class="o">+</span><span class="mi">3</span>
</span><span class='line'><span class="o">-../</span><span class="mo">000</span><span class="c1">///00011/23                 ,61</span>
</span><span class='line'><span class="o">---..///////</span><span class="mo">0002</span><span class="mi">868</span>                 <span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="o">-----..//////</span><span class="mo">00024</span><span class="o">-</span>              <span class="mi">6</span>  <span class="mi">23</span>
</span><span class='line'><span class="o">------....////</span><span class="mo">00164</span> <span class="o">*</span><span class="mi">4</span>          <span class="o">.</span><span class="mi">68</span><span class="p">)</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'><span class="o">-------.....///</span><span class="mo">017</span><span class="o">+</span><span class="mf">644.</span><span class="o">*</span><span class="mi">1865</span><span class="o">+</span><span class="mi">1</span><span class="o">/</span><span class="mi">73222</span><span class="p">)</span><span class="mi">1</span>
</span><span class='line'><span class="o">--------......//</span><span class="mo">01222234</span><span class="mi">8</span>    <span class="mi">7432000</span><span class="p">,</span><span class="o">/</span>
</span><span class='line'><span class="o">----------......//</span><span class="mo">0001130</span>    <span class="p">,</span><span class="mi">2100</span><span class="c1">///.</span>
</span><span class='line'><span class="o">-----------.......//</span><span class="mo">0012</span><span class="mi">8</span>    <span class="p">,</span><span class="mi">20</span><span class="c1">////..</span>
</span><span class='line'><span class="o">------------.......///</span><span class="mo">053</span><span class="p">)</span><span class="mi">1</span> <span class="p">,</span><span class="o">*</span><span class="mi">1</span><span class="c1">///....</span>
</span><span class='line'><span class="o">-------------.......///</span><span class="mf">023.2520</span><span class="c1">//....-</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est ce qui est assez amusant dans les fractales, les formules sont très simples. Mais le résultat est très impressionnant.</p>

<h2>Des liens</h2>

<ul>
<li>article <a href="https://en.wikipedia.org/wiki/Mandelbrot_set">wikipédia</a></li>
<li>les videos hypnotiques de <a href="https://en.wikipedia.org/wiki/Electric_Sheep">electric sheep</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Listes Chainées : Implémentation]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/10/liste-chainees-implementation/"/>
    <updated>2015-10-10T21:12:47+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/10/liste-chainees-implementation</id>
    <content type="html"><![CDATA[<p>Dans la <a href="http://mcamuzat.github.io/blog/2015/10/03/spl-surcharge-magique/">partie 1</a> nous avons appris à surcharger le <code>count</code> ainsi que les différentes méthodes de <code>ArrayAccess</code>. Pour faire un exemple un peu plus concret, je vais impémenter les listes chainées. Les listes doublement chainée sont <strong>déja</strong> implémentées dans la SPL via <a href="http://php.net/manual/fr/class.spldoublylinkedlist.php">SplDoublyLinkedList</a>.</p>

<p>Le liste chainée (linked list en anglais) est une structure de donnée. Nous allons essayer d&#8217;implémenter une liste chainée en PHP. Cela nous permettra de comprendre l&#8217;idée. Nous allons implémenter l&#8217;interface <code>Countable</code>. (J&#8217;implémente <code>ArrayAccess</code> et <code>Iterator</code> dans le post suivant).</p>

<p>Une liste chainée est constituée de <code>Node</code> ou noeud/chainon.</p>

<p>Un node a deux propriétés.</p>

<ul>
<li>Sa valeurs</li>
<li>Le liens vers le noeud suivant</li>
</ul>


<p>En php</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Node</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$next</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nx">Node</span> <span class="nv">$next</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">next</span> <span class="o">=</span> <span class="nv">$next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">setData</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getData</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getNext</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">setNext</span><span class="p">(</span><span class="nx">Node</span> <span class="nv">$next</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">next</span> <span class="o">=</span> <span class="nv">$next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>pour créer une liste rien de bien compliqué.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$noeud1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'><span class="nv">$noeud2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="mi">99</span><span class="p">);</span>
</span><span class='line'><span class="nv">$noeud3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="mi">37</span><span class="p">);</span>
</span><span class='line'><span class="nv">$noeud1</span><span class="o">-&gt;</span><span class="na">setNext</span><span class="p">(</span><span class="nv">$noeud2</span><span class="p">);</span>
</span><span class='line'><span class="nv">$neoud2</span><span class="o">-&gt;</span><span class="na">setNext</span><span class="p">(</span><span class="nv">$noeud3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Résultat le dessin suivant (wikipedia)</p>

<p><img class="center" src="http://mcamuzat.github.io/images/linked-list.png" width="408" height="41" title="'Une liste chainée' 'Une liste chainée" ></p>

<h2>Implementation de la liste</h2>

<p>Nous allons créer des méthodes pour ajouter simplement nos chainons.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">LinkedList</span> <span class="k">implements</span> <span class="nx">Countable</span><span class="p">,</span> <span class="nx">ArrayAccess</span><span class="p">,</span> <span class="nx">Iterator</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$first</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$last</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="c1">// pour l&#39;iterateur</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$current</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$position</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Permet d&#39;afficher le contenu de la chaine. </span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">printMe</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;-</span><span class="si">{</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">()</span><span class="si">}</span><span class="s2">-&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous allons traquer le premier élément de la chaine (<code>$this-&gt;first</code>) et le dernier (<code>$this-&gt;last</code>)</p>

<h3>Ajout d&#8217;un chainon à la fin</h3>

<p>C&#8217;est assez simple.</p>

<ul>
<li>Créer un nouveau noeud</li>
<li>Récupérer le dernier chainon</li>
<li>Faire pointer la propriété <code>next</code> du dernier chainon vers notre nouveau noeud.</li>
<li>Notre nouveau noeud devient le dernier noeud.</li>
<li>On augmente la taille de 1</li>
</ul>


<p>en code cela donne</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">insertAtEnd</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// nouveau noeud</span>
</span><span class='line'>    <span class="nv">$node</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// si la liste est vide</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span> <span class="o">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span> <span class="o">=</span> <span class="nv">$node</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// on ajoute le liens vers le suivant</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span> <span class="o">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span><span class="o">-&gt;</span><span class="na">setNext</span><span class="p">(</span><span class="nv">$node</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="c1">// notre nouveau noeud devient le dernier</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span> <span class="o">=</span> <span class="nv">$node</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// on augmente la taille.</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="nv">$list</span><span class="o">-&gt;</span><span class="na">insertAtEnd</span><span class="p">(</span><span class="s2">&quot;ha&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">insertAtEnd</span><span class="p">(</span><span class="s2">&quot;hi&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$list</span><span class="o">-&gt;</span><span class="na">printMe</span><span class="p">()</span> <span class="c1">// -ha-hi</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Ajout d&#8217;un chainon au début</h3>

<p>C&#8217;est un peu près la même idée.</p>

<ul>
<li>Créer un nouveau noeud</li>
<li>Récupérer le premier noeud.</li>
<li>Notre noeud pointe vers le premier noeud.</li>
<li>On pointe le <code>first</code> vers notre nouveau noeud.</li>
</ul>


<p>En code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">insertFirstValue</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="nv">$node</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">);</span>
</span><span class='line'>   <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>   <span class="c1">// si la liste est vide</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span> <span class="o">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span> <span class="o">=</span> <span class="nv">$node</span><span class="p">;</span>
</span><span class='line'>   <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="nv">$list</span><span class="o">-&gt;</span><span class="na">insertAtEnd</span><span class="p">(</span><span class="s2">&quot;first&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">insertFirstValue</span><span class="p">(</span><span class="s2">&quot;second&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$list</span><span class="o">-&gt;</span><span class="na">printMe</span><span class="p">();</span> <span class="c1">// -second-first</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Suppression d&#8217;un chainon au début.</h3>

<p>Il faut faire dans l&#8217;autre sens.</p>

<p>En code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">removeFirstValue</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s1">&#39;La liste est vide&#39;</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'>   <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>   <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">();</span>
</span><span class='line'>   <span class="c1">// si la liste est vide , reinitialiser le last</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span> <span class="o">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="nv">$list</span><span class="o">-&gt;</span><span class="na">insertAtEnd</span><span class="p">(</span><span class="s2">&quot;first&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">insertAtEnd</span><span class="p">(</span><span class="s2">&quot;second&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$list</span><span class="o">-&gt;</span><span class="na">printMe</span><span class="p">();</span> <span class="c1">// -first-second</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$list</span><span class="o">-&gt;</span><span class="na">removeFirstValue</span><span class="p">());</span>
</span><span class='line'><span class="nv">$list</span><span class="o">-&gt;</span><span class="na">printMe</span><span class="p">();</span> <span class="c1">//</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Suppression d&#8217;un chainon à la fin</h3>

<p>Comme le dernier chainon ne connait pas son prédécesseur. C&#8217;est beaucoup plus compliqué. On est obligé de repartir depuis le début. Donc pour supprimer le dernier chainon d&#8217;un liste d&#8217;un million de chainon, il nous faut parcourir les 1 millions de chainons.</p>

<p>En Code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">RemoveLastValue</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// cas particulier la liste est vide</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s1">&#39;la Liste est vide&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// Il n&#39;y a qu&#39;un noeud.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// On parcours tout les chainons jusqu&#39;à l&#39;avant-dernier</span>
</span><span class='line'>    <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$previous</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>         <span class="nv">$previous</span> <span class="o">=</span> <span class="nv">$current</span><span class="p">;</span>
</span><span class='line'>         <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// on supprime le liens</span>
</span><span class='line'>    <span class="nv">$previous</span><span class="o">-&gt;</span><span class="na">setNext</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// On déplace le last</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span> <span class="o">=</span> <span class="nv">$previous</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// on décremente</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Ajouter une valeurs au milieu de la chaine</h3>

<p>Même punition que pour supprimer un lien à la fin de la liste. Si on a une liste de 1 Millions de chainons. Pour insérer à la position 99999, nous sommes obligés de parcourir les 99999 chainons. Et pour la suppression ce sera pareil..</p>

<p><img class="center" src="http://mcamuzat.github.io/images/LinkedLists-addingnode.png" width="474" height="116" title="un chainon" alt="Ajout d"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">insertAtPosition</span><span class="p">(</span><span class="nv">$position</span><span class="p">,</span> <span class="nv">$data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">insertFirstValue</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span> <span class="o">&gt;=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">insertAtEnd</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$position</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$node</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">());</span>
</span><span class='line'>    <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">setNext</span><span class="p">(</span><span class="nv">$node</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Implementer le <code>count</code></h2>

<p>Si vous avez lu le <a href="">post précédent</a> il suffit d&#8217;ajouter une méthode <code>count</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">count</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Des applications avec la Liste chainée.</h2>

<p>Si on renomme la méthode <code>insertAtEnd($data)</code> par <code>enqueue($job)</code> et la méthode <code>removeFirstValue()</code> par <code>dequeue()</code></p>

<p>On obtient une file d&#8217;attente ou une <code>Queue</code> en anglais.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$fileAttente</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="nv">$fileAttente</span><span class="o">-&gt;</span><span class="na">enqueue</span><span class="p">(</span><span class="s2">&quot;job1&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">enqueue</span><span class="p">(</span><span class="s2">&quot;job2&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$fileAttente</span><span class="o">-&gt;</span><span class="na">dequeue</span><span class="p">());</span> <span class="c1">// job1</span>
</span><span class='line'><span class="c1">// je rajoute un travail </span>
</span><span class='line'><span class="nv">$fileAttente</span><span class="o">-&gt;</span><span class="na">enqueue</span><span class="p">(</span><span class="s2">&quot;OtherJob&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$fileAttente</span><span class="o">-&gt;</span><span class="na">dequeue</span><span class="p">());</span> <span class="c1">// job2</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$fileAttente</span><span class="o">-&gt;</span><span class="na">dequeue</span><span class="p">());</span> <span class="c1">// OtherJob</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si on renomme la méthode <code>insertFirstValue</code> en <code>push</code> et la méthode <code>removeFirstValue()</code> par <code>pop()</code> On obtient une Stack.</p>

<p>Voici le code pour inverser un array sans utiliser <code>array_reverse</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$list1</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nv">$stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$list</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">push</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$list2</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nx">stack</span><span class="o">-&gt;</span><span class="na">count</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$list2</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$list2</span><span class="p">)</span> <span class="c1">//[5,4,3,2,1];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Un ancien livre est titré</p>

<blockquote><blockquote><p>Algorithms + Data Structures = Programs</p></blockquote></blockquote>

<p>On a tendance en language php à penser tout en Object et en Array. Parfois la façon dont on représente nos données est importante.</p>

<ul>
<li>Certaines opérations comme ajouter un lien au début/fin de la chaine sont très peu couteuses (une étape) on parle de complexité O(1);</li>
<li>supprimer un lien à la fin de la liste par contre prend N étapes On dit que la complexité est de O(N)</li>
</ul>


<p>Pour résoudre ce problème on a inventé les listes doublements chainées. Voir le dessin (Wikipédia);</p>

<p><img class="center" src="http://mcamuzat.github.io/images/Doubly-linked-list.png" width="610" height="41" title="doubles listes chainée" alt="double liste chainée"></p>

<p>Cela prend beaucoup plus de mémoire, mais on simplifie beaucoup l&#8217;ajout et la suppression au début et à la fin de liste. par contre la recherche dans une liste chainée est toujours aussi longue.</p>

<p>Mon post sur les <a href="blog/2015/08/29/stacks-structures-meconnues/">Stack</a>.</p>

<p>Dans le post suivant on implémentera les méthodes de <code>ArrayAccess</code> et <code>Iterator</code>, ce qui nous permettra de faire des <code>foreach</code> ou <code>isset($list[2])</code> etc ..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tig : Status]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/04/tig-status/"/>
    <updated>2015-10-04T21:59:59+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/04/tig-status</id>
    <content type="html"><![CDATA[<p>Tig est un client git en ligne de commande</p>

<p>Il n&#8217;est pas compliqué à installer :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install tig
</span></code></pre></td></tr></table></div></figure>


<p>Néanmoins c&#8217;est la version 1.2 dans les dépôts au moment ou j&#8217;écris ces lignes.</p>

<p>On peut installer la version 2 qui a plus de fonctionnalités et de raccourcis.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/jonas/tig
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>attention vous aurez probablement besoin d&#8217;avoir installer la librairies <code>libncursesw</code> pour l&#8217;utf-8</p>

<h2>La vue principale</h2>

<p>Elle permet de voir l&#8217;historique du dépôt.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/tig-defaut.png" width="600" height="398" title="la vue par défault" alt="la vue par défaut"></p>

<p>Appuyer sur <code>&lt;Enter&gt;</code> pour voir la différence. (Dans la version 2, si le terminal fait plus de 160 caractères l&#8217;écran se splitte en 2 verticalement)</p>

<p><img class="center" src="http://mcamuzat.github.io/images/tig-diff.png" width="600" height="399" title="quand on appuie sur la touche entrée, on affiche la différence" alt="l"></p>

<p>Screenshot de la version 2 avec les deux colonnes.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/tig_view_v2.png" width="600" height="366" title="dans la version 2, si le terminal" alt="Screenshot de la version 2 avec les deux colonnes."></p>

<p>Il va falloir apprendre les touches Vi car on se sert beaucoup de <code>j</code> et <code>k</code> (un rappel <code>j</code> descend vers le bas et <code>k</code> va vers le haut)</p>

<p>De cette écran voici les différents modes (je ne les cites pas tous)</p>

<ul>
<li><code>S</code> ou <code>s</code> pour voir le stage (équivalent de git status)</li>
<li><code>t</code> tree view affichage en explorateur de fichier</li>
<li><code>r</code> permet de voir les différentes branches (<code>H</code> dans la version1</li>
<li><code>l</code> voir les logs</li>
</ul>


<p>Je vais surtout m&#8217;intéresser à la status view.</p>

<h2>La vue Status</h2>

<p>Les touches à connaitre.</p>

<ul>
<li><code>u</code> sur un noms de fichiers pour <strong>u</strong>se cela fait l&#8217;équivalent de <code>git add &lt;nom du fichier&gt;</code></li>
</ul>


<p>Si vous appuyer sur <code>u</code> sur les lignes <code>Changes to be commited</code>, <code>Changed but not updated</code>, <code>Untracked files</code> vous ajoutez tous les fichiers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Changes to be committed:
</span><span class='line'>M   fichier1
</span><span class='line'>Changed but not updatedy://&lt;---<span class="o">(</span>*curseur*<span class="o">)</span>
</span><span class='line'>M   fichier2
</span><span class='line'>M   fichier3
</span><span class='line'>M   fichier4
</span><span class='line'>M   fichier5
</span><span class='line'>M   fichier6
</span><span class='line'>M   fichier7
</span><span class='line'>Untracked files:
</span><span class='line'>?   nouveau fichier
</span></code></pre></td></tr></table></div></figure>


<p>Cela devient</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Changes to be committed:
</span><span class='line'>M   fichier1
</span><span class='line'>M   fichier2
</span><span class='line'>M   fichier3
</span><span class='line'>M   fichier4
</span><span class='line'>M   fichier5
</span><span class='line'>M   fichier6
</span><span class='line'>M   fichier7
</span><span class='line'>Changed but not updatedy:
</span><span class='line'><span class="o">(</span>no files<span class="o">)</span>
</span><span class='line'>Untracked files:
</span><span class='line'>?   nouveau fichier
</span></code></pre></td></tr></table></div></figure>


<p>Enfin on peut aussi prendre chunk par chunck (l&#8217;équivalent de <code>git add -p</code>)</p>

<p><img class="center" src="http://mcamuzat.github.io/images/tig-revert.png" width="600" height="398" title="la vue par défaut" alt="la vue par défaut"></p>

<p>Il suffit d&#8217;appuyer sur <code>Enter</code> puis de se déplacer dans le commit avec <code>j</code> et <code>k</code> et appuyer sur <code>u</code> pour ajouter ce chunk. Les chunks pour faire simple sont les textes séparés par des <code>@@ ... @@</code>. On se déplace de chunk en chunk grâce à la touche <code>@</code>.</p>

<p>Pour reverter le fichier, On utilise la touche <code>!</code>.</p>

<p>Cela marche aussi sur un chunk. On peut donc reverter partiellement un fichier.</p>

<p>Il est possible d&#8217;ajouter ligne par ligne dans un commit grâce à la touche <code>1</code>.</p>

<p>Pour faire le git commit il suffit d&#8217;appuyer sur <code>C</code> comme <strong>C</strong>ommit.</p>

<p>Enfin la touche <code>e</code> comme <strong>e</strong>dit ouvre le fichier dans l&#8217;éditeur par défaut.</p>

<h2>Le fichier <code>.tigrc</code></h2>

<p>Le fichier <code>.tigrc</code> permet de personnaliser l&#8217;affichage et d&#8217;ajouter des raccourcis claviers.</p>

<p>Voici quelques exemples de ma config.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Delete files in status view (useful for untracked files)</span>
</span><span class='line'><span class="nb">bind </span>status D !@?rm %<span class="o">(</span>file<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Amend last commit with A</span>
</span><span class='line'><span class="nb">bind </span>status A !git commit --amend
</span><span class='line'>
</span><span class='line'><span class="c"># Create and checkout a new branch; specify custom prompt</span>
</span><span class='line'><span class="nb">bind </span>main B !git checkout -b <span class="s2">&quot;%(prompt Enter new branch name: )&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Les raccourcis claviers que j&#8217;ai rajouté</p>

<ul>
<li>Dans la vue status la touche <code>D</code> efface le fichier</li>
<li>Dans la vue status la touche <code>A</code> fait un <code>git commit --amend</code></li>
<li>Dans la vue principale la touche <code>B</code> permet de créer une branche.</li>
</ul>


<h2>Résumé de touches</h2>

<ul>
<li><code>s</code> ou <code>S</code> voir la vue status</li>
<li><code>u</code> ajouter le commit/chunk</li>
<li><code>!</code> revert</li>
<li><code>1</code> ajoute une lignes au commit</li>
<li><code>@</code> aller au chunck/diff suivant</li>
<li><code>D</code> supprimer le fichier (<em>raccourcis perso</em>)</li>
<li><code>A</code> git amend</li>
<li><code>e</code> ouvre dans l&#8217;éditeur par défaut</li>
</ul>


<h2>Des liens</h2>

<ul>
<li><a href="http://jonas.nitro.dk/tig/">le site officiel</a></li>
<li>la <a href="https://github.com/pmiossec/tig-cheat-sheet">cheat-sheet</a> avec les raccourcis claviers (<em>indispensable</em>)</li>
</ul>


<h2>Conclusion</h2>

<p>Je vais revenir sur les autres vues bientôt.</p>

<p>Merci de m&#8217;avoir lu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SPL Surcharge Magique]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/03/spl-surcharge-magique/"/>
    <updated>2015-10-03T17:17:33+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/03/spl-surcharge-magique</id>
    <content type="html"><![CDATA[<p>Nous allons repartir sur la <a href="http://php.net/manual/fr/book.spl.php">SPL</a>.</p>

<p>Je vais parler des différentes méthodes amusantes à surcharger.</p>

<h2>Count</h2>

<p>Soit la classe suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">BadCounter</span> <span class="k">implements</span> <span class="nx">countable</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">count</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$counter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BadCounter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$counter</span><span class="p">));</span><span class="c1">// int(42)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peux surcharger la méthode <code>count</code>. C&#8217;est d&#8217;ailleurs le cas dans le cas du <a href="http://doctrine-orm.readthedocs.org/en/latest/tutorials/pagination.html">Paginator</a> de doctrine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>
</span><span class='line'><span class="nv">$dql</span> <span class="o">=</span> <span class="s2">&quot;SELECT p, c FROM BlogPost p JOIN p.comments c&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$query</span> <span class="o">=</span> <span class="nv">$entityManager</span><span class="o">-&gt;</span><span class="na">createQuery</span><span class="p">(</span><span class="nv">$dql</span><span class="p">)</span>
</span><span class='line'>                       <span class="o">-&gt;</span><span class="na">setFirstResult</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                       <span class="o">-&gt;</span><span class="na">setMaxResults</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$paginator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Paginator</span><span class="p">(</span><span class="nv">$query</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">count</span><span class="p">(</span><span class="nv">$paginator</span><span class="p">)</span> <span class="c1">// nombre de lignes dans la base</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Les ArrayObjects</h2>

<p>On peut aussi changer toutes les méthodes pour un tableau.</p>

<ul>
<li><code>isset(counter['valeur'])</code></li>
<li><code>unset(counter['valeur'])</code></li>
<li><code>counter['valeur'] = 3</code></li>
<li><code>counter[] = 3</code></li>
<li><code>counter['valeur']</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">GeekCounter</span> <span class="k">implements</span> <span class="nx">Countable</span><span class="p">,</span> <span class="nx">ArrayAccess</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">count</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetSet</span><span class="p">(</span><span class="nv">$offset</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">is_null</span><span class="p">(</span><span class="nv">$offset</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;on ajoute </span><span class="si">$value</span><span class="s2"> </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;on change la clé </span><span class="si">$offset</span><span class="s2"> par </span><span class="si">$value</span><span class="s2"> </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetExists</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;on teste la clé  </span><span class="si">$offset</span><span class="s2"> </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetUnset</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;on unset la clé </span><span class="si">$offset</span><span class="s2"> </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetGet</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span><span class="p">(</span><span class="s2">&quot;on me demande la clé </span><span class="si">$offset</span><span class="s2"> </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$counter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GeekCounter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$counter</span><span class="p">[</span><span class="s2">&quot;IdontCare&quot;</span><span class="p">]));</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$counter</span><span class="p">[</span><span class="s2">&quot;IdontCare&quot;</span><span class="p">]);</span>
</span><span class='line'><span class="nb">unset</span><span class="p">(</span><span class="nv">$counter</span><span class="p">[</span><span class="s2">&quot;IdontCare&quot;</span><span class="p">]);</span>
</span><span class='line'><span class="nv">$counter</span><span class="p">[]</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="nv">$counter</span><span class="p">[</span><span class="s2">&quot;IdontCare&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">on</span> <span class="nx">teste</span> <span class="nx">la</span> <span class="nx">clé</span>  <span class="nx">IdontCare</span>
</span><span class='line'><span class="nx">bool</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'><span class="nx">on</span> <span class="nx">me</span> <span class="nx">demande</span> <span class="nx">la</span> <span class="nx">clé</span> <span class="nx">IdontCare</span>
</span><span class='line'><span class="nx">int</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span><span class='line'><span class="nx">on</span> <span class="nb">unset</span> <span class="nx">la</span> <span class="nx">clé</span> <span class="nx">IdontCare</span>
</span><span class='line'><span class="nx">on</span> <span class="nx">ajoute</span> <span class="mi">3</span>
</span><span class='line'><span class="nx">on</span> <span class="nx">change</span> <span class="nx">la</span> <span class="nx">clé</span> <span class="nx">IdontCare</span> <span class="nx">par</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>On trouve la même idée dans les collections de doctrine.(l&#8217;interface <code>Collection</code> n&#8217;est qu&#8217;une surcharge);</p>

<p>Si on ne souhaite pas tout implémenter il suffit de surcharger la Classe <code>ArrayObject</code></p>

<p>Par exemple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">ZooDeBeauval</span> <span class="k">extends</span> <span class="nx">ArrayObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetSet</span><span class="p">(</span><span class="nv">$offset</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$value</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;Panda&quot;</span><span class="p">,</span> <span class="s2">&quot;Koala&quot;</span><span class="p">,</span> <span class="s2">&quot;Otarie&quot;</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;non cet animal </span><span class="si">$value</span><span class="s2"> n&#39;est pas autorisé&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">parent</span><span class="o">::</span><span class="na">offsetSet</span><span class="p">(</span><span class="nv">$offset</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$zoo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ZooParcDeBeauval</span><span class="p">();</span>
</span><span class='line'><span class="nv">$zoo</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39;Panda&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$zoo</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39;Koala&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;liste :  &quot;</span><span class="o">.</span><span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">,</span> <span class="nb">iterator_to_array</span><span class="p">(</span><span class="nv">$zoo</span><span class="p">))</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="nv">$zoo</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39;Lama&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">liste</span> <span class="o">:</span>  <span class="nx">Panda</span><span class="p">,</span> <span class="nx">Koala</span>
</span><span class='line'><span class="nx">non</span> <span class="nx">cet</span> <span class="nx">animal</span> <span class="nx">Lama</span> <span class="nx">n</span><span class="err">&#39;</span><span class="nx">est</span> <span class="nx">pas</span> <span class="nx">autorisé</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour les <code>foreach</code> j&#8217;ai déjà parlé des iterators et des <a href="blog/2015/09/06/php-yield-les-generateurs/">générateurs</a>.</p>

<h2>Conclusion</h2>

<p>Maintenant les interfaces <code>ArrayAccess</code> et <code>Countable</code> n&#8217;ont plus de secrets pour vous. Nous verrons dans un prochain Post les listes chainées. L&#8217;avantage de ces méthode est que l&#8217;on obtient une structure qui se comporte comme un <code>array</code> mais avec une occupation mémoire moindre.</p>

<p>Dans un prochain post, je vais parler des listes chainées et des différentes structure de la SPL (j&#8217;ai déja parlé de la <a href="blog/2015/08/29/stacks-structures-meconnues/">SplStack</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Des Commandes Au Top]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/09/27/des-commandes-au-top/"/>
    <updated>2015-09-27T16:04:40+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/09/27/des-commandes-au-top</id>
    <content type="html"><![CDATA[<p>J&#8217;utilise souvent le programme htop. mais il y en a d&#8217;autre.</p>

<h2>atop</h2>

<p>Plus austère. Beaucoup d&#8217;information sur toutes les ressources. C&#8217;est plus un outils d&#8217;audit. Le logicel donne toutes informations possibles. processeurs, disques, carte réseau. En pratique il peut même être lancer au démarrage. En pratique on parle de <code>sar</code> (<strong>S</strong>ystem <strong>A</strong>ctivity <strong>R</strong>eport). Il permet de surveiller la tailles des processus avec la colonne <code>VGROW</code> (<em>Virtual Memory Grow</em>) et <code>RGROW</code>(Resident memory Grow)
<img class="center" src="http://mcamuzat.github.io/images/atop.png" width="600" height="381" title="atop" alt="atop"></p>

<p>voir <a href="https://en.wikipedia.org/wiki/Sar_%28Unix%29">sar</a></p>

<h2>vtop</h2>

<p>Un clone en Nodejs. voir le screenshot c&#8217;est vraiment très joli</p>

<p><img class="center" src="http://mcamuzat.github.io/images/vtop.png" width="600" height="383" title="vtop" alt="vtop"></p>

<p>installation via npm</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo npm install -g vtop
</span></code></pre></td></tr></table></div></figure>


<p>dépot <a href="https://github.com/MrRio/vtop">Github</a></p>

<h2>Htop</h2>

<h3>Quelques options</h3>

<h3>filtrer par utilisateur</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>htop -umarc
</span></code></pre></td></tr></table></div></figure>


<p>ou <code>u</code> dans Htop</p>

<h4>Sélectionner un process</h4>

<p>Utilisez la barre d&#8217;espace pour sélectionner un process. Cela permet de le suivre.</p>

<ul>
<li><code>F7</code> ou  <code>F8</code> pour augmenter la priorité du process</li>
<li><code>F9</code> ou <code>k</code> pour killer un process</li>
<li><code>F5</code> affichage en arbre.</li>
<li><code>a</code> pour assigner le process à un CPU.</li>
<li><code>U</code> pour désélectionnér tous les process</li>
</ul>


<h4>Personnalisez l&#8217;affichage</h4>

<p>La touche magique ici est <code>&lt;F2&gt;</code>. Vous pouvez personnaliser les deux colonnes avec les raccourcis claviers suivants. La colonne toutes à droite donne les widgets disponibles</p>

<ul>
<li><code>&lt;F5&gt;</code> ajouter le widget à la colonne de droite.</li>
<li><code>&lt;F6&gt;</code> ajouter le widget à la colonne de gauche.</li>
</ul>


<p>Sur une colonne vous pouvez sélectionniez le type d&#8217;affiche (texte simple, histogramme, etc..) via la touche <code>&lt;F4&gt;</code></p>

<p>Voir le screenshot (<code>Text</code>, <code>Graph</code>,<code>Led</code>, <code>Bar</code>)
<img class="center" src="http://mcamuzat.github.io/images/typeaffichage.png" width="600" height="133" title="affichage" alt="les quatre types d"></p>

<h3>Les codes couleurs</h3>

<p>La touche <code>h</code> permet d&#8217;obtenir de l&#8217;aide, les raccourcis claviers et la significations des couleurs.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/codecouleur.png" width="600" height="104" title="les différentes couleurs et leurs significations" alt="les différentes couleurs et leurs significations"></p>

<h2>En conclusion</h2>

<p>J&#8217;espère que vous appris un nouveau raccourci sur htop.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guzzle Asynchrone Avec Les Promises]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/09/21/guzzle-asynchrone-avec-les-promises/"/>
    <updated>2015-09-21T21:39:06+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/09/21/guzzle-asynchrone-avec-les-promises</id>
    <content type="html"><![CDATA[<p>Nous continuons sur les promises et le yield.</p>

<ul>
<li><a href="http://mcamuzat.github.io/blog/2015/09/05/les-promises-et-php-via-react/">partie 1 les promises</a></li>
<li><a href="http://mcamuzat.github.io/blog/2015/09/06/php-yield-les-generateurs/">partie 2 le Yield</a></li>
<li><a href="http://mcamuzat.github.io/blog/2015/09/13/yield-php-co-routine/">partie 3 les co-routines</a></li>
</ul>


<p>Je vais parler de <a href="https://github.com/guzzle">Guzzle</a> qui est un client HTTP. Nous allons voir la version 6 qui utilise Php5.5</p>

<h2>Promise et Guzzle.</h2>

<p><em>Guzzle</em> connait les promises et possède sa propre <a href="https://github.com/guzzle/promises">implémentation</a>.</p>

<p>la signature de la fonction est un peu près la même que <a href="https://github.com/reactphp/promise">react/promise</a>.</p>

<p>Attention <em>Guzzle</em> ne fait pas la différence entre le <em>Deferred</em> qui est un travail dont la réponse est encore inconnu et représenter par une <em>promise</em>. Dans <em>Guzzle</em> le travail et la réponse sont la même chose.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">GuzzleHttp\Promise\Promise</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
</span><span class='line'><span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>    <span class="c1">// $onFulfilled</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s1">&#39;Tout va bien.&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="c1">// $onRejected</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">(</span><span class="nv">$reason</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s1">&#39;On a un problème.&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">resolve</span><span class="p">(</span><span class="k">null</span><span class="p">);</span> <span class="c1">// &#39;Tout va bien.&#39;;</span>
</span><span class='line'><span class="c1">// Ou </span>
</span><span class='line'><span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">reject</span><span class="p">(</span><span class="k">null</span><span class="p">);</span> <span class="c1">// &#39;On a un problème.&#39;;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Guzzle</em> est un client Web essayons un cas concret.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GuzzleHttp\Client</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$promise</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">requestAsync</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;http://httpbin.org/get&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">(</span><span class="nv">$res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$res</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;j&#39;ai recu un code </span><span class="si">$value</span><span class="s2">&quot;</span><span class="p">}</span> <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Notre requète n&#39;est pas encore partie. Il faut lancer manuellement l&#39;appel.</span>
</span><span class='line'><span class="nv">$client</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;avantage ici est que je décide quand je lance l&#8217;appel. Par exemple on peut lancer en parallèle les requêtes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://httpbin.org/&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Je crée toute mes requetes</span>
</span><span class='line'><span class="nv">$promises</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;image&#39;</span> <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;png&#39;</span>   <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/png&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;jpeg&#39;</span>  <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/jpeg&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;webp&#39;</span>  <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/webp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// je resouds tout en même temps</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$results</span> <span class="o">=</span> <span class="nx">Promise\unwrap</span><span class="p">(</span><span class="nv">$promises</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peux créer des pools. Si on souhaite limiter le nombre de requête en même temps.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://httpbin.org/&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$batch</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;image&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;/image&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;png&#39;</span>   <span class="o">=&gt;</span> <span class="s1">&#39;/image/png&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;jpeg&#39;</span>  <span class="o">=&gt;</span> <span class="s1">&#39;/image/jpeg&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;webp&#39;</span>  <span class="o">=&gt;</span> <span class="s1">&#39;/image/webp&#39;</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$requests</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$batch</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$batch</span> <span class="k">as</span> <span class="nv">$url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">yield</span> <span class="k">new</span> <span class="nx">Request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$pool</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Pool</span><span class="p">(</span><span class="nv">$client</span><span class="p">,</span> <span class="nv">$requests</span><span class="p">(</span><span class="nv">$batch</span><span class="p">),</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;fulfilled&#39;</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$response</span><span class="p">,</span> <span class="nv">$index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$index</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="err">&#39;</span><span class="nx">concurrency</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'><span class="nv">$promise</span> <span class="o">=</span> <span class="nv">$pool</span><span class="o">-&gt;</span><span class="na">promise</span><span class="p">();</span>
</span><span class='line'><span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>le résultat ici.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">int</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="nx">int</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="nx">int</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nx">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On reconnait aussi notre nouvel ami le <code>yield</code>.</p>

<h2>Le premier arrivé</h2>

<p>Nous allons utiliser l&#8217;instruction <code>any()</code> toutes les requêtes sont lancées en concurrences. C&#8217;est la première arrivée qui l&#8217;emporte.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://httpbin.org/&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// je crée toute mes requetes</span>
</span><span class='line'><span class="nv">$promises</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;image&#39;</span> <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;png&#39;</span>   <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/png&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;jpeg&#39;</span>  <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/jpeg&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;webp&#39;</span>  <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/webp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Promise\any</span><span class="p">(</span><span class="nv">$promises</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">){</span><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$value</span><span class="o">-&gt;</span><span class="na">getHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">));});</span>
</span><span class='line'><span class="nv">$result</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je veux juste les deux premières réponses <code>some(2, $promise)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://httpbin.org/&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// je crée toute mes requetes</span>
</span><span class='line'><span class="nv">$promises</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;image&#39;</span> <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;png&#39;</span>   <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/png&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;jpeg&#39;</span>  <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/jpeg&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;webp&#39;</span>  <span class="o">=&gt;</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/webp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Promise\some</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nv">$promises</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$results</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span><span class="k">foreach</span> <span class="p">(</span><span class="nv">$results</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$value</span><span class="o">-&gt;</span><span class="na">getHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Yield + Promise == Coroutine promise</h2>

<p>Bon Nous allons complexifier encore un peu.</p>

<p>Soit le code suivant</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://httpbin.org/&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$promiseGenerator</span> <span class="o">=</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$client</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">yield</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">yield</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/png&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">yield</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/jpeg&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">yield</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="s1">&#39;/image/webp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="nv">$promise</span> <span class="o">=</span> <span class="nx">Promise\each_limit</span><span class="p">(</span><span class="nv">$promiseGenerator</span><span class="p">(),</span> <span class="mi">2</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">,</span> <span class="nv">$idx</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">$result</span><span class="p">)</span> <span class="p">{</span><span class="nv">$result</span><span class="p">[</span><span class="nv">$idx</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;});</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je mets à la suite toute les promises que je souhaite exécuter en ajoutant <code>yield</code> devant.</p>

<p>Je laisse Guzzle gérer avec un limitation de 2. des que le programme a une place de libre, il appelle le générateur pour avoir un nouvelle promise.</p>

<p>Mais il existe dans Guzzle des co-routines..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://httpbin.org/&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$myfunction</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$url</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$client</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Promise\coroutine</span><span class="p">(</span>
</span><span class='line'>        <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$client</span><span class="p">,</span> <span class="nv">$url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$value</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getAsync</span><span class="p">(</span><span class="nv">$url</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">\Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">yield</span> <span class="k">New</span> <span class="nx">RejectedPromise</span><span class="p">(</span><span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">());</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$images</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$promises</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Build an array of promises.</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$images</span> <span class="k">as</span> <span class="nv">$image</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$promises</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$myfunction</span><span class="p">(</span><span class="nv">$image</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$aggregate</span> <span class="o">=</span> <span class="nx">Promise\all</span><span class="p">(</span><span class="nv">$promises</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>    <span class="k">function</span><span class="p">(</span><span class="nv">$values</span><span class="p">)</span> <span class="p">{</span><span class="k">echo</span> <span class="s1">&#39;ok&#39;</span> <span class="p">;},</span> <span class="k">function</span><span class="p">(</span><span class="nv">$values</span><span class="p">){</span><span class="k">echo</span> <span class="s1">&#39;nope&#39;</span><span class="p">;});</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$aggregate</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le code est complètement asynchrone.</p>

<p>Il est intéressant de voir le code synchrone et non parallèle.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([</span><span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://httpbin.org/&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$getImages</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$url</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$client</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="nv">$url</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">\Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$images</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$promises</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Build an array of promises.</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$images</span> <span class="k">as</span> <span class="nv">$image</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$result</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$getImages</span><span class="p">(</span><span class="nv">$image</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>En gros, j&#8217;ai retiré le <code>async</code> et les <code>yields</code> mais les deux codes se ressemblent non ?</p>

<h2>Conclusion</h2>

<p>Les promises sont pratiques.</p>

<ul>
<li>elles sont chainables</li>
<li>elles sont asynchrones, annulables, rejetables</li>
<li>On peut faire des foreach dessus.</li>
<li>On peut les combiner.</li>
</ul>


<p>Ce n&#8217;est pas vraiment un hasard. Les promises sont des <strong>Monades</strong>. Il n&#8217;est pas simple d&#8217;expliquer les monades. Les monades viennent de la programmation fonctionnelle et c&#8217;est surtout <a href="https://www.haskell.org/">haskell</a> qui a popularisé cette structure. J&#8217;espère que je reviendrai dessus.</p>

<p><em>Guzzle</em> est vraiment très sympathique à utiliser. Le coté asynchrone n&#8217;est pas simple, la fonction <code>co-routine</code> n&#8217;est pas dans la documentation. Il a été très difficile de trouver un code d&#8217;exemple. Je regrette que parfois le seul moyen de déclencher la résolution est d&#8217;appeler de manière synchrone <code>-&gt;wait()</code> ce qui est dommage.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yield PHP Co-routine]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/09/13/yield-php-co-routine/"/>
    <updated>2015-09-13T20:31:37+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/09/13/yield-php-co-routine</id>
    <content type="html"><![CDATA[<p>Nous allons continuer sur le <em>yield</em> <a href="http://mcamuzat.github.io/blog/2015/09/06/php-yield-les-generateurs/">partie1</a></p>

<p>Nous avons vu la fonction xrange qui permet de générer un million de valeurs pour un coup très faible en mémoire.</p>

<p>Mais il y a mieux ! On peux envoyer des valeurs dans le générateur</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">generateAnimal</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$input</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="s1">&#39;Panda&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="s2">&quot;j&#39;ai reçu </span><span class="si">$input</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$input</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span> <span class="s1">&#39;Lama&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="s2">&quot;j&#39;ai reçu </span><span class="si">$input</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$gen</span> <span class="o">=</span> <span class="nx">generateAnimal</span><span class="p">();</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">current</span><span class="p">());</span><span class="c1">// string(5) &quot;Panda&quot;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">(</span><span class="s1">&#39;Canard&#39;</span><span class="p">));</span><span class="c1">//string(16) &quot;j&#39;ai recu Canard&quot;</span>
</span><span class='line'>                               <span class="c1">//string(4) &quot;Lama&quot;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">(</span><span class="s1">&#39;Poney&#39;</span><span class="p">));</span> <span class="c1">// j&#39;ai recus Poney.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si j&#8217;avais fais deux fois <code>-&gt;next()</code>  au lieux de <code>-&gt;send()</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$gen</span> <span class="o">=</span> <span class="nx">generateAnimal</span><span class="p">();</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">current</span><span class="p">());</span><span class="c1">// string(5) &quot;Panda&quot;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">());</span><span class="c1">//string(16) &quot;j&#39;ai recu NULL&quot;</span>
</span><span class='line'>                               <span class="c1">//string(4) &quot;Lama&quot;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$gen</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">());</span> <span class="c1">// j&#39;ai recus NULL.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Les Co-routines</h2>

<p>Une co-routine est une fonction qui peut se suspendre en reprendre quand on le souhaite.</p>

<p>Nous allons faire une classe <code>Task</code>  pour mieux comprendre.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Task</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$generator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$firstCall</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">Generator</span> <span class="nv">$generator</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generator</span> <span class="o">=</span> <span class="nv">$generator</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">firstCall</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generator</span><span class="o">-&gt;</span><span class="na">current</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generator</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">firstCall</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">finished</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generator</span><span class="o">-&gt;</span><span class="na">valid</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai besoin d&#8217;un Runner</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Runner</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">Task</span> <span class="nv">$task</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">task</span> <span class="o">=</span> <span class="nv">$task</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">task</span><span class="o">-&gt;</span><span class="na">finished</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">task</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un petit code d&#8217;exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">task1</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;This is task 1 iteration </span><span class="si">$i</span><span class="s2">.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">yield</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$task</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">(</span><span class="nx">task1</span><span class="p">());</span>
</span><span class='line'><span class="nv">$runner</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Runner</span><span class="p">(</span><span class="nv">$task</span><span class="p">);</span>
</span><span class='line'><span class="nv">$runner</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cela donne</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">1.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">2.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">3.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">4.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">5.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">6.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">7.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">8.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">9.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">10.</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai un objet Task qui appelle une fonction et qui rend la main à chaque itération. Cela semble compliqué pour une seule tache. Mais modifions le code pour avoir plusieurs taches.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Scheduler</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$queue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SplQueue</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">enqueue</span><span class="p">(</span><span class="nx">Task</span> <span class="nv">$task</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">queue</span><span class="o">-&gt;</span><span class="na">enqueue</span><span class="p">(</span><span class="nv">$task</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">queue</span><span class="o">-&gt;</span><span class="na">isEmpty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$task</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">queue</span><span class="o">-&gt;</span><span class="na">dequeue</span><span class="p">();</span>
</span><span class='line'>            <span class="nv">$task</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$task</span><span class="o">-&gt;</span><span class="na">finished</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">enqueue</span><span class="p">(</span><span class="nv">$task</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bon toute la magie est faite grâce à la <code>SplQueue</code> qui est une file d&#8217;attente. J&#8217;ajoute dans la file d&#8217;attente toutes les taches.</p>

<p>Je prend une tache de la file d&#8217;attente. Je l&#8217;exécute avec <code>-&gt;run()</code>, si la tache n&#8217;est pas finie, je la remets dans la file d&#8217;attente.</p>

<p>Reprenons un code d&#8217;exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">task1</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;This is task 1 iteration </span><span class="si">$i</span><span class="s2">.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">yield</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">task2</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="o">++</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;This is task 2 iteration </span><span class="si">$i</span><span class="s2">.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">yield</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$task1</span> <span class="o">=</span>  <span class="k">new</span> <span class="nx">Task</span><span class="p">(</span><span class="nx">task1</span><span class="p">());</span>
</span><span class='line'><span class="nv">$task2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">(</span><span class="nx">task2</span><span class="p">());</span>
</span><span class='line'><span class="nv">$scheduler</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Scheduler</span><span class="p">();</span>
</span><span class='line'><span class="nv">$scheduler</span><span class="o">-&gt;</span><span class="na">enqueue</span><span class="p">(</span><span class="nv">$task1</span><span class="p">);</span>
</span><span class='line'><span class="nv">$scheduler</span><span class="o">-&gt;</span><span class="na">enqueue</span><span class="p">(</span><span class="nv">$task2</span><span class="p">);</span>
</span><span class='line'><span class="nv">$scheduler</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">1.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">2</span> <span class="nx">iteration</span> <span class="mf">1.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">2.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">2</span> <span class="nx">iteration</span> <span class="mf">2.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">3.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">2</span> <span class="nx">iteration</span> <span class="mf">3.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">4.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">2</span> <span class="nx">iteration</span> <span class="mf">4.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">5.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">2</span> <span class="nx">iteration</span> <span class="mf">5.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">6.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">7.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">8.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">9.</span>
</span><span class='line'><span class="k">This</span> <span class="nx">is</span> <span class="nx">task</span> <span class="mi">1</span> <span class="nx">iteration</span> <span class="mf">10.</span>
</span></code></pre></td></tr></table></div></figure>


<p>On voit que j&#8217;exécute en parallèle toutes mes deux taches.</p>

<h2>En conclusion</h2>

<p>Il existe deux librairies qui utilise ce concept</p>

<ul>
<li><a href="https://github.com/icicleio/icicle">Icicle</a></li>
<li><a href="https://github.com/recoilphp/recoil">recoil</a></li>
</ul>


<p>Cette façon d&#8217;implémenter est assez curieuse. Car le code ne ressemble pas au code classique asynchrone avec des callbacks et autre événements. Si on regarde bien cela ressemble beaucoup a du code synchrone. Elle est inspirée du <code>C#</code> <code>async/wait</code>. On a l&#8217;impression que cela ressemble a du code synchrone où on ajoute des <code>yield</code> un peu partout. (en simplifiant beaucoup..)</p>

<p>Il y a peu de documentation et d&#8217;exemple sur le sujet.</p>

<ul>
<li>la référence est ce post de <a href="http://nikic.github.io">Nikic</a>: <a href="https://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html">Cooperative multitasking using coroutines (in PHP!)</a></li>
<li>Une version légèrement simplifié dont je me suis inspiré pour le code <a href="https://medium.com/@assertchris/co-operative-php-multitasking-ce4ef52858a0">Co-operative PHP Multitasking</a></li>
</ul>


<p>Je vais essayer de continuer avec le yield et repartir sur les promises.</p>

<p>Merci de m&#8217;avoir lu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Problème Np-Complet]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/09/09/probleme-np-complet/"/>
    <updated>2015-09-09T21:55:10+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/09/09/probleme-np-complet</id>
    <content type="html"><![CDATA[<p>Aujourd&#8217;hui je vais parler des problèmes Np-complets avec le <a href="http://xkcd.com/">xkcd</a> suivant. L&#8217;original est <a href="http://xkcd.com/287/">ici</a></p>

<p><img class="center" src="http://mcamuzat.github.io/images/np_complete.png" width="600" height="388" title="xkcd" alt="xkcd"></p>

<p>On appelle ce genre de problème les NP-complets</p>

<p>Pour faire simple (Ce que j&#8217;en ai compris)</p>

<p>Les NP-problèmes sont des problèmes donc il est très facile de vérifier une solutions. Dans notre cas ici il suffit de commander 7 * 2.15 pour obtenir 15.05. Le problème a une solution. Mais il est quasiment impossible de trouver une méthode efficace pour déterminer la solution, voir même de savoir s&#8217;il y a une solutions.</p>

<p>Il suffit de regarder les images suivantes (pris d&#8217;un post de <a href="http://cstheory.stackexchange.com/questions/5188/explain-p-np-problem-to-10-year-old">stack exchange</a>)</p>

<ul>
<li>si on met les paquets les plus gros d&#8217;abord, les plus larges, avec un <a href="http://www.optaplanner.org/">planner</a>.</li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/backpack.png" width="600" height="450" title="bin packing" alt="slide1"></p>

<ul>
<li><p>A quel moment mettre le paquet <code>2 * 4 = 8</code>. suivant la forme la solution varie
<img class="center" src="http://mcamuzat.github.io/images/backpack2.png" width="600" height="450" title="bin packing" alt="slide2"></p></li>
<li><p>Enfin impossible de savoir s&#8217;il y a une solution ici. Il y a priori la place, pourtant il n&#8217;y a pas de solution</p></li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/backpack3.png" width="600" height="450" title="bin packing" alt="slide3"></p>

<p>la source des images <a href="http://cstheory.stackexchange.com/posts/5206/revisions">ici</a>.</p>

<p>Il reste la force brute.</p>

<p>Voici ma version du xkcd en php</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">findSolution</span><span class="p">(</span><span class="nv">$total</span><span class="p">,</span> <span class="nv">$list</span><span class="p">,</span> <span class="nv">$menu</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$menu</span> <span class="k">as</span> <span class="nv">$plat</span> <span class="o">=&gt;</span> <span class="nv">$prix</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$list</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$plat</span><span class="p">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$total</span><span class="o">-</span><span class="nv">$prix</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$total</span><span class="o">-</span><span class="nv">$prix</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$result</span> <span class="o">=</span> <span class="nx">findSolution</span><span class="p">(</span><span class="nv">$total</span><span class="o">-</span><span class="nv">$prix</span><span class="p">,</span> <span class="nv">$result</span><span class="p">,</span> <span class="nv">$menu</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$menu</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s2">&quot;Mixed Fruit&quot;</span><span class="o">=&gt;</span><span class="mi">215</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;French Fries&quot;</span><span class="o">=&gt;</span><span class="mi">275</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Side Salad&quot;</span><span class="o">=&gt;</span><span class="mi">335</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Hot Wing&quot;</span><span class="o">=&gt;</span><span class="mi">355</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Mozzarela Sticks&quot;</span><span class="o">=&gt;</span><span class="mi">420</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Sampler Plate&quot;</span><span class="o">=&gt;</span><span class="mi">580</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nx">findSolution</span><span class="p">(</span><span class="mi">1505</span><span class="p">,</span> <span class="k">array</span><span class="p">(),</span> <span class="nv">$menu</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cela affiche toute les solutions possibles.</p>

<p>Bien sur il y a des doublons. Il n&#8217;y a pas de différence entre <code>["Hot wing", "Hot wing", "Mixed Fruit", "Sampler Plate"]</code> et  <code>["Hot wing", "Hot wing", "Sampler Plate", "Mixed Fruit"]</code></p>

<p>Pour supprimer les doublons à l&#8217;affichage. Je vais utiliser des globales.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nv">$allResult</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="k">function</span> <span class="nf">findSolution</span><span class="p">(</span><span class="nv">$total</span><span class="p">,</span> <span class="nv">$list</span><span class="p">,</span> <span class="nv">$menu</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">global</span> <span class="nv">$count</span><span class="p">;</span>
</span><span class='line'>    <span class="k">global</span> <span class="nv">$allResult</span><span class="p">;</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$menu</span> <span class="k">as</span> <span class="nv">$plat</span> <span class="o">=&gt;</span> <span class="nv">$prix</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$result</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$list</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$plat</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$total</span><span class="o">-</span><span class="nv">$prix</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$sort</span> <span class="o">=</span> <span class="nv">$result</span><span class="p">;</span>
</span><span class='line'>            <span class="nb">sort</span><span class="p">(</span><span class="nv">$sort</span><span class="p">);</span>
</span><span class='line'>            <span class="nv">$allResult</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$sort</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$result</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$total</span><span class="o">-</span><span class="nv">$prix</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$result</span> <span class="o">=</span> <span class="nx">findSolution</span><span class="p">(</span><span class="nv">$total</span><span class="o">-</span><span class="nv">$prix</span><span class="p">,</span><span class="nv">$result</span><span class="p">,</span> <span class="nv">$menu</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$menu</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s2">&quot;Mixed Fruit&quot;</span><span class="o">=&gt;</span><span class="mi">215</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;French Fries&quot;</span><span class="o">=&gt;</span><span class="mi">275</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Side Salad&quot;</span><span class="o">=&gt;</span><span class="mi">335</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Hot Wing&quot;</span><span class="o">=&gt;</span><span class="mi">355</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Mozzarela Sticks&quot;</span><span class="o">=&gt;</span><span class="mi">420</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Sampler Plate&quot;</span><span class="o">=&gt;</span><span class="mi">580</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nv">$solution</span> <span class="o">=</span> <span class="nx">findSolution</span><span class="p">(</span><span class="mi">1505</span><span class="p">,</span> <span class="k">array</span><span class="p">(),</span> <span class="nv">$menu</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nb">array_map</span><span class="p">(</span>
</span><span class='line'>    <span class="s2">&quot;unserialize&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">array_unique</span><span class="p">(</span>
</span><span class='line'>        <span class="nb">array_map</span><span class="p">(</span><span class="s2">&quot;serialize&quot;</span><span class="p">,</span> <span class="nv">$allResult</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$count</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>je trie le tableau de résultats. pour que tout mes doublons s&#8217;affiche pareil.</li>
<li><code>array_unique</code> ne marche pas si les valeurs sont des <em>tableaux</em> (ce qui est la cas ici)</li>
<li>Je transforme mes tableaux en chaine de caractères grâce à la serialization avec le <code>array_map</code></li>
<li>Alors <code>array_unique</code> vire les doublons</li>
<li>Je deserialize avec à nouveau <code>array_map</code> et l&#8217;opération inverse.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">array</span><span class="p">([</span><span class="nx">resultat1</span><span class="p">],</span> <span class="p">[</span><span class="nx">resultat1</span><span class="p">],[</span><span class="nx">resultat2</span><span class="p">])</span>
</span><span class='line'><span class="c1">// array_map(&quot;serialize&quot;, $result);</span>
</span><span class='line'><span class="k">array</span><span class="p">(</span><span class="s2">&quot;resultat1_serialisé&quot;</span><span class="p">,</span><span class="s2">&quot;resultat1_serialisé&quot;</span><span class="p">,</span><span class="s2">&quot;resultat2_serialisé&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// array_unique(..)</span>
</span><span class='line'><span class="k">array</span><span class="p">(</span><span class="s2">&quot;resultat1_serialise&quot;</span><span class="p">,</span> <span class="s2">&quot;resultat2_serialise&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// array_map(&quot;unserialize&quot;, ..)</span>
</span><span class='line'><span class="k">array</span><span class="p">([</span><span class="nx">resultat1</span><span class="p">],</span> <span class="p">[</span><span class="nx">resultat2</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">int</span><span class="p">(</span><span class="mi">12040</span><span class="p">)</span>
</span><span class='line'><span class="k">array</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="s2">&quot;Mixed Fruit&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="s2">&quot;Mixed Fruit&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="s2">&quot;Mixed Fruit&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="s2">&quot;Mixed Fruit&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="s2">&quot;Mixed Fruit&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="s2">&quot;Mixed Fruit&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="s2">&quot;Mixed Fruit&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="s2">&quot;Hot Wing&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="s2">&quot;Hot Wing&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="s2">&quot;Mixed Fruit&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">13</span><span class="p">)</span> <span class="s2">&quot;Sampler Plate&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai fait 12040 boucles pour obtenir toutes les solutions. On peut bien sur optimiser un peu l&#8217;algorithme, si la valeur 5.60 ne marche pas à la première boucle, il y a pas de chance pour quelle marche à la seconde boucle. Donc il faut supprimer des valeurs dans le tableau au fur et à mesure.</p>

<h2> Conclusion</h2>

<p>La force brute n&#8217;est pas vraiment une solution, avec plus de valeurs on explose les possibilités.  Il existe plusieurs <a href="https://fr.wikipedia.org/wiki/Probl%C3%A8me_du_sac_%C3%A0_dos">approches</a> qui tende vers des solutions.</p>

<p>En informatique, il y a des nombreux cas où ce problème intervient</p>

<ul>
<li>L&#8217;ordre optimal d&#8217;installation des logiciels (Probablement la partie la plus marrante de <a href="https://getcomposer.org/">composer</a>, mais elle est assez peu documentée)</li>
<li>Beaucoup de cryptages utilisent des problèmes NP-complets (factorisation de deux nombres premiers).</li>
<li>La dernière phrase du comics parle du <a href="https://fr.wikipedia.org/wiki/Probl%C3%A8me_du_voyageur_de_commerce">voyageur de commerce</a>, un problème célèbre.</li>
<li>Le sudoku, Les jeux <a href="http://arxiv.org/pdf/1203.1895v1.pdf">nintendos</a> ?!</li>
<li>Enfin une <a href="https://fr.wikipedia.org/wiki/Liste_de_probl%C3%A8mes_NP-complets">liste complète</a> de wikipedia</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Yield Les Générateurs]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/09/06/php-yield-les-generateurs/"/>
    <updated>2015-09-06T19:06:48+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/09/06/php-yield-les-generateurs</id>
    <content type="html"><![CDATA[<p>Nous allons voir une nouveauté de PHP 5.5 l&#8217;instruction <strong>yield</strong></p>

<p>Cela permet de mettre en place ce qu&#8217;on appelle les générateurs.</p>

<h2>Un premier exemple</h2>

<p>Regardons un exemple ensemble</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">generateAnimal</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;Je suis dans le générateur</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s2">&quot;Panda&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;Je suis retourné dans le générateur</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s2">&quot;Lama&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;je suis de retour</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s2">&quot;Alpaga&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;plus de d&#39;animaux</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$generator</span> <span class="o">=</span> <span class="nx">generateAnimal</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$generator</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;j&#39;ai reçu </span><span class="si">$value</span><span class="s2"> </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">j</span><span class="s1">&#39;ai reçu Panda </span>
</span><span class='line'><span class="s1">Je suis retourné dans le générateur</span>
</span><span class='line'><span class="s1">j&#39;</span><span class="nx">ai</span> <span class="nx">reçu</span> <span class="nx">Lama</span>
</span><span class='line'><span class="nx">je</span> <span class="nx">suis</span> <span class="nx">de</span> <span class="nx">retour</span>
</span><span class='line'><span class="nx">j</span><span class="s1">&#39;ai reçu Alpaga </span>
</span><span class='line'><span class="s1">plus de d&#39;</span><span class="nx">animaux</span>
</span></code></pre></td></tr></table></div></figure>


<p>D&#8217;abord un générateur se comporte comme un iterator. C&#8217;est grâce à cela que je peux faire un <code>foreach</code>.</p>

<p>Je vais refaire pas à pas avec des commentaires.</p>

<h3>premier passage</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">generateAnimal</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;Je suis dans le générateur</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s2">&quot;Panda&quot;</span><span class="p">;</span> <span class="c1">// Je retourne ici </span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;Je suis retourné dans le générateur</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s2">&quot;Lama&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;je suis de retour</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s2">&quot;Alpaga&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;plus de d&#39;animaux</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$generator</span> <span class="o">=</span> <span class="nx">generateAnimal</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nv">$generator</span><span class="o">-&gt;</span><span class="na">current</span><span class="p">();</span>
</span><span class='line'><span class="c1">// &quot;je suis dans le générateur</span>
</span><span class='line'><span class="c1">// $value = &quot;Panda&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Itération suivante</h3>

<p>En fait le générateur reste en suspens, <code>yield</code> est un pseudo <code>return</code> (enfin c&#8217;est comme cela que je l&#8217;ai compris)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">generateAnimal</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;Je suis dans le générateur</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s2">&quot;Panda&quot;</span><span class="p">;</span> <span class="c1">// Je suis reste ici .. je continue </span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;Je suis retourné dans le générateur</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s2">&quot;Lama&quot;</span><span class="p">;</span> <span class="c1">// je m&#39;arrete à nouveau </span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;je suis de retour</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s2">&quot;Alpaga&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;plus d&#39;animaux</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$generator</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">()</span> <span class="c1">// On récupère la valeur suivante</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$generator</span><span class="o">-&gt;</span><span class="na">current</span><span class="p">();</span>
</span><span class='line'><span class="c1">// &quot;je suis retourné dans le générateur</span>
</span><span class='line'><span class="c1">// &quot;Lama&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Troisième itération</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">generateAnimal</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;Je suis dans le générateur</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s2">&quot;Panda&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;Je suis retourné dans le générateur</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s2">&quot;Lama&quot;</span><span class="p">;</span> <span class="c1">// je me suis arrété ici </span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;je suis de retour</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s2">&quot;Alpaga&quot;</span><span class="p">;</span> <span class="c1">// je retourne .. </span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;plus d&#39;animaux</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$generator</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">()</span> <span class="c1">// On récupère la valeur suivante</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$generator</span><span class="o">-&gt;</span><span class="na">current</span><span class="p">();</span>
</span><span class='line'><span class="c1">// Je suis de retour</span>
</span><span class='line'><span class="c1">// &quot;Alpaga&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dernière Itération</h3>

<p>Nous y sommes presque..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">generateAnimal</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;Je suis dans le générateur</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s2">&quot;Panda&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;Je suis retourné dans le générateur</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s2">&quot;Lama&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;je suis de retour</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s2">&quot;Alpaga&quot;</span><span class="p">;</span> <span class="c1">// je me suis arréte ici</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;plus d&#39;animaux</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span> <span class="c1">//pas de yield je renvoie null..</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$generator</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">()</span> <span class="c1">// On récupère la valeur suivante</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$generator</span><span class="o">-&gt;</span><span class="na">current</span><span class="p">();</span>
</span><span class='line'><span class="c1">// Plus d&#39;animaux </span>
</span><span class='line'><span class="c1">// il n&#39;y a rien car echo null;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Une fois qu&#8217;un générateur a fini, on ne peux le réutiliser</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$generator</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;j&#39;ai reçu </span><span class="si">$value</span><span class="s2"> </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$generator</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;j&#39;ai reçu </span><span class="si">$value</span><span class="s2"> </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;obtiens</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">PHP</span> <span class="nx">Fatal</span> <span class="nx">error</span><span class="o">:</span>  <span class="nx">Uncaught</span> <span class="nx">exception</span> <span class="s1">&#39;Exception&#39;</span> <span class="nx">with</span> <span class="nx">message</span> <span class="s1">&#39;Cannot traverse an already closed generator&#39;</span> <span class="nx">in</span> <span class="o">/</span><span class="nx">home</span><span class="o">/</span><span class="nx">marc</span><span class="o">/</span><span class="k">yield</span><span class="o">.</span><span class="nx">php</span><span class="o">:</span><span class="mi">16</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Quel est l&#8217;intérêt ?</h2>

<p>Admettons que je veux faire un <code>foreach</code> sur un tableau d&#8217;un millions de lignes.</p>

<p>Pour faire un Array de 1 Million de valeurs ce n&#8217;est pas très compliqué. Une instruction suffit.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">range</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="o">...</span><span class="p">,</span><span class="mi">1000000</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais cela prend un peu de mémoire. Utilisons notre générateur de manière sympathique</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">xrange</span><span class="p">(</span><span class="nv">$min</span><span class="p">,</span> <span class="nv">$max</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$min</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$max</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="k">yield</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nx">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1000000</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">echo</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>l&#8217;énorme avantage est que je n&#8217;ai pas besoin de générer un array de 1 Millions de lignes, je génère valeur par valeur. Si la fonction est appelle deux fois je ne génère que deux valeurs. L&#8217;occupation en mémoire est faible. Les valeurs sont instanciées <em>paresseusements</em>.</p>

<h3>Un exemple encore plus concret.</h3>

<p>Pour lire un fichier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">getLinesFromFile</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$fileHandle</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="k">false</span> <span class="o">!==</span> <span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fileHandle</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">yield</span> <span class="nv">$line</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fileHandle</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$lines</span> <span class="o">=</span> <span class="nx">getLinesFromFile</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">);</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$lines</span> <span class="k">as</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do something with $line</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce code a plusieurs avantages.</p>

<ul>
<li>On va chercher la ligne à la demande.</li>
<li>Il y a une couche d&#8217;abstraction entre la lecture et le programme principale.</li>
</ul>


<h3>Un petit quizz</h3>

<p>Pouvez vous deviner la fonction suivante ?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">mystere</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$last</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$current</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">list</span><span class="p">(</span><span class="nv">$current</span><span class="p">,</span> <span class="nv">$last</span><span class="p">)</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$current</span> <span class="o">+</span> <span class="nv">$last</span><span class="p">,</span> <span class="nv">$current</span><span class="p">);</span>
</span><span class='line'>        <span class="k">yield</span> <span class="nv">$current</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nx">mystere</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$value</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$count</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// pas cool la boucle infinie</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Une mise au point</h2>

<p>Les générateurs se comportent comme des itérateurs, mais pour implémenter un <a href="http://php.net/manual/fr/class.iterator.php">iterator</a> il faut implémenter l&#8217;interface suivante.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="nx">Iterator</span> <span class="k">extends</span> <span class="nx">Traversable</span> <span class="p">{</span>
</span><span class='line'><span class="cm">/* Méthodes */</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">public</span> <span class="nx">mixed</span> <span class="nb">current</span> <span class="p">(</span> <span class="nx">void</span> <span class="p">)</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">public</span> <span class="nx">scalar</span> <span class="nb">key</span> <span class="p">(</span> <span class="nx">void</span> <span class="p">)</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">public</span> <span class="nx">void</span> <span class="nb">next</span> <span class="p">(</span> <span class="nx">void</span> <span class="p">)</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">public</span> <span class="nx">void</span> <span class="nb">rewind</span> <span class="p">(</span> <span class="nx">void</span> <span class="p">)</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">public</span> <span class="nx">boolean</span> <span class="nx">valid</span> <span class="p">(</span> <span class="nx">void</span> <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Par exemple pour l&#8217;exemple du fichier (je recopie la doc de php)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">LineIterator</span> <span class="k">implements</span> <span class="nx">Iterator</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$fileHandle</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$line</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fileHandle</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">RuntimeException</span><span class="p">(</span><span class="s1">&#39;Impossible d\&#39;ouvrir le fichier : &quot;&#39;</span> <span class="o">.</span> <span class="nv">$fileName</span> <span class="o">.</span> <span class="s1">&#39;&quot;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">rewind</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">fseek</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fileHandle</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fileHandle</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">valid</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">false</span> <span class="o">!==</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">line</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">current</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">line</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">key</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">next</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">false</span> <span class="o">!==</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fileHandle</span><span class="p">);</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__destruct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">fclose</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fileHandle</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;implémentation en générateur.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">getLinesFromFile</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$fileHandle</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nx">RuntimeException</span><span class="p">(</span><span class="s1">&#39;Impossible d\&#39;ouvrir le fichier : &quot;&#39;</span> <span class="o">.</span> <span class="nv">$fileName</span> <span class="o">.</span> <span class="s1">&#39;&quot;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="k">false</span> <span class="o">!==</span> <span class="nv">$line</span> <span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fileHandle</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">yield</span> <span class="nv">$line</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fileHandle</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est quand même plus simple.</p>

<h2>En conclusion.</h2>

<p>Cela existe aussi dans les autres langages</p>

<p>On trouve l&#8217;instruction <code>yield</code> surtout dans python</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">countdown</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">n</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">countdown</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;depart dans </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>La référence est ce <a href="http://www.dabeaz.com/generators/">site</a> , Il existe une <a href="http://www.youtube.com/watch?v=5-qadlG7tWo">video</a> (<strong>3 heures !!!</strong>)</p>

<p>Cela existe aussi dans <a href="http://www.tutorialspoint.com/ruby/ruby_blocks.htm">ruby</a>, <a href="https://msdn.microsoft.com/fr-fr/library/9k7k7cf0.aspx">C#</a>, et dans le javascript ES6</p>

<p>C&#8217;est un peu plus qu&#8217;une nouvelle syntaxe. Cela permet de faire du code asynchrone. Car cela permet une structure de codage que l&#8217;on appelle: Les <a href="https://fr.wikipedia.org/wiki/Coroutine">Couroutines</a>. Mais plus d&#8217;info dans un prochain post .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Promises Et Php via ReactPhp]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/09/05/les-promises-et-php-via-react/"/>
    <updated>2015-09-05T19:10:10+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/09/05/les-promises-et-php-via-react</id>
    <content type="html"><![CDATA[<p>Les promises sont une alternative plus puissante au Callback. Relativement peu connues au début. Elle sont maintenant en standard dans beaucoup de langage javascript ES6, python 3.2, java. Où via des librairies comme <a href="https://github.com/reactphp/promise">react/promise</a> pour php</p>

<p>Une promise représente une valeur donc le résultat n&#8217;est pas encore connu.
Quand le résultat est connu,  la promise a 3 états possibles</p>

<ul>
<li><strong>Pending</strong> ou <strong>Unfulfillled</strong>  en Attente..</li>
<li><strong>Resolved</strong> ou <strong>fulfillled</strong>  Succès</li>
<li><strong>Rejected</strong> ou <strong>Failed</strong>  Erreur.</li>
</ul>


<p>Un <em>Deffered</em> représente un travail qui n&#8217;est pas encore fini. Donc un <em>Deferred</em> possède une promise (une valeur pas encore connues).</p>

<p>Quand la valeur est connue, la promesse utilise un <em>handler</em> (en général <code>-&gt;then()</code>) qui lui-même renvoie une promise. L&#8217;intérêt est que les promises sont chainables.</p>

<p>Mais essayons quelques exemples qui seront un peu plus parlant.</p>

<p>Pour ce faire nous allons d&#8217;abord installer <a href="https://github.com/reactphp/promise">react/promises</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">require</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// On crée un travail</span>
</span><span class='line'><span class="nv">$deferred</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">React\Promise\Deferred</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// On veux la promise</span>
</span><span class='line'><span class="nv">$promise</span>  <span class="o">=</span> <span class="nv">$deferred</span><span class="o">-&gt;</span><span class="na">promise</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;tout va bien </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span> <span class="p">},</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;tout va mal </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span> <span class="p">},</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;j&#39;attends</span><span class="se">\n</span><span class="s2"> &quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Le travail est un succes, on résoud la promise</span>
</span><span class='line'><span class="nv">$deferred</span><span class="o">-&gt;</span><span class="na">resolve</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici ce que j&#8217;obtiens si je lance le programme.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">tout</span> <span class="nx">va</span> <span class="nx">bien</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si je remplace <code>$deferred-&gt;resolve()</code> par <code>$deferred-&gt;reject()</code>. Le travail n&#8217;as pas marché. J&#8217;obtiens</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Tout</span> <span class="nx">va</span> <span class="nx">mal</span>
</span></code></pre></td></tr></table></div></figure>


<p>
La syntaxe de <code>then</code> est</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">then</span><span class="p">(</span><span class="nx">callable</span> <span class="nv">$onFulfilled</span> <span class="o">=</span> <span class="k">null</span><span class="p">,</span> <span class="nx">callable</span> <span class="nv">$onRejected</span> <span class="o">=</span> <span class="k">null</span><span class="p">,</span> <span class="nx">callable</span> <span class="nv">$onProgress</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Si l&#8217;action est un succès, On résous la promise en appelant la fonction <code>$onFulfilled</code>.</li>
<li>L&#8217;action n&#8217;est pas bonne, On rejette la promise avec <code>$onRejected</code>.</li>
<li>Si l&#8217;action est en cours , On appelle <code>$onProgress</code>.</li>
</ul>


<p>A noter qu&#8217;une promise une fois qu&#8217;elle est résolue ou rejetée ne peut plus être réutilisée sauf dans le cas du <code>pending</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">notify</span><span class="p">();</span>
</span><span class='line'><span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">notify</span><span class="p">();</span>
</span><span class='line'><span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">notify</span><span class="p">();</span>
</span><span class='line'><span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">resolve</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">j</span><span class="s1">&#39;attends</span>
</span><span class='line'><span class="s1">j&#39;</span><span class="nx">attends</span>
</span><span class='line'><span class="nx">j</span><span class="err">&#39;</span><span class="nx">attends</span>
</span><span class='line'><span class="nx">tout</span> <span class="nx">va</span> <span class="nx">bien</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour l&#8217;instant rien de bien compliqué. On peut chainer les promises</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$promise</span>  <span class="o">=</span> <span class="nv">$deferred</span><span class="o">-&gt;</span><span class="na">promise</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;action 1 ok</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;action 2 ok</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;}</span>
</span><span class='line'><span class="p">)</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>   <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;action 3 ok</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;},</span>
</span><span class='line'>   <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;une des actions n&#39;est pas ok..</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$deferred</span><span class="o">-&gt;</span><span class="na">resolve</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">action</span> <span class="mi">1</span> <span class="nx">ok</span>
</span><span class='line'><span class="nx">action</span> <span class="mi">2</span> <span class="nx">ok</span>
</span><span class='line'><span class="nx">action</span> <span class="mi">3</span> <span class="nx">ok</span>
</span></code></pre></td></tr></table></div></figure>


<p>Essayons avec <code>deffered-&gt;reject()</code></p>

<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">une</span> <span class="nx">des</span> <span class="nx">actions</span> <span class="nx">n</span><span class="err">&#39;</span><span class="nx">est</span> <span class="nx">pas</span> <span class="nx">ok</span><span class="o">..</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ajoutons un exception à la deuxième étape.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$promise</span>  <span class="o">=</span> <span class="nv">$deferred</span><span class="o">-&gt;</span><span class="na">promise</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;action 1 ok</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">();}</span>
</span><span class='line'><span class="p">)</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>   <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;action 3 ok</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;},</span>
</span><span class='line'>   <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;une des actions n&#39;est pas ok..</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">action</span> <span class="mi">1</span> <span class="nx">ok</span>
</span><span class='line'><span class="nx">une</span> <span class="nx">des</span> <span class="nx">actions</span> <span class="nx">n</span><span class="err">&#39;</span><span class="nx">est</span> <span class="nx">pas</span> <span class="nx">ok</span><span class="o">..</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ajoutons une exception dans le premier, et ajoutons un cas pour gérer l&#8217;erreur</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$promise</span>  <span class="o">=</span> <span class="nv">$deferred</span><span class="o">-&gt;</span><span class="na">promise</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;action 2 ok</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;},</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;l&#39;action 1 pas ok mais on continue..</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;}</span>
</span><span class='line'><span class="p">)</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>   <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;action 3 ok</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;},</span>
</span><span class='line'>   <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;une des actions n&#39;est pas ok..</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$deferred</span><span class="o">-&gt;</span><span class="na">resolve</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">l</span><span class="err">&#39;</span><span class="nx">action</span> <span class="mi">1</span> <span class="nx">pas</span> <span class="nx">ok</span> <span class="nx">mais</span> <span class="nx">on</span> <span class="k">continue</span><span class="o">..</span>
</span><span class='line'><span class="nx">action</span> <span class="mi">3</span> <span class="nx">ok</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si on veux que l&#8217;erreur de l&#8217;action 1 se propage deux possibilités..</p>

<ul>
<li>supprimer le callback d&#8217;erreur de l&#8217;action 2</li>
<li>Ou relancer l&#8217;exception</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$promise</span>  <span class="o">=</span> <span class="nv">$deferred</span><span class="o">-&gt;</span><span class="na">promise</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;action 2 ok</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;},</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;l&#39;action 1 pas ok et on stop le processus&quot;</span><span class="p">;</span> <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">();}</span>
</span><span class='line'><span class="p">)</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>   <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;action 3 ok</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;},</span>
</span><span class='line'>   <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">&quot;une des actions n&#39;est pas ok..</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce qui est intéressant dans les promises c&#8217;est que le code équivalent en procédural est pas génial.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="nv">$result</span> <span class="o">=</span> <span class="nx">doAction1</span><span class="p">();</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="nx">doAction1</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result2</span> <span class="o">=</span> <span class="nx">doAction2</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$result2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$result3</span> <span class="o">=</span> <span class="nx">doAction3</span><span class="p">(</span><span class="nv">$result3</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$result3</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">New</span> <span class="nx">Exception</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="o">..</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;une des actions n&#39;est pas ok&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Devient</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$doAction1</span><span class="p">()</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$result1</span><span class="p">){</span><span class="nx">doAction2</span><span class="p">(</span><span class="nv">$result1</span><span class="p">);})</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
</span><span class='line'>        <span class="k">function</span><span class="p">(</span><span class="nv">$result2</span><span class="p">){</span><span class="nx">doAction3</span><span class="p">(</span><span class="nv">$result2</span><span class="p">);},</span>
</span><span class='line'>        <span class="k">function</span><span class="p">()</span> <span class="p">{</span><span class="k">echo</span> <span class="s2">&quot;une des actions n&#39;est pas ok&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>C&#8217;est mieux non ?</p>

<p>Dans un prochain article nous nous utiliserons ce que nous avons appris avec <a href="http://guzzle.readthedocs.org/en/latest/">Guzzle</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lancer Des Commandes Dans Vim]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/31/lancer-des-commandes-dans-vim/"/>
    <updated>2015-08-31T23:49:17+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/31/lancer-des-commandes-dans-vim</id>
    <content type="html"><![CDATA[<p>Soit le fichier texte suivant:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> * Alpha
</span><span class='line'> * Foxtrot
</span><span class='line'> * Charlie
</span><span class='line'> * Delta
</span><span class='line'> * Echo 
</span><span class='line'> * Bravo</span></code></pre></td></tr></table></div></figure>


<p>Dans VIM il suffit de taper.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:%sort ou :%!sort</span></code></pre></td></tr></table></div></figure>


<p>Pour obtenir</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> * Alpha
</span><span class='line'> * Bravo
</span><span class='line'> * Charlie
</span><span class='line'> * Delta
</span><span class='line'> * Echo 
</span><span class='line'> * Foxtrot</span></code></pre></td></tr></table></div></figure>


<p>On peux aussi lancer plein de commandes amusantes</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> * Doublon
</span><span class='line'> * Pas unique
</span><span class='line'> * Doublon
</span><span class='line'> * 
</span><span class='line'> * ...</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>!sort | uniq -c | tr "[A-Z]" "[a-z]"</span></code></pre></td></tr></table></div></figure>


<p>Pour ceux qui ne se rappelle plus trop les commandes de Bash</p>

<ul>
<li><code>sort</code> trie le texte</li>
<li><code>uniq -c</code> prend toute les valeurs et les comptes c&#8217;est l&#8217;équivalent d&#8217;un <code>GROUP BY</code> en SQL</li>
<li><code>tr</code> est l&#8217;abréviation de <strong>tr</strong>anspose je remplace les lettres en <code>[A-Z]</code> par leur équivalent en minuscule.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  1  * 
</span><span class='line'>  1  * ...
</span><span class='line'>  2  * doublon
</span><span class='line'>  1  * pas unique</span></code></pre></td></tr></table></div></figure>


<p>Si vous sélectionnez le texte avec <code>v</code> et que vous appuyer sur <code>:</code></p>

<p>Alors vous devez voir la commande suivante</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:'&lt;,'&gt;</span></code></pre></td></tr></table></div></figure>


<p>et Ajoutez la commande que vous allez appliquer à la sélection. Par exemple <code>:'&lt;,'&gt;!sort</code></p>

<p>Plus rigolo. On peux appeler des langages que l&#8217;on veut dans VIM</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">echo</span> <span class="s2">&quot;bonjour&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tapez <code>!!</code>
vous devriez voir apparaître</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">:.!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compléter avec <code>:.!php</code></p>

<p>votre texte va se remplacer</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">bonjour</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cela marche aussi avec python</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="s">&quot;olleh&quot;</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Avec le curseur sur la ligne, appuyer sur <code>!!</code> puis ajoutez <code>:.!python</code></p>

<p>La ligne devient</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">hello</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Exécuter une commande Bash depuis VIM</h2>

<p>La commande suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">php</span> <span class="n">app</span><span class="o">/</span><span class="n">console</span> <span class="n">cache</span><span class="p">:</span><span class="n">clear</span> <span class="o">--</span><span class="n">env</span><span class="o">=</span><span class="n">prod</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si vous voulez exécuter la commande mais ne pas modifiez la ligne.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">:</span><span class="o">.</span><span class="n">w</span> <span class="err">!</span><span class="n">bash</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est un peu moins simple.</p>

<ul>
<li><code>:.</code> représente la ligne actuelle.</li>
<li><code>w</code> représente une écriture</li>
<li><code>!bash</code> via Bash.</li>
</ul>


<p>La documentation de VIM <code>:help :w_c</code></p>

<h2>en résumé</h2>

<ul>
<li>Si vous voulez appliquer votre commande sur tout le fichier <code>:%!commande</code></li>
<li>S vous voulez juste la ligne <code>:.!commande</code> ou tapez <code>!!</code>.</li>
<li>Si vous voulez sur une sélection <code>v</code> ou <code>V</code> puis <code>:</code> vous deviez voir ceci <code>:'&lt;,'&gt;</code>, ajoutez la commande souhaitée.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Stacks Des Structures Méconnues]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/29/stacks-structures-meconnues/"/>
    <updated>2015-08-29T16:34:41+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/29/stacks-structures-meconnues</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Je vais parler de <code>SplStack</code> une structure de donnée qui fait partie de La SPL (pour <strong>S</strong>tandart <strong>P</strong>HP <strong>L</strong>ibrairie). Nous allons voir trois façons de nous servir de cette structure.</p>

<h2>Les Stacks ou Piles</h2>

<p>La pile n&#8217;a que deux opérations.</p>

<ul>
<li>Empiler ou Push On ajoute une donnée sur le haut de la pile.</li>
<li>Dépiler ou Pop On retire une donnée du haut de la pile.</li>
</ul>


<p>Il n&#8217;y a que le haut de la pile qui est visible. La pile est une mémoire LIFO (<strong>L</strong>ast <strong>I</strong>n <strong>F</strong>irst <strong>O</strong>ut).</p>

<p>Quelques exemples.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$pile</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SplStack</span><span class="p">();</span> <span class="c1">// la pile est vide []</span>
</span><span class='line'><span class="nv">$pile</span><span class="o">-&gt;</span><span class="na">push</span><span class="p">(</span><span class="mi">34</span><span class="p">)</span> <span class="c1">// [34]</span>
</span><span class='line'><span class="nv">$pile</span><span class="o">-&gt;</span><span class="na">push</span><span class="p">(</span><span class="mi">45</span><span class="p">)</span> <span class="c1">// [34, 45]</span>
</span><span class='line'><span class="nv">$value</span> <span class="o">=</span> <span class="nv">$pile</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">()</span> <span class="c1">// [34]</span>
</span><span class='line'><span class="nv">$pile</span><span class="o">-&gt;</span><span class="na">push</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="c1">// [34, &#39;a&#39;]</span>
</span><span class='line'><span class="nv">$value</span> <span class="o">=</span> <span class="nv">$pile</span><span class="o">-&gt;</span><span class="na">top</span><span class="p">()</span> <span class="c1">// $value = &#39;a&#39; pile [34, &#39;a&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peux utiliser les array comme des piles avec <code>array_pop</code> et <code>array_push</code>. Mais depuis PHP 5.0 il existe une Classe tout faite <code>SplStack</code></p>

<h2>Premiere application la machine à pile</h2>

<p>Il faut d&#8217;abord que je vous parle de la notation polonaise inverse. (RPN en anglais pour <strong>R</strong>everse <strong>P</strong>olish <strong>N</strong>otation).
<code>1 + 3</code> devient <code>1 3 +</code>. Pour faire simple je mets l&#8217;opérateur à la fin.</p>

<p>des exemples un peu plus complexe.</p>

<p> <code>1 + 2 * 3</code> devient <code>2 3 * 1 +</code> et <code>( 1 + 3 ) * ( 3 - 4 )</code> devient <code>1 3 + 3 4 - *</code></p>

<p>C&#8217;est un peu compliqué comme notation (en tout cas pas naturelle) mais nous allons voir que l&#8217;algorithme pour le calcul est très simple.</p>

<p>Voici l&#8217;algorithme :</p>

<ul>
<li>Si l&#8217;entrée est un entier : je l&#8217;empile</li>
<li>Si c&#8217;est une opération : je dépile deux valeurs, je fais l&#8217;opération et j&#8217;empile le résultat</li>
</ul>


<p>Un exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">soit</span> <span class="mi">1</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">3</span> <span class="mi">4</span> <span class="o">-</span> <span class="o">*</span>
</span><span class='line'><span class="c1"># je prend la premiere valeur &quot;1&quot; c&#39;est un chiffre je l&#39;empile</span>
</span><span class='line'><span class="nx">ma</span> <span class="nx">pile</span> <span class="p">[</span> <span class="o">*</span><span class="mi">1</span><span class="o">*</span> <span class="p">]</span>
</span><span class='line'><span class="c1"># je prend la seconde valeur &quot;3&quot; c&#39;est un chiffre je l&#39;empile</span>
</span><span class='line'><span class="nx">ma</span> <span class="nx">pile</span> <span class="p">[</span> <span class="mi">1</span> <span class="o">*</span><span class="mi">3</span><span class="o">*</span> <span class="p">]</span>
</span><span class='line'><span class="c1"># je prend la valeurs 3 c&#39;est une operation &quot;+&quot;, je depile deux valeurs d&#39;abords &quot;3&quot; puis &quot;1&quot;. je fais l&#39;addition. &quot;4&quot; que j&#39;empile</span>
</span><span class='line'><span class="nx">ma</span> <span class="nx">pile</span> <span class="p">[</span> <span class="o">*</span><span class="mi">4</span><span class="o">*</span> <span class="p">]</span>
</span><span class='line'><span class="c1"># je prend la quatrieme valeur &quot;3&quot; c&#39;est un chiffre j&#39;empile</span>
</span><span class='line'><span class="nx">ma</span> <span class="nx">pile</span> <span class="p">[</span> <span class="mi">4</span> <span class="o">*</span><span class="mi">3</span><span class="o">*</span> <span class="p">]</span>
</span><span class='line'><span class="c1"># la cinquieme valeurs est un chiffre</span>
</span><span class='line'><span class="nx">ma</span> <span class="nx">pile</span> <span class="p">[</span> <span class="mi">4</span> <span class="mi">3</span> <span class="o">*</span><span class="mi">4</span><span class="o">*</span><span class="p">]</span>
</span><span class='line'><span class="c1"># la sixieme valeur est une opération. je dépile deux valeurs &quot;4&quot; et &quot;3&quot; que je soustrait et je rempile</span>
</span><span class='line'><span class="nx">ma</span> <span class="nx">pile</span> <span class="p">[</span> <span class="mi">4</span> <span class="o">*-</span><span class="mi">1</span><span class="o">*</span><span class="p">]</span>
</span><span class='line'><span class="c1"># la septième valeur est une opération je dépile &quot;-1&quot; et &quot;4&quot; que je multiplie</span>
</span><span class='line'><span class="nx">ma</span> <span class="nx">pile</span> <span class="p">[</span><span class="s2">&quot;-4&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;avantage de la notation est qu&#8217;elle n&#8217;a pas besoin de parenthèse. Il n&#8217;y pas d&#8217;ambigüité <code>( 1 + 3 ) * ( 3 - 4 )</code> est différent de  <code>1 + 3 * 3 - 4</code>.</p>

<p>L&#8217;implémentation est simple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="k">array</span> <span class="nv">$ops</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\SplStack</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$ops</span> <span class="k">as</span> <span class="nv">$op</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">is_numeric</span><span class="p">(</span><span class="nv">$op</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">push</span><span class="p">((</span><span class="nx">int</span><span class="p">)</span> <span class="nv">$op</span><span class="p">);</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="nv">$op</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="s1">&#39;+&#39;</span><span class="o">:</span>
</span><span class='line'>                <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">push</span><span class="p">(</span><span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">()</span> <span class="o">+</span> <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">());</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="s1">&#39;-&#39;</span><span class="o">:</span>
</span><span class='line'>                <span class="nv">$n</span> <span class="o">=</span> <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">();</span>
</span><span class='line'>                <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">push</span><span class="p">(</span><span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">()</span> <span class="o">-</span> <span class="nv">$n</span><span class="p">);</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="s1">&#39;*&#39;</span><span class="o">:</span>
</span><span class='line'>                <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">push</span><span class="p">(</span><span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">()</span> <span class="o">*</span> <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">());</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="s1">&#39;/&#39;</span><span class="o">:</span>
</span><span class='line'>                <span class="nv">$n</span> <span class="o">=</span> <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">();</span>
</span><span class='line'>                <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">push</span><span class="p">(</span><span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">()</span> <span class="o">/</span> <span class="nv">$n</span><span class="p">);</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nx">\InvalidArgumentException</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;Invalid operation: %s&#39;</span><span class="p">,</span> <span class="nv">$op</span><span class="p">));</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">top</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>essayons notre exemple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nx">execute</span><span class="p">(</span><span class="nb">explode</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;1 3 + 3 4 - *&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">int</span><span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Félicitation nous venons d&#8217;implémenter notre première machine à pile. La plus célèbre est la <code>Java Virtual Machine</code>. Il existe aussi des langages qui sont basé sur la notion de pile, le plus célèbre est le <a href="https://fr.wikipedia.org/wiki/Forth_%28langage%29">Forth</a> et le <a href="https://fr.wikipedia.org/wiki/PostScript">Postscript</a>(si si le format de adobe). L&#8217;avantage des machines à pile est qu&#8217;elle n&#8217;utilise aucun autre registre que la pile.</p>

<h2>Le Shunting-yard de Dijkstra</h2>

<p>Je présente une version simplifié. <em>Shunting-yard</em> peut se traduire en <strong>Aiguillage</strong>. Il permet d&#8217;évaluer une expression mathématique.</p>

<p>Soit la chaîne suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$calculate</span><span class="p">(</span><span class="nb">explode</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;( ( 1 + 3 ) * ( 3 - 4 ) )&#39;</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># int(-4)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Il y a des parenthèses partout</li>
<li>L&#8217;arité des fonction est 2:  l&#8217;arité est le nombre d&#8217;argument par exemple 1 + 2 est d&#8217;arité 2 deux arguments. L&#8217;algorithme que je présente est incapable de faire <code>1 + 2 + 3</code> mais fera très bien <code>(1 + ( 2 + 3 ))</code>.</li>
</ul>


<p>Voici l&#8217;algorithme:</p>

<ul>
<li>Si parenthèse ouvrante:  je passe</li>
<li>Si c&#8217;est une opération <code>+</code>, <code>-</code>, <code>/</code>, <code>*</code>:  Je stocke dans une pile l&#8217;opération.</li>
<li>Si c&#8217;est un chiffre : je stocke dans une pile de valeurs</li>
<li>Si c&#8217;est une parenthèse fermante: Je dépile une opération et je dépile deux arguments. Je fais l&#8217;opération avec mes deux arguments et je remets le résultats dans ma pile.</li>
</ul>


<p>Voici le code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">calculate</span><span class="p">(</span><span class="k">array</span> <span class="nv">$input</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$operators</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SplStack</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$values</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SplStack</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$input</span> <span class="k">as</span> <span class="nv">$token</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="nv">$token</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;(&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;+&quot;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;-&quot;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;*&quot;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;/&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="nv">$operators</span><span class="o">-&gt;</span><span class="na">push</span><span class="p">(</span><span class="nv">$token</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;)&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="nv">$op</span> <span class="o">=</span> <span class="nv">$operators</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">();</span>
</span><span class='line'>            <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$values</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">();</span>
</span><span class='line'>            <span class="k">switch</span> <span class="p">(</span><span class="nv">$op</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="s2">&quot;+&quot;</span><span class="o">:</span>
</span><span class='line'>                <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$values</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">()</span> <span class="o">+</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="s2">&quot;-&quot;</span><span class="o">:</span>
</span><span class='line'>                <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$values</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">()</span> <span class="o">-</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="s2">&quot;*&quot;</span><span class="o">:</span>
</span><span class='line'>                <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$values</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">()</span> <span class="o">*</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="s2">&quot;/&quot;</span><span class="o">:</span>
</span><span class='line'>                <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$values</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">()</span> <span class="o">/</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nv">$values</span><span class="o">-&gt;</span><span class="na">push</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="nv">$values</span><span class="o">-&gt;</span><span class="na">push</span><span class="p">(</span><span class="nv">$token</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$values</span><span class="o">-&gt;</span><span class="na">top</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On utilise deux piles. Une pour les opérations, Une pour les valeurs
je propose de faire le même exemple que plus haut
je vais représenter les deux piles et l&#8217;entrée actuelle</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">operators</span> <span class="o">:</span>  <span class="p">[]</span> <span class="nx">values</span><span class="o">:</span>  <span class="p">[]</span>  <span class="nx">expression</span> <span class="o">:</span> <span class="p">(</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">3</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;(&#39; on ignore</span>
</span><span class='line'>
</span><span class='line'><span class="nx">operators</span> <span class="p">[]</span> <span class="nx">values</span> <span class="p">[]</span>  <span class="nx">expression</span> <span class="o">:</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">3</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;(&#39; on ignore</span>
</span><span class='line'><span class="nx">operators</span> <span class="p">[]</span> <span class="nx">values</span> <span class="p">[]</span>  <span class="nx">expression</span><span class="o">:</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">3</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;1&#39; on ajoute dans values</span>
</span><span class='line'><span class="nx">operators</span> <span class="p">[]</span> <span class="nx">values</span> <span class="p">[</span><span class="o">*</span><span class="mi">1</span><span class="o">*</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>  <span class="o">+</span> <span class="mi">3</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;+&#39; on ajoute dans opérator</span>
</span><span class='line'><span class="nx">operators</span> <span class="p">[</span><span class="o">*+*</span><span class="p">]</span> <span class="nx">values</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span> <span class="mi">3</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;3&#39; on ajoute dans value</span>
</span><span class='line'><span class="nx">operators</span> <span class="p">[</span><span class="o">*+*</span><span class="p">]</span> <span class="nx">values</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">*</span><span class="mi">3</span><span class="o">*</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;)&#39; on dépile deux valeur de value et on depile une valeurs de l&#39;operators et on empile le résultats dans values</span>
</span><span class='line'><span class="nx">operators</span> <span class="p">[]</span> <span class="nx">values</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>  <span class="o">*</span> <span class="p">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;*&#39; on ajoute dans opérator </span>
</span><span class='line'><span class="nx">operators</span> <span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">values</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>  <span class="p">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;(&#39; on ignore</span>
</span><span class='line'><span class="nx">operators</span> <span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">values</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>  <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;3&#39; on ajoute dans values </span>
</span><span class='line'><span class="nx">operators</span> <span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">values</span> <span class="p">[</span><span class="mi">4</span> <span class="o">*</span><span class="mi">3</span><span class="o">*</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>  <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;-&#39; on ajoute dans operators</span>
</span><span class='line'><span class="nx">operators</span> <span class="p">[</span><span class="o">*</span><span class="p">,</span> <span class="o">*-*</span><span class="p">]</span> <span class="nx">values</span> <span class="p">[</span><span class="mi">4</span> <span class="mi">3</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>  <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;4&#39; on ajoute dans values </span>
</span><span class='line'><span class="nx">operators</span> <span class="p">[</span><span class="o">*</span><span class="p">,</span> <span class="p">]</span> <span class="nx">values</span> <span class="p">[</span><span class="mi">4</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>  <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;)&#39; on dépile deux valeur de value et on depile une valeur de operators et on empile le résultat dans values</span>
</span><span class='line'><span class="nx">operators</span> <span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">values</span> <span class="p">[</span><span class="mi">4</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;)&#39; on dépile deux valeur de values et on depile une valeur de operators et on empile le résultat dans values</span>
</span><span class='line'><span class="nx">operators</span> <span class="p">[]</span> <span class="nx">values</span> <span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>On se rend compte que cette algorithme très simple permet de calculer toutes les expressions que l&#8217;on passe du moment qu&#8217;elles sont bien formées.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$expression</span> <span class="o">=</span> <span class="s2">&quot;( ( 1 + 3 ) * ( 3 - 4 ) )&quot;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nx">calculate</span><span class="p">(</span><span class="nb">explode</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">,</span> <span class="nv">$expression</span><span class="p">)));</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Félicitation vous venez d&#8217;écrire votre premier interpréteur.</p>

<p>la version originale prend en compte la priorité des opérations (cela rend certaines parenthèses inutiles) c&#8217;est un peu plus complexe, mais pas tant que cela.</p>

<h2>Exemple 3 conversion vers RPN</h2>

<p>Nous allons utiliser notre pile pour traduire notre expression vers la RPN.</p>

<p>C&#8217;est à dire  <code>( ( 1 + 3 ) * ( 3 - 4 ) )</code> -> <code>1 3 + 3 4 - *</code></p>

<p>Voici l&#8217;algorithme.</p>

<ul>
<li>Si l&#8217;entrée est un parenthèse ouvrante :  je passe</li>
<li>Si c&#8217;est une opération : je stocke cela dans une pile</li>
<li>Si c&#8217;est un entier : Je pousse cela dans une file d&#8217;attente</li>
<li>Si c&#8217;est une parenthèse fermante : je vide la pile dans la file d&#8217;attente.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">transformate</span><span class="p">(</span><span class="k">array</span> <span class="nv">$input</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SplStack</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$output</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SplQueue</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$input</span> <span class="k">as</span> <span class="nv">$token</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="nv">$token</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;(&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;+&quot;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;-&quot;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;*&quot;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;/&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">push</span><span class="p">(</span><span class="nv">$token</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s2">&quot;)&quot;</span><span class="o">:</span>
</span><span class='line'>            <span class="k">while</span><span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$stack</span><span class="p">)</span><span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">top</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">enqueue</span><span class="p">(</span><span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">());</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">enqueue</span><span class="p">(</span><span class="nv">$token</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">iterator_to_array</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>regardons avec le même exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">stack</span> <span class="o">:</span>  <span class="p">[]</span> <span class="nx">output</span><span class="o">:</span>  <span class="p">[]</span>  <span class="nx">expression</span> <span class="o">:</span> <span class="p">(</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">3</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;(&#39; on ignore</span>
</span><span class='line'>
</span><span class='line'><span class="nx">stack</span> <span class="o">:</span> <span class="p">[]</span> <span class="nx">output</span><span class="o">:</span> <span class="p">[]</span>  <span class="nx">expression</span> <span class="o">:</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">3</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;(&#39; on ignore</span>
</span><span class='line'><span class="nx">stack</span> <span class="o">:</span>  <span class="p">[]</span> <span class="nx">output</span> <span class="p">[]</span>  <span class="nx">expression</span><span class="o">:</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">3</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;1&#39; on ajoute dans output</span>
</span><span class='line'><span class="nx">stack</span><span class="o">:</span> <span class="p">[]</span> <span class="nx">output</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>  <span class="o">+</span> <span class="mi">3</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;+&#39; on ajoute dans la stack</span>
</span><span class='line'><span class="nx">stack</span><span class="o">:</span> <span class="p">[</span><span class="o">*+*</span><span class="p">]</span> <span class="nx">output</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span> <span class="mi">3</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;3&#39; on ajoute dans output</span>
</span><span class='line'><span class="nx">stack</span><span class="o">:</span> <span class="p">[</span><span class="o">*+*</span><span class="p">]</span> <span class="nx">output</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">*</span><span class="mi">3</span><span class="o">*</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;)&#39; on vide stack dans outputs</span>
</span><span class='line'><span class="nx">stack</span><span class="o">:</span> <span class="p">[]</span> <span class="nx">output</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">*+*</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>  <span class="o">*</span> <span class="p">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;*&#39; on ajoute dans la stack</span>
</span><span class='line'><span class="nx">stack</span><span class="o">:</span> <span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">output</span> <span class="p">[</span><span class="mi">1</span> <span class="p">,</span> <span class="mi">3</span> <span class="p">,</span> <span class="o">+</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>  <span class="p">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;(&#39; on ignore</span>
</span><span class='line'><span class="nx">stack</span><span class="o">:</span> <span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">output</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">+</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>  <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;3&#39; on ajoute dans output.</span>
</span><span class='line'><span class="nx">stack</span><span class="o">:</span> <span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">output</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">+</span><span class="p">,</span> <span class="o">*</span><span class="mi">3</span><span class="o">*</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>  <span class="o">-</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;-&#39; on ajoute dans la stack</span>
</span><span class='line'><span class="nx">stack</span><span class="o">:</span> <span class="p">[</span><span class="o">*</span><span class="p">,</span> <span class="o">*-*</span><span class="p">]</span> <span class="nx">output</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">+</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>  <span class="mi">4</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;4&#39; on ajoute dans output.</span>
</span><span class='line'><span class="nx">stack</span><span class="o">:</span> <span class="p">[</span><span class="o">*</span><span class="p">,</span><span class="o">-</span><span class="p">]</span> <span class="nx">output</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">+</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">*</span><span class="mi">4</span><span class="o">*</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>  <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;)&#39; on depile la stack dans output, on dépile d&#39;abords - puis *</span>
</span><span class='line'><span class="nx">stack</span><span class="o">:</span> <span class="p">[]</span> <span class="nx">output</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">+</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="p">,</span> <span class="o">*</span><span class="p">]</span> <span class="nx">expression</span><span class="o">:</span>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &#39;)&#39; on re depile la stack mais ici elle est déja vide. </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Il suffit de transformer en array <code>$output</code> pour avoir le résultats suivants
<code>( ( 1 + 3 ) * ( 3 - 4 ) )</code> -> <code>1 3 + 3 4 - *</code></p>

<h2>Tous ensemble.</h2>

<p>Je ne resiste pas au plaisir d&#8217;utiliser l&#8217;instruction tabou du php <code>eval()</code></p>

<blockquote><p>If eval() is the answer, you&rsquo;re almost certainly asking the wrong question. &ndash; Rasmus Lerdorf, BDFL of PHP</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$operation</span> <span class="o">=</span> <span class="s2">&quot;( ( 1 + 3 ) * ( 3 - 4 ) )&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$input</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">,</span> <span class="nv">$operation</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nx">calculate</span><span class="p">(</span><span class="nv">$input</span><span class="p">));</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nx">execute</span><span class="p">(</span><span class="nx">transformate</span><span class="p">(</span><span class="nv">$input</span><span class="p">)));</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$value</span> <span class="o">=</span> <span class="k">eval</span><span class="p">(</span><span class="s2">&quot;return (</span><span class="si">$operation</span><span class="s2">);&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous avons sans surprise le même résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">int</span><span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="nx">int</span><span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="nx">int</span><span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>En conclusion</h2>

<ul>
<li>Nous avons créé une <em>VM</em> Notre machine à pile.</li>
<li>Nous avons crée un <em>interpréteur</em>:  notre algorithme de shunting-yard</li>
<li>Nous avons fait un traducteur de notre expression vers notre machine à pile. C&#8217;est un <em>compilateur</em>.</li>
<li>La notion de pile existe partout, on parle de pile d&#8217;appel (<em>stack-frame</em>), de dépassement de la pile (<em>stack overflow</em>), <code>git stash</code> est aussi un stockage en pile.</li>
</ul>


<h2>Des références.</h2>

<ul>
<li>L&#8217;algorithme simplifie viens du livre <a href="http://www.amazon.fr/dp/032157351X">Algorithms</a> de Sedgewick (j&#8217;ai traduis du Java vers Php)</li>
<li>L&#8217;exemple le plus complet sur les stacks-machine est <a href="https://igor.io/archive.html">Igor.io</a> la série est superbe, l&#8217;auteur explique vraiment bien.</li>
<li>L&#8217;article de wikipedia sur le <a href="https://en.wikipedia.org/wiki/Shunting-yard_algorithm">shunting-yard</a> Les illustrations montrent bien la notion d&#8217;aiguillage.</li>
<li><a href="https://fr.wikipedia.org/wiki/Edsger_Dijkstra">Edsger W. Dijkstra</a> est surtout connus pour son algorithme sur le plus court chemin. Mais c&#8217;est une légende de l&#8217;informatique. A voir si vous ne connaissez pas.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Array_walk, Array_map, Array_walk_recursive]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/26/array-walk/"/>
    <updated>2015-08-26T22:30:55+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/26/array-walk</id>
    <content type="html"><![CDATA[<p>Une question que l&#8217;on m&#8217;a posé.</p>

<p>Quel instruction je n&#8217;ai jamais jamais réussi à utiliser dans php ? Dans le sens jamais trouvé d&#8217;utilisation pratique.</p>

<p>Ma réponse est un <code>array_recursive_walk()</code> et dans la même idée les <code>RecursiveIteratorIterator</code></p>

<p>Et puis on m&#8217;a demander la différence entre un <code>array_walk</code> et un <code>array_map</code>.</p>

<h2><code>array_map</code></h2>

<p>Voici quelques exemples</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// via un array_map</span>
</span><span class='line'><span class="nv">$array</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">]</span>
</span><span class='line'><span class="nv">$out</span> <span class="o">=</span> <span class="nb">array_map</span><span class="p">(</span><span class="nx">uc_first</span><span class="p">,</span> <span class="nv">$array</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>array_map</code> ne touche pas le tableau original.</p>

<p>En fait <code>array_map</code> fait exactement ceci.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$out</span> <span class="o">=</span> <span class="p">[</span> <span class="nb">ucfirst</span><span class="p">(</span><span class="s1">&#39;one&#39;</span><span class="p">),</span> <span class="nb">ucfirst</span><span class="p">(</span><span class="s1">&#39;two&#39;</span><span class="p">),</span> <span class="nb">ucfirst</span><span class="p">(</span><span class="s1">&#39;three&#39;</span><span class="p">)</span> <span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>De manière générale</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">array_map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">),[</span><span class="nx">a</span> <span class="p">,</span><span class="nx">b</span><span class="p">,</span> <span class="o">..</span><span class="p">,</span><span class="nx">z</span><span class="p">])</span>
</span><span class='line'><span class="p">[</span><span class="k">function</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span> <span class="k">function</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span> <span class="k">function</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span> <span class="o">..</span> <span class="k">function</span><span class="p">(</span><span class="nx">z</span><span class="p">)]</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>On renvoie un tableau de la <strong>même</strong> taille.</li>
<li>la fonction appelé doit contenir un <strong>return</strong></li>
<li>C&#8217;est de la programmation fonctionnelle (c&#8217;est le <strong>map</strong> de <strong>Map</strong>Reduce).</li>
<li>On ne connais pas l&#8217;index (que l&#8217;on pourrai récupérer dans un <code>foreach($array as $key =&gt; $value)</code>).</li>
</ul>


<h2><code>Array_walk</code></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$array</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">]</span>
</span><span class='line'><span class="k">function</span> <span class="nf">toMaj</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ucfirst give error with 2 arguments</span>
</span><span class='line'>    <span class="nv">$input</span> <span class="o">=</span> <span class="nb">ucfirst</span><span class="p">(</span><span class="nv">$input</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">array_walk</span><span class="p">(</span><span class="nv">$array</span><span class="p">,</span> <span class="s1">&#39;toMaj&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$array</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Constatons:</p>

<ul>
<li>Je passe par référence <code>&amp;input</code>.</li>
<li>Donc je n&#8217;ai pas besoin de <code>return</code>.</li>
<li>Donc nous sommes dans du <strong>procédural</strong>. (ce qui n&#8217;est pas forcément un défaut)</li>
<li>J&#8217;ai économisé une variable</li>
<li>On est obligé d&#8217;écrire des fonctions à deux arguments certaines fonctions comme <code>ucfirst</code> refusent d&#8217;avoir plusieurs arguments.</li>
<li>Par contre, on connait l&#8217;index (<code>$key</code>) mais impossible de le modifier.</li>
<li><code>array_walk</code> renvoie <code>true</code> or <code>false</code> ce qui n&#8217;aide pas beaucoup</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$array</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">]</span>
</span><span class='line'><span class="k">function</span> <span class="nf">toMaj</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$input</span> <span class="o">=</span> <span class="nv">$key</span><span class="o">.</span><span class="s1">&#39; : &#39;</span><span class="nb">ucfirst</span><span class="p">(</span><span class="nv">$input</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">array_walk</span><span class="p">(</span><span class="nv">$array</span><span class="p">,</span> <span class="s1">&#39;toMaj&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$array</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour résumer
les deux fonctions ont un peu près le même résultat.</p>

<ul>
<li><code>array_walk</code> prend un array et remplace chaque valeurs par Fonction(valeur).</li>
<li><code>array_map</code> prend un array et recrée un array de la même taille.</li>
</ul>


<h2>Le <code>Array_recursive_walk</code></h2>

<p>Un exemple de code.</p>

<p>Je voulais faire un <code>CamelCase</code> -> <code>snake_case</code> mais comme le <code>array_walk</code> impossible de modifier les clés des index.</p>

<p>Soit l&#8217;exemple suivant</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$array</span> <span class="o">=</span>  <span class="p">[</span><span class="s2">&quot;Tortue-ninja&quot;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s2">&quot;leonardo&quot;</span> <span class="p">,</span> <span class="s2">&quot;donatello&quot;</span><span class="p">,</span> <span class="s2">&quot;michelangelo&quot;</span><span class="p">,</span><span class="s2">&quot;raphael&quot;</span><span class="p">],</span> <span class="s2">&quot;Mechant&quot;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s2">&quot;shredder&quot;</span><span class="p">,</span> <span class="s2">&quot;krang&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="nb">array_walk_recursive</span><span class="p">(</span><span class="nv">$array</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$item</span><span class="p">,</span> <span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$key</span> <span class="o">===</span> <span class="s2">&quot;Tortue-ninja&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s1">&#39;Cowabunga!&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$item</span> <span class="o">=</span> <span class="nb">ucfirst</span><span class="p">(</span><span class="nv">$item</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$array</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le programme n&#8217;affiche pas de <code>Cowabunga</code>, mais j&#8217;ai mis en majuscule toutes les valeurs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">array</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;Tortue-ninja&#39;</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="s2">&quot;Leonardo&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span> <span class="s2">&quot;Donatello&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span> <span class="s2">&quot;Michelangelo&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span> <span class="s2">&quot;Raphael&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="s1">&#39;mechant&#39;</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="s2">&quot;Shredder&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="s2">&quot;Krang&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On ne passe jamais sur le clé : <code>Tortue-ninja</code>, d&#8217;ailleurs la documentation est claire</p>

<blockquote><p>Toute clé qui est associée à un tableau n&#8217;est pas passée à la fonction de rappel.</p></blockquote>

<p>Un vrai exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>    <span class="nb">array_walk_recursive</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$value</span> <span class="nx">instanceof</span> <span class="nx">\Traversable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$value</span> <span class="o">=</span> <span class="nb">iterator_to_array</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>Un exemple que l&#8217;on retrouve dans <a href="">PHPUnit</a> et <a href="">Symfony2</a></p>

<p>On veut logger des objets en les serialisant en Json. Certain objects (comme les ArrayCollection et autres..) sont <em>Traversables</em> (c&#8217;est à dire qu&#8217;il possède un Iterateur (On implémente <code>current</code>, <code>next</code>, <code>rewind</code>, <code>valid</code>). En php il est possible de transformer les Itérateurs en Array avec l&#8217;instruction <code>iterator_to_array()</code>. ainsi on transforme l&#8217;objet en Array pour avoir plus d&#8217;information.</p>

<h2>En conclusion</h2>

<p>Donc je n&#8217;ai jamais réussi à écrire un <code>array_walk_recursive</code> mais au moins j&#8217;ai réussi à écrire un post dessus.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Halt Compiler : Twig Et Php Dans Le Même Fichier]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/23/halt-compiler-twig-et-php-dans-le-meme-fichier/"/>
    <updated>2015-08-23T17:20:41+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/23/halt-compiler-twig-et-php-dans-le-meme-fichier</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>je vais parler de l&#8217;instruction <code>__halt_compiler()</code>.</p>

<p>Cette instruction arrête l&#8217;interprétation du PHP. Instruction inutile ? Pas vraiment..</p>

<p>Pour ce faire je vais montrer un exemple ou je vais mixer un fichier php et un fichier <a href="http://twig.sensiolabs.org/">twig</a> ensemble.</p>

<h2>L&#8217;instruction <code>__halt_compiler()</code></h2>

<p>D&#8217;après php.net</p>

<blockquote><p>Stoppe l&#8217;exécution du compilateur. Ceci peut être très utile pour embarquer des données dans des scripts PHP, comme des fichiers d&#8217;installation.
L&#8217;octet de la position du début des données peut être déterminé par la constante <code>__COMPILER_HALT_OFFSET__</code> qui n&#8217;est définie que s&#8217;il y a une fonction <code>__halt_compiler()</code> présente dans le fichier.</p></blockquote>

<h2>Une première expérimentation</h2>

<p>Soit le fichier php suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">echo</span> <span class="s1">&#39;salut la compagnie!!&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nb">__halt_compiler</span><span class="p">();</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;j&#39;apparais pas&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comme prévu la deuxième ligne ne s&#8217;affiche pas.</p>

<h2>Une seconde expérimentation.</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$txt</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="nx">__COMPILER_HALT_OFFSET__</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nb">strtoupper</span><span class="p">(</span><span class="nv">$txt</span><span class="p">);</span>
</span><span class='line'><span class="nb">__halt_compiler</span><span class="p">();</span>
</span><span class='line'><span class="nx">Bonjour</span> <span class="nx">tout</span> <span class="nx">le</span> <span class="nx">monde</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>La constante <code>__FILE__</code> représente le fichier actuelle, la constante <code>__COMPILER_HALT_OFFSET__</code> représente la position de l&#8217;instruction <code>__halt_compiler()</code>. On récupère le texte qui ne s&#8217;affiche pas.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>BONJOUR TOUT LE MONDE!
</span></code></pre></td></tr></table></div></figure>


<h2>Mettre le fichier php et le fichier de template twig dans le même fichier</h2>

<p>Un exemple un peu théorique car pas très optimisé.</p>

<p>J&#8217;ai besoin de twig, voici le <code>composer.json</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;twig/twig&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.20&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Voici mon programme.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">require_once</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span> <span class="c1">// Autoload files using Composer autoload</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">get_halt_data</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="nx">__COMPILER_HALT_OFFSET__</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Loader_Array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;index&#39;</span> <span class="o">=&gt;</span> <span class="nx">get_halt_data</span><span class="p">()));</span>
</span><span class='line'><span class="nv">$twig</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Twig_Environment</span><span class="p">(</span><span class="nv">$loader</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="nv">$twig</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Fabien&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nb">__halt_compiler</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">hello</span> <span class="p">{</span><span class="nx">\</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="nx">\</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>hello fabien
</span></code></pre></td></tr></table></div></figure>


<p>Désolé pour les <code>{\{</code> sinon cela n&#8217;apparait pas sur le code.</p>

<p>C&#8217;est relativement inefficace. Il doit avoir moyen de faire un peu plus propre en profitant du cache.</p>

<p>Comme annoncé dans le titre , j&#8217;ai dans le même fichier le php et le template twig.</p>

<h3>Un exemple plus concret <code>composer.phar</code></h3>

<p>Ouvrons pour voir le fichier <code>composer.phar</code></p>

<p>Voici ce que je vois. Nous retrouvons notre instruction du jour.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="nx">Phar</span><span class="o">::</span><span class="na">mapPhar</span><span class="p">(</span><span class="s1">&#39;composer.phar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;COMPOSER_DEV_WARNING_TIME&#39;</span><span class="p">,</span> <span class="mi">1445255994</span><span class="p">);</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;phar://composer.phar/bin/composer&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">__HALT_COMPILER</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">.. </span>
</span></code></pre></td></tr></table></div></figure>


<p>Les fichiers <code>.phar</code> en pratique n&#8217;utilise que cette astuce. Je connais assez peu.</p>

<h2>Conclusion</h2>

<ul>
<li>Sur l&#8217;utilisation en template. Il y a le projet <a href="https://github.com/bobthecow/mustache.php">mustache.php</a> vous ne devriez pas être perdu avec le loader <a href="https://github.com/bobthecow/mustache.php/wiki/Template-Loading#inline-loader">suivant</a></li>
<li>Sur l&#8217;utilisation de string dans un template twig, la lecture de cet <a href="https://techpunch.co.uk/development/render-string-twig-template-symfony2">article</a> est très bien.</li>
<li>Sur les <code>.phar</code> la <a href="http://php.net/manual/en/phar.mapphar.php">documentation officielle</a> semble un bon début.</li>
</ul>


<p>Je vais essayer de continuer à parler d&#8217;autres instructions et structures peu connues (par exemple <code>__invoke</code> ou les <code>SplHeap</code>).</p>

<p>Merci de m&#8217;avoir lu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QuickCheck Une Autre Façon De Tester]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/22/quickcheck-une-autre-facon-de-tester/"/>
    <updated>2015-08-22T19:01:42+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/22/quickcheck-une-autre-facon-de-tester</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Nous allons voir ensemble, une nouvelle façon de faire des tests. Nous allons installer utiliser un projet <a href="https://github.com/steos/php-quickcheck">php-quickcheck</a>. L&#8217;idée ici n&#8217;est pas d&#8217;écrire des tests, mais demander au logiciel de les générer.</p>

<h2>Installation.</h2>

<p>Nous allons créer le <code>composer.json</code> suivant.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;steos/php-quickcheck&quot;</span><span class="p">:</span> <span class="s2">&quot;dev-master&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis créer un fichier <code>test.php</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">require_once</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span> <span class="c1">// Autoload files using Composer autoload</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">QCheck\Generator</span> <span class="k">as</span> <span class="nx">Gen</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">QCheck\Quick</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un petit <code>composer install</code>. Et tout est en place.</p>

<h2>Exemple N°1</h2>

<h3>Affirmation</h3>

<p>Je vais essayer de prouver que <code>array_merge($list1, $list2) == $list1 + $list2</code> (<strong>ce qui est faux</strong>)</p>

<p>Je l&#8217;écris dans la fonction suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">isEqual</span><span class="p">(</span><span class="k">array</span> <span class="nv">$list1</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$list2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nb">array_merge</span><span class="p">(</span><span class="nv">$list1</span><span class="p">,</span> <span class="nv">$list2</span><span class="p">)</span> <span class="o">==</span> <span class="nv">$list1</span> <span class="o">+</span> <span class="nv">$list2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Mise en place et contre-exemple.</h3>

<p>Voici le code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$test</span> <span class="o">=</span> <span class="nx">Gen</span><span class="o">::</span><span class="na">forAll</span><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">Gen</span><span class="o">::</span><span class="na">ints</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">intoArrays</span><span class="p">(),</span> <span class="nx">Gen</span><span class="o">::</span><span class="na">ints</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">intoArrays</span><span class="p">()],</span> <span class="nx">isEqual</span>
</span><span class='line'> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Gen::ints()-&gt;intoArrays()</code> génère des array avec une taille aléatoire <code>[0, 1], [-15,0,5], ..</code> que  je vais passer à la fonction <code>isEqual</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">print_r</span><span class="p">(</span><span class="nx">Quick</span><span class="o">::</span><span class="na">check</span><span class="p">(</span><span class="mi">102</span><span class="p">,</span> <span class="nv">$test</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;echo&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">]));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je vais lancer 102 fois mon test.</p>

<p>Voici ce que me dit le programme dès que je lance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">..</span><span class="nx">F</span>
</span><span class='line'><span class="k">Array</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">result</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">seed</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1440263990644</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">failing_size</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">2</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">num_tests</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">3</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">fail</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>        <span class="p">(</span>
</span><span class='line'>            <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="o">-</span><span class="mi">2</span>
</span><span class='line'>                    <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nx">shrunk</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>        <span class="p">(</span>
</span><span class='line'>            <span class="p">[</span><span class="nx">nodes_visited</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">9</span>
</span><span class='line'>            <span class="p">[</span><span class="nx">depth</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">3</span>
</span><span class='line'>            <span class="p">[</span><span class="nx">result</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>            <span class="p">[</span><span class="nx">smallest</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">0</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">0</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat est intéressant, Le logiciel a essayé 3 fois, au troisième essai l&#8217;exemple <code>([1], [-2,1])</code> donne un cas qui ne marche pas.</p>

<p>Vérifions avec <code>php -a</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="o">&gt;</span> <span class="nb">var_dump</span><span class="p">(</span><span class="nb">array_merge</span><span class="p">([</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">]));</span>
</span><span class='line'><span class="k">array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">int</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">int</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">int</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">php</span> <span class="o">&gt;</span> <span class="nb">var_dump</span><span class="p">([</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="k">array</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">int</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">int</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Effectivement.. Mais il y a mieux. Le logiciel a fais un <em>shrunk</em>, c&#8217;est à dire qu&#8217;il a calculé le plus petit exemple possible qui est <code>([0], [0])</code>.</p>

<p>Donc la librairie me donne tort et en plus me donne le contre-exemple.</p>

<h2>Exemple N°2</h2>

<h3>Affirmation</h3>

<p>J&#8217;affirme que <code>(sort (array) == sort(sort(array))</code> que en gros cela ne sert à rien de trier deux fois un array.</p>

<h3>Mise en place</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$test2</span> <span class="o">=</span> <span class="nx">Gen</span><span class="o">::</span><span class="na">forAll</span><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">Gen</span><span class="o">::</span><span class="na">ints</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">intoArrays</span><span class="p">()],</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">(</span><span class="nv">$list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$lista</span> <span class="o">=</span> <span class="nv">$list</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$listb</span> <span class="o">=</span> <span class="nv">$list</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">sort</span><span class="p">(</span><span class="nv">$lista</span><span class="p">);</span>
</span><span class='line'>        <span class="nb">sort</span><span class="p">(</span><span class="nv">$listb</span><span class="p">);</span>
</span><span class='line'>        <span class="nb">sort</span><span class="p">(</span><span class="nv">$listb</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nv">$lista</span> <span class="o">==</span> <span class="nv">$listb</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print_r</span><span class="p">(</span><span class="nx">Quick</span><span class="o">::</span><span class="na">check</span><span class="p">(</span><span class="mi">101</span><span class="p">,</span> <span class="nv">$test2</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;echo&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">]));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je lance le logiciel</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">.....................................................................................................</span><span class="k">Array</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">result</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">num_tests</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">101</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">seed</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1440265001108</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le logiciel semble d&#8217;accord. Il a fait 101 tests, mais il n&#8217;a pas trouvé de contre-exemple.</p>

<h2>Exemple N°3</h2>

<p>Nous allons encoder en <code>run legth encoding</code> qui est l&#8217;actuel encodage des fichiers bitmaps.</p>

<p>Quelque exemples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Input</span><span class="o">:</span> <span class="nx">WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</span>
</span><span class='line'><span class="nx">Output</span><span class="o">:</span> <span class="mi">12</span><span class="nx">W1B12W3B24W1B14W</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il y a <code>12W</code> puis <code>1B</code> etc .. je compresse ma chaîne de caractères.</p>

<p>Dans l&#8217;autre sens</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Input</span><span class="o">:</span> <span class="mi">12</span><span class="nx">W1B12W3B24W1B14W</span>
</span><span class='line'><span class="nx">Output</span><span class="o">:</span> <span class="nx">WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici une implémentation en php</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">encode</span><span class="p">(</span><span class="nv">$str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">preg_replace_callback</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;/(.)\1+/&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="k">function</span><span class="p">(</span><span class="nv">$m</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;%s%s&#39;</span><span class="p">,</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$m</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nv">$m</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nv">$str</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">function</span> <span class="nf">decode</span><span class="p">(</span><span class="nv">$str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">preg_replace_callback</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;/(\d+)(\D)/&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="k">function</span><span class="p">(</span><span class="nv">$m</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">str_repeat</span><span class="p">(</span><span class="nv">$m</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="nv">$m</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>         <span class="nv">$str</span>
</span><span class='line'>     <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mon implémentation est correcte, mais il y a un petit souci. Pouvez vous deviner le souci de mon programme.</p>

<p>A priori <code>$input == decode(encode($input))</code></p>

<h3>Mise en place.</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$test3</span> <span class="o">=</span> <span class="nx">Gen</span><span class="o">::</span><span class="na">forAll</span><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">Gen</span><span class="o">::</span><span class="na">alphaNumStrings</span><span class="p">()],</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">(</span><span class="nv">$string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="nv">$string</span> <span class="o">==</span> <span class="nx">decode</span><span class="p">(</span><span class="nx">encode</span><span class="p">(</span><span class="nv">$string</span><span class="p">)));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nb">print_r</span><span class="p">(</span><span class="nx">Quick</span><span class="o">::</span><span class="na">check</span><span class="p">(</span><span class="mi">101</span><span class="p">,</span> <span class="nv">$test2</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;echo&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">]));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le logiciel ne tarde pas à trouver le souci</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">.....</span><span class="nx">F</span>
</span><span class='line'><span class="k">Array</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">result</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">seed</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1440265916923</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">failing_size</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">5</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">num_tests</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">6</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">fail</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>        <span class="p">(</span>
</span><span class='line'>            <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">G67k</span><span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nx">shrunk</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>        <span class="p">(</span>
</span><span class='line'>            <span class="p">[</span><span class="nx">nodes_visited</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">34</span>
</span><span class='line'>            <span class="p">[</span><span class="nx">depth</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">7</span>
</span><span class='line'>            <span class="p">[</span><span class="nx">result</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>            <span class="p">[</span><span class="nx">smallest</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">0</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>La chaîne de caractère <code>"G67k"</code> ne marche pas, et en fait la chaîne <code>"0"</code> tout cours ne marche pas.</p>

<h2>Conclusion des 3 exemples.</h2>

<ul>
<li>Je n&#8217;ai pas écris de test. C&#8217;est le logiciel qui génère les tests.</li>
<li>Les tests sont aléatoires. Par exemple si j&#8217;avais limité à 5 tests l&#8217;exemple 3 pourrait passer.</li>
<li>Si le code ne passe pas le logiciel est capable de <em>réduire</em> jusqu&#8217;à trouver un contre-exemple ici la chaine <code>"0"</code> ou l&#8217;entrée <code>([0],[0])</code></li>
<li>Un autre cas, dans le dernier exemple, j&#8217;ai pris un générateur de texte qui prend des chiffres et des lettres, si j&#8217;avais pris un générateur de lettre seulement comme <code>gen::alphaString</code>. Le test passerait sans problème.</li>
</ul>


<p>Ce type de logiciel s&#8217;appelle le <a href="https://en.wikipedia.org/wiki/QuickCheck">QuickCheck</a> du nom du premier logiciel en <a href="https://en.wikipedia.org/wiki/Haskell_%28programming_language%29">Haskell</a>. Ce sont des tests aléatoires.</p>

<p>Il existe deux portage en php.</p>

<ul>
<li><a href="https://github.com/giorgiosironi/eris">eris</a></li>
<li><a href="https://github.com/steos/php-quickcheck">php-quickcheck</a></li>
</ul>


<p>Il y a le même problème que les tests unitaires: Quand les tests unitaires ne passent pas,  il y a un problème. Mais des tests unitaires qui passent ne prouve pas forcement que le logiciel est correct. Néanmoins cette méthode qui génère des milliers de tests donne des résultats assez intéressants. La capacité a trouvé automatiquement un contre-exemple (s&#8217;il y a un contre-exemple) est vraiment un plus.</p>

<p>Cela n&#8217;a pas été évident d&#8217;écrire ce post. J&#8217;ai eu un peu de mal à trouver un exemple pertinent. Je me suis inspiré des exemples de <a href="https://github.com/DRMacIver/hypothesis">hypothesis</a>. L&#8217;implémentation du RLE viens de <a href="http://rosettacode.org/wiki/Run-length_encoding">rosetta</a> mais l&#8217;exemple en php est obsolète (la regex <code>/../e</code> php5.5 n&#8217;en veux pas). J&#8217;ai retraduis le code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Un Peu De Fun]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/15/git-un-peu-de-fun/"/>
    <updated>2015-08-15T21:35:25+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/15/git-un-peu-de-fun</id>
    <content type="html"><![CDATA[<p>Il est possible de faire des commits qui clignotent avec la commande suivante.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git commit --all-empty -m <span class="s2">&quot;^[[5m Bonjour ^[[0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Attention</strong> le caractère <code>^[</code> est la touche <code>Escape</code> (on parle de caractère d&#8217;échappement). Il n&#8217;est pas très simple à taper. Il faut appuyer sur <code>Ctrl+v</code> puis <code>&lt;ESC&gt;</code></p>

<p>Bienvenue dans le monde du terminal et du ANSI. Il existe de véritable oeuvre d&#8217;art juste en mode texte. Et dans le temps les fichiers pirates contenaient souvent des fichiers textes avec Logo et présentation de la team.</p>

<p>On peut rajouter des trucs plus rigolos</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git commit --allow-empty -F &lt;<span class="o">(</span>curl https://raw.githubusercontent.com/thiderman/doge/master/doge/static/doge.txt<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tout les terminaux ne sont pas égaux.</h2>

<p>Voici un gif animé de mes commits</p>

<p><img class="center" src="http://mcamuzat.github.io/images/outgnome.gif" width="554" height="410" title="So meme" alt="So meme"></p>

<p>Cela ne clignote pas beaucoup sur <code>gnometerminal</code> essayons avec  Xterm</p>

<p><img class="center" src="http://mcamuzat.github.io/images/outxterm.gif" width="585" height="397" title="Gif animé" alt="On a un menu interactif"></p>

<p>C&#8217;est un peu mieux.</p>

<h2>Mais peux-ton commiter si on a rien à commiter</h2>

<p>Avec la commande <code>--allow-empty</code> c&#8217;est parfaitement possible.</p>

<p>Mais a quoi cela sert ?</p>

<ul>
<li>A mettre des annotations</li>
<li>A distinguer différentes parties</li>
</ul>


<h2>On se connait et paranoia ?</h2>

<p>Dans une ligne de commande (aucun danger).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh whoami.filippo.io
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Le résultat est surprenant. Le logiciel me reconnait immédiatement (nom et prénom).</p>

<p><img class="center" src="http://mcamuzat.github.io/images/clesssh.png" width="600" height="392" title="Je ne donne aucun login, pourtant le logiciel me reconnait" alt="On se connait"></p>

<p>Tout cela vient du fait que lorsque on se connecte en ssh, on envoie toujours sa clé publique.. Et la clé publique de mon ordinateur est connue, car je l&#8217;utilise pour me connecter sur github, pour éviter de renseigner à chaque fois mon mot de passe des que je commite. D&#8217;ailleurs votre clé publique est ici en <code>https://github.com/&lt;mon.compte&gt;.keys</code></p>

<h2>Conclusion</h2>

<ul>
<li>Le contenu vient d&#8217;un post sur <a href="https://news.ycombinator.com/item?id=10058967">hacker-news</a>.</li>
<li>pour le ANSI il y a des exemples magnifique sur <a href="http://blocktronics.org/">blocktronics</a> et aussi <a href="http://sixteencolors.net/">sixteencolors</a></li>
</ul>


<p>Voici quelques utilisations de git, cela ne sert pas à grand chose on est d&#8217;accord..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Workshops De Javascript]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/09/workshops-de-javascript/"/>
    <updated>2015-08-09T16:44:33+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/09/workshops-de-javascript</id>
    <content type="html"><![CDATA[<p><em>Et si on essayait un workshop&hellip;</em></p>

<p>Les workshops de javascript sont des cours interactifs de javascript.</p>

<h2>Installation</h2>

<p>Pour installer le cours de Node.js c&#8217;est très simple. A condition d&#8217;avoir node.js installé.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g learnyounode
</span><span class='line'>learnyounode</span></code></pre></td></tr></table></div></figure>


<p>Voila ce que vous devriez voir.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/workshop.png" width="585" height="397" title="screenshot de workshop" alt="On a un menu interactif"></p>

<p>Lançons nous dans le premier exercice.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'> LEARN YOU THE NODE.JS FOR MUCH WIN!
</span><span class='line'>─────────────────────────────────────
</span><span class='line'> HELLO WORLD
</span><span class='line'> Exercise 1 of 13
</span><span class='line'>
</span><span class='line'>Write a program that prints the text "HELLO WORLD" to the console (stdout).
</span><span class='line'>
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>
</span><span class='line'>## HINTS
</span><span class='line'>
</span><span class='line'>To make a Node.js program, create a new file with a .js extension and start writing JavaScript! Execute your program by running it with the
</span><span class='line'>node command. e.g.:
</span><span class='line'>
</span><span class='line'>    $ node program.js
</span><span class='line'>
</span><span class='line'>You can write to the console in the same way as in the browser:
</span><span class='line'>
</span><span class='line'>    console.log("text")
</span><span class='line'>
</span><span class='line'>When you are done, you must run:
</span><span class='line'>
</span><span class='line'>    $ learnyounode verify program.js
</span><span class='line'>
</span><span class='line'>to proceed. Your program will be tested, a report will be generated, and the lesson will be marked 'completed' if you are successful.
</span><span class='line'>
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>
</span><span class='line'> » To print these instructions again, run: learnyounode print
</span><span class='line'> » To execute your program in a test environment, run: learnyounode run program.js
</span><span class='line'> » To verify your program, run: learnyounode verify program.js
</span><span class='line'> » For help run: learnyounode help</span></code></pre></td></tr></table></div></figure>


<p>donc je resume on me demande de programmer un **Hello world&#8221;.</p>

<p>donc je crée un <code>hello.js</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;HELLO WORLD&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je peux tester celui-ci avec un programme de test avec la commande suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>learnyounode run hello.js
</span></code></pre></td></tr></table></div></figure>


<p>Si je suis content du résultat alors je peux faire vérifier le programme par le logiciel.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>learnyounode verify program.js
</span></code></pre></td></tr></table></div></figure>


<p>Si le programme passe, le niveau est marquer comme <code>[COMPLETED]</code> et on peux passer au suivant.</p>

<p>Bon l&#8217;étape 1 n&#8217;est pas très compliqué passons à l&#8217;étape 2.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> LEARN YOU THE NODE.JS FOR MUCH WIN!
</span><span class='line'>─────────────────────────────────────
</span><span class='line'> BABY STEPS
</span><span class='line'> Exercise <span class="m">2</span> of 13
</span><span class='line'>
</span><span class='line'>Write a program that accepts one or more numbers as <span class="nb">command</span>-line arguments and prints the sum of those numbers to the console <span class="o">(</span>stdout<span class="o">)</span>.
</span><span class='line'>
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>
</span><span class='line'><span class="c">## HINTS</span>
</span><span class='line'>
</span><span class='line'>You can access <span class="nb">command</span>-line arguments via the global process object. The process object has an argv property which is an array containing the <span class="nb">complete command</span>-line. i.e. process.argv.
</span><span class='line'>
</span><span class='line'>To get started, write a program that simply contains:
</span><span class='line'>
</span><span class='line'>    console.log<span class="o">(</span>process.argv<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Run it with node program.js and some numbers as arguments. e.g:
</span><span class='line'>
</span><span class='line'>    <span class="nv">$ </span>node program.js <span class="m">1</span> <span class="m">2</span> 3
</span><span class='line'>
</span><span class='line'>In which <span class="k">case</span> the output would be an array looking something like:
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span> <span class="s1">&#39;node&#39;</span>, <span class="s1">&#39;/path/to/your/program.js&#39;</span>, <span class="s1">&#39;1&#39;</span>, <span class="s1">&#39;2&#39;</span>, <span class="s1">&#39;3&#39;</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>You<span class="s1">&#39;ll need to think about how to loop through the number arguments so  you can output just their sum. The first element of the process.argv array is always &#39;</span>node<span class="s1">&#39;, and the second element is always the path to your program.js file, so you need to start at the 3rd element (index 2), adding each item to the total until you reach the end of the array.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Also be aware that all elements of process.argv are strings and you may need to coerce them into numbers. You can do this by prefixing the property with + or passing it to Number(). e.g. +process.argv[2] or Number(process.argv[2]).</span>
</span><span class='line'>
</span><span class='line'><span class="s1">learnyounode will be supplying arguments to your program when you run learnyounode verify program.js so you don&#39;</span>t need to supply them yourself. To <span class="nb">test </span>your program without verifying it, you can invoke it with learnyounode run program.js. When you use run, you are invoking the <span class="nb">test </span>environment that learnyounode sets up <span class="k">for</span> each exercise.
</span><span class='line'>
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>
</span><span class='line'> » To print these instructions again, run: learnyounode print
</span><span class='line'> » To execute your program in a <span class="nb">test </span>environment, run: learnyounode run program.js
</span><span class='line'> » To verify your program, run: learnyounode verify program.js
</span><span class='line'> » For <span class="nb">help </span>run: learnyounode <span class="nb">help</span>
</span></code></pre></td></tr></table></div></figure>


<p>Donc il s&#8217;agit de créer un programme qui prend les nombres en entrée et faire la somme à la fin.</p>

<p>Voici ma solution (atroce &hellip; )</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">;</span>
</span><span class='line'><span class="nx">i</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
</span><span class='line'><span class="nx">i</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span><span class="c1">// supprime les deux premiers arguments (&#39;node&#39;, &#39;programme.js&#39;)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">b</span><span class="p">)},</span><span class="mi">0</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le logiciel donne une implémentation beaucoup plus simple(pas difficile)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">result</span> <span class="o">+=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Etc etc ..</p>

<h2>Une liste de workshop.</h2>

<p>Le site officiel donne la liste suivante en module de base.</p>

<ul>
<li><a href="https://www.github.com/sethvincent/javascripting">javascripting</a> Apprendre les bases du javascript.</li>
<li><a href="https://www.github.com/jlord/git-it">git-it</a> pour apprendre Git et GitHub.</li>
<li><a href="https://www.github.com/jesstelford/scope-chains-closures">Scope Chains &amp; Closures</a> Comprendre les scopes, les closures etc..</li>
<li><a href="https://www.github.com/workshopper/learnyounode">learnyounode</a> les bases de node asynchronous i/o, http.</li>
<li><a href="https://github.com/npm/how-to-npm">How to npm</a> Comment créer des modules Npm</li>
<li><a href="https://www.github.com/substack/stream-adventure">stream-adventure</a> apprennez les streams et comment les composer avec <code>.pipe()</code>.</li>
</ul>


<h2>Mais il y en a plus.</h2>

<p>On peux apprendre un peu près n&#8217;importe quel technologie en pratique.</p>

<ul>
<li><a href="https://github.com/timoxley/functional-javascript-workshop">Functional Javascript</a> : Base de la programmation fonctionnelle en javascript.</li>
<li><a href="https://github.com/azat-co/expressworks">ExpressWorks</a>: Apprendre le framework Express.js.</li>
<li><a href="https://github.com/stevekane/promise-it-wont-hurt">Promise It Won&rsquo;t Hurt</a>:  Apprendre les promesses pour les opération asynchrone.</li>
<li><a href="https://github.com/bulkan/async-you">Async</a>:  La librairie Async.</li>
<li><a href="https://github.com/sporto/planetproto">Planet Proto</a>:  Comprendre l&#8217;héritage prototypal.</li>
<li><a href="https://github.com/finnp/test-anything">Test Anything</a>:  Comment tester son code</li>
<li><a href="https://github.com/evanlucas/learnyoumongo">learnyoumongo</a>:  Débuter avec MongoDB et node.js</li>
<li><a href="https://github.com/gl-modules/shader-school">Shader School</a>:  Comprendre les shaders.</li>
<li><a href="https://github.com/othiym23/bug-clinic">Bug Clinic</a>:  Apprendre de nouveaux outils et debugger plus facilement.</li>
<li><a href="https://github.com/alexmackey/IntroToWebGLWithThreeJS">Intro to WebGL</a>:  Débuter avec <a href="">three.js</a> et le WebGL.</li>
<li><a href="https://github.com/mdunisch/lololodash">LololoDash</a>: Apprendre Lo-Dash (fork de underscore)</li>
<li><a href="https://github.com/robertkowalski/learnyoucouchdb">learnyoucouchdb</a>:  Apprendre CouchDB.</li>
<li><a href="https://github.com/tako-black/learnyoureact">learnyoureact</a>:  Apprenez React.js.</li>
</ul>


<h2>Des liens</h2>

<ul>
<li>le <a href="http://nodeschool.io">site officiel</a> et la version <a href="http://nodeschool.io/fr-fr/">française</a></li>
<li>J&#8217;ai déjà parlé des <a href="http://mcamuzat.github.io/blog/2015/04/29/awesome-et-liste-de-liens/">awesome-list</a>. bien entendu elle existe pour les <a href="https://github.com/therebelrobot/awesome-workshopper">workshops</a>.</li>
</ul>


<h2>Conclusion</h2>

<p>Vous voulez apprendre le js, react.js, écrire des tests je crois que vous savez par ou commencer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gmail Vim Mêmes Raccourcis]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/08/gmail-vim-memes-raccourcis/"/>
    <updated>2015-08-08T18:52:17+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/08/gmail-vim-memes-raccourcis</id>
    <content type="html"><![CDATA[<h2>Les raccourcis de Gmail ressemblent à vi.</h2>

<p><em>Résumé : appuyer sur <code>?</code> dans gmail pour avoir le tableau complet, les raccourcis claviers suivant ne sont pas activés par défaut</em></p>

<p>Le titre est un peu exagéré.. Je vais essayer de montrer que la <em>philosophie</em> est un peu la même.</p>

<p>Mais sur Vi On utilise les flèches de direction <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code> pour <code>gauche</code>, <code>bas</code>, <code>haut</code>, <code>droite</code> pour se déplacer (enfin surtout <code>j</code> et <code>k</code>). Et bien les touches <code>j</code>(bas)  et <code>k</code>(haut) marchent pareilles sous Gmail.</p>

<p>Pour chercher sous Vi on utilise la touche <code>/</code> , essayez sous Gmail et vous aller directement dans la barre de recherche.</p>

<h2>Une lettre = une idée..</h2>

<p>Comme dans vi ou <code>w</code> signifie <strong>w</strong>ord, <code>d</code> signifie <strong>d</strong>elete, <code>u</code> <strong>u</strong>ndo on retrouve la même idée.</p>

<p>Par exemple <code>c</code> est l&#8217;abréviation de <strong>c</strong>omposer.</p>

<ul>
<li><code>c</code> pour <strong>c</strong>ompose Nouveau message</li>
<li><code>n</code> signifie <strong>n</strong>ext Message suivant</li>
<li><code>p</code> signifie <strong>p</strong>revious Message précédent.</li>
<li><code>r</code> pour reply <strong>r</strong>eply Répondre</li>
<li><code>a</code> pour tous <strong>a</strong>ll. Repondre à tous</li>
<li><code>f</code> pour transférer <strong>f</strong>orward.</li>
<li><code>o</code> pour ouvrir le conversation.</li>
</ul>


<h2>La lettre en majuscule = la version minuscule en plus forte</h2>

<p>Dans vi <code>i</code> insere du texte, <code>I</code> insere au début de la ligne, <code>a</code> ajoute du texte , <code>A</code> ajoute le texte à la fin de la ligne.</p>

<ul>
<li><code>C</code> compose un nouveau message dans une nouvelle fenêtre</li>
<li><code>R</code> Répondre dans une nouvelle fenêtre</li>
<li><code>A</code> Répondre à tous dans une nouvelle fenêtre.</li>
<li><code>F</code> Transférer dans une nouvelle fenêtre.</li>
</ul>


<h2>Une lettre = un pictogramme.</h2>

<p>Sous Vi certaine lettre sont des pictogrammes. Par exemple la touche <code>'</code> représente le marque page.</p>

<p>Je n&#8217;ai encore jamais parlé des marques pages sous vi pour faire simple</p>

<ul>
<li>Ouvrez un fichier texte très long</li>
<li>Allez vers le mileu du fichier  appuyer sur <code>m</code> puis <code>a</code></li>
<li>Re-deplacez vous et appuyer sur <code>m</code> puis <code>b</code>.</li>
<li>tapez <code>'a</code> vous ramene ou point a et <code>'b</code> au point b, <code>d'a</code> (effacer jusqu&#8217;au marque-page a)</li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/quote.png" width="431" height="174" title="Le guillement est une pictogramme de marques-pages" alt="le guillemet est le pictogramme du marque-page"></p>

<p>La lettre <code>=</code> est le pictogramme de deux lignes indentées. Quand j&#8217;appuie sur <code>=</code> j&#8217;indente le texte.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/indentation.png" width="600" height="276" title="Indentation" alt="Pour indenter on utilise la touche = "></p>

<p>La lettre <code>z</code> correspond au repli de texte</p>

<p><img class="center" src="http://mcamuzat.github.io/images/repli.png" width="600" height="230" title="z = repli de texte ;" alt="Pour plier déplier le texte on utilise la touche z"></p>

<ul>
<li><code>z</code> + <code>c</code> pour replier (c = close)</li>
<li><code>z</code> + <code>o</code> pour deplier (o = open)</li>
<li><code>z</code> + <code>a</code> pour alterner.</li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/plier.png" width="595" height="214" title="z = repli de texte" alt="Pour plier déplier le texte on utilise la touche z"></p>

<p>Sous gmail, c&#8217;est encore la même idée.  la touche <code>x</code> correspond à une checkbox. appuyer sur x pour sélectionner la conversation. le <code>#</code> correspond à supprimer, le <code>!</code> à SPAM!!!.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/checkanddelete.png" width="543" height="193" title="'le x est le pictogramme d'un checkbox' 'Mon terminal`" ></p>

<h2>Le cas de <code>*</code></h2>

<p>Pour tout selectionner tout les fichiers textes on utilise la commande <code>*.txt</code></p>

<ul>
<li><code>*</code> puis <code>a</code> : Sélectionner toutes les conversations</li>
<li><code>*</code> puis <code>n</code> : Désélectionner toutes les conversations</li>
<li><code>*</code> puis <code>r</code> : Sélectionner les conversations lues</li>
<li><code>*</code> puis <code>u</code> : Sélectionner les conversations non lues</li>
<li><code>*</code> puis <code>s</code> : Sélectionner les conversations dont le suivi est activé</li>
<li><code>*</code> puis <code>t</code> : Sélectionner les conversations dont le suivi n’est pas activé</li>
</ul>


<p>puis après:</p>

<ul>
<li><code>e</code> : Archiver</li>
<li><code>m</code> : Ignorer la conversation</li>
<li><code>!</code> : Signaler comme spam</li>
<li><code>#</code> : Supprimer</li>
<li><code>z</code> : Annuler la dernière action</li>
<li><code>I</code> : Marquer comme lu</li>
<li><code>U</code> : Marquer comme non lu</li>
<li><code>+</code> ou <code>=</code> : Marquer comme important</li>
<li><code>-</code> : Marquer comme non important</li>
</ul>


<h2>Une lettre = Un verbe</h2>

<p>la lettre g signifie <strong>g</strong>o</p>

<ul>
<li><code>g</code> puis <code>i</code> : Ouvrir la boîte de réception (<strong>i</strong>nput)</li>
<li><code>g</code> puis <code>s</code> : Ouvrir les conversations dont le suivi est activé</li>
<li><code>g</code> puis <code>t</code> : Ouvrir le dossier &ldquo;Messages envoyés&rdquo;</li>
<li><code>g</code> puis <code>d</code> : Ouvrir le dossier &ldquo;Brouillons&rdquo; (<strong>d</strong>raft)</li>
<li><code>g</code> puis <code>a</code> : Ouvrir le dossier &ldquo;Tous les messages&rdquo;</li>
<li><code>g</code> puis <code>c</code> : Ouvrir le dossier &ldquo;Contacts&rdquo;</li>
</ul>


<h2>Conclusion</h2>

<p>A mon travail, on utilise Gmail, Je recois beaucoup de mail (BitBucket, Hipchat, Slack, Redmine, Jira, Wordpress, Meetup, Ovh). J&#8217;avoue que des que j&#8217;ai décidé de traiter les mails via raccourcis clavier, j&#8217;ai trouvé cela assez pratique.</p>

<p>On peux retrouver un tableau qui résume tout en tapant &ldquo;?&rdquo; dans Gmail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Décorer PHPUnit Avec Les Listeners]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/08/04/decorer-phpunit-avec-les-listeners/"/>
    <updated>2015-08-04T19:44:52+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/08/04/decorer-phpunit-avec-les-listeners</id>
    <content type="html"><![CDATA[<h2>Des test unitaires plus jolis</h2>

<p>Comme tout les programmeurs vous faites des tests unitaires. En php, On utilise souvent PHPUnit.
quand je lance mes tests je vois cela.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/phpunit_screenshot.png" width="499" height="168" title="Screenshot de phpunit" alt="Mon terminal n\"></p>

<p>C&#8217;est un peu triste. Et encore j&#8217;ai activé la couleur !.</p>

<p>il existe des variantes avec <code>--testdox</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bin/phpunit --testdox
</span><span class='line'>PHPUnit 4.8-ge1cc585 by Sebastian Bergmann and contributors.
</span><span class='line'>
</span><span class='line'>Spark<span class="se">\S</span>park
</span><span class='line'> <span class="o">[</span>x<span class="o">]</span> It creates a string from data
</span><span class='line'> <span class="o">[</span>x<span class="o">]</span> It dont care <span class="k">if</span> input is string
</span><span class='line'> <span class="o">[</span>x<span class="o">]</span> It works with float number
</span><span class='line'> <span class="o">[</span>x<span class="o">]</span> It s not divide by 0
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est un peu mieux.</p>

<p>Il existe aussi <code>--debug</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>PHPUnit 4.8-ge1cc585 by Sebastian Bergmann and contributors.
</span><span class='line'>
</span><span class='line'>Starting <span class="nb">test</span> <span class="s1">&#39;Spark\SparkTest::testItCreatesAStringFromData&#39;</span>.
</span><span class='line'>.
</span><span class='line'>Starting <span class="nb">test</span> <span class="s1">&#39;Spark\SparkTest::testItDontCareIfInputIsString&#39;</span>.
</span><span class='line'>.
</span><span class='line'>Starting <span class="nb">test</span> <span class="s1">&#39;Spark\SparkTest::testItWorksWithFloatNumber&#39;</span>.
</span><span class='line'>.
</span><span class='line'>Starting <span class="nb">test</span> <span class="s1">&#39;Spark\SparkTest::testItSNotDivideBy0&#39;</span>.
</span><span class='line'>.
</span><span class='line'>
</span><span class='line'>Time: <span class="m">69</span> ms, Memory: 4.50Mb
</span><span class='line'>
</span><span class='line'>OK <span class="o">(</span><span class="m">4</span> tests, <span class="m">4</span> assertions<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais on a un peu fait le tour</p>

<h2>Les Listeners de PHPUnit</h2>

<p>On peux surcharger l&#8217;affichage de PHPunit et cela grâce au listener.</p>

<h3> Comment enregistrer un listener</h3>

<p>Il suffit d&#8217;éditer <code>phpunit.xml</code> et de rajouter les lignes suivantes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;listeners&gt;</span>
</span><span class='line'>    <span class="nt">&lt;listener</span> <span class="na">class=</span><span class="s">&quot;SparkListener&quot;</span>
</span><span class='line'>      <span class="na">file=</span><span class="s">&quot;../src/un-projet-pro/FooBundle/Tests/Listener/SparkListener.php&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/listener&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/listeners&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Comment implémenter un listener.</h3>

<p>Le plus propre est d&#8217;implémenter tout les méthodes de l&#8217;interface</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Monlistener</span> <span class="k">implements</span> <span class="nx">PHPUnit_Framework_TestListener</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addError</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nx">Exception</span> <span class="nv">$e</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addFailure</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nx">PHPUnit_Framework_AssertionFailedError</span> <span class="nv">$e</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addIncompleteTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nx">Exception</span> <span class="nv">$e</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addSkippedTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nx">Exception</span> <span class="nv">$e</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">startTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">startTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais pour aujourd&#8217;hui, Je vais faire plus simple je vais hériter de la classe <code>PHPUnit_TextUI_ResultPrinter</code> si je n&#8217;ai pas envie de réécrire toutes les méthodes.</p>

<h2>Plein d&#8217;utilisation de Listener</h2>

<h3>Des statistiques sur les tests</h3>

<p>Quel est le test qui prend le plus de temps ? Facile avec le Listener suivant.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MaxListener</span> <span class="k">extends</span> <span class="nx">PHPUnit_TextUI_ResultPrinter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$maxTime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$suites</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$endedSuites</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">startTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">suites</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">endedSuites</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">suites</span> <span class="o">&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">endedSuites</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;le test le plus long prend </span><span class="si">$this-&gt;maxTime</span><span class="s2"> seconde(s)&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">maxTime</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nv">$time</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">maxTime</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Avec ma librairie que j&#8217;ai développé dans les <a href="http://mcamuzat.github.io/blog/2015/07/19/histogramme-et-ligne-de-commande/">posts</a> précédents.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">Spark\Spark</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SparkListener</span> <span class="k">extends</span> <span class="nx">PHPUnit_TextUI_ResultPrinter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$suites</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$endedSuites</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$testTimes</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">startTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">suites</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">endedSuites</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">suites</span> <span class="o">&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">endedSuites</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nx">Spark</span><span class="o">::</span><span class="na">spark</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">testTimes</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">testTimes</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$time</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">bin</span><span class="o">/</span><span class="nx">phpunit</span> <span class="o">-</span><span class="nx">c</span> <span class="nx">build</span><span class="o">/</span><span class="nx">phpunit</span><span class="o">.</span><span class="nx">xml</span>
</span><span class='line'><span class="nx">PHPUnit</span> <span class="mf">4.5</span><span class="o">.</span><span class="mi">1</span> <span class="nx">by</span> <span class="nx">Sebastian</span> <span class="nx">Bergmann</span> <span class="k">and</span> <span class="nx">contributors</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Configuration</span> <span class="nx">read</span> <span class="nx">from</span> <span class="o">/</span><span class="nx">home</span><span class="o">/</span><span class="nx">marc</span><span class="o">/</span><span class="nx">prog</span><span class="o">/</span><span class="nx">Un</span><span class="o">-</span><span class="nx">projet</span><span class="o">-</span><span class="nx">pro</span><span class="o">/</span><span class="nx">build</span><span class="o">/</span><span class="nx">phpunit</span><span class="o">.</span><span class="nx">xml</span>
</span><span class='line'>
</span><span class='line'><span class="o">.....................................................</span>
</span><span class='line'><span class="nx">█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁</span>
</span><span class='line'><span class="nx">le</span> <span class="nx">test</span> <span class="nx">le</span> <span class="nx">plus</span> <span class="nx">long</span> <span class="nx">prend</span> <span class="mf">0.2183518409729</span> <span class="nx">seconde</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Time</span><span class="o">:</span> <span class="mi">971</span> <span class="nx">ms</span><span class="p">,</span> <span class="nx">Memory</span><span class="o">:</span> <span class="mf">17.25</span><span class="nx">Mb</span>
</span><span class='line'>
</span><span class='line'><span class="nx">OK</span> <span class="p">(</span><span class="mi">53</span> <span class="nx">tests</span><span class="p">,</span> <span class="mi">98</span> <span class="nx">assertions</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Libérer de la mémoire</h3>

<p>On peux libérer de la mémoire en mettant à <code>null</code> les mocks à la fin du test. (exemple trouvé sur github <a href="https://github.com/mybuilder/phpunit-accelerator">mybuilder/phpunit-accelerator</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">FreeListener</span> <span class="k">implements</span> <span class="nx">PHPUnit_Framework_TestListener</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// .. </span>
</span><span class='line'>    <span class="c1">// les autres methodes vides.</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$refl</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReflectionObject</span><span class="p">(</span><span class="nv">$test</span><span class="p">);</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$refl</span><span class="o">-&gt;</span><span class="na">getProperties</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$prop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$prop</span><span class="o">-&gt;</span><span class="na">isStatic</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="mi">0</span> <span class="o">!==</span> <span class="nb">strpos</span><span class="p">(</span><span class="nv">$prop</span><span class="o">-&gt;</span><span class="na">getDeclaringClass</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">(),</span> <span class="s1">&#39;PHPUnit_&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$prop</span><span class="o">-&gt;</span><span class="na">setAccessible</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>                <span class="nv">$prop</span><span class="o">-&gt;</span><span class="na">setValue</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On pourrait faire cela sur un <code>tearDown()</code></p>

<h3>Jouer des fixtures</h3>

<p>Normalement il n&#8217;y a pas de fixture dans PHPUnit. Mais en pratique pour tester certaines méthodes dans les repository, ben il n&#8217;y pas beaucoup le choix.  On peux refaire la base, dropper le schéma, un truncate à chaque test ou <code>memory::sqlite</code>. Mais sur certaines bases de données, c&#8217;est un peu compliqué. Une solution est de vider la base entre chaque suites de tests. Une proposition</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">DBListener</span> <span class="k">implements</span> <span class="nx">PHPUnit_Framework_TestListener</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// .. </span>
</span><span class='line'>    <span class="c1">// les autres methodes vides.</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">startTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">truncateDb</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">truncateDb</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// vide la table..</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">fixtureDb</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// joue les fixtures</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">startTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// si le nom du test contient truncate</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">strpos</span><span class="p">(</span><span class="nv">$test</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">(),</span> <span class="s1">&#39;truncate&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">truncateDB</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">strpos</span><span class="p">(</span><span class="nv">$test</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">(),</span> <span class="s1">&#39;fixture&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">truncateDB</span><span class="p">();</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fixtureDB</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si le nom du test contient <code>truncate</code> et <code>fixture</code> alors on force le truncate et/ou fixture. Une autre possibilité est d&#8217;implémenter la méthode <code>setUpBeforeClass</code> dans le test. Cette méthode est jouée juste avant l&#8217;instantiation de la classe. C&#8217;est du statique, donc pas forcement la joie..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">setUpBeforeClass</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">parent</span><span class="o">::</span><span class="na">setUpBeforeClass</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">self</span><span class="o">::</span><span class="na">TruncateDB</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Relancer les tests qui ne passent pas.</h3>

<p>Pour le fun..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FailureListener</span> <span class="k">extends</span> <span class="nx">PHPUnit_TextUI_ResultPrinter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$suites</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$endedSuites</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$failTest</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">startTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">suites</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addFailure</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">,</span> <span class="nx">PHPUnit_Framework_AssertionFailedError</span> <span class="nv">$e</span><span class="p">,</span> <span class="nv">$time</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">failTest</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$test</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">startTest</span><span class="p">(</span><span class="nx">PHPUnit_Framework_Test</span> <span class="nv">$test</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">endTestSuite</span><span class="p">(</span><span class="nx">PHPUnit_Framework_TestSuite</span> <span class="nv">$suite</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">endedSuites</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">suites</span> <span class="o">&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">endedSuites</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">$cli</span> <span class="o">=</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;|&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">failTest</span><span class="p">);</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nx">PHP_EOL</span> <span class="o">.</span> <span class="s2">&quot;Pour relancer seulement les tests qui ne passent pas ajoutez&quot;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;--filter &#39;(</span><span class="si">$cli</span><span class="s2">)&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le script en action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bin/phpunit -c build/phpunit.xml
</span><span class='line'>PHPUnit 4.5.1 by Sebastian Bergmann and contributors.
</span><span class='line'>
</span><span class='line'>Configuration <span class="nb">read </span>from /home/marc/prog/un-projet-pro/build/phpunit.xml
</span><span class='line'>
</span><span class='line'>............................................................................................F.F...........
</span><span class='line'>Pour relancer seulement les tests qui ne passent pas ajoutez
</span><span class='line'>--filter <span class="s1">&#39;(testObjectNeedUpdate|testUpdateObject)&#39;</span>
</span><span class='line'>
</span><span class='line'>Time: <span class="m">958</span> ms, Memory: 17.25Mb
</span></code></pre></td></tr></table></div></figure>


<p>La seconde fois avec la commande qui va bien.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bin/phpunit -c build/phpunit.xml --filter <span class="s1">&#39;(testObjectNeedUpdate|testUpdateObject)&#39;</span>
</span><span class='line'>PHPUnit 4.5.1 by Sebastian Bergmann and contributors.
</span><span class='line'>
</span><span class='line'>Configuration <span class="nb">read </span>from /home/marc/prog/un-projet-pro/build/phpunit.xml
</span><span class='line'>
</span><span class='line'>FF
</span><span class='line'>
</span><span class='line'>Time: <span class="m">116</span> ms, Memory: 9.25Mb
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Il y a encore pas mal d&#8217;utilisation je pense au <a href="https://github.com/whatthejeff/nyancat-phpunit-resultprinter">nyan-cat</a> ! Ou l&#8217;utilisation avec des notifications sur le bureau par exemple <a href="https://github.com/llaville/phpunit-LoggerTestListener">ici</a>.</p>

<p>La librairie <a href="https://packagist.org/packages/mcamuzat/spark">mcamuzat/spark</a> a été initialement fait pour ce post. J&#8217;ai passé finalement plus de temps sur la création de la librairie.</p>
]]></content>
  </entry>
  
</feed>
