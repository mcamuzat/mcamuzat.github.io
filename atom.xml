<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Journal d'un panda qui code]]></title>
  <link href="http://mcamuzat.github.io/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2016-02-21T17:52:29+01:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[De bien beau dépôt]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/21/de-bien-beau-depot/"/>
    <updated>2016-02-21T16:26:09+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/21/de-bien-beau-depot</id>
    <content type="html"><![CDATA[<p>Aujourd&#8217;hui on va se faire plaisir et admirer des images de notre travail.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/codeologyreact.png" width="600" height="578" title="représentation 3D de ReactJs" alt="représentation 3D de ReactJs"></p>

<!--more-->


<h2>Gource</h2>

<p>Cela crée une animation des différents commits. Cela permet de visualiser le travail accompli, les différents intervenants.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/gource.png" width="600" height="353" title="screenshot du site officiel" alt="screenshot du site officiel"></p>

<ul>
<li><a href="http://gource.io/">Gource</a></li>
</ul>


<h2>Codeology</h2>

<p>Crée un modèle 3D du dépots.</p>

<p>C&#8217;est assez bizarre.. On ne comprend pas trop ce qui est représenté. Mais C&#8217;est plûtot joli.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/codeology.png" width="600" height="346" title="representation 3D de Three.js" alt="representation 3D de Three.js"></p>

<ul>
<li><a href="http://codeology.braintreepayments.com/">codeology</a></li>
<li>vue de <a href="http://codeology.braintreepayments.com/featured/facebook/react">ReactJs</a></li>
<li>vue de <a href="http://codeology.braintreepayments.com/featured/django/django">Danjgo</a></li>
</ul>


<h2><a href="http://ghv.artzub.com/">http://ghv.artzub.com/</a></h2>

<p>Rentrez l&#8217;utilisateur et puis le projet (la visualisation s&#8217;inspire de <a href="http://www.michaelogawa.com/code_swarm/">codeswarm</a>)</p>

<ul>
<li><p>Vue par auteur
<img class="center" src="http://mcamuzat.github.io/images/githubvisualbyauthor.png" width="600" height="350" title="vue par auteur" alt="vue par auteur"></p></li>
<li><p>Vue par projet
<img class="center" src="http://mcamuzat.github.io/images/githubvisualbyproject.png" width="600" height="342" title="vue par auteur" alt="vue par auteur"></p></li>
<li><p><a href="http://ghv.artzub.com/">http://ghv.artzub.com</a></p></li>
</ul>


<h2>Conclusion</h2>

<p>Il y a eu des tentatives de générer un CV via le dépôt de github (Notamment <a href="http://resume.github.io/">resumé (down)</a> et <a href="https://github.com/dfm/osrc">The Open Source Report Card (down)</a>. <strong>Les deux sites ne marchent plus depuis la modifcation de l&#8217;API de Github</strong>.</p>

<p>Un Github bien rempli montre que l&#8217;utilisateur est actif et qu&#8217;il participe. Mais le contraire ne prouve rien. Cela fait 7 ans que je bosse dans le monde de l&#8217;informatique. Mon Github est plutôt vide (mais grâce au blog je le remplis chaque semaine..)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim et Markdown]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/15/vim-et-markdown/"/>
    <updated>2016-02-15T20:24:36+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/15/vim-et-markdown</id>
    <content type="html"><![CDATA[<p>Une astuce que je viens d&#8217;apprendre.</p>

<p>Pour écrire du code en Markdown on utilise la syntaxe suivante</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>```php
</span><span class='line'>le code terminé par ```
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est pas génial car on perd la coloration syntaxique, et j&#8217;ai fais pas mal d&#8217;erreurs.</p>

<p>Mais grâce à la commande suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">g</span>:markdown_fenced_languages <span class="p">=</span> [<span class="s1">&#39;html&#39;</span><span class="p">,</span> <span class="s1">&#39;vim&#39;</span><span class="p">,</span> <span class="s1">&#39;php&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;bash=sh&#39;</span>]
</span></code></pre></td></tr></table></div></figure>


<p>Voici un avant et après
<img class="center" src="http://mcamuzat.github.io/images/avantapres.png" width="600" height="189" title="avant et après" alt="avant et après"></p>

<p>C&#8217;est beaucoup mieux ! Un petit bémol pour le PHP (ma joie !) il faut obligatoirement mettre <code>&lt;?php</code>.</p>

<p>Bref un commande que j&#8217;aurai aimé avoir avant.</p>

<p>Il y a plein d&#8217;astuce de ce genre sur le site suivant</p>

<ul>
<li><a href="https://til.hashrocket.com/">til</a> <strong>TIL</strong> est l&#8217;abbrévation de <strong>T</strong>oday <strong>I</strong> <strong>L</strong>ean cela vient de <a href="https://www.reddit.com/r/todayilearned/">reddit</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remettre au propre son dépot git]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/14/remettre-au-propre-son-depot-git/"/>
    <updated>2016-02-14T17:03:58+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/14/remettre-au-propre-son-depot-git</id>
    <content type="html"><![CDATA[<p>Lorsque l&#8217;on souhaite sauvegarder son travail. Il y a toujours des fichiers modifiés que l&#8217;on ne souhaite pas commiter.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/gitmenage.png" width="387" height="490" title="avant et après" alt="avant et après"></p>

<!--more-->


<h2>Pour éviter de tracker des fichiers.</h2>

<p><strong>Règle N°1 : éviter <code>git add .</code></strong></p>

<p>Personnellement j&#8217;utilise tig. (voir le <a href="http://mcamuzat.github.io/blog/2015/10/04/tig-status/">post</a>)</p>

<p>Solution bis :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add -p </span></code></pre></td></tr></table></div></figure>


<h2>Pour reverter les fichiers modifiés</h2>

<p><strong>Règle N°2 : éviter le <code>git reset --hard</code></strong></p>

<p>La solution est un peu trop radicale. Comme le <code>git add .</code> vous allez le regretter un jour, car vous perdez tout votre travail. Ce que vous voulez c&#8217;est remettre certain fichier au propre et ce n&#8217;est pas forcement la bonne commande.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -- .</span></code></pre></td></tr></table></div></figure>


<p>A noter que cela réverte tout vos fichiers, mais s&#8217;il faut filtrer.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -- /web/.</span></code></pre></td></tr></table></div></figure>


<p>Bien entendu il existe le mode interactif</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -p</span></code></pre></td></tr></table></div></figure>


<h2>Reverter un commit.</h2>

<p><strong>Attention si le commit est déja pushé. Vous serez obliger de faire un <code>push -f</code> donc on évite de faire cela sur les branches master, staging, develop</strong></p>

<p>Vous avez commiter mais le commit est pas bon.</p>

<p>Si c&#8217;est juste le message qui est faux</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit --amend</span></code></pre></td></tr></table></div></figure>


<p>Si un des fichiers n&#8217;est pas bon</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset HEAD^ --soft</span></code></pre></td></tr></table></div></figure>


<p>Vous remarquez que j&#8217;utilise <code>--soft</code> au lieu <code>--hard</code>. Le reset soft me remets avant que j&#8217;ai commité. Je ne perds pas mon travail, même mieux les fichiers sont déjà prêt à être commités.</p>

<h2>Supprimer les fichiers qui ne sont pas trackés</h2>

<p>Vous avez un <code>export.sql</code>, <code>toto.txt</code>, <code>npm-debug.log</code></p>

<p><em>Attention à ne pas perdre du travail.</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clean -f -d -x
</span><span class='line'>git clean -fdx</span></code></pre></td></tr></table></div></figure>


<p>Avec <code>-f</code> force <strong>Obligatoire</strong> <code>-d</code> pour directory(répertoire) <code>-x</code> virer les fichiers ignorés de git.</p>

<p>Pour voir ce qui pourrait être effacé pendant la commande.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clean -n</span></code></pre></td></tr></table></div></figure>


<p>Enfin il existe aussi un mode interactif</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clean -i </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Insérer avec classe dans VIM]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/07/inserer-avec-classe-dans-vim/"/>
    <updated>2016-02-07T19:20:36+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/07/inserer-avec-classe-dans-vim</id>
    <content type="html"><![CDATA[<p><em>tl;dr : sous vi utilisez <code>a</code> au lieu de <code>i</code></em></p>

<p>Tout le monde utilise VI pour éditer ses fichiers de configs sous linux ou les fichiers sur un serveur distant (il y a aussi <code>nano</code> qui marche super bien). Moi personnellement je code aussi du php/js avec. Pour insérer du texte on utilise la touche <code>i</code> comme insérer puis <code>ESC</code> pour quitter le mode insertion. Je vais parler des autres touches pour insérer du texte.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/viminser.png" width="517" height="220" title="Il y a 6 touches pour insérer" alt="Il y a 6 touches pour insérer"></p>

<!--more-->


<h2>Insérer.</h2>

<p>Le problème de la touche <code>i</code> c&#8217;est justement que l&#8217;on insère le texte. Le curseur n&#8217;est pas à la bonne position. On souhaite plutôt ajouter du texte après le curseur. Et c&#8217;est le principe de la touche <code>a</code> (comme <strong>A</strong>ppend ou <strong>A</strong>jouter).</p>

<p>Si c&#8217;est rajouter une ligne vide. La touche <code>o</code> comme <strong>o</strong>pen une nouvelle ligne.</p>

<h3>Un concept important dans VIM</h3>

<p><strong>la lettre majuscule est la version plus <em>musclée</em> que la minuscule</strong></p>

<ul>
<li><code>i</code> insère au <strong>début du curseur</strong>.</li>
<li><code>I</code> insère au <strong>début de la ligne</strong></li>
<li><code>a</code> ajoute du <strong>texte à la fin du curseur.</strong></li>
<li><code>A</code> ajoute du <strong>texte à la fin de la ligne</strong>.</li>
</ul>


<p><strong>la lettre majuscule est le contraire de la version minuscule</strong></p>

<ul>
<li><code>o</code> ouvre une ligne <strong>après le curseur</strong></li>
<li><code>O</code> ouvre une ligne <strong>avant le curseur</strong></li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/viminser.png" width="517" height="220" title="Il y a 6 touches pour insérer" alt="Il y a 6 touches pour insérer"></p>

<p>En résumé</p>

<ul>
<li>Si vous appuyez sur <code>i</code> et <code>-&gt;</code> : utiliser <code>a</code></li>
<li>Si vous voulez commenter une ligne <code>I</code> suivi de<code>//</code></li>
<li>vous avez oublié une virgule à la fin de la ligne. alors <code>A,</code></li>
<li>vous voulez rajouter une ligne au lieu de <code>i</code> et <code>&lt;enter&gt;</code> , la touche <code>o</code>.</li>
</ul>


<h2>Se répéter</h2>

<p>Essayons de commenter les trois lignes.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>instruction 1 &lt;-mon curseur est à cette ligne.
</span><span class='line'>instruction 2
</span><span class='line'>instruction 3</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;appuie sur <code>I</code> puis <code>//</code> pour commenter</p>

<p>J&#8217;obtiens</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//instruction 1
</span><span class='line'>instruction 2
</span><span class='line'>instruction 3</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;appuie sur <code>j</code> ou <code>bas</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//instruction 1
</span><span class='line'>instruction 2 &lt;-mon curseur
</span><span class='line'>instruction 3</span></code></pre></td></tr></table></div></figure>


<p>Si j&#8217;appuie sur la touche <code>.</code> je répète la dernière instruction. La touche <code>.</code> est probablement la touche la plus utile.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//instruction 1
</span><span class='line'>//instruction 2 &lt;-mon curseur
</span><span class='line'>instruction 3</span></code></pre></td></tr></table></div></figure>


<p>Et ainsi de suite..</p>

<p>Mais il y a beaucoup de manière sur VIM pour faire la même chose.</p>

<p>Par exemple sélectionnons le texte avec la touche <code>v</code> ou la souris( <code>set mouse=a</code>). puis appuyons sur <code>:</code></p>

<p>Vous deviez voir</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'&lt;,'&gt;`</span></code></pre></td></tr></table></div></figure>


<p>alors complétons la ligne par <code>'&lt;,'&gt;norm I//</code> et tout le texte sélectionné est commenté!
La commande précédente se lit sur la zone sélectionnée <code>'&lt;,'&gt;</code>  appuyez(<code>norm</code>)  sur <code>I</code> puis <code>\\</code>.</p>

<h2>Un dernier raccourci-clavier..</h2>

<p>La touche <code>gi</code> vous emmène au dernier endroit ou vous avez inséré du texte et place directement en insertion.</p>

<p>En conclusion, Il n&#8217;y pas que le touche <code>i</code> dans Vi. En fait on se sert assez peu de cette touche.. C&#8217;est pourtant la plus connue..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud9 un workspace en ligne]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/01/cloud9-un-workspace-en-ligne/"/>
    <updated>2016-02-01T21:14:07+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/01/cloud9-un-workspace-en-ligne</id>
    <content type="html"><![CDATA[<p>Je me suis inscris sur <a href="http://www.freecodecamp.com">FreecodeCamp</a>. C&#8217;est gratuit et annonce une formation du Bootstrap/Nodejs/React/D3/javascript. Bon au moment ou j&#8217;écris ces lignes D3 et React sont en <em>coming soon</em> (c&#8217;est dommage c&#8217;était surtout ca qui m&#8217;intéressait). L&#8217;idée est de former des développeur back et front pour aider des associations. L&#8217;idée me semble bonne.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/freecodecamp.png" width="600" height="217" title="FreecodeCamp" alt="FreeCodeCamp"></p>

<!--more-->


<p>Sur les projets backends pour éviter d&#8217;installer un linux, le site conseille de créer un compte sur <a href="https://c9.io/">Cloud9</a>.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/introcloud9.png" width="600" height="259" title="accueil" alt="page d\"></p>

<p>Je crée un nouveau workspace.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/choixcloud9.png" width="600" height="453" title="environnent de dev" alt="choix de l"></p>

<p>Je choisis nodejs.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/workspacecloud9.png" width="600" height="413" title="le workspace" alt="le workspace"></p>

<p>Sur cette image on voit l&#8217;explorateur de fichiers, l&#8217;éditeur et la ligne de commande. Nous sommes déjà dans un vm. Toutes les commandes Linux sont disponibles. <code>apt-get</code>, <code>npm</code> etc..</p>

<p>Dans l&#8217;onglet <code>windows&gt;share</code></p>

<p><img class="center" src="http://mcamuzat.github.io/images/sharecloud9.png" width="456" height="142" title="environnement de dev" alt="Url de l\"></p>

<p>Ici on voit l&#8217;url de l&#8217;environment. Si j&#8217;allume le nodejs. mon application est disponible à</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://&lt;mon-env&gt;-&lt;monuser&gt;.c9users.io/</span></code></pre></td></tr></table></div></figure>


<p>à la création de l&#8217;environnement il est possible de choisir un dépôt.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/choixdepot.png" width="600" height="115" title="choix en mettant le dépôt" alt="choix en mettant le dépôt"></p>

<p>on précise par exemple..</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://github.com/johnstonbl01/clementinejs-fcc.git</span></code></pre></td></tr></table></div></figure>


<p>Ainsi l&#8217;environnement est déjà prêt.</p>

<h2>Conclusion</h2>

<p>Cloud9 est gratuit et il n&#8217;y pas vraiment de raison de se priver.</p>

<p>Il n&#8217;y a qu&#8217;un environnement privé pour une licence gratuite. Mais c&#8217;est largement suffisant pour débuter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades: Applicative et les listes]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/01/25/les-monades-applicative-et-les-listes/"/>
    <updated>2016-01-25T20:45:47+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/01/25/les-monades-applicative-et-les-listes</id>
    <content type="html"><![CDATA[<p>Dans le précédent <a href="http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives/">post</a>, j&#8217;avais parlé des applicatives sur les Maybes.</p>

<p>Nous allons voir ensemble comment les applicatives se comportent sur les listes.</p>

<p>Rappelons que l&#8217;idée des applicatives c&#8217;est</p>

<ul>
<li>ma valeur est dans un container</li>
<li>et ma fonction que je vais appliquer est aussi dans un container</li>
</ul>


<p>Pour la liste c&#8217;est un peu près la même idée.</p>

<ul>
<li>mes valeurs sont dans une collection</li>
<li>mes fonctions sont aussi dans une collection</li>
</ul>


<!--more-->


<p>Initialisons une Collection de valeurs</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$collectionValue</span> <span class="o">=</span> <span class="nx">Monad\Collection</span><span class="o">::</span><span class="na">of</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Créons un collection de fonctions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$collection</span> <span class="o">=</span> <span class="nx">Monad\Collection</span><span class="o">::</span><span class="na">of</span><span class="p">([</span>
</span><span class='line'>    <span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">3</span> <span class="o">+</span> <span class="nv">$a</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">4</span> <span class="o">+</span> <span class="nv">$a</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Regardons de suite le résultat, nous obtenons une collection qui contient <code>[4, 5, 5, 6]</code>. En fait on a calculé toutes les possibilités.. Puisque <code>[1+3, 1+4, 2+3, 2+4]</code></p>

<p>Essayons de programmer un générateur de nom de scout (?!!)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// des animaux</span>
</span><span class='line'><span class="nv">$collectionAnimaux</span> <span class="o">=</span> <span class="nx">Monad\Collection</span><span class="o">::</span><span class="na">of</span><span class="p">([</span>
</span><span class='line'>  <span class="s2">&quot;renard&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;blaireau&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;aigle&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;panda&quot;</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// des adjectifs</span>
</span><span class='line'><span class="nv">$collectionAdjectif</span> <span class="o">=</span>  <span class="nx">Monad\Collection</span><span class="o">::</span><span class="na">of</span><span class="p">([</span>
</span><span class='line'>  <span class="s2">&quot;affectueux&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;perçant&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;agile&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;bavard&quot;</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// des générateurs</span>
</span><span class='line'><span class="nv">$collectionGenerateur</span> <span class="o">=</span> <span class="nx">Monad\Collection</span><span class="o">::</span><span class="na">of</span><span class="p">([</span>
</span><span class='line'>    <span class="nx">Maybe\just</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">f\curryN</span><span class="p">(</span>
</span><span class='line'>            <span class="mi">2</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$nom</span><span class="p">,</span><span class="nv">$adj</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nv">$nom</span> <span class="o">.</span> <span class="s2">&quot; &quot;</span> <span class="o">.</span> <span class="nv">$adj</span><span class="p">;}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>    <span class="nx">Maybe\just</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">f\curryN</span><span class="p">(</span>
</span><span class='line'>            <span class="mi">2</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$nom</span><span class="p">,</span><span class="nv">$adj</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="s2">&quot;petit &quot;</span><span class="o">.</span> <span class="nv">$nom</span> <span class="o">.</span> <span class="s2">&quot; &quot;</span> <span class="o">.</span> <span class="nv">$adj</span><span class="p">;}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">]</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// On mélange</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$collectionGerateur</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nv">$collectionAnimaux</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nv">$collectionAdjectif</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Grâce à l&#8217;évaluation partielle je peux créer des fonctions à plusieurs arguments. Les applicatives sur les listes me permette de faire toutes les combinaisons.</p>

<p>J&#8217;obtiens</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="o">..</span> <span class="mi">32</span> <span class="nx">résultats</span>
</span><span class='line'> <span class="nx">string</span><span class="p">(</span><span class="mi">14</span><span class="p">)</span> <span class="s2">&quot;panda perçant&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="s2">&quot;panda agile&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span> <span class="s2">&quot;panda bavard&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">23</span><span class="p">)</span> <span class="s2">&quot;petit renard affectueux&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">17</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">21</span><span class="p">)</span> <span class="s2">&quot;petit renard perçant&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">18</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">18</span><span class="p">)</span> <span class="s2">&quot;petit renard agile&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bon c&#8217;est sur que <em>petit renard affectueux</em> n&#8217;est pas génial comme nom..</p>

<p>Le Panda bavard.</p>

<p>Liste des articles</p>

<ul>
<li>Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
<li>Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a></li>
<li>Partie 5 : <a href="http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives/">Les applicatives</a></li>
<li>Partie 6 : <a href="http://mcamuzat.github.io/blog/2016/01/25/les-monades-applicative-et-les-listes/">Les applicatives et les listes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je joue donc je programme 3]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/01/18/je-joue-donc-je-programme-3/"/>
    <updated>2016-01-18T20:25:01+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/01/18/je-joue-donc-je-programme-3</id>
    <content type="html"><![CDATA[<p>Nous continuons à la recherche de soft donc le but du jeux est d&#8217;apprendre à programmer.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/climurder.png" width="600" height="488" title="Screenshot du dépot CLmurder" alt="Screenshot de cli murder"></p>

<!--more-->


<h2>Les Capture The Flag /Wargame.</h2>

<p>Le but ici est de s&#8217;introduire le premier dans un programme(via connection ssh, iso) et de capturer le drapeau. C&#8217;est un concours et un peu un jeux de piste. On distingue deux types</p>

<ul>
<li><p>les CTF. c&#8217;est un jeu avec une date de début et une date de fin. Je n&#8217;ai jamais participé à ce genre d&#8217;évènement.</p>

<ul>
<li>Actualité <a href="https://ctftime.org/">CTFTime</a></li>
<li><a href="http://en.wikipedia.org/wiki/Capture_the_flag#Computer_security">wikipedia</a></li>
<li>Débuter : <a href="https://www.endgame.com/blog/how-get-started-ctf">How to Get Started in CTF </a> et <a href="https://trailofbits.github.io/ctf/">CTF Field Guide</a></li>
<li>Une liste <a href="https://github.com/apsdehal/awesome-ctf">complète</a></li>
</ul>
</li>
<li><p>Quand on peux rentrer à n&#8217;importe quelle moment on parle de Wargame.</p>

<ul>
<li><a href="http://smashthestack.org/">SmashTheStack</a></li>
<li><a href="http://overthewire.org/wargames/">OverTheWire</a> Le premier challenge <a href="http://overthewire.org/wargames/bandit/">Bandit</a> est vraiment pour un débutant (<strong>Moi!!</strong>)</li>
<li><a href="https://exploit-exercises.com/">Exploit Exercises</a> Les Isos sont téléchargeables</li>
</ul>
</li>
</ul>


<p>Il y a plein de techniques  j&#8217;avoue que je connais assez peu, j&#8217;ai un peu joué avec la backtrack (maintenant connue sur le nom de <a href="https://www.kali.org/">Khali-Linux</a>)</p>

<h2>Xss-Game</h2>

<p>Pour apprendres les failles XSS , C&#8217;est google qui a fais le site suivant</p>

<ul>
<li><a href="https://xss-game.appspot.com/">XSS Game</a></li>
</ul>


<h2>Les concours</h2>

<p>Je suis beaucoup sur <a href="http://www.codewars.com">Codewars</a>. La présentation est clean..</p>

<p>Mais il existe une énorme quantité de site dans le même genre.</p>

<ul>
<li><a href="http://projecteuler.net">Le plus connus le projet Euler</a></li>
<li><a href="http://www.codechef.com">Code Chef</a></li>
<li><a href="http://codeforces.com">Codeforces</a></li>
<li><a href="http://www.codewars.com">Codewars</a></li>
<li><a href="http://eudyptula-challenge.org">Eudyptula Challenge</a>(Kernel Linux)</li>
<li><a href="https://code.google.com/codejam/contests.html">Google Code Jam</a></li>
<li><a href="https://www.hackerrank.com">HackerRank</a></li>
<li><a href="http://ioccc.org">International Obfuscated C Code Contest</a> le code le plus obscure possible..</li>
<li><a href="http://ipsc.ksp.sk">Internet Problem Solving Contest</a></li>
<li><a href="http://www.kaggle.com/competitions">Kaggle</a> (les données fournis proviennent de véritables mesures/études)</li>
<li><a href="http://www.teamleada.com" title="">Leada</a> cours en lignes..</li>
<li><a href="http://community.topcoder.com/tc">Top Coder</a> Il y a des récompenses pour certains challenges.</li>
<li><a href="https://www.codeeval.com">CodeEval</a> Si vous cherchez du travail et mettre en valeur son CV</li>
</ul>


<p>Et aussi</p>

<ul>
<li><a href="http://www.dmoz.org/Computers/Programming/Contests/">Annuaire</a></li>
<li><a href="http://en.wikipedia.org/wiki/Category:Programming_contests">Article wikipedia</a></li>
</ul>


<h2>Cryptologie</h2>

<p>Il existe aussi des concours pour apprendre de la cryptologie</p>

<ul>
<li><a href="https://www.mysterytwisterc3.org/en/">Mystery Twister</a></li>
<li><a href="http://cryptopals.com/">Matasano Challenge</a></li>
</ul>


<h2>Divers</h2>

<ul>
<li><a href="https://github.com/veltman/clmystery">The Command Line Murders</a> résoudre un crime avec la ligne de commande..</li>
<li><a href="https://github.com/git-game/git-game">Git game</a> Un jeu de piste en git.

<h2>Conclusion</h2></li>
</ul>


<p>Je vous laisse j&#8217;ai un crime à résoudre.. Il y a de quoi s&#8217;occuper.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell : Stack]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/12/27/haskell-stack/"/>
    <updated>2015-12-27T18:39:17+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/12/27/haskell-stack</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Je ne développe pas en <a href="https://www.haskell.org/">Haskell</a> mais je regarde beaucoup. La série que j&#8217;écris sur la programmation fonctionnelle me force à regarder le langage de plus près. Le monde haskell s&#8217;est enrichi d&#8217;un nouvel outil <strong>Stack</strong>.</p>

<h2>Stack et Haskell</h2>

<p>Stack est un logiciel qui gère l&#8217;installation/les packages/la création/le build/les tests d&#8217;un projet Haskell.</p>

<p>Il a plusieurs avantages:</p>

<ul>
<li>Il a été pensé pour automatiser le build.</li>
<li>Il a une ligne de commande sympathique que nous allons voir par la suite.</li>
<li>Il utilise un fichier <code>stack.yml</code> c&#8217;est l&#8217;équivalent d&#8217;un <code>composer.json</code> en php ou un <code>package.json</code> en node.</li>
<li>Tout est installé dans le <code>~/.stack</code> tout les programmes sont <em>isolés</em> et n&#8217;interfèrent pas avec les autres logiciels déjà pré installés.</li>
</ul>


<!--more-->


<h2>Mise en place.</h2>

<p>Il suffit d&#8217;ajouter les clés/et le dépôt sous ubuntu :  <a href="http://docs.haskellstack.org/en/stable/README.html#how-to-install">voir la documentation</a>
Une fois que le logiciel est installé</p>

<h3>Etape 1 : structure d&#8217;un projet.</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack new my-project</span></code></pre></td></tr></table></div></figure>


<p>crée une arborescence toute faite</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>├── LICENSE
</span><span class='line'>├── Setup.hs
</span><span class='line'>├── app
</span><span class='line'>│   └── Main.hs
</span><span class='line'>├── my-project.cabal
</span><span class='line'>├── src
</span><span class='line'>│   └── Lib.hs
</span><span class='line'>├── stack.yaml
</span><span class='line'>└── test
</span><span class='line'>    └── Spec.hs
</span><span class='line'>
</span><span class='line'>    3 directories, 7 files</span></code></pre></td></tr></table></div></figure>


<p>A noter qu&#8217;il existe des templates d&#8217;applications (Un peu comme <a href="http://yeoman.io/">Yeoman</a>)</p>

<p>Par exemple pour créer une application Yesod (Pour faire un serveur web) et Mysql</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack new mon-projet yesod-mysql</span></code></pre></td></tr></table></div></figure>


<p>Pour lister les différents templates</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack templates
</span><span class='line'>chrisdone
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>yesod-minimal
</span><span class='line'>yesod-mongo
</span><span class='line'>yesod-mysql
</span><span class='line'>yesod-postgres
</span><span class='line'>yesod-postgres-fay
</span><span class='line'>yesod-simple
</span><span class='line'>yesod-sqlite</span></code></pre></td></tr></table></div></figure>


<h2>Etape 2 : Installation des librairies</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd mon-projet
</span><span class='line'>$ stack setup</span></code></pre></td></tr></table></div></figure>


<p>Si Haskell n&#8217;est pas encore installé dans <code>~/.stack</code>, le logiciel s&#8217;occupe de tout, il installe aussi toutes les dépendances.</p>

<h2>Etape 3 : build et compilation</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack build</span></code></pre></td></tr></table></div></figure>


<p>Le haskell est un language compilé. Le logiciel compile tout le projet.</p>

<h2>Etape 4 : Lancer le programme</h2>

<p>Pour lancer le programme</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack exec mon-projet</span></code></pre></td></tr></table></div></figure>


<p>Pour lancer les tests. Tout les projets viennents avec des tests</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack test
</span></code></pre></td></tr></table></div></figure>


<h2>Etape 5 : Installer le programme</h2>

<p>un peu comme un <code>make install</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack install</span></code></pre></td></tr></table></div></figure>


<h2>Etape 6 : Docker</h2>

<p>Docker c&#8217;est cool et pratique.</p>

<p>dans le <code>stack.yml</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>...
</span><span class='line'>image:
</span><span class='line'>  container:
</span><span class='line'>    # Image de base
</span><span class='line'>    base: "fpco/ubuntu-with-libgmp:14.04"
</span><span class='line'>    # Noms de l'iso.
</span><span class='line'>    name: "mcamuzat/mon-projet"
</span><span class='line'>    # Nom du programme à lancer 
</span><span class='line'>    entrypoints:
</span><span class='line'>      - mon-projet
</span></code></pre></td></tr></table></div></figure>


<p>Si l&#8217;image de base existe déjà</p>

<p>Alors</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack image container</span></code></pre></td></tr></table></div></figure>


<p>Cela génère le container.</p>

<p>Il ne reste plus qu&#8217;à lancer le container</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo docker run -t -i mcamuzat/mon-projet mon-projet</span></code></pre></td></tr></table></div></figure>


<h2>Listes de commandes</h2>

<ul>
<li><code>stack new nom-du-projet nom-du-template</code> crée un nouveau projet</li>
<li><code>stack setup</code> mise en place du projet</li>
<li><code>stack build</code> compile le projet</li>
<li><code>stack exec nom-du-programme</code> lance le programme</li>
<li><code>stack repl</code> Lance le mode interactif</li>
<li><code>stack test</code> Lance les tests</li>
<li><code>stack install</code> installe le programme.</li>
<li><code>stack templates</code> liste tout les templates.</li>
</ul>


<h2>Conclusion</h2>

<p>Je me mets au Haskell. C&#8217;est assez passionnant. Le langage n&#8217;est pas simple (je me casse un peu les dents dessus). Je suis pour l&#8217;instant juste sur les premiers problèmes de <a href="http://www.codewars.com/">codewars</a>. J&#8217;espère faire des post sur haskell par la suite. Il y a déja plein de tutoriels.</p>

<h2>Liens</h2>

<ul>
<li><a href="http://docs.haskellstack.org/en/stable/README.html">Le site officiel</a></li>
<li><a href="http://conscientiousprogrammer.com/blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/">Une introduction en anglais</a></li>
<li><a href="http://www.stephendiehl.com/posts/haskell_2016.html">Un second article an anglais</a></li>
<li><a href="https://www.fpcomplete.com/blog/2015/11/kubernetes">Créer le container Docker</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les monades 5: les applicatives]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives/"/>
    <updated>2015-12-20T15:49:14+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives</id>
    <content type="html"><![CDATA[<p>Nous allons voir les foncteurs applicatifs.</p>

<p>Reprenons le container Maybe</p>

<p><img class="center" src="http://mcamuzat.github.io/images/applicative.png" width="428" height="212" title="Avec évaluation partielle" alt="avec évaluation partielle"></p>

<p>Ce que j&#8217;aimerai c&#8217;est pouvoir faire ce genre d&#8217;opération</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Maybe</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="nx">Maybe</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">=</span> <span class="nx">Maybe</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="nx">Container</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="o">*</span> <span class="nx">Container</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="o">=</span> <span class="nx">Container</span><span class="p">(</span><span class="mi">40</span><span class="p">)</span>
</span><span class='line'><span class="nb">str_repeat</span><span class="p">(</span><span class="nx">Maybe</span><span class="p">(</span><span class="s2">&quot;.oOo&quot;</span><span class="p">),</span> <span class="nx">Maybe</span><span class="p">(</span><span class="s2">&quot;3&quot;</span><span class="p">))</span> <span class="o">=</span> <span class="nx">Maybe</span><span class="p">(</span><span class="s2">&quot;.oOo.oOo.oOo&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>La bonne nouvelle c&#8217;est que c&#8217;est possible.</p>

<!--more-->


<p>J&#8217;ai besoin de 2 étapes:</p>

<ul>
<li>Nous allons mettre en place la librairie <a href="https://github.com/widmogrod/php-functional">php-functionnal</a>. Il devient difficile d&#8217;utiliser sa propre librairie.</li>
<li>Nous avons besoin d&#8217;une nouvelle opération <code>ap</code> pour applicative.</li>
</ul>


<h2>installation de php-functionnal</h2>

<p>Grâce à composer c&#8217;est très simple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">composer</span> <span class="k">require</span> <span class="nx">widmogrod</span><span class="o">/</span><span class="nx">php</span><span class="o">-</span><span class="nx">functional</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici le fichier php dans la racine du projet</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">require_once</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span> <span class="c1">// Autoload files using Composer autoload</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Monad\Maybe</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Functional</span> <span class="k">as</span> <span class="nx">f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="nx">Maybe\Just</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nv">$b</span> <span class="o">=</span> <span class="nv">$a</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;});</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$b</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si vous obtenez ceci</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Monad\Maybe\Just</span><span class="c1">#4 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tout va bien!!</p>

<p>Je n&#8217;ai pas utilisé les mêmes noms que la librairie voici les traductions</p>

<ul>
<li>Container -> Identity</li>
<li>Collection -> Collection</li>
<li>Some -> Just</li>
<li>Nothing -> Nothing</li>
<li><code>Maybe\just(10)</code> est un helper <code>Maybe\Just::of(10)</code></li>
<li><code>Maybe\nothing()</code> -> <code>Maybe\Nothing::of(10)</code></li>
</ul>


<p>Nous allons faire quelque chose de curieux puisque nous ne mettons pas une valeur dans notre Maybe mais une fonction !</p>

<p>Regardons un exemple simple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$addOne</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;});</span>
</span><span class='line'><span class="nv">$value</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$addOne</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans le premier Maybe on a mis une fonction. <code>ap</code> prend en entrée un Maybe.</p>

<p>Nous obtenons</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Monad\Maybe\Just</span><span class="c1">#5 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">int</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Essayons avec <code>Nothing</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$addOne</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;});</span>
</span><span class='line'><span class="nv">$value</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Maybe\nothing</span><span class="p">();</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$addOne</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Monad\Maybe\Nothing</span><span class="c1">#4 (0) {</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cela ne semble pas très utiles</p>

<p>Nous allons utiliser notre fonction <code>curryN</code> du <a href="">post précédent</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="nv">$b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$add</span> <span class="o">=</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="nx">f\curryN</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;add&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$add</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">MayBe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// just(10)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>la fonction add est une addition et prend deux arguments. <code>(? + ?)</code></li>
<li>Je la transforme en évaluation partielle avec CurryN() et je la place dans un <code>just(? + ?)</code></li>
<li>Au premier <code>ap</code> je soumet le premier argument, il manque encore un argument , la fonction devient <code>just( 5 + ?)</code>.</li>
<li>Au second <code>ap</code> l&#8217;argument manquant est fournis. La fonction est complète <code>just( 5 + 5)</code> -> <code>just(10)</code>.</li>
</ul>


<p>La recette est simple, Je mets la fonction à plusieurs arguments dans mon Maybe avec le curryN. et j&#8217;applique chacun des arguments.</p>

<p>En fait si on fait une image</p>

<p><img class="center" src="http://mcamuzat.github.io/images/applicative.png" width="428" height="212" title="Avec évaluation partielle" alt="avec évaluation partielle"></p>

<p>Mais nous pouvons faire cela avec toutes les fonctions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$superStrRepeat</span> <span class="o">=</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="nx">f\curryN</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;str_repeat&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//alors </span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>   <span class="nv">$superStrRepeat</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\just</span><span class="p">(</span><span class="s2">&quot;.o0o&quot;</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="c1">//Maybe\just(&quot;.oOo.oOo.oOo&quot;);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>   <span class="nv">$superStrRepeat</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\nothing</span><span class="p">())</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="c1">//Maybe\Nothing();</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>   <span class="nv">$superStrRepeat</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\nothing</span><span class="p">())</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\nothing</span><span class="p">()))</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="c1">// Maybe\Nothing</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est pratique car nous pouvons maintenant appliquer des fonctions à plusieurs arguments. et des fonctions qui ne travaillent pas avec des object Maybe, Nothing.</p>

<p>Quand on &ldquo;augmente&rdquo; les fonctions pour travailler avec d&#8217;autre types,  on appelle cela le <code>Lift</code></p>

<p>D&#8217;ailleurs cela s&#8217;exprime en 1 ligne avec la librairie</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nx">f\liftA2</span><span class="p">(</span><span class="s2">&quot;add&quot;</span><span class="p">,</span> <span class="nx">MayBe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">)));</span>
</span><span class='line'><span class="c1">// Maybe\Just(10)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nx">f\liftA2</span><span class="p">(</span><span class="s2">&quot;str_repeat&quot;</span><span class="p">,</span><span class="nx">MayBe\just</span><span class="p">(</span><span class="s2">&quot;.o0o&quot;</span><span class="p">),</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">)));</span>
</span><span class='line'><span class="c1">// Maybe\just(&quot;.o0o.o0o.o0o.o0o.o0o&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://mcamuzat.github.io/images/str_repeataveccontainer.png" width="517" height="425" title="On utilise la fonction LiftA2" ></p>

<h2>Pour résumer.</h2>

<ul>
<li>Les <em>functors</em> implémentent la fonction <code>map</code> qui prend en entrée une fonction.</li>
<li>Les <em>applicatives</em> implémentent la fonction <code>ap</code> prend en entrée un applicative. Cela permet d&#8217;appliquer des fonctions à plusieurs arguments.</li>
<li>Les <em>monades</em> implémentent la fonction <code>bind</code> qui prend entrée une fonction <em>monadique</em> c&#8217;est à dire qui renvoie une Nomade.</li>
</ul>


<p>Tous les monades que j&#8217;ai présenté implémentent les 3 fonctions (Maybe, Collection, Identity(Container)).</p>

<h2>En conclusion.</h2>

<p>Dans le prochain Post nous allons voir le cas particulier de <code>ap</code> pour les collections.</p>

<ul>
<li>Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
<li>Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a></li>
<li>Partie 5 : <a href="http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives/">Les applicatives</a></li>
<li>Partie 6 : <a href="http://mcamuzat.github.io/blog/2016/01/25/les-monades-applicative-et-les-listes/">Les applicatives et les listes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je joue donc je programme 2]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/12/13/je-joue-donc-je-programme-2/"/>
    <updated>2015-12-13T18:05:20+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/12/13/je-joue-donc-je-programme-2</id>
    <content type="html"><![CDATA[<p>J&#8217;avais <a href="blog/2015/05/04/je-joue-donc-je-programme/">déjà parlé</a> de jeux pour apprendre à programmer.
<img class="center" src="http://mcamuzat.github.io/images/thimble.png" width="600" height="345" title="thimble" alt="Thimble"></p>

<!--more-->


<h2>Le CSS</h2>

<h3>Apprendre les selecteurs</h3>

<p>C&#8217;est assez basique mais la présentation est très propre
<a href="flukeout.github.io">Cssdiner</a>
<img class="center" src="http://mcamuzat.github.io/images/cssdiner.png" width="600" height="606" title="Css diner" alt="Css diner"></p>

<h3>Apprendre la balise <code>flex</code></h3>

<p>C&#8217;est relativement récent cela ne marche pas sur tout les navigateurs (pas de problème sous firefox)
<a href="http://flexboxfroggy.com/">flexbox froggy</a></p>

<p><img class="center" src="http://mcamuzat.github.io/images/flexfrog.png" width="600" height="399" title="flexbox froggy" alt="flexbox froggy"></p>

<h3>Créer ses propres pages</h3>

<p>Pas un jeu mais un tutoriel de la part de mozilla
<a href="https://thimble.mozilla.org/en-US">thimble</a></p>

<p><img class="center" src="http://mcamuzat.github.io/images/thimble.png" width="600" height="345" title="thimble" alt="Thimble"></p>

<h2>Javascript</h2>

<p><a href="https://jsfiddle.net/qmmc8mpr/embedded/result/">l&#8217;adresse</a></p>

<p>Le but est à la fois simple et plutôt compliqué faire atteindre x à l&#8217;infini. Sauf que vous devez payer pour ajouter des caractères.</p>

<ul>
<li>1er caractère : 1000 points</li>
<li>2nd caractères : 10000 points</li>
<li>3ème caractères : 100000 points.</li>
</ul>


<p>On ne peux utiliser les caractères  <code>[e, E, *, /, 5, 6, 7, 8, 9, another x]</code>. Ce serait trop simple <code>x+=x</code>.</p>

<p>Quand on connait l&#8217;astuce cela se résout en 30 secondes.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/javascriptinfini.png" width="600" height="450" title="Un petit casse-tête" alt="Un petit casse-tête"></p>

<h2>En conclusion</h2>

<p>Voila de quoi occuper vos soirées.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades : Evaluation partielle]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/"/>
    <updated>2015-12-06T18:49:49+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle</id>
    <content type="html"><![CDATA[<h2>Interlude.</h2>

<p>J&#8217;ai besoin pour le prochain chapitre d&#8217;introduire la notion d&#8217;application partielle. Cela consiste à évaluer une partie de la fonction même si je n&#8217;ai pas tous les arguments.</p>

<p>Soit la fonction suivante.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">plus</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="nv">$b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Que donne l&#8217;exécution ?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">plus</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>Une erreur bien entendu, puisque il manque un argument..</p>

<p>Voici une fonction tirée de la librairie <a href="https://github.com/widmogrod/php-functional">php-functionnal</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">push</span><span class="p">(</span><span class="k">array</span> <span class="nv">$array</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$values</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$values</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$array</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$array</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">curryN</span><span class="p">(</span><span class="nv">$numberOfArguments</span><span class="p">,</span> <span class="nx">callable</span> <span class="nv">$function</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$args</span> <span class="o">=</span> <span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$numberOfArguments</span><span class="p">,</span> <span class="nv">$function</span><span class="p">,</span> <span class="nv">$args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$argsLeft</span> <span class="o">=</span> <span class="nv">$numberOfArguments</span> <span class="o">-</span> <span class="nb">func_num_args</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$argsLeft</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="o">?</span> <span class="nb">call_user_func_array</span><span class="p">(</span><span class="nv">$function</span><span class="p">,</span> <span class="nx">push</span><span class="p">(</span><span class="nv">$args</span><span class="p">,</span> <span class="nb">func_get_args</span><span class="p">()))</span>
</span><span class='line'>            <span class="o">:</span> <span class="nx">curryN</span><span class="p">(</span><span class="nv">$argsLeft</span><span class="p">,</span> <span class="nv">$function</span><span class="p">,</span> <span class="nx">push</span><span class="p">(</span><span class="nv">$args</span><span class="p">,</span> <span class="nb">func_get_args</span><span class="p">()));</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et maintenant reprenons ma première fonction</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$add</span> <span class="o">=</span> <span class="nx">curryN</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="nv">$b</span><span class="p">;});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maintenant réessayons notre commande</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$add10</span> <span class="o">=</span> <span class="nv">$add</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je n&#8217;ai pas d&#8217;erreur mais il y a mieux !</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$add10</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c1">// 20.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Varions encore un peu avec aucun argument</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$addition</span> <span class="o">=</span> <span class="nv">$add</span><span class="p">();</span>
</span><span class='line'><span class="nx">result</span> <span class="o">=</span> <span class="nv">$addition</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span><span class="c1">//20</span>
</span></code></pre></td></tr></table></div></figure>


<p>S&#8217;il manque un argument, la fonction ne renvoie pas de résultat mais une nouvelle fonction.</p>

<p>On appelle cela l&#8217;évaluation partielle.</p>

<p>C&#8217;est plutôt pratique..</p>

<h2>Quelques applications pratiques</h2>

<h3>On réutilise mieux les calculs.</h3>

<p>Par exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result1</span> <span class="o">=</span> <span class="nv">$valeurTresComplique</span> <span class="o">+</span> <span class="nv">$valeursTresSimple1</span><span class="p">;</span>
</span><span class='line'><span class="nv">$result2</span> <span class="o">=</span> <span class="nv">$valeurTresComplique</span> <span class="o">+</span> <span class="nv">$valeursTresSimple2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Devient</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$partiel</span> <span class="o">=</span> <span class="nv">$add</span><span class="p">(</span><span class="nv">$valeurTresComplique</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result1</span> <span class="o">=</span> <span class="nv">$partiel</span><span class="p">(</span><span class="nv">$valeursTresSimple1</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result2</span> <span class="o">=</span> <span class="nv">$partiel</span><span class="p">(</span><span class="nv">$valeursTresSimple2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>C&#8217;est plus simple à tester.</h3>

<p>Si toute les fonctions ne prennent qu&#8217;un argument, Il y a moins de cas à tester.
De plus cela permet une meilleure isolation du code. Une fonction à 5-6 arguments est rarement un bon signe dans le code.</p>

<h3>Cela permet de chainer les fonctions.</h3>

<p>Nous allons nous servir de cette astuce pour nos monades/functors. Depuis le début on ne peux mettre qu&#8217;une seule valeur dans mon <em>container</em> donc comment faire pour faire des fonctions à plusieurs arguments ?</p>

<h2>Les évaluations partielles</h2>

<p>Il faut quand même noter que le langage PHP n&#8217;est pas génial pour le coup.</p>

<p>L&#8217;expression suivante en javascript est parfaitement légale.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">result</span> <span class="o">=</span> <span class="nx">add</span><span class="p">(</span><span class="mi">10</span><span class="p">)(</span><span class="mi">5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>je suis obligé d&#8217;utiliser une variable intermédiaire en PHP.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$add10</span><span class="o">=</span> <span class="nx">add</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$add10</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bref la syntaxe n&#8217;est pas très pratique.</p>

<h2>Conclusion</h2>

<p>En Haskell et <a href="https://fr.wikipedia.org/wiki/OCaml">OCaml</a> l&#8217;évaluation partielle est la norme.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">max</span> <span class="mi">10</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>En fait le langage fait.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">(</span><span class="n">max</span> <span class="mi">10</span><span class="p">)</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>Transformer une fonction à plusieurs arguments en une série de fonction à un argument s&#8217;appelle la <em>Curryfication</em>. Cela vient du prénom de la première personne a avoir écris sur le sujet <a href="https://fr.wikipedia.org/wiki/Haskell_Curry">Haskell Curry</a>. Le nom de famille doit voir dire quelque chose aussi..</p>

<p>Cela semble un peu compliqué et pas forcement intéressant sur les exemples que j&#8217;ai choisi. Mais dans le prochain post nous allons utiliser cette notion.</p>

<p>Merci de m&#8217;avoir lu.</p>

<ul>
<li>Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
<li>Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a></li>
<li>Partie 5 : <a href="http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives/">Les applicatives</a></li>
<li>Partie 6 : <a href="http://mcamuzat.github.io/blog/2016/01/25/les-monades-applicative-et-les-listes/">Les applicatives et les listes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades : Les listes]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/"/>
    <updated>2015-11-29T21:44:52+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes</id>
    <content type="html"><![CDATA[<p>Nous continuons notre exploration des Monades/Functors, nous allons parler de Collection, de lapins, de marteaux et de non-déterminisme.</p>

<p>Voici notre nouveau <em>container</em> Le container <strong>List</strong>. Il prend en entrée un tableau (Array) ou en Php un <code>Traversable</code>.
<img class="center" src="http://mcamuzat.github.io/images/collection.png" width="600" height="450" title="Le container Collection" alt="Le container collection"></p>

<p>Nous allons voir ensemble les listes, Collections. Nous allons voir le <code>map</code>, le <code>bind</code> nous allons voir que le comportement n&#8217;est pas exactement le même..</p>

<!--more-->


<p>Ne nous embêtons pas allons directement dans l&#8217;implémentation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Collection</span> <span class="k">extends</span> <span class="nx">Container</span><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param array $value</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">isNativeTraversable</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>            <span class="o">?</span> <span class="nv">$value</span>
</span><span class='line'>            <span class="o">:</span> <span class="p">[</span><span class="nv">$value</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">isNativeTraversable</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">is_array</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="o">||</span> <span class="nv">$value</span> <span class="nx">instanceof</span> <span class="nx">\Traversable</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">map</span><span class="p">(</span><span class="nx">callable</span> <span class="nv">$transformation</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$result</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">=</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">extract</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$value</span> <span class="nx">instanceof</span> <span class="nx">Container</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$result</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$result</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On garde toujours la même définition. <code>map</code> prend toujours une fonction et renvoie un Objet du même type. <code>extract</code> renvoie la valeur, <code>Collection::of</code> renvoie une collection.</p>

<p>Quelques exemples</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>   <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">value</span><span class="p">;})</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nv">$value</span><span class="o">-</span><span class="mi">1</span><span class="p">;})</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">);</span> <span class="c1">// [ 1, 3, 5, 7]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;one&quot;</span><span class="p">,</span><span class="s2">&quot;two&quot;</span><span class="p">,</span><span class="s2">&quot;three&quot;</span><span class="p">))</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;strtoupper&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$value</span><span class="o">.</span><span class="s2">&quot;!!!!&quot;</span><span class="p">;})</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">);</span><span class="c1">// [&quot;ONE!!!!&quot;, &quot;TWO!!!!&quot;,&quot;THREE!!!!&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous allons reprendre notre liste du post <a href="blog/2015/11/22/les-monades-3-le-maybe-suite/">précédent</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;id_article&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;titre&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;titre1&#39;</span><span class="p">,</span> <span class="s1">&#39;meta&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;images&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;//first.jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;//second.jpg&#39;</span><span class="p">]]],</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;id_article&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;titre&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;titre2&#39;</span><span class="p">,</span> <span class="s1">&#39;meta&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;images&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;//third.jpg&#39;</span><span class="p">]]],</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;id_article&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;titre&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;titre3&#39;</span><span class="p">],</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://mcamuzat.github.io/images/arraydanscontainer.png" width="600" height="450" title="Un array dans le container" alt="Un array dans le container"></p>

<ul>
<li>Nous allons transformer chaque ligne en <code>maybe</code> grâce à l&#8217;instruction <code>maybeFromValue</code> (<a href="blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">post2</a>)</li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/collectionmaybe.png" width="600" height="450" title="Un array dans le container" alt="Un array dans le container"></p>

<p>Nous aimerions utiliser notre instruction <code>get</code>.</p>

<p>l&#8217;algo :</p>

<ul>
<li>je récupère le maybe.</li>
<li>J&#8217;appelle la fonction bind du maybe avec le get</li>
</ul>


<p>Cela donne ..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">get</span><span class="p">(</span><span class="nv">$key</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$value</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$array</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$array</span><span class="p">[</span><span class="nv">$key</span><span class="p">])</span> <span class="o">?</span> <span class="nx">Some</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$array</span><span class="p">[</span><span class="nv">$key</span><span class="p">])</span> <span class="o">:</span> <span class="nx">Nothing</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oui vous ne rêvez pas c&#8217;est une fonction qui renvoie une fonction qui renvoie une fonction.</p>

<p>L&#8217;implémentation est sympathique..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Collection</span><span class="o">:</span><span class="nx">of</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">fromValue</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;meta&quot;</span><span class="p">))</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;images&quot;</span><span class="p">))</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous obtenons en une ligne <em>sans if sans condition</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="s2">&quot;//first.jpg&quot;</span><span class="p">,</span> <span class="s2">&quot;//third.jpg&quot;</span><span class="p">,</span> <span class="k">null</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Le bind</h2>

<p>Je n&#8217;ai pas donnée le code du bind qui se résume à</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">bind</span><span class="p">(</span><span class="nx">callable</span> <span class="nv">$transformation</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">concat</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je vais essayer de justifier tout cela.</p>

<p>Partons d&#8217;abord du principe que <code>$this-&gt;concat</code> n&#8217;existe pas..</p>

<p>Donc mon <code>bind</code> devient</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">bind</span><span class="p">(</span><span class="nx">callable</span> <span class="nv">$transformation</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">addOne</span><span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$input</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">addOne</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Collection</span><span class="c1">#6 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Collection</span><span class="c1">#5 (1) {</span>
</span><span class='line'>      <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>      <span class="k">array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">Collection</span><span class="c1">#2 (1) {</span>
</span><span class='line'>          <span class="o">...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">Collection</span><span class="c1">#3 (1) {</span>
</span><span class='line'>          <span class="o">...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">Collection</span><span class="c1">#4 (1) {</span>
</span><span class='line'>          <span class="o">...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous avons une collection qui contient une collection (double container!!) et pire dans chaque valeur est encore une collection !. On perd aussi le chainage.</p>

<p>Bref nous avons tout perdu.</p>

<h3>Solution le marteau.</h3>

<p><img class="center" src="http://mcamuzat.github.io/images/marteau.png" width="515" height="150" title="Le marteau comme solution." alt="Le marteau comme solution"></p>

<p>Nous allons aplatir le résultat.</p>

<p>C&#8217;est a dire que nous allons transformer notre collection <code>[[a],[b],[c]]</code> en <code>[a, b, c]</code></p>

<p>Voici l&#8217;implémentation en code.. C&#8217;est un peu long n&#8217;hésitez pas à sauter cette partie..</p>

<p>Partons du principe que c&#8217;est un array..</p>

<p>On aplati notre liste ainsi</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$flatten</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="s2">&quot;d&quot;</span><span class="p">),</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;b&quot;</span><span class="p">),</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="p">));</span>
</span><span class='line'><span class="nv">$result</span><span class="p">;</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$flatten</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$value</span> <span class="k">as</span> <span class="nv">$subvalue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$subvalue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span> <span class="c1">//array(&quot;a&quot;, &quot;d&quot;, &quot;b&quot;, &quot;c&quot;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le problème est que notre collection n&#8217;est pas un <code>Array</code>.. Mais essayons avec une fonction un peu plus tordue</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nb">array_reduce</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">$flatten</span><span class="p">,</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">(</span><span class="nv">$acc</span><span class="p">,</span> <span class="nv">$value</span><span class="p">){</span>
</span><span class='line'>    <span class="nb">array_reduce</span><span class="p">(</span><span class="nv">$value</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$idontcare</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="k">use</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$acc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$acc</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$acc</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="p">[]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est un façon un peu plus complexe d&#8217;exprimer la même chose que le code plus haut. Sans utiliser les boucles <code>foreach</code>.</p>

<p>Le reduce pour notre collection est facilement exprimable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// dans la classe Collection</span>
</span><span class='line'> <span class="k">public</span> <span class="k">function</span> <span class="nf">reduce</span><span class="p">(</span><span class="nx">callable</span> <span class="nv">$function</span><span class="p">,</span> <span class="nv">$accumulator</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="k">as</span> <span class="nv">$item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$accumulator</span> <span class="o">=</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$function</span><span class="p">,</span> <span class="nv">$accumulator</span><span class="p">,</span> <span class="nv">$item</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$accumulator</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Reprenons le code du <code>array_reduce</code> et utilisons notre <code>reduce</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="c1">// dans la classe Collection</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">concat</span><span class="p">(</span><span class="nx">Collection</span> <span class="nv">$collection</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$collection</span><span class="o">-&gt;</span><span class="na">reduce</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$agg</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$value</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$value</span> <span class="nx">instanceof</span> <span class="nx">Collection</span><span class="p">)</span> <span class="o">?</span> <span class="nv">$value</span> <span class="o">:</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$value</span><span class="o">-&gt;</span><span class="na">reduce</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$agg</span><span class="p">,</span> <span class="nv">$v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$agg</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$v</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$agg</span><span class="p">;</span>
</span><span class='line'>            <span class="p">},</span> <span class="nv">$agg</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span> <span class="p">[]);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici comment on aplatit notre fonction et on sauvegarde le chainage. Mais il y a mieux..</p>

<h2>Si j&#8217;avais un marteau..</h2>

<p>Montrons quelque exemples de bind.</p>

<h3>Exemple 1 : Les lapins.</h3>

<p>Soit le fonction suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">reproduction</span><span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$input</span><span class="p">,</span> <span class="nv">$input</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$lapin</span> <span class="o">=</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;lapin&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;reproduction&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;reproduction&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat</p>

<p><img class="center" src="http://mcamuzat.github.io/images/reproductionlapin.png" width="594" height="482" title="Un array dans le container" alt="Un array dans le container"></p>

<ul>
<li>premier bind</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="s2">&quot;lapin&quot;</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="na">map</span> <span class="o">-&gt;</span><span class="p">[[</span><span class="s2">&quot;lapin&quot;</span><span class="p">,</span> <span class="s2">&quot;lapin&quot;</span><span class="p">,</span><span class="s2">&quot;lapin&quot;</span><span class="p">]]</span> <span class="o">-&gt;</span> <span class="na">concat</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="s2">&quot;lapin&quot;</span><span class="p">,</span> <span class="s2">&quot;lapin&quot;</span><span class="p">,</span><span class="s2">&quot;lapin&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>second bind</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="s2">&quot;lapin&quot;</span><span class="p">,</span> <span class="s2">&quot;lapin&quot;</span><span class="p">,</span><span class="s2">&quot;lapin&quot;</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="na">map</span> <span class="p">[[</span><span class="s2">&quot;lapin&quot;</span><span class="p">,</span><span class="s2">&quot;lapin&quot;</span><span class="p">,</span><span class="s2">&quot;lapin&quot;</span><span class="p">][</span><span class="o">..</span><span class="p">][</span><span class="o">..</span><span class="p">]]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="s2">&quot;lapin&quot;</span> <span class="o">..</span> <span class="o">*</span><span class="mi">9</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous commençons avec un lapin, nous multiplions par 3 à chaque interaction. Comme la liste est aplatie à chaque fois.</p>

<h3>Exemple 2 : les fractales</h3>

<p>Soit la fonction suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">fractale</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$value</span> <span class="o">==</span> <span class="s2">&quot;#&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span><span class="p">)));</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">,</span> <span class="s2">&quot;_&quot;</span><span class="p">,</span><span class="s2">&quot;_&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;#&quot;</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;fractale&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;fractale&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;fractale&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span><span class='line'><span class="k">echo</span> <span class="nb">implode</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'><span class="c1">//#_#___#_#_________#_#___#_#</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Exemple 3 : avec les chiffres</h3>

<p>Soit la fonction suivante</p>

<p>La fonction inférieure à 20 renvoie un array vide.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">moiEtMonSuccesseur</span><span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$input</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">inferieurA20</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">if</span><span class="p">(</span><span class="nv">$value</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">([]);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="p">(</span><span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$value</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">])</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;moiEtMonSuccesseur&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;inferieurA20&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;moiEtMonSuccesseur&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>premier <code>bind</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="na">map</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">],[</span><span class="mi">20</span><span class="p">,</span><span class="mi">21</span><span class="p">],[</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">]]</span><span class="o">-&gt;</span><span class="na">concat</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>second <code>bind</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="na">map</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="mi">10</span><span class="p">],[</span><span class="mi">11</span><span class="p">],[</span><span class="mi">20</span><span class="p">],[],[],[]]</span><span class="o">-&gt;</span> <span class="na">concat</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>troisième <code>bind</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="na">map</span> <span class="p">[[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">],</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">],</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="p">]]</span><span class="o">-&gt;</span> <span class="na">concat</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">21</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Exemple 4: Trouver les positions possibles d&#8217;un jeux de société</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">donneTousLesCoupsPossibles</span><span class="p">(</span><span class="nv">$position</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//renvoie toutes les positions légales</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nx">position_possible</span><span class="o">..</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$postion1</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">donneTousLesCoupsPossibles</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">donneTousLesCoupsPossibles</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>cette fonction donne toute les parties possibles dans deux coup.</p>

<h2>Conclusion</h2>

<p>On comprend assez bien l&#8217;intérêt de cette monade pour gérer des listes, mais il y a une autre vision possible. La collection avec le bind est considérée comme une façon de gérer des entrées <em>non déterministes</em>. J&#8217;ai eu un peu de mal à comprendre, mais voici l&#8217;idée.
La valeur 3 n&#8217;a qu&#8217;une valeur qui est <code>3</code> facile, la valeur <code>[1, 2, 3]</code> est une représentation de la même valeur sauf qu&#8217;elle à trois états possible <code>1, 2, 3</code>. Grâce au <code>bind</code> je prend en compte tous les états possibles.</p>

<p>Pour résumer :</p>

<ul>
<li>Le Maybe prend le cas ou la valeur est présente.</li>
<li>La liste permet de gérer le Non-determinisme.</li>
</ul>


<p>Il reste encore beaucoup de chose à parler. Nous avons parlé des functors(<code>map</code> ou <code>fmap</code>), des monades (<code>of</code> et <code>bind</code>) nous allons voir les applicatives..</p>

<h1>des liens.</h1>

<ul>
<li>Ma référence pour l&#8217;implémentation est <a href="https://github.com/widmogrod/php-functional">php-functional</a>.</li>
<li>La bible pour le haskell est <a href="learnyouahaskell.com">Learn You a Haskell for Great Good!</a> Le livre est gratuit avec des jolis dessins. Enfin le fond et la forme sont vraiment bon.</li>
<li><p>Il existe en français !! <a href="http://lyah.haskell.fr/">Apprendre Haskell vous fera le plus grand bien !</a></p></li>
<li><p>Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></p></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
<li>Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a></li>
<li>Partie 5 : <a href="2015/12/20/les-monades-5-les-applicatives/">Les applicatives</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades 3 Le Maybe (suite)]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/"/>
    <updated>2015-11-22T16:59:31+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite</id>
    <content type="html"><![CDATA[<p>Dans la partie de 3 : Nous allons utiliser le functor Maybe avec l&#8217;instruction <code>bind</code>.</p>

<p>Soit le tableau suivant.</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;id_article&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;titre&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;titre1&#39;</span><span class="p">,</span> <span class="s1">&#39;meta&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;images&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;//first.jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;//second.jpg&#39;</span><span class="p">]]],</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;id_article&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;titre&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;titre2&#39;</span><span class="p">,</span> <span class="s1">&#39;meta&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;images&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;//third.jpg&#39;</span><span class="p">]]],</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;id_article&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;titre&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;titre3&#39;</span><span class="p">],</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>nous voulons afficher une liste avec une titre et et une image.</p>

<p>Nous allons utilisez la fonction suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">get</span><span class="p">(</span><span class="nv">$key</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$array</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$array</span><span class="p">[</span><span class="nv">$key</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$array</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exemple d&#8217;utilisation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$getTitre</span> <span class="o">=</span> <span class="nx">get</span><span class="p">(</span><span class="s2">&quot;titre&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$data</span> <span class="k">as</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">var_dump</span> <span class="nv">$getTitre</span><span class="p">(</span><span class="nv">$line</span><span class="s2">&quot;);</span>
</span><span class='line'><span class="s2">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>string <span class="o">(</span>6<span class="o">)</span> <span class="s2">&quot;titre1&quot;</span>
</span><span class='line'>string <span class="o">(</span>6<span class="o">)</span> <span class="s2">&quot;titre2&quot;</span>
</span><span class='line'>string <span class="o">(</span>6<span class="o">)</span> <span class="s2">&quot;titre3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour extraire les images utilisons notre Maybe</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$data</span> <span class="k">as</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">maybeFromValue</span><span class="p">(</span><span class="nv">$line</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;meta&quot;</span><span class="p">))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;images&quot;</span><span class="p">))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="s2">&quot;noimage.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="s2">&quot;//first.jpg&quot;</span>
</span><span class='line'><span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="s2">&quot;//third.jpg&quot;</span>
</span><span class='line'><span class="nx">string</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="s2">&quot;no-image.png&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Avec le <code>bind</code></h2>

<p>Ré-ecrivons pour utiliser le bind. (Nous utilisons l&#8217;idée que la fonction que j&#8217;injecte dans le container renvoie elle-mème un <code>Some</code> ou <code>Nothing</code>)</p>

<p><img class="center" src="http://mcamuzat.github.io/images/functionretourneSome.png" width="600" height="450" title="la fonction renvoie un maybe" alt="la fonction renvoie un maybe"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">get</span><span class="p">(</span><span class="nv">$key</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$array</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$array</span><span class="p">[</span><span class="nv">$key</span><span class="p">])</span> <span class="o">?</span> <span class="nx">Some</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$array</span><span class="p">[</span><span class="nv">$key</span><span class="p">])</span> <span class="o">:</span> <span class="nx">Nothing</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La fonction devient.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$data</span> <span class="k">as</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nb">var_dump</span><span class="p">(</span><span class="nx">maybeFromValue</span><span class="p">(</span><span class="nv">$line</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;meta&quot;</span><span class="p">))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;images&quot;</span><span class="p">))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>       <span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="s2">&quot;noimage.png&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>En conclusion</h2>

<ul>
<li>Si j&#8217;utilise la fonction <code>map</code> (parfois on parle aussi de <code>fmap</code>) j&#8217;utilise le Maybe en tant que Functor.</li>
<li>Si j&#8217;utilise la fonction <code>bind</code> j&#8217;utilise le Maybe en tant que Monad.</li>
</ul>


<p>Nous allons continuer notre voyage avec les listes dans le prochain post.</p>

<ul>
<li>Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
<li>Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a></li>
<li>Partie 5 : <a href="http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives/">Les applicatives</a></li>
<li>Partie 6 : <a href="http://mcamuzat.github.io/blog/2016/01/25/les-monades-applicative-et-les-listes/">Les applicatives et les listes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades (suite): Le Functor Maybe..]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/"/>
    <updated>2015-11-15T16:43:42+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://mcamuzat.github.io/images/lesdeuxcontainerMaybe.png" width="512" height="313" title="Il y a deux container" alt="Il y a deux containers"></p>

<p>Nous avons vue dans le précédent <a href="blog/2015/11/11/les-monades-en-php-cest-possible-dot/">post</a> un pseudo-container qui nous permet d&#8217;emballer nos valeurs. Nous allons muscler un peu notre container mais partons d&#8217;un exemple.</p>

<p>Je souhaite récupérer le mail du client &ldquo;bob&rdquo; ou afficher &ldquo;pas de mail&rdquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">getMail</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="nv">$mail</span> <span class="o">=</span> <span class="nx">getUserByName</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">getAddress</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getMail</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nv">$mail</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="s2">&quot;pas de mail&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="nv">$mail</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Facile non ?</p>

<!--more-->


<p>Si <code>getAdress()</code> renvoie null, Outch &hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">PHP</span> <span class="nx">Fatal</span> <span class="nx">error</span><span class="o">:</span> <span class="nx">Call</span> <span class="nx">to</span> <span class="nx">a</span> <span class="nx">member</span> <span class="k">function</span> <span class="nf">getMail</span><span class="p">()</span> <span class="nx">on</span> <span class="nx">a</span> <span class="nx">non</span><span class="o">-</span><span class="nx">object</span><span class="o">..</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;utilisateur n&#8217;existe pas forcement et puis l&#8217;adresse est peut-être vide.. Une implémentation naïve</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">getMail</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$user</span> <span class="o">=</span> <span class="nx">getUserByName</span><span class="p">(</span><span class="nv">$name</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$address</span> <span class="o">=</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">getAddress</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$address</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">//etc ...</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$adresse</span><span class="o">-&gt;</span><span class="na">getMail</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="s2">&quot;pas de mail&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce code vous le connaissez, vous l&#8217;avez probablement déjà écris, il y a moyen d&#8217;optimiser de faire plus propre.</p>

<h2>Deux containers pour le prix d&#8217;un.</h2>

<p>Le Maybe à la rescousse..</p>

<p>Voici le Maybe en dessin.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/lesdeuxcontainerMaybe.png" width="512" height="313" title="Il y a deux container" alt="Il y a deux containers"></p>

<p>J&#8217;ai un container <code>Some</code> et un Container <code>Nothing</code>.</p>

<p>Le container <code>Nothing</code> est un container qui n&#8217;a aucune valeurs. La méthode <code>map</code> renvoie toujours un container <code>Nothing</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Nothing</span> <span class="k">extends</span> <span class="nx">Container</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">map</span><span class="p">(</span><span class="nv">$function</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="k">static</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">of</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="k">static</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">bind</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">static</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getOrElse</span><span class="p">(</span><span class="nv">$default</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$default</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le container <code>Some</code> le résultats de <code>map</code> est un nouveau container <code>Some</code> s&#8217;il y a un résultat non-null sinon c&#8217;est un container <code>Nothing</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Some</span> <span class="k">extends</span> <span class="nx">Container</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">map</span><span class="p">(</span><span class="nv">$function</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nv">$function</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$result</span> <span class="o">===</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">Nothing</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">static</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">of</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="k">static</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">bind</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getOrElse</span><span class="p">(</span><span class="nv">$default</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enfin j&#8217;ai besoin d&#8217;un helper</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">maybeFromValue</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="nv">$value</span> <span class="o">===</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>   <span class="k">return</span> <span class="nx">Nothing</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'> <span class="k">return</span> <span class="nx">Some</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notons que j&#8217;ai une méthode qui me permet de sortir avec une valeurs par défaut</p>

<p>Quelques exemples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">echo</span> <span class="nx">maybeFromValue</span><span class="p">(</span><span class="k">null</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;ucfirst&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="s2">&quot;non!!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// non!!</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">maybeFromValue</span><span class="p">(</span><span class="s2">&quot;oui!!&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;ucfirst&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="s2">&quot;non!!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Oui!!</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">Some</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="s2">&quot;oui&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;ucfirst&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="k">null</span><span class="p">;})</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="s2">&quot;Non!!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Non !!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous pouvons simplifier notre problème</p>

<p>En le refactorisant ainsi</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// example</span>
</span><span class='line'><span class="c1">// method(&quot;name&quot;) return function($obj) {return $obj-&gt;getName()};</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">method</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$obj</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$obj</span><span class="o">-&gt;</span><span class="nv">$name</span><span class="p">();</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$mail</span> <span class="o">=</span> <span class="nx">maybeFromValue</span><span class="p">(</span><span class="nx">getUserByName</span><span class="p">(</span><span class="nv">$name</span><span class="p">))</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">method</span><span class="p">(</span><span class="s2">&quot;getAddress&quot;</span><span class="p">))</span> <span class="c1">// $value-&gt;getAdress()</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">method</span><span class="p">(</span><span class="s2">&quot;getMail&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="s2">&quot;pas de mail&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quelques dessins
Le cas ou tout marche</p>

<p><img class="center" src="http://mcamuzat.github.io/images/maybechainageok.png" width="516" height="260" title="chainage tout va bien" alt="chainage tout va bien"></p>

<p>Le cas ou <code>getUser()</code> renvoie null</p>

<p><img class="center" src="http://mcamuzat.github.io/images/chainagepasok.png" width="516" height="216" title="getAdress renvoie null, on prend la valeur par défault" alt="getAdress renvoie null, on prend la valeur par défaults"></p>

<p>Sympa la refactorisation. On peux supprimer ainsi une partie de la logique (la plupart des if, les nulls ont tous disparus).</p>

<h2>Une librairie toute faite</h2>

<p>Je vais parler de <a href="https://github.com/schmittjoh/php-option">php-option</a>. Si vous faite du <a href="https://symfony.com/">symfony2</a> vous l&#8217;avez déja dans votre <code>/vendor</code> et vous ne le saviez pas.</p>

<p>La syntaxe est un peu près le même</p>

<p>Mais il y a plein de fonctionnalités</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$entity</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">findSomeEntity</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="k">new</span> <span class="nx">Entity</span><span class="p">());</span>
</span><span class='line'><span class="nv">$entity</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">findSomeEntity</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getOrCall</span><span class="p">(</span><span class="s1">&#39;createAnNewAddress&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$entity</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">findSomeEntity</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getOrThrow</span><span class="p">(</span><span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s1">&#39;ha!!!!!&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il y a aussi des possibilité de chainer les réponses si pas de résultats</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$entity</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">findSomeEntity</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">orElse</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">findSomeOtherEntity</span><span class="p">())</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">orElse</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createEntity</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous n&#8217;utilisons que l&#8217;instruction <code>map</code> pour le moment. Donc nous n&#8217;utilisons pas le container en tant que monade mais plutôt en tant que functor. Nous verrons cela dans le troisième post.</p>

<h2>Conclusion</h2>

<p>Je suis désolé si certain termes sont inexacts comme le container. Je ne suis pas un expert, mais j&#8217;admets bien volontiers mon erreur.</p>

<p>Si vous avez un code ou vous vérifiez tout le temps si les valeurs sont nulles. Il y a probablement moyen que cette structure vous aide.</p>

<p>Dans le prochain Post nous utiliserons le Maybe avec l&#8217;instruction <code>bind</code>.</p>

<ul>
<li>Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
<li>Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a></li>
<li>Partie 5 : <a href="http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives/">Les applicatives</a></li>
<li>Partie 6 : <a href="http://mcamuzat.github.io/blog/2016/01/25/les-monades-applicative-et-les-listes/">Les applicatives et les listes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades en PHP c'est possible..]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/"/>
    <updated>2015-11-11T19:28:39+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Nous allons voir ensemble les monades. Nous allons voir la monade <strong>Identity</strong>. elle n&#8217;est pas très utile mais nécessaire si vous voulez comprendre la monade/functor  <strong>Maybe</strong> qui j&#8217;espère va changer votre façon de voir votre code mais ce sera dans le post suivant.</p>

<p>Les monades sont des structures de la programmation fonctionnelle. Très utilisées dans le langage <a href="https://www.haskell.org/">Haskell</a>. En pratique Haskell serait moins attractifs sans cette structure. <em>(Je ne suis absolument pas développeur Haskell.)</em></p>

<!--more-->


<p>Je ne sais pas trop les définir puisque il existe un nombre incalculable de définitions</p>

<ul>
<li>C&#8217;est un triplet d&#8217;après <a href="https://fr.wikipedia.org/wiki/Monade_%28informatique%29">wikipédia en français</a></li>
<li>Une Interface, de l&#8217;injection de dépendances, Structure, Une base spatiale, Un <a href="https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/">burrito</a></li>
<li>Des catégories</li>
</ul>


<p>Il existe une infinité de tutoriels dessus (Le site officiel de Haskell à un compteur <a href="https://wiki.haskell.org/Monad_tutorials_timeline">plutôt amusant</a> pour quantifier l&#8217;avalanche de tuto), écris par les plus grands Douglas Crowford <a href="https://www.youtube.com/watch?v=b0EF0VTs9Dc">Youtube</a> (La référence du Javascript). Donc probablement que mon explication ne sera pas forcément la meilleure.</p>

<p>Pour comprendre les monades je vais vous parler de container (Rien à voir avec <a href="https://www.docker.com/">docker</a>, ni container de <a href="https://symfony.com/">Symfony</a>).</p>

<h2>des valeurs sympas et pas sympa.</h2>

<p>J&#8217;ai des valeurs sympas, et des valeurs <strong>pas sympas</strong>.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/sympa-passympa.png" width="600" height="233" title="des valeurs sympas et pas sympas" alt="des valeurs sympas et pas sympas"></p>

<p>Par <strong>pas sympa</strong>, j&#8217;entends toute les valeurs que je ne maitrise pas trop
par exemple</p>

<ul>
<li>la variable n&#8217;est pas instanciée le fabuleux <code>Null</code></li>
<li>le résultat n&#8217;est pas forcément le même. je lance la fonction deux fois, je n&#8217;ai pas le même résultat.</li>
<li>le résultat dépend d&#8217;autre chose, par exemple la lecture d&#8217;un fichier (le réseau est coupé, le disque dur est plein, etc ..) et peux entrainer des erreurs et des exceptions.</li>
<li>le résultat n&#8217;a pas forcement la même taille. je pense à un résultat de base de donnée, je peux avoir 0 lignes commes des milliards.</li>
<li>enfin le résultat utilise des ressources qui sont partagés avec d&#8217;autre programme.</li>
</ul>


<h2>La solution le container</h2>

<p>La solution :</p>

<blockquote><blockquote><p>utiliser un container ou un emballage</p></blockquote></blockquote>

<p><img class="center" src="http://mcamuzat.github.io/images/valeurdanscontainer.png" width="600" height="450" title="Ma valeur dans un container" alt="Ma valeur dans un container"></p>

<p>L&#8217;idée est simple, je mets en <strong>quarantaine</strong> ma valeur.</p>

<p>Ainsi je suis protégé des effets néfastes.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/valeurquicasse.png" width="600" height="450" title="Si problème.." alt="Si problème.."></p>

<p>Voici le début de l&#8217;implémentation</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Container</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var mixed</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">of</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="k">static</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai deux méthodes:  un constructeur, et une factory statique.
deux possibilités</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$valueNotSecure</span> <span class="o">=</span> <span class="s2">&quot;Je ne suis pas sympa&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="k">new</span> <span class="nx">Container</span><span class="p">(</span><span class="nv">$valueNotSecure</span><span class="p">));</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$valueNotSecure</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Container</span><span class="c1">#1 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">string</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="s2">&quot;Je ne suis pas sympa&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Container</span><span class="c1">#1 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">string</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="s2">&quot;Je ne suis pas sympa&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ma valeur est dans un container, la propriété est <code>protected</code>. Donc impossible à atteindre de l&#8217;extérieur, à priori on ne craint pas grand chose..</p>

<p>Mais voila mon container aussi sécure qu&#8217;il soit ne sert à rien. Puisque rien ne sort, mais rien de rentre..</p>

<h2>Un Sas de décontamination.</h2>

<p>Je vais ajouter un sas de décontamination à ma structure via l&#8217;instruction <code>map</code> qui prend une fonction. Il applique la fonction à la valeur à l&#8217;intérieur. Il a une petite particularité. Il ne donne pas le résultat mais un nouveau container qui contient le résultat.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/containeravecsas.png" width="600" height="450" title="ajoute un sas" alt="J"></p>

<p>Soit la fonction suivante qui ajoute 1 à la valeur en entrée.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">addOne</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$value</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Regardons le dessin suivant:</p>

<p><img class="center" src="http://mcamuzat.github.io/images/containeravecsasexemple.png" width="600" height="450" title="Je place la fonction +1 dans le sas" alt="Je place la fonction +1 dans le sas"></p>

<ul>
<li>Je crée un container qui contient la valeur &ldquo;5&rdquo;.</li>
<li>Je mets la fonction <code>addOne</code> dans le <code>map</code>. Je fais le calcul. Que je m&#8217;empresse de remettre dans un container tout neuf.</li>
<li>j&#8217;ai un Container avec &ldquo;6&rdquo;.</li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/containertoutneuf.png" width="600" height="450" title="ajoute un sas" alt="J"></p>

<p>Voici l&#8217;implémentation de <code>map</code> dans ma classe container.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">map</span><span class="p">(</span><span class="nv">$function</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// call_user_func =&gt; $function($this-&gt;value)</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">static</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$function</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et le code d&#8217;exemple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$output</span> <span class="o">=</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Container</span><span class="c1">#2 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">int</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quelques remarques</p>

<ul>
<li>Comme le résultat n&#8217;est pas sur, Je remet le résultat dans un nouveau container. Je ne réutilise plus l&#8217;ancien container (puisque contaminé). Comme on ne peux changer le contenu, il est <strong>immutable</strong></li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/containertoutneuf.png" width="600" height="450" title="des valeurs sympas et pas sympas" alt="des valeurs sympas et pas sympas"></p>

<ul>
<li>Le container avec l&#8217;instruction <code>map</code> par définition <strong>Chainable</strong>.</li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/chainagecontainer.png" width="600" height="450" title="ajoute un sas" alt="J"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$output</span> <span class="o">=</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//class Container#3 (1) {</span>
</span><span class='line'><span class="c1">//  protected $value =&gt;</span>
</span><span class='line'><span class="c1">//  int(9)</span>
</span><span class='line'><span class="c1">//}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bien sur il est parfaitement possible d&#8217;utiliser des callbacks</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$output</span> <span class="o">=</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$value</span> <span class="o">*</span> <span class="mi">4</span><span class="p">;});</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//class Container#3 (1) {</span>
</span><span class='line'><span class="c1">//  protected $value =&gt;</span>
</span><span class='line'><span class="c1">//  int(24)</span>
</span><span class='line'><span class="c1">//}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Donc j&#8217;ai un Sas d&#8217;entrée qui me permet d&#8217;interagir avec ma valeur. Je n&#8217;ai toujours pas fais sortir la fonction.</p>

<h2>Une sortie.</h2>

<p>C&#8217;est pas très spectaculaire, j&#8217;ajoute une fonction extract() qui n&#8217;est qu&#8217;un simple return</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>     <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="s2">&quot;je suis tranquille&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nb">strtoupper</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'> <span class="c1">//string(18) JE SUIS TRANQUILLE</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Une application : Le décorateur de texte.</h2>

<p>Nous allons utiliser la capacité de chainage de notre container pour faire un pseudo-décorateur.</p>

<p>Soit les fonctions suivantes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">h1</span><span class="p">(</span><span class="nv">$text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$output</span> <span class="o">=</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="s2">&quot;  la réponse est Non   &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;trim&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;htmlentities&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;h1&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;html&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici le fonctionnement</p>

<ul>
<li>je supprime les espaces en trop avec <a href="http://php.net/manual/fr/function.trim.php">trim</a></li>
<li>Je code en Html <a href="http://php.net/manual/fr/function.htmlentities.php">htmlentities</a></li>
<li>j&#8217;encadre de &ldquo;h1&rdquo; puis &ldquo;body&rdquo; puis &ldquo;html&rdquo;.</li>
</ul>


<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;&lt;body&gt;&lt;h1&gt;</span>la r<span class="ni">&amp;eacute;</span>ponse est Non<span class="nt">&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>En image</p>

<h2>Une autre idée</h2>

<p>Nous pouvons aussi imagine une fonction qui renvoie un Container.</p>

<p>Par exemple reprenons notre fonction <code>addOne</code></p>

<p><img class="center" src="http://mcamuzat.github.io/images/functionretournecontainer.png" width="600" height="450" title="Ma fonction renvoie un container" alt="ma fonction renvoie un container"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">addOne</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$value</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Donc ma fonction me renvoie forcement un container.</p>

<p>Si j&#8217;utilise l&#8217;instruction <code>map</code>, je risque de mettre un container dans le container.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/containerdanscontainer.png" width="600" height="450" title="container dans un container" alt="container dans un container"></p>

<p>D&#8217;où l&#8217;ajout de la méthode <code>bind</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">bind</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On remarque que mon résultat reste chaînable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$output</span> <span class="o">=</span> <span class="nx">Container</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;addOne&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//class Container#3 (1) {</span>
</span><span class='line'><span class="c1">//  protected $value =&gt;</span>
</span><span class='line'><span class="c1">//  int(9)</span>
</span><span class='line'><span class="c1">//}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Mon container bien que pour le moment est assez peu utilise mais.</p>

<ul>
<li><p>Il implémente une fonction <code>map</code> qui est chainable. Nous venons d&#8217;implémenter un <strong>functor</strong> ou <strong>foncteur</strong> en français. Cela a un rapport avec les mathématiques. Et il m&#8217;est difficile au moment ou j&#8217;écris ces lignes de vous l&#8217;expliquer. Le Functor s&#8217;occupe d&#8217;appeler la fonction pour nous et de retourner un résultat correct. Il s&#8217;occupe de tout. C&#8217;est une sorte d&#8217;abstraction. On lui confie le calcul et il se débrouille. (Nous le retrouverons dans le post suivant)</p></li>
<li><p>Nous implémentons la méthode <code>of</code> et <code>bind</code> qui est elle aussi chainable (à condition de lui donner des fonctions qui renvoient des Containers). Nous venons d&#8217;implémenter une <em>monade</em> même principe que le functor.</p></li>
</ul>


<p>Si vous avez compris le container, vous pouvez le renommer en IdentityMonad.</p>

<p>Dans le prochain post nous allons implémenter un  la Monade/Functor Maybe.</p>

<p>Elle nous permettra de réfactoriser le code suivant</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">getAbonnementByUserConnected</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$user</span> <span class="o">=</span> <span class="nx">getUserConnected</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// l&#39;utilisateur est anonyme pas d&#39;abonnement</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nv">$user</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// l&#39;utilisateur n&#39;a pas d&#39;abonnement</span>
</span><span class='line'>    <span class="nv">$abonnement</span> <span class="o">=</span> <span class="nx">getAbonnementByUser</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nv">$abonnement</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$abonnement</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">getPromotion</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$abo</span> <span class="o">=</span> <span class="nx">getAbonnementByUserConnected</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nx">getAbonnementByUser</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">Promotion</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$abo</span><span class="o">-&gt;</span><span class="na">getPromotion</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour devenir</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$promotion</span> <span class="o">=</span> <span class="nx">Maybe</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="s2">&quot;getUserConnected&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;getAbonnementByUser&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;getPromotion&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">orElse</span><span class="p">(</span><span class="k">new</span> <span class="nx">Promotion</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je me suis lancé dans une tache bien compliquée mais passionnante. Je m&#8217;excuse d&#8217;avance pour certaines approximations. J&#8217;avais confondu <code>map</code> et <code>bind</code> dans la première version</p>

<p>Je vous remercies de m&#8217;avoir lu..
 * Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a>
 * Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a>
 * Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a>
 * Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a>
 * Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a>
 * Partie 5 : <a href="http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives/">Les applicatives</a>
 * Partie 6 : <a href="http://mcamuzat.github.io/blog/2016/01/25/les-monades-applicative-et-les-listes/">Les applicatives et les listes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faire des jointures sur des fichiers csv]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/08/faire-des-jointures-sur-des-fichiers-csv/"/>
    <updated>2015-11-08T20:27:16+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/08/faire-des-jointures-sur-des-fichiers-csv</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Un problème que j&#8217;ai eu au travail.</p>

<p>Soit les deux fichiers suivants csv suivant</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ID_1,Noms1,Personne1
</span><span class='line'>ID_2,Noms2,Personne1
</span><span class='line'>ID_2,Noms2,Personne2
</span><span class='line'>ID_3,Noms3,Personne1
</span><span class='line'>ID_5,Noms5,Personne5</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SIRET1,Adresse1,Noms1Annuaire,ID_1
</span><span class='line'>SIRET2,Adresse2,Noms2Annuaire,ID_2
</span><span class='line'>SIRET3,Adresse3,Noms3Annuaire,ID_3
</span><span class='line'>SIRET4,Adresse4,Noms4Annuaire,ID_4</span></code></pre></td></tr></table></div></figure>


<p>Je souhaite faire un merge de ces deux csv. Comment faire ?</p>

<!--more-->


<p>En solution 1 j&#8217;ai pensé.</p>

<ul>
<li>Créer une table temporaire</li>
<li>dumper les deux fichiers</li>
<li>faire un jointure sql</li>
<li>faire un export</li>
</ul>


<p>Et puis je me suis souvenu de la commande <code>join</code></p>

<p>Voici la commande que j&#8217;ai utilisé</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>join -11 -24 file1.csv file2.csv  -t,
</span></code></pre></td></tr></table></div></figure>


<p>Voici le détail de la commande</p>

<ul>
<li><code>-11</code> <code>-24</code> faire une jointure entre la colonne <strong>1</strong> du <code>file1.csv</code> et la colonne <strong>4</strong> du <code>file2.csv</code></li>
<li><code>-t,</code> définie le séparateur dans le fichier ici c&#8217;est un <code>csv</code> <strong>C</strong>omma <strong>S</strong>epared <strong>V</strong>alue, donc le séparateur est <code>,</code></li>
</ul>


<p>Voici le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ID_1,Noms1,Personne1,SIRET1,Adresse1,Noms1Annuaire
</span><span class='line'>ID_2,Noms2,Personne1,SIRET2,Adresse2,Noms2Annuaire
</span><span class='line'>ID_2,Noms2,Personne2,SIRET2,Adresse2,Noms2Annuaire
</span><span class='line'>ID_3,Noms3,Personne1,SIRET3,Adresse3,Noms3Annuaire
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est une jointure classique <code>ID_5</code> n&#8217;apparait pas dans le résultats pas plus que <code>Adresse4</code></p>

<h2>Faire un select</h2>

<p>On précise les colonnes que l&#8217;on souhaite avec l&#8217;option <code>-o</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>join -11 -24 file1.txt file2.txt  -t, -o1.2,2.1
</span></code></pre></td></tr></table></div></figure>


<p><code>-o1.2,2.1</code> la colonne <strong>2</strong> du <code>file1.csv</code> et la colonne <strong>1</strong> du <code>file2.csv</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Noms1,SIRET1
</span><span class='line'>Noms2,SIRET2
</span><span class='line'>Noms2,SIRET2
</span><span class='line'>Noms3,SIRET3
</span></code></pre></td></tr></table></div></figure>


<h2>Left-join et Right Join</h2>

<p>C&#8217;est possible à émuler avec l&#8217;option <code>-a</code> et <code>-e</code> <code>-a</code> affiche le fichier <strong>1</strong> ou <strong>2</strong>  même s&#8217;il n&#8217;y a pas de jointure et  et <code>-e</code>  la valeur par défaut à l&#8217;affichage</p>

<p>deux possibilités</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Left-join</span>
</span><span class='line'>join -11 -24 file1.txt file2.txt  -t, -o1.2,2.1,2.2 -a <span class="m">1</span> -e NULL
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Noms1,SIRET1,Adresse1
</span><span class='line'>Noms2,SIRET2,Adresse2
</span><span class='line'>Noms2,SIRET2,Adresse2
</span><span class='line'>Noms3,SIRET3,Adresse3
</span><span class='line'>Noms5,NULL,NULL
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Right-join</span>
</span><span class='line'>join -11 -24 file1.txt file2.txt  -t, -o1.2,2.1,2.2 -a <span class="m">2</span> -e NULL
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Noms1,SIRET1,Adresse1
</span><span class='line'>Noms2,SIRET2,Adresse2
</span><span class='line'>Noms2,SIRET2,Adresse2
</span><span class='line'>Noms3,SIRET3,Adresse3
</span><span class='line'>NULL,SIRET4,Adresse4
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Si un jour vous avez besoin de merger deux fichiers sans forcement sortir un script complexe, penser à linux.</p>

<p>Pour le csv et PHP, c&#8217;est inclus dans l&#8217;instruction <code>fgetcsv</code> mais ce n&#8217;est pas la joie, la librairie suivante <a href="http://csv.thephpleague.com/">thephpleague/csv</a> rend cela nettement plus agréable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git grep]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/05/git-grep/"/>
    <updated>2015-11-05T22:22:13+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/05/git-grep</id>
    <content type="html"><![CDATA[<p>Dans le post <a href="blog/2015/11/02/diff-patch-git">précédent</a> j&#8217;ai parlé des commandes linux <code>patch</code> et <code>diff</code>. des fonctionnalités ou on utiliserait plutôt Git. Ici je vais faire le contraire : utiliser git sans utiliser les commandes linux. Je vais parler de <code>git grep</code>.</p>

<h2>git grep</h2>

<p>l&#8217;utilisation est très simple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git grep hello
</span></code></pre></td></tr></table></div></figure>


<p>On peut utiliser une regex
le résultat s&#8217;affiche dans un pager (sous linux c&#8217;est souvent <code>less</code>).</p>

<!--more-->


<p><strong>Rappel des touches sur Less</strong></p>

<table>
<thead>
<tr>
<th> Touche      </th>
<th style="text-align:center;"> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>g</code>               </td>
<td style="text-align:center;"> début du fichier</td>
</tr>
<tr>
<td> <code>G</code>               </td>
<td style="text-align:center;"> fin  du fichier</td>
</tr>
<tr>
<td> <code>/mot</code>            </td>
<td style="text-align:center;"> cherche <code>mot</code>. <code>n</code> pour suivant <code>N</code> pour précédent</td>
</tr>
<tr>
<td> <code>&amp;mot</code>            </td>
<td style="text-align:center;"> seulement le mot</td>
</tr>
</tbody>
</table>


<p><code>git grep</code> utilise un peu près les mêmes options que le <code>grep</code>.</p>

<p>par exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git grep -n -C <span class="m">10</span> hello
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>-n</code> numérote les lignes</li>
<li><code>-C 5</code> affiche un contexte de 5 lignes</li>
</ul>


<p>A noter que git grep n&#8217;utilise que les fichiers dans le dépôt qui sont déjà indexé. Donc il est plutôt rapide (alors qu&#8217;un grep devrait faire tous les répertoires).</p>

<h2>Git grep et l&#8217;historique</h2>

<p>Mais la vrai force de git grep est de pouvoir chercher sur toute les branches !</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git grep -n -C <span class="m">10</span> -e &lt;ma regex&gt; &lt;la branche&gt;
</span></code></pre></td></tr></table></div></figure>


<p>D&#8217;ailleurs si vous voulez savoir qui a commité a ajouté un bug qui contient le mot &ldquo;Panda&rdquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git rev-list --all <span class="p">|</span> xargs git grep <span class="s1">&#39;Panda&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il y a des alternatives</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git log -G Panda
</span><span class='line'>git log -S Panda
</span></code></pre></td></tr></table></div></figure>


<h2>Git grep et tig</h2>

<p>Depuis la version 2 de <a href="https://github.com/jonas/tig">tig</a> (<strong>pas encore</strong> dans les dépots au moment ou j&#8217;écris ces lignes)
il suffit d&#8217;appuyer sur <code>g</code> de faire la recherche.</p>

<p>Les différentes commandes</p>

<ul>
<li><code>e</code> ouvrir dans l&#8217;éditeur</li>
<li><code>b</code> ouvre la vue blame</li>
<li><code>Enter</code> permet de se déplacer dans le fichiers.</li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/tiggrep.png" width="600" height="398" title="Git grep" alt="Git grep"></p>

<h2>Git grep et vim</h2>

<ul>
<li>Il est dispo dans le plugin <a href="https://github.com/tpope/vim-fugitive">Fugitive</a>.</li>
</ul>


<h2>Conclusion</h2>

<p>L&#8217;intégration dans <em>tig</em> me plait beaucoup, j&#8217;ai beaucoup tapé le commande suivante pour faire mes recherches.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> find . -name <span class="s1">&#39;*.php&#39;</span><span class="p">|</span> xargs grep <span class="s1">&#39;array_walk_recur&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je me suis forcé à lire un peu la documentation de git grep, et je ne le regrette pas.</p>

<p>Enfin il existe des alternative à <code>grep</code> comme <a href="http://beyondgrep.com/">ack</a> ou plus récemment <a href="https://github.com/ggreer/the_silver_searcher">the silver searcher</a>. Je vais essayer d&#8217;en parler plus tard.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diff et patch, pas besoin de git]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/02/diff-patch-git/"/>
    <updated>2015-11-02T22:24:03+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/02/diff-patch-git</id>
    <content type="html"><![CDATA[<p>Nous allons jouer un peu avec les diff et les patchs.</p>

<h1> Mise en place</h1>

<p>Soit le fichier suivant <code>README.md</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ceci est un exemple.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Ceci est une ligne ajoutée
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Modifions le fichier par ceci.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ceci est un exemple.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>j'ai ajouté cette ligne</span></code></pre></td></tr></table></div></figure>


<p>Enregistrons celui-ci en <code>README2.md</code></p>

<p>Et lançons la commande suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>diff README.md README2.md
</span></code></pre></td></tr></table></div></figure>


<p>Nous obtenons le résultat suivant</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>4d3
</span><span class='line'>&lt; Ceci est une ligne ajoutée
</span><span class='line'>6a6,9
</span><span class='line'>&gt;
</span><span class='line'>&gt;
</span><span class='line'>&gt;
</span><span class='line'>&gt; j&#39;ai ajouté cette ligne
</span></code></pre></td></tr></table></div></figure>


<p>Il y a en fait plusieurs formats</p>

<p>Essayez la commande suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>diff -u README.md README2.md &gt; readme.diff
</span></code></pre></td></tr></table></div></figure>


<p>On obtient le fichier suivant</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- README.md   2015-11-02 22:07:43.728854981 +0100</span>
</span><span class='line'><span class="gi">+++ README2.md  2015-11-02 22:13:58.244839112 +0100</span>
</span><span class='line'><span class="gu">@@ -1,6 +1,9 @@</span>
</span><span class='line'> Ceci est un exemple.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="gd">-Ceci est une ligne ajoutée</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+j&#39;ai ajouté cette ligne</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>Cette vision doit vous être assez familière si vous faite du git, svn ou mercurial</p>

<p>c&#8217;est la sortie d&#8217;un <code>git diff</code> si on avait modifié ce fichier.</p>

<h2>Jouer un patch</h2>

<p>Pour ce convaincre nous allons demander à linux de jouer le fichier <code>.diff</code> qui est tout simplement un patch</p>

<p>Grâce à la commande suivante.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>patch -p0 &lt; README.diff
</span><span class='line'>patching file README.md
</span></code></pre></td></tr></table></div></figure>


<p>Comme toute modification je peux avoir des conflits. Si je modifie mon <code>README.md</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Ceci est un exemple.
</span><span class='line'>
</span><span class='line'>Ceci est une autre ligne
</span><span class='line'>Ceci est une ligne ajoutée
</span><span class='line'>Mais celle ci aussi
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>patching file README.md
</span><span class='line'>Hunk <span class="c">#1 FAILED at 1.</span>
</span><span class='line'><span class="m">1</span> out of <span class="m">1</span> hunk FAILED -- saving rejects to file README.md.rej
</span></code></pre></td></tr></table></div></figure>


<p>Vous retrouvez les fameux <code>.orig</code> et <code>.rej</code> qui pourrissent un peu la vie de ceux qui font du mercurial ou git (<code>hg purge</code> et <code>git clean</code> est probablement ce que vous cherchez).</p>

<h2>Merger</h2>

<p>Si vous voulez un merge. c&#8217;est possible</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>patch -p0 --merge &lt; README.diff
</span></code></pre></td></tr></table></div></figure>


<p>le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Ceci est un exemple.
</span><span class='line'>
</span><span class='line'><span class="o">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt;
</span><span class='line'>Ceci est une autre ligne
</span><span class='line'>Ceci est une ligne ajoutée
</span><span class='line'>Mais celle ci <span class="nv">aussi</span>
</span><span class='line'><span class="o">=======</span>
</span><span class='line'>&gt;&gt;&gt;&gt;&gt;&gt;&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>j<span class="err">&#39;</span>ai ajouté cette ligne
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;option <code>-p0</code> ou le plus souvent <code>-p1</code> demande à la commande <code>patch</code> d&#8217;ignorer le chemin sur un niveau.</p>

<p>Voici un exemple avec git et le même fichier</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/README.md b/README.md</span>
</span><span class='line'><span class="gh">index 1030f85..5e8e5f9 100644</span>
</span><span class='line'><span class="gd">--- a/README.md</span>
</span><span class='line'><span class="gi">+++ b/README.md</span>
</span><span class='line'><span class="gu">@@ -1,6 +1,9 @@</span>
</span><span class='line'> Ceci est un exemple.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="gd">-Ceci est une ligne ajoutée</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+j&#39;ai ajouté cette ligne</span>
</span></code></pre></td></tr></table></div></figure>


<p>on voit que la ligne <code>a/README.md</code> et <code>b/README.md</code>, ici pour appliquer le patch il faut utiliser <code>-p1</code> pour ignorer le premier niveau (supprime le <code>a/</code> et <code>b/</code>)</p>

<p>Sous Git c&#8217;est plus simple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git apply lefichier.diff
</span></code></pre></td></tr></table></div></figure>


<h2>Reverter</h2>

<p>Enfin soyons complet il est possible de reverter un patch avec <code>-R</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>patch -R -p1 &lt; mon patch
</span></code></pre></td></tr></table></div></figure>


<p>Avec git</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git apply -R &lt;mon fichier diff&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Pas besoin d&#8217;avoir git/mercurial/svn pour créer ou jouer des patchs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Listes Chainées Iterator]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/01/listes-chainees-iterator/"/>
    <updated>2015-11-01T19:46:40+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/01/listes-chainees-iterator</id>
    <content type="html"><![CDATA[<p>Troisième partie sur la SPL et les listes chainées.</p>

<ul>
<li>partie 1 <a href="blog/2015/10/03/spl-surcharge-magique">SPL et surcharge</a></li>
<li>partie 2 <a href="blog/2015/10/10/liste-chainees-implementation">Implémentation</a></li>
</ul>


<p>Nous allons implémenter l&#8217;interface <code>ArrayAccess</code>. Donc notre liste chainée va se comporter comme un array.</p>

<p>Je vais rajouter deux méthodes. Attention les <code>Array</code> commencent traditionnellement à 0 d&#8217;où le <code>$this-&gt;count -1</code></p>

<!--more-->


<ul>
<li>Supprimer le chainon N</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">removeAtPosition</span><span class="p">(</span><span class="nv">$position</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validateInterval</span><span class="p">(</span><span class="nv">$position</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s2">&quot;L&#39;index doit être valide&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">removeFirstValue</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span>  <span class="o">==</span>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">removeLastValue</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$last</span> <span class="o">=</span> <span class="nv">$current</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$position</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$last</span> <span class="o">=</span> <span class="nv">$current</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$last</span><span class="o">-&gt;</span><span class="na">setNext</span><span class="p">(</span><span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Récupérer le chainon N</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">getAtPosition</span><span class="p">(</span><span class="nv">$position</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validateInterval</span><span class="p">(</span><span class="nv">$position</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s2">&quot;L&#39;index doit être numerique&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$position</span> <span class="o">==</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">last</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$position</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$current</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour avoir le 9999 chainon,  il faut parcourir les 9998 chainons précédents.</p>

<p>Avec les deux méthodes précédentes. Il suffit d&#8217;implémenter les méthodes suivantes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetSet</span><span class="p">(</span><span class="nv">$offset</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$offset</span> <span class="o">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">insertAtEnd</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validateInterval</span><span class="p">(</span><span class="nv">$offset</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s2">&quot;L&#39;index doit être valide&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">insertAtPosition</span><span class="p">(</span><span class="nv">$offset</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetExists</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validInterval</span><span class="p">(</span><span class="nv">$offset</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetUnset</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">removeAtPosition</span><span class="p">(</span><span class="nv">$offset</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">offsetGet</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getAtPosition</span><span class="p">(</span><span class="nv">$offset</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour vérifier que les valeurs en entrée sont correctes j&#8217;utilise la fonction suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">private</span> <span class="k">function</span> <span class="nf">validateInterval</span><span class="p">(</span><span class="nv">$offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="k">false</span> <span class="o">!==</span> <span class="nb">filter_var</span><span class="p">(</span>
</span><span class='line'>        <span class="nv">$offset</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">FILTER_VALIDATE_INT</span><span class="p">,</span>
</span><span class='line'>        <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;options&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;min_range&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;max_range&#39;</span> <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">count</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bon cela semble un peu abstrait, voici quelques exemples d&#8217;utilisations.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="nv">$list</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;first&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$list</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;second&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$list</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;third&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$list</span><span class="p">[</span><span class="mi">1</span><span class="p">]));</span><span class="c1">// =&gt; true</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$list</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="c1">// =&gt; &quot;second&quot;</span>
</span><span class='line'><span class="nb">unset</span><span class="p">(</span><span class="nv">$list</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$list</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="c1">// =&gt; third</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous avons une liste qui se comporte comme un array. c&#8217;est pratique, mais on ne peux pas faire de <code>foreach</code> dessus.. Enfin pas encore.</p>

<h2>Ajout de l&#8217;itérator</h2>

<p>Pour faire un itérator il faut implémenter l&#8217;interface suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="nx">Iterator</span> <span class="k">extends</span> <span class="nx">Traversable</span> <span class="p">{</span>
</span><span class='line'><span class="cm">/* Méthodes */</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">public</span> <span class="nx">mixed</span> <span class="nb">current</span> <span class="p">(</span> <span class="nx">void</span> <span class="p">)</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">public</span> <span class="nx">scalar</span> <span class="nb">key</span> <span class="p">(</span> <span class="nx">void</span> <span class="p">)</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">public</span> <span class="nx">void</span> <span class="nb">next</span> <span class="p">(</span> <span class="nx">void</span> <span class="p">)</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">public</span> <span class="nx">void</span> <span class="nb">rewind</span> <span class="p">(</span> <span class="nx">void</span> <span class="p">)</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">public</span> <span class="nx">boolean</span> <span class="nx">valid</span> <span class="p">(</span> <span class="nx">void</span> <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans le cas de notre liste chainée cela n&#8217;est pas très compliqué.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="k">class</span> <span class="nc">LinkedList</span> <span class="k">implements</span> <span class="nx">Countable</span><span class="p">,</span> <span class="nx">ArrayAccess</span><span class="p">,</span> <span class="o">*</span><span class="nx">Iterator</span><span class="o">*</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">.....</span>  
</span><span class='line'>    <span class="k">private</span> <span class="nv">$current</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$position</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="o">....</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">current</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">current</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">key</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">position</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">next</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">position</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">current</span><span class="o">-&gt;</span><span class="na">getNext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">rewind</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">position</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">current</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">first</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">valid</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">current</span> <span class="o">!==</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un petit code d&#8217;exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="nv">$list</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;first&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$list</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;second&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$list</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;third&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$list</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">$key</span><span class="s2"> =&gt; </span><span class="si">$value</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// string(10) &quot;0 =&gt; first&quot;</span>
</span><span class='line'><span class="c1">// string(11) &quot;1 =&gt; second&quot;</span>
</span><span class='line'><span class="c1">// string(10) &quot;2 =&gt; third&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je peux a tout moment le retransformer en <code>array</code> grâce à la méthode <code>iterator_to_array($list)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">string</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="s2">&quot;first&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">string</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="s2">&quot;second&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">string</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="s2">&quot;third&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour faire dans l&#8217;autre sens nous pouvons implémenter le constructor</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$input</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="o">||</span> <span class="nv">$input</span> <span class="nx">instanceof</span> <span class="nx">Traversable</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s2">&quot;Un array ou Un iterator..&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">foreach</span><span class="p">(</span><span class="nv">$input</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">insertAtEnd</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mon constructor prend un array ou un Objet qui implémente <code>Traversable</code> (en gros un Itérateur);</p>

<p>Quelques exemples</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;one&quot;</span><span class="p">,</span> <span class="s2">&quot;two&quot;</span><span class="p">,</span> <span class="s2">&quot;three&quot;</span><span class="p">));</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$list</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//string(3) &quot;one&quot;</span>
</span><span class='line'><span class="c1">//string(3) &quot;two&quot;</span>
</span><span class='line'><span class="c1">//string(5) &quot;three&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$spl</span> <span class="o">=</span> <span class="k">New</span> <span class="nx">SplQueue</span><span class="p">();</span>
</span><span class='line'><span class="nv">$spl</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;travail1&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$spl</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;travail2&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$spl</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;travail3&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">(</span><span class="nv">$spl</span><span class="p">));</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$list</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// string(8) &quot;travail1&quot;</span>
</span><span class='line'><span class="c1">// string(8) &quot;travail2&quot;</span>
</span><span class='line'><span class="c1">// string(8) &quot;travail3&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$linked</span> <span class="o">=</span> <span class="k">New</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'><span class="nv">$linked</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;valeur 1&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$linked</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;valeur 2&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$linked</span><span class="p">[]</span> <span class="o">=</span> <span class="s2">&quot;valeur 3&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">(</span><span class="nv">$linked</span><span class="p">);</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$list</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// string(9) &quot;valeur 1&quot;</span>
</span><span class='line'><span class="c1">// string(8) &quot;valeur 2&quot;</span>
</span><span class='line'><span class="c1">// string(8) &quot;valeur 3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>En conclusion.</h2>

<p>Nous avons implémenter Les listes chainées avec toutes les méthodes. Mon exemple est un peu théorique. Mais je vous conseille de re-regarder les doctrines collections.</p>

<p>Merci de m&#8217;avoir lu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retour vers le futur avec Vim]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/10/25/retour-vers-le-futur-avec-vim/"/>
    <updated>2015-10-25T18:52:49+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/10/25/retour-vers-le-futur-avec-vim</id>
    <content type="html"><![CDATA[<h2>Parlons de retour vers le futur.</h2>

<p>En effet le héros dans le film 2 arrive le 21 octobre 2015. Bon on n&#8217;a pas les voitures volantes. Et c&#8217;est toujours le même éditeur de texte (vi date de 1976 !).</p>

<h2>Annuler dans VIM</h2>

<p>Pour annuler de VIM c&#8217;est plutôt simple <code>u</code> pour <strong>u</strong>ndo. Pour refaire c&#8217;est moins simple <code>&lt;CTRL + r&gt;</code>. Mais en pratique c&#8217;est plus puissant que cela.</p>

<p>En fait on peut voyager dans le temps avec VIM.</p>

<h2>Retour dans le passé</h2>

<p>Grâce à la commande  <code>:earlier</code></p>

<ul>
<li><code>:earlier 5m</code> reviens en arrière de 5 minutes</li>
<li><code>:earlier 10</code> annule 10 modifications</li>
<li><code>:earlier 5h</code> annule 5 heures.</li>
<li><code>:earlier 1f</code> ramène le fichier avant le dernier enregistrement</li>
<li><code>:earlier 2f</code> ramène le fichier à l&#8217;avant-dernier enregistrement</li>
</ul>


<p>Bien sur on peut faire un <em>retour vers futur</em> avec la commande suivante.</p>

<ul>
<li><code>:later 5m</code> retourne 5 minute plus tard.</li>
<li><code>:later 10</code> refait les 10 derniers modifications</li>
</ul>


<p>Encore plus fort se déplacer dans l&#8217;historique de VIM</p>

<!--more-->


<h2>Se déplacer dans les différents passés</h2>

<p>Celui-ci ce comporte comme un arbre.</p>

<p>Par exemple je rentre le texte <code>premier</code>, puis le texte <code>second</code>. Puis je change <code>second</code> en <code>troisième</code> mon historique ressemble à cela.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   premier 
</span><span class='line'>     |
</span><span class='line'>   modif 1
</span><span class='line'>     |
</span><span class='line'>   premier second
</span><span class='line'>     |
</span><span class='line'>   modif 2
</span><span class='line'>     |
</span><span class='line'>   premier troisième</span></code></pre></td></tr></table></div></figure>


<p>Si j&#8217;annule une étape et que je change le texte mon historique ressemble à cela</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>              premier 
</span><span class='line'>                 |
</span><span class='line'>               modif 1
</span><span class='line'>                 |
</span><span class='line'>               premier second
</span><span class='line'>            ^    |       \
</span><span class='line'> annulation |  modif 2    modif 3
</span><span class='line'>            |    |               \
</span><span class='line'>               premier troisième premier quatrième.
</span></code></pre></td></tr></table></div></figure>


<p>Impossible de revenir à la modif 2 avec <code>u</code> et <code>Ctrl-r</code>.</p>

<p>Mais les touches <code>g+</code> et <code>g-</code> permette de faire cela.</p>

<p>Par exemple <code>g-</code> va nous ramener à la modif 2, un seconde fois <code>g-</code> nous ramène à la modif 1 etc ..</p>

<p>Pour voir toute les modifications il existe une liste de tous les changements avec <code>:undolist</code></p>

<p>Cela n&#8217;est pas très <em>user-friendly</em> comme vue. C&#8217;est pour cela qu&#8217;il existe un plugin vim <a href="https://github.com/sjl/gundo.vim/">gundo</a> qui rend cela beaucoup plus simple</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Undo graph                          File
</span><span class='line'>+-----------------------------------+---------------------------+
</span><span class='line'>| " Gundo for something.txt [1]     |one                        |
</span><span class='line'>| " j/k  - move between undo states |two                        |
</span><span class='line'>| " &lt;cr&gt; - revert to that state     |three                      |
</span><span class='line'>|                                   |five                       |
</span><span class='line'>| @  [5] 3 hours ago                |                           |
</span><span class='line'>| |                                 |                           |
</span><span class='line'>| | o  [4] 4 hours ago              |                           |
</span><span class='line'>| | |                               |                           |
</span><span class='line'>| o |  [3] 4 hours ago              |                           |
</span><span class='line'>| | |                               |                           |
</span><span class='line'>| o |  [2] 4 hours ago              |                           |
</span><span class='line'>| |/                                |                           |
</span><span class='line'>| o  [1] 4 hours ago                |                           |
</span><span class='line'>| |                                 |                           |
</span><span class='line'>| o  [0] Original                   |                           |
</span><span class='line'>+-----------------------------------+                           |
</span><span class='line'>| --- 3 2010-10-12 06:27:35 PM      |                           |
</span><span class='line'>| +++ 5 2010-10-12 07:38:37 PM      |                           |
</span><span class='line'>| @@ -1,3 +1,4                      |                           |
</span><span class='line'>|  one                              |                           |
</span><span class='line'>|  two                              |                           |
</span><span class='line'>|  three                            |                           |
</span><span class='line'>| +five                             |                           |
</span><span class='line'>+-----------------------------------+---------------------------+</span></code></pre></td></tr></table></div></figure>


<h2>Sauvegarder les annulations.</h2>

<p>Parfois on fait des bêtises et que le fichier n&#8217;est pas encore versionné et/ou commité (et cela vous est déjà arrivé non ?). Quand on a quitté vim. On perd tout l&#8217;historique. Ce n&#8217;est plus le cas en précisant un <code>undofile</code></p>

<h2>Conclusion</h2>

<p>Nous avons appris à nous déplacer comme des pros dans l&#8217;historique vim.</p>

<p>Résumé des touches</p>

<ul>
<li><code>u</code> annule, <code>ctrl+r</code> refait</li>
<li><code>:earlier</code> reviens en arrière</li>
<li><code>g-</code> et <code>g+</code> reviens/retourne à l&#8217;état précédent</li>
</ul>


<h2>Références</h2>

<ul>
<li>la documentation de vim <code>help undo</code></li>
<li><a href="https://github.com/sjl/gundo.vim/">Gundo</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
