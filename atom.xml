<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mon blog perso.]]></title>
  <link href="http://mcamuzat.github.io/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2015-07-05T19:14:27+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim Et Debbuger]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/07/05/vim-et-debbuger/"/>
    <updated>2015-07-05T17:12:57+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/07/05/vim-et-debbuger</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Je vais montrer aujourd&#8217;hui comment interfacer Vim et xdebug pour debugger du php.</p>

<ul>
<li>Installer xdebug</li>
<li>Paramétrer xdebug</li>
<li>Présentation de deux plugins <strong>Vdebug</strong> et <strong>DBGPavim</strong></li>
<li>Comment installer les deux plugin avec</li>
</ul>


<h2>Installer xdebug</h2>

<p>Je connais deux méthodes</p>

<p>Utiliser PECL</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pecl install xdebug</span></code></pre></td></tr></table></div></figure>


<p>il faut alors ajouter dans votre <code>php.ini</code> la ligne suivante</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zend_extension=/usr/lib/php5/20090626/xdebug.so</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Ou plus propre rajouter dans un nouveau fichier  <code>/etc/php5/apache2/conf.d/xdebug.ini</code> et pareil pour la ligne de commande <code>/etc/php5/cli/conf.d/xdebug.ini</code></p>

<p>utiliser apt-get sous Ubuntu</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install php5-xdebug</span></code></pre></td></tr></table></div></figure>


<p>sur mon Ubuntu, les fichier conf.d était déjà crée</p>

<h2>Paramétrer xdebug pour le debugger</h2>

<p>Il faut rajouter les lignes suivantes le <code>xdebug.ini</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xdebug.remote_enable=on
</span><span class='line'>xdebug.remote_handler=dbgp
</span><span class='line'>xdebug.remote_host=localhost
</span><span class='line'>xdebug.remote_port=9000</span></code></pre></td></tr></table></div></figure>


<p>Puis aller sur l&#8217;url en ajoutant</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://monsite.com/?XDEBUG_SESSION_START=1</span></code></pre></td></tr></table></div></figure>


<p>Il y a des plugins Firefox et Chrome qui s&#8217;occupe de cela.</p>

<p>Pour que le debugger soit lancer par défaut. Vous pouvez rajouter la ligne suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">xdebug.remote_autostart</span><span class="o">=</span><span class="s">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour tester en ligne de commande.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>php -dxdebug.remote_autostart<span class="o">=</span><span class="m">1</span> test.php
</span></code></pre></td></tr></table></div></figure>


<p>un simple script bash fait l&#8217;affaire. <code>php-debug</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>/usr/bin/php -dxdebug.remote_autostart<span class="o">=</span><span class="m">1</span> <span class="s2">&quot;$@&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Les plugins VIM</h2>

<p>Je vais pas trop insister sur comment installer un plugin sous Vim. Ce n&#8217;est pas très compliqué. Il faut passer par un gestionnaire de plugin (la gestion des plugins par défaut dans Vim n&#8217;est pas pratique)</p>

<h2> Vdebug</h2>

<h3>Utilisation</h3>

<ul>
<li>appuyer sur <code>&lt;F5&gt;</code></li>
<li>vous avez 20 seconde pour lancer le script ou aller sur le serveur apache.</li>
<li>Une fois le signal capturé</li>
</ul>


<h3>Liste des raccourcis claviers</h3>

<p><img class="center" src="http://mcamuzat.github.io/images/VDebug.png" width="600" height="375" title="Vdebug" alt="Screenshot de VDebug"></p>

<ul>
<li><code>&lt;F5&gt;</code>: start/run (to next breakpoint/end of script)</li>
<li><code>&lt;F2&gt;</code>: step over</li>
<li><code>&lt;F3&gt;</code>: step into</li>
<li><code>&lt;F4&gt;</code>: step out</li>
<li><code>&lt;F6&gt;</code>: stop debugging</li>
<li><code>&lt;F7&gt;</code>: detach script from debugger</li>
<li><code>&lt;F9&gt;</code>: run to cursor</li>
<li><code>&lt;F10&gt;</code>: toggle line breakpoint</li>
<li><code>&lt;F11&gt;</code>: show context variables (e.g. after &ldquo;eval&rdquo;)</li>
<li><code>&lt;F12&gt;</code>: evaluate variable under cursor</li>
<li><code>:VdebugEval &lt;code&gt;</code>: evaluate some code and display the result</li>
<li><code>&lt;Leader&gt;e</code>: evaluate the expression under visual highlight and display the result</li>
</ul>


<p>La touche <code>&lt;Leader&gt;</code> est par défault <code>\</code> sur un clavier anglais. <code>&lt;Leader&gt;e</code> correspond à <code>\e</code>. Pas simple à taper sur un clavier azerty. la touche <code>&lt;Leader&gt;</code> est réglable grâce à cette configuration du <code>.vimrc</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">let </span><span class="nv">mapleader</span> <span class="o">=</span> <span class="s2">&quot;,&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sur mon poste, je tape <code>,e</code></p>

<h3>Un avis</h3>

<p>Marche plutôt bien, mais par défaut Le debugger commence au début du script et pas au premier breakpoint.</p>

<p>Il faut rajouter cette ligne dans votre <code>.vimrc</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>g:vdebug_options<span class="o">[</span><span class="s2">&quot;break_on_open&quot;</span><span class="o">]=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;histoire des 20 secondes pour se connecter est un peu frustrante.</p>

<p>Par contre le code python est super propre.</p>

<h2>DBGPavim</h2>

<p><img class="center" src="http://mcamuzat.github.io/images/DBGPAVIM.png" width="600" height="375" title="DBGPavim" alt="Screenshot de DBGPavim"></p>

<p>Ce plugin résout les deux problèmes de Vdebug (aucune limitation de temps, démarre au premier point d&#8217;arrêt). Je le trouve moins intuitif. Mais il est visiblement plus puissant, il gère plusieurs sessions.</p>

<p>Sur les screenshots la différence est plutôt minime.</p>

<p>Les touches sont un peu près les mêmes.</p>

<h2>Installations sous vim</h2>

<p>Suivant le plugin que vous avez choisi</p>

<p>Par <a href="https://github.com/tpope/vim-pathogen">Pathogen</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git://github.com/joonty/vdebug.git bundle/vdebug
</span><span class='line'>ou
</span><span class='line'>git://github.com/joonty/vdebug.git bundle/vdebug
</span></code></pre></td></tr></table></div></figure>


<p>Ou avec les submodules de Git</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git submodule add git://github.com/joonty/vdebug.git bundle/vdebug
</span><span class='line'><span class="c"># ou </span>
</span><span class='line'>git submodule add git://github.com/brookhong/DBGPavim.git bundle/DBGPavim
</span></code></pre></td></tr></table></div></figure>


<p>Ajouter cette ligne à votre <code>.vimrc</code></p>

<p>par <a href="https://github.com/gmarik/Vundle.vim">Vundle</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Bundle <span class="s2">&quot;joonty/vdebug&quot;</span>
</span><span class='line'><span class="c"># ou</span>
</span><span class='line'>Bundle <span class="s1">&#39;brookhong/DBGPavim&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>par <a href="https://github.com/Shougo/neobundle.vim">NeoBundle</a> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>NeoBundle <span class="s2">&quot;joonty/vdebug&quot;</span>
</span><span class='line'><span class="c"># ou</span>
</span><span class='line'>NeoBundle <span class="s1">&#39;brookhong/DBGPavim&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>En conclusion</h2>

<p>Le debugger c&#8217;est chouette et cela rends un peu obsolète ce bon vieux <code>var_dump(); die();</code></p>

<p>D&#8217;ailleurs sur le <code>var_dump</code>. Il est plus simple de taper cette commande directement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>die<span class="o">(</span>var_dump<span class="o">(</span><span class="nv">$foo</span><span class="o">))</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enfin sur les versions récentes de Symfony la commande <code>dump()</code> est pratique.</p>

<p>Je vais reparler de xdebug. J&#8217;ai plein d&#8217;astuce à partager.</p>

<h2>Des liens</h2>

<ul>
<li><a href="https://github.com/joonty/vdebug">Vdebug</a></li>
<li><a href="https://github.com/brookhong/DBGPavim">DBGPAVIM</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Less Is More Et BASH]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/06/28/less-is-more-et-bash/"/>
    <updated>2015-06-28T19:19:59+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/06/28/less-is-more-et-bash</id>
    <content type="html"><![CDATA[<h2>less comme tail -f</h2>

<p>On peux utiliser <code>less</code> pour suivre et parser les logs avec la commande</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>less +F nom_du_fichier</span></code></pre></td></tr></table></div></figure>


<p>Ou tout simplement appuyer sur <code>F</code> quand le fichier est ouvert avec <code>less</code>.</p>

<p>Less est compatible avec les raccourcis VI donc les commandes suivantes marchent</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gg # debut du fichier
</span><span class='line'>G # fin du fichier
</span><span class='line'>/ #recherche
</span><span class='line'>& #affiche seulement les lignes qui contiennent le mot 
</span><span class='line'>h,j,k,l les directions</span></code></pre></td></tr></table></div></figure>


<p>les touche suivantes marche aussi avec <code>man</code></p>

<p>Je vous conseille ce post sur les <a href="blog/2015/03/08/comprendre-les-raccourcis-claviers-de-vi-slash-vim/">mouvement vi</a></p>

<h2>Éditer une ligne de commande trop complexe</h2>

<p>Si on souhaite récupérer la commande actuelle sous BASH. C&#8217;est <code>Ctrl x + Ctrl e</code>. Cela ouvre la commande actuelle dans <code>vi</code> ou votre éditeur par défaut <code>$EDITOR</code> enregistrer et quitter.</p>

<h2>Copier/Coller dans bash</h2>

<ul>
<li>Coupe toute la ligne : <code>Ctrl u</code></li>
<li>Coupe à droite du curseur: <code>Ctrl k</code></li>
<li>Coller <code>Ctrl y</code></li>
</ul>


<h3>Cas d&#8217;utilisation</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim /etc/hosts (oups j'ai oublié le sudo..)
</span><span class='line'>&lt;Ctrl u&gt; sudo &lt;Ctrl k&gt;</span></code></pre></td></tr></table></div></figure>


<h1>Annuler dans Bash</h1>

<p>C&#8217;est <code>Ctrl _</code></p>

<h1>En conclusion</h1>

<p>Les raccourcis claviers <code>Ctrl _</code> et <code>Ctrl y</code> sont des raccourcis claviers de emacs.</p>

<p>Bien qu&#8217;utilisateur Vim, j&#8217;aime beaucoup Emacs. Notamment le <code>org-mode</code>. Emacs est supérieur à Vim. (plus de mode, plus de personnalisation, une véritable interaction en REPL pour les langage type lisp). Il y a une tendance à utiliser Emacs avec le Evil-mode (ce qui en gros rajoute les raccourcis claviers de vim dans Emacs). Mais je pas encore passé le cap.</p>

<p>Il est possible de passer son BASH en Vi-mode avec la commande suivante. Personnellement j&#8217;aime pas.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set -o vi</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;article <a href="http://www.catonmat.net/blog/bash-vi-editing-mode-cheat-sheet/">suivant</a> aide un peu. Mais ce n&#8217;est pas évident de dé-apprendre les raccourcis claviers.</p>

<h1>Quelques liens</h1>

<ul>
<li><a href="https://github.com/jlevy/the-art-of-command-line">the art of the command line</a></li>
<li><a href="http://www.commandlinefu.com">commandlinefu</a></li>
<li><a href="http://orgmode.org/index.html">org-mode</a></li>
<li><a href="http://www.emacswiki.org/emacs/Evil">evil-mode</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If Hemingway Wrote Javascript]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/06/21/if-hemingway-wrote-javascript/"/>
    <updated>2015-06-21T19:06:54+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/06/21/if-hemingway-wrote-javascript</id>
    <content type="html"><![CDATA[<p>Je suis tombé un peu par hasard sur ce livre &ldquo;If Hemingway Wrote JavaScript&rdquo;. Cela part de l&#8217;idée que tout les auteurs ont un certain style. Et que s&#8217;il devait programmer en javascript le résultat serait diffèrent. L&#8217;auteur est un expert du javascript.</p>

<p>On trouve dans les auteurs</p>

<ul>
<li>Ernest Hemingway</li>
<li>William Shakespeare</li>
<li>André Breton</li>
<li>Roberto Bolaño</li>
<li>Dan Brown</li>
<li>Jack Kerouac</li>
<li>Jane Austen</li>
<li>Samuel Johnson</li>
<li>Sir Arthur Conan Doyle</li>
<li>James Joyce</li>
<li>J.D. Salinger</li>
<li>Tupac Shakur</li>
<li>Virginia Woolf</li>
<li>Geoffrey Chaucer</li>
<li>Vladimir Nabokov</li>
<li>Jorge Luis Borges</li>
<li>Lewis Carroll</li>
<li>Douglas Adams</li>
<li>Charles Dickens</li>
<li>David Foster Wallace</li>
<li>Sylvia Plath</li>
<li>Italo Calvino</li>
<li>J.K. Rowling</li>
<li>Arundhati Roy</li>
<li>Franz Kafka</li>
</ul>


<p>Bien sur un livre en anglais implique plutôt de la littérature anglaise. Certain choix sont curieux Dan Brown (Da vinci code) entre Kerouac et Joyce, Voir Tupac (si si le rappeur). Je venais de lire le livre le plus connus de Borges.</p>

<p>On trouve 7-8 implémentation du Fibonnaci et autre factorielle. Vous allez apprendre plein de trucs sur le javascript, bien que je doute que cela serve. L&#8217;auteur montre des utilisations de <code>with</code> ou l&#8217;atroce mais absolument correct <code>Function('return this/4').call(2*2)</code>. Il y a toutes les subtilités du javascript qui sont évoquées : Héritage, scope, hoisting, variable, etc..</p>

<p>La présentation est classe. Je l&#8217;avais pas reconnu mais les dessins sont de Miran Lipovača. C&#8217;est l&#8217;auteur du magnifique <a href="http://learnyouahaskell.com">Learn You a Haskell for Great Good!</a> si vous ne connaissez pas foncer.</p>

<h2>En conclusion</h2>

<p>Un bouquin qui aime les écrivains et qui aime le javascript. Il vous faudra aimer un peu les deux pour apprécier le contenu. Je m&#8217;en sors pas trop mal, je connaissais la plupart des écrivains. Pour moi c&#8217;est une curiosité et j&#8217;adore ce genre de livre. J&#8217;aime beaucoup la présentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copier Coller Dans Vim]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/30/copier-coller-dans-vim/"/>
    <updated>2015-05-30T23:23:37+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/30/copier-coller-dans-vim</id>
    <content type="html"><![CDATA[<h2>Pour commencer : comment sélectionner sous vim</h2>

<h3>solution n°1 : utiliser la souris</h3>

<p>tapez :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set </span><span class="nv">mouse</span><span class="o">=</span>a
</span></code></pre></td></tr></table></div></figure>


<p>vous pouvez sélectionnez avec la souris. Pour copier appuyer sur <code>y</code> comme <strong>y</strong>ank</p>

<h3>solution n°2 : utiliser le mode visuel</h3>

<p>avec la touche <code>v</code> ou <code>V</code> pour utiliser la ligne entière. Puis les flèches ou les <a href="http://mcamuzat.github.io/blog/2015/03/08/comprendre-les-raccourcis-claviers-de-vi-slash-vim/">mouvements</a></p>

<h3>solution n°3 : utiliser les touches mouvements</h3>

<p>Quelques exemples:</p>

<ul>
<li><code>y3w</code> copier trois mots (<strong>y</strong>ank <strong>3</strong> words)</li>
<li><code>yG</code> copier jusqu&#8217;à la fin du fichier (<strong>y</strong>ank fin</li>
<li><code>y5j</code> copier 5 lignes vers le bas (<strong>y</strong> <strong>5</strong> lignes vers le bas <code>j</code>)</li>
<li><code>yi(</code> pour copier le texte entre parenthèse (<strong>y</strong>ank <strong>i</strong>nside <code>(</code>)</li>
</ul>


<p>Pour coller on utilise la touche <code>p</code> pour <strong>p</strong>aste ou <code>P</code> (colle avant le curseur)</p>

<h2>Les presse-papiers sous vi ou les registres</h2>

<p>La notion de presse-papier est appelle registre dans Vi.</p>

<p>Pour voir l&#8217;état des registres (et si il ne fallait retenir qu&#8217;une seule commande..)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:register ou :reg
</span></code></pre></td></tr></table></div></figure>


<p>Vous devez voir quelques choses dans le genre:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot;&quot;</span> dernier texte <span class="o">)</span>
</span><span class='line'><span class="s2">&quot;0 dernier texte copié</span>
</span><span class='line'><span class="s2">... les dix derniers textes copiés</span>
</span><span class='line'><span class="s2">&quot;</span><span class="m">9</span> ..
</span><span class='line'><span class="s2">&quot;a contenu du registre &quot;</span>a<span class="s2">&quot; (s&#39;il existe)</span>
</span><span class='line'><span class="s2">...</span>
</span><span class='line'><span class="s2">&quot;</span>% noms du fichier
</span><span class='line'><span class="s2">&quot;. dernier texte inséré</span>
</span><span class='line'><span class="s2">&quot;</span>/ dernier texte recherché
</span><span class='line'><span class="err">&quot;</span>: derniere commande.
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Pour coller le texte contenue dans le registre <code>a</code> il faut taper<code>"ap</code> pour le registre <code>"a</code> + <code>p</code> paste.</li>
<li>Pour copier le texte dans le registre a c&#8217;est <code>"ay</code></li>
<li>Avec les mouvements de vi <code>"ay3w</code> dans le registre a (<code>"a</code>) copier (<code>y</code> comme <em>yank</em>) 3 mots (3w pour 3 words).</li>
</ul>


<p>Un registre intéressant le registre <code>+</code> ou le registre <code>*</code> les deux registres sont associés au clipboard de Linux ou celui de windows.</p>

<h2>Pour résumer</h2>

<ul>
<li>Pour voir les registres. Il suffit de taper <code>:register</code>.</li>
<li>Pour coller un registre c&#8217;est <code>"&lt;nom du registre&gt;p</code>.</li>
<li>Pour copier c&#8217;est <code>"&lt;nom du registre&gt;y(+mouvement)</code>.</li>
<li>Le registre <code>+</code> est le presse-papier de windows ou linux. Pour copier/coller du presse-papier il suffit de taper <code>"+p</code> et <code>"+y</code>.</li>
<li>On a 26 presse-papiers de <code>a</code> à <code>z</code> personnellement j&#8217;en ai rarement utilisé plus de deux registres en même temps.</li>
</ul>


<p>Nous reparlerons des registres avec les macros dans un prochain post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Koan Et Programmation]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/25/koan-et-programmation/"/>
    <updated>2015-05-25T20:53:23+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/25/koan-et-programmation</id>
    <content type="html"><![CDATA[<p>Un koan est dixit wikipedia</p>

<blockquote><blockquote><p>koan est une une brève anecdote ou un court échange entre un maître et son disciple, absurde, énigmatique ou paradoxal, ne sollicitant pas la logique ordinaire.</p></blockquote></blockquote>

<p>Un exemple de Koan</p>

<blockquote><blockquote><p>Quel est le son d’une seule main qui applaudit ?</p></blockquote></blockquote>

<p>Il existe des Koan pour la programmation. Ce sont des mini problèmes pour s&#8217;initier à une technologie.</p>

<h2>RubyKoan</h2>

<p>Le plus connu et le premier est <a href="http://rubykoans.com/">RubyKoan</a>.</p>

<p>Regardons ensemble la première utilisation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>koans
</span><span class='line'>/home/marc/.rvm/rubies/ruby-2.2.0/bin/ruby path_to_enlightenment.rb
</span><span class='line'>AboutAsserts#test_assert_truth has damaged your karma.
</span><span class='line'>
</span><span class='line'>The Master says:
</span><span class='line'>  You have not yet reached enlightenment.
</span><span class='line'>
</span><span class='line'>The answers you seek...
</span><span class='line'>  Failed assertion.
</span><span class='line'>
</span><span class='line'>Please meditate on the following code:
</span><span class='line'>  /home/marc/prog/ruby_koans/koans/about_asserts.rb:10:in <span class="sb">`</span>test_assert_truth<span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'>mountains are merely mountains
</span><span class='line'>your path thus far <span class="o">[</span>X_________________________________________________<span class="o">]</span> 0/282
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ouvre le fichier <code>about_asserts.rb</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># -*- ruby -*-</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/neo&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AboutAsserts</span> <span class="o">&lt;</span> <span class="no">Neo</span><span class="o">::</span><span class="no">Koan</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># We shall contemplate truth by testing reality, via asserts.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_assert_truth</span>
</span><span class='line'>    <span class="n">assert</span> <span class="kp">false</span>                <span class="c1"># This should be true</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il suffit de changer le <code>false</code> en <code>true</code></p>

<p>Relancons, On avance petit à petit et toutes les notions du ruby sont expliquées.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>koans
</span><span class='line'>/home/marc/.rvm/rubies/ruby-2.2.0/bin/ruby path_to_enlightenment.rb
</span><span class='line'>AboutAsserts#test_assert_truth has expanded your awareness.
</span><span class='line'>AboutAsserts#test_assert_with_message has damaged your karma.
</span><span class='line'>
</span><span class='line'>The Master says:
</span><span class='line'>  You have not yet reached enlightenment.
</span><span class='line'>  You are progressing. Excellent. <span class="m">1</span> completed.
</span><span class='line'>
</span><span class='line'>The answers you seek...
</span><span class='line'>  This should be <span class="nb">true</span> -- Please fix this
</span><span class='line'>
</span><span class='line'>Please meditate on the following code:
</span><span class='line'>  /home/marc/prog/ruby_koans/koans/about_asserts.rb:16:in <span class="sb">`</span>test_assert_with_message<span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'>learn the rules so you know how to <span class="nb">break </span>them properly
</span><span class='line'>your path thus far <span class="o">[</span>.X________________________________________________<span class="o">]</span> 1/282
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est un moyen facile et rapide pour apprendre un langage. Ceci dit j&#8217;ai personnellement fini les rubykoans. Mais 1 mois plus tard, j&#8217;étais incapable d&#8217;aligner une ligne de code en ruby. Faire passer les tests n&#8217;est pas très compliqué quelque soit le langage.</p>

<p>Il y a aussi les Katas de programmation, Mais c&#8217;est plus un cahier des charges avec des tests d&#8217;acceptations (On parle de BDD) alors que les koan sont plutôt dans la notion d&#8217;unitaire.</p>

<h2>Quelques Koan.</h2>

<p>Bien sur les <a href="http://rubykoans.com/">RubyKoans</a> il existe une version <a href="http://koans.herokuapp.com/en/about_asserts">en ligne</a>.</p>

<p>Les <a href="https://github.com/gregmalcolm/python_koans">python-koans</a> sont vraiment chouettes Il y a python 2.7 et python 3. Si les premiers problèmes sont faciles. Les derniers sont plutôt durs.</p>

<p>En javascript on peux citer</p>

<ul>
<li><a href="https://github.com/mrdavidlaing/javascript-koans">javascript-koans</a></li>
<li><a href="https://github.com/larrymyers/backbone-koans">backbone-koans</a></li>
<li><a href="https://github.com/bjpbakker/angular-koans">angular-koans</a></li>
</ul>


<p>J&#8217;ai été un peu déçus de ne pas trouver des Koans en php. Cela reste très basique.
je citerai:</p>

<ul>
<li><a href="https://github.com/TorontoPHPSoftwareCraftsmanship/PHPUnit-Koans">PHPUnit-koans</a></li>
<li>et celui-ci par votre serviteur (mais c&#8217;était il y a bien longtemps) <a href="https://github.com/mcamuzat/PHPUnitRegexKoan">mcamuzat/PHPUnitRegexKoan</a></li>
</ul>


<h2>Conclusion</h2>

<p>Je vous avais parler des <a href="http://mcamuzat.github.io/blog/2015/04/29/awesome-et-liste-de-liens/">awesome-list</a> et bien il existe une liste de <a href="https://github.com/ahmdrefat/awesome-koans">awesome-koans</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go Hello Server]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/18/go-hello-server/"/>
    <updated>2015-05-18T23:00:46+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/18/go-hello-server</id>
    <content type="html"><![CDATA[<h2> Introduction</h2>

<p>Je continue mon apprentissage en go. Nous allons essayer de faire un hello world via une page web.</p>

<p>L&#8217;exemple le plus simple de la <a href="https://gowalker.org/net/http#HandleFunc">documentation officielle</a>.</p>

<h2>Mise en place</h2>

<p>Je me place dans mon répertoire <code>go</code></p>

<p>Je vais dans le répertoire <code>src/github.com/&lt;username&gt;/</code></p>

<p>Je crée un répertoire <code>hello-server</code></p>

<p>Dans ce répertoire je crée le fichier server.go</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;io&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// hello world, the web server</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">HelloServer</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">req</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">io</span><span class="p">.</span><span class="nx">WriteString</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;hello, world!\n&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">HelloServer</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:12345&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="s">&quot;ListenAndServe: &quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il suffit pour tester de lancer</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">go</span> <span class="nx">run</span> <span class="nx">server</span><span class="p">.</span><span class="k">go</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ou sinon dans le répertoire <code>src/github.com/&lt;username&gt;/hello-server</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">go</span> <span class="nx">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans votre répertoire <code>bin</code> vous avez un exécutable <code>hello-server</code></p>

<p>si on reprend notre répertoire <code>go</code> avec le précédent post</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>├── bin
</span><span class='line'>│   ├── hello
</span><span class='line'>│   └── hello-server
</span><span class='line'>└── src
</span><span class='line'>    └── github.com
</span><span class='line'>        └── mcamuzat
</span><span class='line'>            ├── hello
</span><span class='line'>            │   ├── hello.go
</span><span class='line'>            │   ├── LICENSE
</span><span class='line'>            │   └── README.md
</span><span class='line'>            └── hello-server
</span><span class='line'>                └── server.go
</span></code></pre></td></tr></table></div></figure>


<p>Avec votre navigateur aller à l&#8217;adresse suivante <a href="http://localhost:12345/">http://localhost:12345/</a></p>

<h3>Micro analyse</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>http.HandleFunc<span class="o">(</span><span class="s2">&quot;/&quot;</span>, HelloServer<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On initialise un router qui associe à la route <code>/</code> (la route vide) un <em>callback</em> <code>HelloServer</code> (qui ne fait qu&#8217;un simple <code>hello world!</code>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>err :<span class="o">=</span> http.ListenAndServe<span class="o">(</span><span class="s2">&quot;:12345&quot;</span>, nil<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On demande à go d&#8217;écouter le port <code>:12345</code></p>

<p>Et il n&#8217;y a pas grand chose à dire d&#8217;autre.</p>

<h2>En conclusion</h2>

<p>Cela ressemble à beaucoup de micro-framework, en tant que développeur PHP je ne suis pas vraiment perdu.
Je vais essayer de continuer un peu sur le serveur web (récupération des posts).</p>

<p>L&#8217;avantage ici est que le fichier <code>hello-server</code> est exécutable et n&#8217;a besoin d&#8217;aucune dépendance (donc pas besoin de apache, PHP, etc..).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go Introduction]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/10/go-introduction/"/>
    <updated>2015-05-10T18:21:31+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/10/go-introduction</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>J&#8217;ai regardé Docker. Docker est en Go ainsi que pas mal de projets en fait. J&#8217;ai donc décidé d&#8217;essayer.</p>

<p>Dans ce chapitre nous n&#8217;allons pas trop discuter du langage mais surtout mettre en place tout les outils.</p>

<h2>Installation(linux)</h2>

<ul>
<li><p>Nous allons télécharger les fichiers <a href="https://golang.org/dl/">ici</a></p></li>
<li><p>On décompresse le fichier</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo tar -C /usr/local -xzf go1.4.2.linux-amd64.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>Créer un répertoire go dans votre <code>/usr/local</code></p>

<ul>
<li>enfin il faut l&#8217;ajouter à votre <code>$PATH</code> en modifiant le <code>.profile</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/go/bin
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>testons dans notre ligne de commande.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go version
</span><span class='line'>go version go1.4.2 linux/amd64
</span></code></pre></td></tr></table></div></figure>


<h2>Hello world !</h2>

<p>Ouvrons un fichier <code>hello.go</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;hello, world\n&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour l&#8217;exécuter</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>go run hello.go
</span><span class='line'>hello, world
</span></code></pre></td></tr></table></div></figure>


<p>Tout va bien ! Nous avons installé Go</p>

<h2>Organisation d&#8217;un projet</h2>

<p>L&#8217;organisation d&#8217;un projet sous Go est fixe ! Comprendre qu&#8217;il faut un <strong>workspace</strong></p>

<p>Nous allons ensemble créer le projet <code>Hello</code></p>

<ul>
<li><p>Créer un répertoire <code>go</code></p></li>
<li><p>Assigner la variable d&#8217;environnement <code>$GOPATH</code></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> <span class="nb">export </span><span class="nv">GOPATH</span><span class="o">=</span><span class="nv">$HOME</span>/go
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>enfin rajouter le $GOPATH/bin dans le PATH</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$GOPATH</span>/bin
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Nous voulons sauvegarder notre code quelques part. ici github!</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir -p <span class="nv">$GOPATH</span>/src/github.com/&lt;votreusername&gt;/hello
</span></code></pre></td></tr></table></div></figure>


<p>Votre <code>username</code> est votre namespace pour les packages (un peu comme java).</p>

<ul>
<li><p>dans notre répertoire <code>src/github.com/&lt;votreusername&gt;/hello</code> nous allons copier notre <code>hello.go</code></p></li>
<li><p>Tout est en place. Il n&#8217;y a plus qu&#8217;a taper <code>go install github.com/user/hello</code>.</p></li>
<li><p>autre possibilité se rendre dans le répertoire <code>src/github.com/&lt;votreusername&gt;/hello</code></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>go install
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Nous pouvons vérifier que dans le répertoire <code>$HOME/go</code> il y a un dossier <code>bin/</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$GOPATH</span>/bin/hello
</span><span class='line'>hello world
</span><span class='line'><span class="c"># de manière plus simple puisque nous avons ajouter dans le path $GOPATH/bin</span>
</span><span class='line'>hello
</span><span class='line'>hello world
</span></code></pre></td></tr></table></div></figure>


<p>voici la structure finale</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>├── bin
</span><span class='line'>│   └── hello
</span><span class='line'>└── src
</span><span class='line'>    └── github.com
</span><span class='line'>        └── mcamuzat
</span><span class='line'>            └── hello
</span><span class='line'>                ├── hello.go
</span><span class='line'>                ├── LICENSE
</span><span class='line'>                └── README.md
</span></code></pre></td></tr></table></div></figure>


<h2>Sauvegarde d&#8217;un projet</h2>

<p>Nous allons sauvegarder celui-ci sous <a href="https://github.com/">Github</a>. Ce n&#8217;est pas obligatoire.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> <span class="nv">$GOPATH</span>/src/github.com/user/hello
</span><span class='line'>git init
</span><span class='line'>git add .
</span><span class='line'>git commit -m<span class="s2">&quot;create project&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sous github, j&#8217;ai crée un nouveau repository <code>hello-go</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote add origin git@github.com:mcamuzat/hello-go.git
</span><span class='line'>git pull --rebase
</span><span class='line'>git push origin master
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Nous avons d&#8217;installer Go.</p>

<p>Je viens juste de m&#8217;y mettre, Je ne sais pas encore ce que la suite nous réserve..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker-machine]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/09/docker-machine/"/>
    <updated>2015-05-09T18:29:45+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/09/docker-machine</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Nous allons voir <a href="https://docs.docker.com/machine/">docker-machine</a>. Docker-machine permet de simplifier l&#8217;installation/gestion/déploiement de Docker.</p>

<h2>Installation</h2>

<p>Tout d&#8217;abord il faut connaitre votre architecture <code>x86_64</code>ou <code>i386</code>.</p>

<p>La commande classique est <code>uname -a</code>.</p>

<p>Puis télécharger l&#8217;exécutable via <code>curl</code></p>

<p>Sous linux.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -L https://github.com/docker/machine/releases/download/v0.2.0/docker-machine_linux-amd64 &gt; docker-machine
</span><span class='line'>sudo mv docker-machine /usr/local/bin/docker-machine
</span></code></pre></td></tr></table></div></figure>


<p>Puis le marquer comme exécutable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chmod +x /usr/local/bin/docker-machine
</span></code></pre></td></tr></table></div></figure>


<p>Testons notre application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-machine -v
</span></code></pre></td></tr></table></div></figure>


<p>Enfin vous avez besoin d&#8217;avoir <a href="https://www.virtualbox.org/wiki/Downloads">Virtual-Box</a></p>

<h2>Mise en route.</h2>

<p>Voici la commande pour tout lancer</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-machine create --driver virtualbox dev
</span></code></pre></td></tr></table></div></figure>


<p>Cette ligne demande à docker-machine de créer une environnement que l&#8217;on appelle <strong>dev</strong> qui sera sur Virtual-box.
docker-machine va télécharger une iso (boot2docker) contenant docker. Et lancer Virtualbox.</p>

<p>Jusqu&#8217;à maintenant on avait installé docker sur notre ordi local.
Ici on installe docker sur une VM.
Toutes les commandes seront passer de manière transparente à la machine virtuelle.
L&#8217;avantage de cette méthode est que tout le monde utilise la même iso virtuelle (boot2docker). Il n&#8217;y a moins le risque du &ldquo;chez moi ça marche&rdquo; qui est une remarque au combien rageante.</p>

<p>Je veux travailler sur mon environnement de dev</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(docker-machine env dev)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Toutes mes commandes sont directement envoyées sur la vm à distance</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run busybox <span class="nb">echo </span>hello
</span></code></pre></td></tr></table></div></figure>


<p>Je peux rajouter un environnement (ici <strong>prod</strong>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-machine create --driver amazon prod --les options qui vont bien..
</span></code></pre></td></tr></table></div></figure>


<p>Il suffit de changer l&#8217;environnement pour automatiquement déployer sur Amazon.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(docker-machine env prod)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Plein de drivers sont fournis:</p>

<ul>
<li><a href="https://docs.docker.com/machine/#amazon-web-services">Amazon Web Services</a></li>
<li><a href="https://docs.docker.com/machine/#digital-ocean">Digital Ocean</a></li>
<li><a href="https://docs.docker.com/machine/#google-compute-engine">Google Compute Engine</a></li>
<li><a href="https://docs.docker.com/machine/#ibm-softlayer">IBM Softlayer</a></li>
<li><a href="https://docs.docker.com/machine/#microsoft-azure">Microsoft Azure</a></li>
<li><a href="https://docs.docker.com/machine/#microsoft-hyper-v">Microsoft Hyper-V</a></li>
<li><a href="https://docs.docker.com/machine/#openstack">Openstack</a></li>
<li><a href="https://docs.docker.com/machine/#rackspace">Rackspace</a></li>
<li><a href="https://docs.docker.com/machine/#oracle-virtualbox">Oracle VirtualBox</a></li>
<li><a href="https://docs.docker.com/machine/#vmware-fusion">VMware Fusion</a></li>
<li><a href="https://docs.docker.com/machine/#vmware-vcloud-air">VMware vCloud Air</a></li>
<li><a href="https://docs.docker.com/machine/#vmware-vsphere">VMware vSphere</a></li>
</ul>


<h2>L&#8217;avantage de docker-machine</h2>

<ul>
<li>Simplifie l&#8217;installation. il n&#8217;y a que docker-machine à installer. Arès docker-machine s&#8217;occupe de tout installer. (il installe docker sur un vm/instance)</li>
<li>Simplifie le déploiement, il suffit de changer l&#8217;environnement</li>
<li>Enfin il s&#8217;interface avec docker-swarm (qui permet de gérer plusieurs nodes de Dockers).</li>
</ul>


<h2>En conclusion</h2>

<p>Le slogan &ldquo;a way to get from zero to Docker&rdquo; est plutôt juste.</p>

<ul>
<li>Cela simplifie beaucoup l&#8217;installation sous windows (pas testé :-)).</li>
<li>Et harmonise les environnements de dev (tout le monde utilise la même iso)</li>
<li>Facilite le déploiement. Il n&#8217;y a pas a se soucier si c&#8217;est du Amazon/OpenStack/Azure..</li>
</ul>


<p>Dans un prochain post nous allons essayer de voir docker-swarm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je Joue Donc Je Programme]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/04/je-joue-donc-je-programme/"/>
    <updated>2015-05-04T22:32:00+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/04/je-joue-donc-je-programme</id>
    <content type="html"><![CDATA[<p>Il existe des jeux vidéos pour apprendre à programmer. Voici quelques exemples.</p>

<h2>VimAdventure</h2>

<p><img class="center" src="http://mcamuzat.github.io/images/vimadventures.jpg" width="600" height="339" title="Vim adventure" alt="Vim adventure">
<a href="http://vim-adventures.com/">Vim adventure</a> permet d&#8217;apprendre les touches de Vim de manière ludique. Personnellement j&#8217;ai beaucoup joué à <a href="http://crawl.develz.org/wordpress/">Dungeon Crawl</a> qui utilise les touches <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code></p>

<h2>Ruby</h2>

<p>Ruby warrior existe en deux versions:
<img class="center" src="http://mcamuzat.github.io/images/ruby-warrior.png" width="600" height="288" title="Ruby warrior" alt="Ruby warrior"></p>

<p>En ligne de commande <a href="https://github.com/ryanb/ruby-warrior">ruby-warrior</a></p>

<p>Le but est ici d&#8217;écrire L&#8217;AI du héros. Cela commence relativement simplement. Au début pas besoin de if, else, object mais les niveaux se corsent vraiment (je dirai que jusqu&#8217;au 6 c&#8217;est relativement tranquille)</p>

<p>Depuis il existe une version web. Beaucoup plus accessible et jolie
<a href="https://www.bloc.io/ruby-warrior#/">ruby-warrior</a></p>

<h2>Javascript</h2>

<h3>Untrusted</h3>

<p><img class="center" src="http://mcamuzat.github.io/images/untrusted.jpg" width="600" height="339" title="Untrusted" alt="Untrusted">
pour passer les niveaux, il faut atteindre le terminal et commencer à hacker le js. C&#8217;est vraiment malin.
<a href="http://alexnisnevich.github.io/untrusted/">untrusted</a></p>

<h3>Elevator Saga</h3>

<p><img class="center" src="http://mcamuzat.github.io/images/elevator-saga.png" width="600" height="288" title="Elevator Saga" alt="Elevator Saga"></p>

<p>Quoi de plus passionnant que simulation d&#8217;ascenseur.On passe assez facilement le niveau 1. Cela se complique vraiment avec le niveau deux et les objectifs.
<a href="http://play.elevatorsaga.com/">elevator-saga</a></p>

<h3>CodeCombat</h3>

<p><a href="http://codecombat.com/">CodeCombat</a>
Diriger un petit combattant, Un peu la même idée que ruby-warror, mais l&#8217;interface est très belle. Il y a du multi-joueurs</p>

<h2>Multi-plateforme</h2>

<p><img class="center" src="http://mcamuzat.github.io/images/codingame.jpg" width="600" height="375" title="Coding game" alt="Coding game"></p>

<p><a href="http://www.codingame.com">Codingame</a>. L&#8217;interface est magnifique, vous pouvez choisir le langage (il y a une vingtaine de langage PHP, Js, Haskell, Bash, C). les exercices sont assez variés. C&#8217;est plus des katas de programmation.</p>

<h2>Le SQL</h2>

<p><img class="center" src="http://mcamuzat.github.io/images/schemaverse.png" width="450" height="131" title="Schemaverse" alt="Schemaverse"></p>

<p><a href="https://schemaverse.com/">Schemaverse</a>
Un jeux video en prosgresSQL pur. Il y a même une histoire. C&#8217;est assez compliqué.</p>

<h2>Les Regex</h2>

<ul>
<li><a href="http://regexone.com/">regex one</a> Une bonne introduction.</li>
<li><a href="https://regex.alf.nu/">regex.alf.nu</a>. Cela commence doucement, mais les dernières sont très très compliquées.</li>
<li><a href="http://www.postcrashgames.com/finitris/">finitris</a>.Un vieux Jeux que j&#8217;avais noté, c&#8217;est dommage que la prise en main soit affreuse et que le zoom soit péter (control+molette est votre ami)</li>
</ul>


<h3>Des jeux Flash</h3>

<p>Bon je sais que ce n&#8217;est pas super récent.</p>

<p>Tout les jeux Zacktronics</p>

<ul>
<li><a href="http://www.zachtronics.com/spacechem/">SpaceChem</a> (payant et j&#8217;ai pas essayé).</li>
<li><a href="http://www.zachtronics.com/kohctpyktop-engineer-of-the-people/">Kohctpyktop</a> quasiment injouable. mais c&#8217;est de cette facon que sont fait les portes logiques et les microprocesseurs.</li>
<li><a href="http://www.zachtronics.com/the-codex-of-alchemical-engineering/">Codex of Alchemical Engineering</a> assembler des molécules.</li>
<li><a href="http://www.zachtronics.com/ruckingenur-ii/">Ruckingenur</a> voila comment on fait du Reverse Engineering des circuits électroniques (sous windows).</li>
</ul>


<p>Et aussi</p>

<ul>
<li><a href="http://pleasingfungus.com/Manufactoria/">manufactoria</a> facbrique de robots et BDD (il suffit de faire passer le scénario).</li>
</ul>


<h2>En conclusion</h2>

<p>j&#8217;ai vraiment beaucoup aimé et joué à <a href="http://alexnisnevich.github.io/untrusted/">untrusted</a> et <a href="https://www.bloc.io/ruby-warrior#/">ruby-warrior</a></p>

<p>J&#8217;ai probablement oublié d&#8217;autres jeux.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker-compose]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/05/03/docker-compose/"/>
    <updated>2015-05-03T21:33:31+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/05/03/docker-compose</id>
    <content type="html"><![CDATA[<h2>Docker-compose</h2>

<p>Dans le post précèdent sur docker, j&#8217;avais expliqué comment automatiser la création des containers grâce au <code>Dockerfile</code> aujourd&#8217;hui je vais expliquer <code>docker-compose</code></p>

<h2>Intro.</h2>

<p>Dans un projet, il n&#8217;y a rarement qu&#8217;une seule instance. Voir il peut y avoir plusieurs fronts et une seule base de donnée. docker-compose est la justement pour organiser cela.</p>

<p>Par exemple le <code>docker-compose.yml</code> suivant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">web</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">php:5.6-apache</span>
</span><span class='line'>  <span class="l-Scalar-Plain">links</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">db:db</span>
</span><span class='line'>  <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">.:/var/www/html</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgres</span>
</span></code></pre></td></tr></table></div></figure>


<p>On déclare deux type de containers le container type <strong>web</strong> et le container de type <strong>db</strong>. à noter la ligne <code>links</code> qui fait que le container web partage/vois le container db</p>

<p>Il suffit de faire <code>docker-compose up</code> (comme un <code>vagrant up</code>)  pour automatiquement lancer deux containers. un container web avec une image php-5.6, et un container avec PostGresSQL</p>

<h2>Installation</h2>

<p>Il existe deux façons de l&#8217;installer soit passer par <code>pip</code> (pip est l&#8217;équivalent de <code>npm</code> pour le python).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo pip install -U docker-compose
</span></code></pre></td></tr></table></div></figure>


<p>Ou de passer par curl</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -L https://github.com/docker/compose/releases/download/1.2.0/docker-compose-<span class="sb">`</span>uname -s<span class="sb">`</span>-<span class="sb">`</span>uname -m<span class="sb">`</span> &gt; /usr/local/bin/docker-compose
</span><span class='line'>chmod +x /usr/local/bin/docker-compose
</span></code></pre></td></tr></table></div></figure>


<h2>Quelques commandes</h2>

<p>Lancer les containers en mode démon (<code>-d</code>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-compose up -d
</span></code></pre></td></tr></table></div></figure>


<p>Cela crée deux containers</p>

<p>Que l&#8217;on peux surveiller grâce à la commande suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-compose ps
</span><span class='line'>    Name                   Command               State    Ports
</span><span class='line'>-----------------------------------------------------------------
</span><span class='line'>compose_db_1    /docker-entrypoint.sh postgres   Up      5432/tcp
</span><span class='line'>compose_web_1   apache2-foreground               Up      80/tcp
</span></code></pre></td></tr></table></div></figure>


<p>On peux voir les logs</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-compose logs
</span></code></pre></td></tr></table></div></figure>


<p>Plus intéressant on peux rajouter des containers..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-compose scale <span class="nv">web</span><span class="o">=</span>3
</span><span class='line'>Creating compose_web_2...
</span><span class='line'>Creating compose_web_3...
</span><span class='line'>Starting compose_web_2...
</span><span class='line'>Starting compose_web_3...
</span></code></pre></td></tr></table></div></figure>


<p>Si je re-liste mes containers</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker-compose ps
</span><span class='line'>    Name                   Command               State    Ports
</span><span class='line'>-----------------------------------------------------------------
</span><span class='line'>compose_db_1    /docker-entrypoint.sh postgres   Up      5432/tcp
</span><span class='line'>compose_web_1   apache2-foreground               Up      80/tcp
</span><span class='line'>compose_web_2   apache2-foreground               Up      80/tcp
</span><span class='line'>compose_web_3   apache2-foreground               Up      80/tcp
</span></code></pre></td></tr></table></div></figure>


<p>Je viens de multiplier par 3 le nombre de container en une simple commande et sans stopper le système.</p>

<h2>Conclusion</h2>

<p>Si vous n&#8217;avez qu&#8217;un seul container docker-compose ne sert pas à grand chose. Mais si vous avez plusieurs containers. Cela ne vaux pas la peine de se priver. Docker-compose contient en fait la liste des container ainsi que leurs configurations si on devait les lancers en la ligne de commande.</p>

<p>Dans le prochain post sur docker, je vais tenter <code>docker-machine</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesome Et Liste De Liens]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/04/29/awesome-et-liste-de-liens/"/>
    <updated>2015-04-29T22:15:34+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/04/29/awesome-et-liste-de-liens</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Les développeurs aiment les liens. Il y a toujours un article à partager et/ou sauvegarder. Pour les sauvegarder, Personnelement j&#8217;utilisai un fichier texte ou j&#8217;ajoutai en favori dans mon navigateur (avec plus ou moins de bonheur au moment du changement d&#8217;ordinateur). Des gens ont décidé de versionner leurs listes de liens sur Github.  Cela s&#8217;appelle  <strong>Awesome</strong>-(la techno ou le thème que vous vous voulez)</p>

<p>par exemple:</p>

<ul>
<li>PHP : <a href="https://github.com/ziadoz/awesome-php">awesome-php</a></li>
<li>Symfony2 : <a href="https://github.com/EmanueleMinotto/awesome-symfony2">awesome-symfony2</a></li>
<li>Docker : <a href="https://github.com/veggiemonk/awesome-docker">awesome-docker</a></li>
<li>Les meilleurs cours en ligne : <a href="https://github.com/prakhar1989/awesome-courses">awesome-courses</a></li>
<li>React : <a href="https://github.com/enaqx/awesome-react">awesome-react</a></li>
<li>Sysadmin: <a href="https://github.com/kahun/awesome-sysadmin">awesome-sysadmin</a></li>
<li>Web Performance Optimization:<a href="https://github.com/davidsonfellipe/awesome-wpo">awesome-wpo</a></li>
<li>etc ..</li>
</ul>


<h2>Des listes qui contiennent des listes.</h2>

<p>Ben oui la liste est longue. C&#8217;est pour cela qu&#8217;il existe une awesome-list de awesome</p>

<ul>
<li><a href="https://github.com/bayandin/awesome-awesomeness">awesome-awesomeness</a></li>
</ul>


<h2>Une conclusion</h2>

<p>Si vous cherchez à vous former dans une techno, je crois que vous savez par où commencer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Et Dockerfile]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/04/26/docker-et-dockerfile/"/>
    <updated>2015-04-26T19:44:44+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/04/26/docker-et-dockerfile</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Je continue dans mon exploration de Docker, aujourd&#8217;hui nous allons voir comment automatiser la création d&#8217;un container à l&#8217;aide d&#8217;un <code>Dockerfile</code>.</p>

<p>Nous allons créer un container pour <a href="http://jonas.nitro.dk/tig/">tig</a>.. C&#8217;est un interface git qui marche sous un terminal. Pour moi, c&#8217;est un magnifique outil de travail. Je m&#8217;en sers très souvent (surtout la vue de status (touche <code>S</code>) puis <code>u</code> pour ajouter, <code>!</code> pour reverter, <code>C</code> pour commit, <code>e</code> pour lancer mon éditeur (Bien entendu Vim)</p>

<p>Nous allons faire</p>

<ul>
<li>L&#8217;installation à la main</li>
<li>Puis écrire le <code>Dockerfile</code> qui automatise la partie 1</li>
<li>Optimiser un peu celui-ci en utilisant une autre distribution</li>
<li>Faire des commit sous Github, puis sous DockerHub</li>
</ul>


<h2>Création du container à la main</h2>

<p>Je commence avec une Ubuntu que je lance en mode interactif.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker run -it ubuntu:14.10
</span></code></pre></td></tr></table></div></figure>


<p>Je mets à jour ma distribution</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>apt-get update
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;installe tig (il est dans les dépôts officiels)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>apt-get install -y tig
</span></code></pre></td></tr></table></div></figure>


<p>A cause du <code>apt-get update</code> Ubuntu a téléchargé toutes les sources des dépôts dans le répertoire <code>var/lib/apt/lists/</code> pour ne pas alourdir le container je vais effacer celui-ci</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rm -rf /var/lib/apt/lists/*
</span></code></pre></td></tr></table></div></figure>


<p>Je lance <code>tig</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>root@0a475b7fbed7:/# tig
</span><span class='line'>tig: Not a git repository
</span></code></pre></td></tr></table></div></figure>


<p>Il n&#8217;y a pas de dépot git à la racine c&#8217;est normal.</p>

<p>je quitte mon container et je liste</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker ps -a
</span><span class='line'>CONTAINER ID        IMAGE                                         COMMAND                CREATED             STATUS                            PORTS                                                                         NAMES
</span><span class='line'>0a475b7fbed7        ubuntu:14.10                                  <span class="s2">&quot;/bin/bash&quot;</span>            <span class="m">13</span> minutes ago      Exited <span class="o">(</span>130<span class="o">)</span> About a minute ago
</span></code></pre></td></tr></table></div></figure>


<p>Je vais le committer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker commit -m <span class="s2">&quot;add tig&quot;</span> -a <span class="s2">&quot;mcamuzat&quot;</span> admiring_yonath mcamuzat/tig:v1
</span></code></pre></td></tr></table></div></figure>


<p>Je vais le relancer avec la commande suivante.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker run -t -i -v <span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>:/project mcamuzat/tig:v1
</span></code></pre></td></tr></table></div></figure>


<p>En gros j&#8217;ai crée un lien symbolique qui pointe le répertoire courant de mon ordinateur vers le répertoire <code>project</code> du container.</p>

<p>je me place dans le répertoire project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> /project
</span></code></pre></td></tr></table></div></figure>


<p>et je lance tig</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>tig
</span></code></pre></td></tr></table></div></figure>


<p>Si dans le répertoire courant il y a un dépôt git. Normalement l&#8217;interface de Tig apparait.</p>

<p>Voila j&#8217;ai placé tig dans un container.</p>

<h2>Automatisation via un DockerFile.</h2>

<p>On se place dans un répertoire vide</p>

<p>Je crée un fichier <code>DockerFile</code> avec le contenu suivant</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>FROM ubuntu:14.10
</span><span class='line'>MAINTAINER Marc Camuzat &lt;marco@crans.org&gt;
</span><span class='line'>RUN apt-get update <span class="se">\</span>
</span><span class='line'>    <span class="o">&amp;&amp;</span> apt-get install -y mysql-client <span class="se">\</span>
</span><span class='line'>    <span class="o">&amp;&amp;</span> rm -rf /var/lib/apt/lists/*
</span><span class='line'>WORKDIR /project
</span><span class='line'>VOLUME  /project
</span><span class='line'>ENTRYPOINT <span class="o">[</span><span class="s2">&quot;tig&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>WORKDIR</code> et <code>VOLUME</code> indique à Docker que le répertoire par défault est <code>project</code> et que l&#8217;on lance tig</p>

<p>On va maintenant demander à docker de <em>builder</em> l&#8217;image à l&#8217;aide de la commande suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker build -t mcamuzat/tig:v2 .
</span></code></pre></td></tr></table></div></figure>


<p>On attend un peu.. Et on relance</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker run -t -i -v <span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>:/project mcamuzat/tig:v2
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est beaucoup plus rapide.</p>

<h2>Optimisons la taille.</h2>

<p>Quand je liste mon image via la commande suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>REPOSITORY              TAG                     IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>mcamuzat/tig            v2                      103a05c16a2b        <span class="m">3</span> minutes ago       234.6 MB
</span></code></pre></td></tr></table></div></figure>


<p>Mon container fait 234 méga ! C&#8217;est beaucoup pour un simple utilitaire.
pour simplifier je vais utiliser une autre distribution <a href="https://www.alpinelinux.org/">alpine-linux</a> (que je ne connaissais pas ..) et le dockerhub <a href="https://registry.hub.docker.com/u/gliderlabs/alpine/">suivant</a> qui réduit la distribution à 5 méga !</p>

<p>Voici mon <code>DockerFile</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>FROM gliderlabs/alpine:3.1
</span><span class='line'>RUN apk --update add tig
</span><span class='line'>WORKDIR /project
</span><span class='line'>VOLUME  /project
</span><span class='line'>ENTRYPOINT <span class="o">[</span><span class="s2">&quot;tig&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je relance un build.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker build -t mcamuzat/tig:v3 .
</span></code></pre></td></tr></table></div></figure>


<p>Maintenant mon container ne fait plus que 24 Méga !</p>

<h2>Publions sous Github</h2>

<p>Nous allons créer un nouveau dépôt avec un README.</p>

<p>Que je vais cloner.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone https://github.com/mcamuzat/tig-docker.git
</span></code></pre></td></tr></table></div></figure>


<p>Je vais ajouter mon DockerFile, Commiter et Pusher</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git add Dockerfile
</span><span class='line'>git commit -m<span class="s2">&quot;initial commit&quot;</span>
</span><span class='line'>git push origin master
</span></code></pre></td></tr></table></div></figure>


<p>Et c&#8217;est tout.</p>

<p>Résultat <a href="https://github.com/mcamuzat/tig-docker">ici</a></p>

<h2>Publions sur DockerHub</h2>

<p>Je pars du principe que vous avez un compte sur DockerHub.</p>

<ul>
<li>Cliquer sur le bouton <code>Add Repository-&gt;Automated Build</code></li>
<li>choisir Github.</li>
<li>Puis On va vous demander de relier votre compte DockerHub à Github.</li>
<li>DockerHub va vous demander quel projet vous souhaitez builder automatiquement.</li>
</ul>


<p>Résultat <a href="https://registry.hub.docker.com/u/mcamuzat/tig/">ici</a></p>

<h2>Conclusion</h2>

<p>Le Dockerfile sert à automatiser la création d&#8217;image. il est plus simple de stocker le <code>Dockerfile</code> que le container (puisque Dockerhub s&#8217;occupe de faire build)</p>

<p>J&#8217;ai crée mon premier dépôt. Ce n&#8217;est pas très compliqué. Dans un prochain article, je vais essayer d&#8217;expérimenter <code>docker compose</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Correction Orthographique Et VIM]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/04/22/correction-orthographique-et-vim/"/>
    <updated>2015-04-22T22:26:43+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/04/22/correction-orthographique-et-vim</id>
    <content type="html"><![CDATA[<p>J&#8217;ai assisté à un Meetup sur VIM.</p>

<p>Le speaker parlait de la correction orthographique sous VIM. Je savais que c&#8217;était possible, mais je ne m&#8217;en suis jamais servis. J&#8217;ai donc décidé de réessayer.. Et j&#8217;ai vu de façon différente mes posts sur ce blog. Je suis repasser un peu sur tout.</p>

<p>Voici la commande pour activer/installer la correction automatique</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set spell spelllang=fr</span></code></pre></td></tr></table></div></figure>


<p>Normalement Vim va télécharger pour vous les différents fichiers sur le Ftp officiel.  Il y a une commande interactive pour vous aider dans l&#8217;installation. Si jamais il a un souci le wiki français indique de se placer dans son répertoire <code>spell</code> (chez moi <code>~/.vim/spell</code>) et de lancer les commandes suivantes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wget http://ftp.vim.org/vim/runtime/spell/fr.latin1.spl
</span><span class='line'>wget http://ftp.vim.org/vim/runtime/spell/fr.latin1.sug
</span><span class='line'>wget http://ftp.vim.org/vim/runtime/spell/fr.utf-8.spl
</span><span class='line'>wget http://ftp.vim.org/vim/runtime/spell/fr.utf-8.sug
</span></code></pre></td></tr></table></div></figure>


<p>La touche magique ici est <code>z=</code> puis les touches du <code>0..n</code>. <code>]s</code> pour aller à l&#8217;erreur suivante <code>[s</code> pour l&#8217;erreur précédente. Il y a différentes touches pour ajouter à son propre dictionnaire. J&#8217;avoue que cela ne m&#8217;intéresse pas trop de suite.</p>

<p>On peut aussi faire de l&#8217;auto complétion ou plutôt de l&#8217;auto correction pendant la saisie avec les touche <code>Ctrl-x</code> + <code>s</code>.</p>

<h2>Résumé</h2>

<table>
<thead>
<tr>
<th> Touche      </th>
<th style="text-align:center;"> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>z=</code>               </td>
<td style="text-align:center;"> auto correct si <code>spell</code> est activée</td>
</tr>
<tr>
<td> <code>[s</code>               </td>
<td style="text-align:center;"> erreur précédente</td>
</tr>
<tr>
<td> <code>]s</code>               </td>
<td style="text-align:center;"> erreur suivante</td>
</tr>
<tr>
<td> <code>Crtl-x s</code>      </td>
<td style="text-align:center;">auto complétion via le dictionnaire </td>
</tr>
</tbody>
</table>


<p>Warning : <code>Ctrl-s</code> parfois freeze le terminal (option pratique quand je regarde les tests fonctionnels passés). Pour <em>defreezer</em> le terminal c&#8217;est <code>Ctrl-Q</code></p>

<h2>Conclusion:</h2>

<p>Il manque le correcteur grammatical :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Et CI]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/04/18/dockers-et-ci/"/>
    <updated>2015-04-18T18:13:48+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/04/18/dockers-et-ci</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>je continue sur ma découverte de Docker. Je vais parler de deux containers</p>

<ul>
<li><a href="https://github.com/jolicode/docker-images/tree/master/languages/php/phaudit">phaudit</a>  pour faire de la qualité de code</li>
<li><a href="https://github.com/jolicode/JoliCi">JoliCi</a> pour l&#8217;intégration continu</li>
</ul>


<h2>Faire de la qualité avec Docker</h2>

<p>Il y a un container fourni par <a href="https://github.com/jolicode/docker-images/tree/master/languages/php/phaudit">phaudit</a> qui contient déjà des outils pour auditer le code.</p>

<p>Voici la ligne de commande pour l&#8217;installer</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker pull jolicode/phaudit</span></code></pre></td></tr></table></div></figure>


<p>Et je me place dans mon répertoire projet</p>

<h3>Listes des programmes</h3>

<ul>
<li><a href="http://github.com/sebastianbergmann/phploc">PHPLoc</a> <code>phploc</code> donne le nombre de ligne, le nombre de classes etc ..</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -t -i -v `pwd`:/project jolicode/phaudit phploc src
</span><span class='line'>Directories                                         10
</span><span class='line'>Files                                               91
</span><span class='line'>
</span><span class='line'>Size
</span><span class='line'>  Lines of Code (LOC)                             7295
</span><span class='line'>  Comment Lines of Code (CLOC)                    3228 (44.25%)
</span><span class='line'>  Non-Comment Lines of Code (NCLOC)               4067 (55.75%)
</span><span class='line'>  Logical Lines of Code (LLOC)                     774 (10.61%)
</span><span class='line'>    Classes                                        711 (91.86%)
</span><span class='line'>      Average Class Length                           8
</span><span class='line'>        Minimum Class Length                         0
</span><span class='line'>        Maximum Class Length                        67
</span><span class='line'>      Average Method Length                          1
</span><span class='line'>        Minimum Method Length                        0
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://phpmd.org/">PHP Mess Detector</a> <code>phpmd</code> donne un retour sur la qualité du code (nommage des variables etc..)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>phaudit phpmd . text naming
</span><span class='line'>/project/src/Allmy/Protocol/LineReceiver.php:38   Avoid variables with short names like $b. Configured minimum length is 3.
</span><span class='line'>/project/src/Allmy/Reactor/StreamSelectReactor.php:32 Avoid variables with short names like $id. Configured minimum length is 3.
</span><span class='line'>/project/src/Allmy/Reactor/StreamSelectReactor.php:43 Avoid variables with short names like $id. Configured minimum length is 3.
</span><span class='line'>/project/src/Allmy/Reactor/StreamSelectReactor.php:53 Avoid variables with short names like $id. Configured minimum length is 3.
</span><span class='line'>...
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://pear.php.net/PHP_CodeSniffer">PHP_CodeSniffer</a>  <code>phpcs</code> erreur de convention de code (Psr-..) et  <code>phpcbf</code>pour les fixer automatiquement</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -t -i -v `pwd`:/project jolicode/phaudit phpcs src/Allmy/Reactor/StreamSelectReactor.php
</span><span class='line'>FILE: /project/src/Allmy/Reactor/StreamSelectReactor.php
</span><span class='line'>----------------------------------------------------------------------
</span><span class='line'>FOUND 85 ERRORS AND 3 WARNINGS AFFECTING 63 LINES
</span><span class='line'>----------------------------------------------------------------------
</span><span class='line'>   2 | ERROR   | [ ] Missing file doc comment
</span><span class='line'>  11 | ERROR   | [ ] Missing class doc comment
</span><span class='line'>  15 | ERROR   | [ ] Private member variable "timers" must be
</span><span class='line'>.....
</span><span class='line'>.....
</span><span class='line'>.....
</span><span class='line'> 275 | ERROR   | [ ] Parameter tags must be grouped together in a doc
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://github.com/sebastianbergmann/phpcpd">PHP Copy/Paste Detector</a> <code>phpcpd</code> détecte les copier/coller</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>docker run -t -i -v `pwd`:/project jolicode/phaudit phpcpd src
</span><span class='line'>Found 2 exact clones with 101 duplicated lines in 4 files:
</span><span class='line'>
</span><span class='line'>  -   /project/src/Allmy/Stream/Factory.php:9-53
</span><span class='line'>  /project/src/Allmy/Internet/Factory.php:9-53
</span><span class='line'> 
</span><span class='line'>  -   /project/src/Allmy/Transport/TcpServer.php:9-66
</span><span class='line'>  /project/src/Allmy/Socket/Server.php:9-66
</span><span class='line'> 
</span><span class='line'>1.38% duplicated lines out of 7295 total lines of code.
</span></code></pre></td></tr></table></div></figure>


<p>d&#8217;autre commandes que je connais un peu moins</p>

<ul>
<li><p><a href="http://pdepend.org/">PHP_Depend</a> <code>pdepend</code> donnes des analyses, dépendences, complexités etc..</p></li>
<li><p><a href="http://github.com/sebastianbergmann/phpdcd">PHP Dead Code Detector</a> <code>phpdcd</code> détecte le code qui semble ne pas servir.</p></li>
<li><p><a href="http://www.phpmetrics.org/">PhpMetrics</a> <code>phpmetrics</code> donnes des métriques (Je ne connais pas)</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -t -i -v `pwd`:/project jolicode/phaudit phpmetrics --report-cli .</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://cs.sensiolabs.org/">PHP Coding Standards Fixer</a> as <code>php-cs-fixer</code> une autre commandes pour fixer le code par <a href="http://cs.sensiolabs.org/">Sensio</a></li>
</ul>


<p>L&#8217;astuce est de se créer l&#8217;alias suivant</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias phaudit="docker run --rm -ti \
</span><span class='line'>    -v \`pwd\`:/project \
</span><span class='line'>    jolicode/phaudit"</span></code></pre></td></tr></table></div></figure>


<p>alors les lignes de commandes précédentes deviennent plus simple</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>phaudit phpmd . text naming</span></code></pre></td></tr></table></div></figure>


<h2>Tester sur toutes les versions de php</h2>

<p>Fait par la même équipe.</p>

<p>il est possible de faire une intégration continue en local. Il va lancer les builds en testant toutes versions de php spécifié dans un fichier <code>yml</code>.</p>

<p>L&#8217;installation est très simple il suffit de télécharger le <code>.phar</code> à l&#8217;url <a href="https://github.com/jolicode/JoliCi/releases">suivante</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget url du fichier phar</span></code></pre></td></tr></table></div></figure>


<p>il faut créer un fichier <code>.travis.yml</code> voici les lignes à ajouter pour un projet en php</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">php</span>
</span><span class='line'><span class="l-Scalar-Plain">php</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;5.5&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;5.4&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;5.3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>puis la commande suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">php jolici.phar run</span>
</span><span class='line'><span class="l-Scalar-Plain">Creating builds...</span>
</span><span class='line'><span class="l-Scalar-Plain">3 builds created</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Running job php = 5.5</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">PHPUnit 3.7.38 by Sebastian Bergmann.</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Configuration read from /home/project/phpunit.xml.dist</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">......</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Time</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">106 ms, Memory</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3.50Mb</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">OK (6 tests, 34 assertions)</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Running job php = 5.4</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">PHPUnit 3.7.38 by Sebastian Bergmann.</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Configuration read from /home/project/phpunit.xml.dist</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">......</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Time</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">131 ms, Memory</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3.50Mb</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">OK (6 tests, 34 assertions)</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Running job php = 5.3</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">PHPUnit 3.7.38 by Sebastian Bergmann.</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Configuration read from /home/project/phpunit.xml.dist</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">......</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Time</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">7 ms, Memory</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">6.25Mb</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">OK (6 tests, 34 assertions)</span>
</span></code></pre></td></tr></table></div></figure>


<p>En ajoutant un fichier <code>.yml</code> et sans installer aucune version de php, je peux tester sur trois plateformes mon code. C&#8217;est vraiment impressionnant.</p>

<h2>Conclusion</h2>

<p>Nous avons vus ensemble deux applications très simples qui permettent d&#8217;intégrer Docker dans notre workflow.</p>

<p>Merci à l&#8217;équipe <a href="http://jolicode.com/">JoliCode</a>  pour ces deux outils.</p>

<p>Je me suis inspiré de la présentation suivante.
<a href="http://slides.com/jeremyderusse/docker-dev#/5/2">http://slides.com/jeremyderusse/docker-dev#/5/2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10print]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/04/15/10print/"/>
    <updated>2015-04-15T22:38:15+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/04/15/10print</id>
    <content type="html"><![CDATA[<p>Je suis tombé un peu par hasard sur la critique du livre <a href="http://10print.org/">10 PRINT</a> , le pdf du livre est gratuit et plutôt joli, il parle de programmation, d&#8217;art et d&#8217;aléatoire.
Tout le livre est centré sur le programme de basic suivant qui donne l&#8217;image de la couverture.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>10 PRINT CHR$(205.5+RND(1)); : GOTO 10
</span><span class='line'>/\\\\\\//\\////\\/\/\/\//\///////\\/////\///\\/\\
</span><span class='line'>\/\///\/\//\\//\\\/\\\/\///\\\\\\/\/\\\\\\/\\\/\\
</span><span class='line'>\\////\/////\\\\\\\/\\\\\\\\\\\//////\/\/\\\\/\//
</span><span class='line'>/\//\\\/\\\/\\///\\//\////\\/\/\//\\//\//\\/////\
</span><span class='line'>///\\/\\\\///\\/\/////\\\/\\\///\//\\\\//\\//\//\
</span><span class='line'>//\\\\//\\/\//\\//\///\\/////\///\/\//\/\//\//\\/
</span><span class='line'>//\/\/\///\\\/\//\////\\\//\/\/\\\\\\//\\\\\///\/
</span><span class='line'>//\\/\\\//\////\//\\\\\/\////\\\///\/\\/\//\\\///
</span><span class='line'>//\//\/\\\\\//////\///\/\\\/\/\/\\//\\/\\\//\//\\
</span><span class='line'>//\/\/\\\/\\/\/\////\//\\//\\//\/\///\/\/////\///
</span><span class='line'>//\\//\\\/////\//\//\\/\\//\/\//\//\\/\//\\\\\//\</span></code></pre></td></tr></table></div></figure>


<p>Bon la police d&#8217;écriture ne rend pas vraiment justice au code.</p>

<p>C&#8217;est possible de faire le même motif en PHP et en peu de code ?</p>

<p>Une solution</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$out</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;\\&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$out</span><span class="p">[</span><span class="nb">array_rand</span><span class="p">(</span><span class="nv">$out</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Attention <code>array_rand</code> renvoie la clé et non la valeur d&#8217;où le <code>$out[array_rand($out)]</code></p>

<p>Et puis je me suis dit que array_rand ne sert pas à grand chose.</p>

<p>Donc j&#8217;ai essayé</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$out</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;\\&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'> <span class="k">echo</span> <span class="nv">$out</span><span class="p">[</span><span class="nb">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>pour générer des nombres aléatoire, il vaut mieux utiliser <code>mt_rand</code> qui d&#8217;après la documentation génère des nombres aléatoires plus intéressants (?). Pour des vrai nombres aléatoires pour les mots de passe,  on utilise des librairies voir cette <a href="http://blog.ircmaxell.com/2013/01/password-storage-talk-at-php-benelux-13.html">présentation</a>.</p>

<p>Mais il est possible d&#8217;initialiser plus d&#8217;une constante dans la boucle for.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$i</span> <span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$out</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;\\&#39;</span><span class="p">);</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'> <span class="k">echo</span> <span class="nv">$out</span><span class="p">[</span><span class="nb">mt_rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut aussi faire plus d&#8217;une action dans l&#8217;incrémentation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$out</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;\\&#39;</span><span class="p">);</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">,</span> <span class="k">echo</span> <span class="nv">$out</span><span class="p">[</span><span class="nb">mt_rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)])</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>On minimise les variables et la notation avec les <code>[]</code></p>

<p>Nous obtenons le code suivant</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$i</span> <span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$o</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;\\&#39;</span><span class="p">];</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">,</span> <span class="k">echo</span> <span class="nv">$o</span><span class="p">[</span><span class="nb">mt_rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je n&#8217;avais jamais écris de boucle for sans corps(<code>{..}</code>).</p>

<p>La documentation de PHP est plutôt claire sur le <a href="http://php.net/manual/fr/control-structures.for.php">for</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Je Débute]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/04/12/docker-je-debute/"/>
    <updated>2015-04-12T22:25:27+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/04/12/docker-je-debute</id>
    <content type="html"><![CDATA[<h2>Docker</h2>

<p>Suite à une présentation à une conférence. J&#8217;ai commencé à m&#8217;y mettre. J&#8217;écris ce post en tant que grand débutant..</p>

<p>Docker est une solution de virtualisation d&#8217;instance, plus précisément de container. Il y a pas mal de différence avec les différentes visualisations de Virtual box/Xen/VmWare. On isole juste les process et le file-system. Ce qui fait que l&#8217;on consomme très peu de processeurs.</p>

<h2>Installation</h2>

<p>Installer docker n&#8217;est pas très compliqué sous ubuntu 14.04.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install docker.io
</span></code></pre></td></tr></table></div></figure>


<p>Et c&#8217;est tout !</p>

<p>Pour éviter de préfixer <code>sudo</code> à chaque commande il est plus facile d&#8217;ajouter son utilisateur au group docker.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo addgroup &lt;votre user&gt; docker
</span></code></pre></td></tr></table></div></figure>


<h2>Hello world sous docker</h2>

<p>Lancer docker</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run ubuntu:14.04 /bin/echo <span class="s1">&#39;Hello world&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette commande fait plusieurs choses:</p>

<ul>
<li>si l&#8217;image <code>ubuntu:14.04</code> n&#8217;existe pas, elle va la télécharger.</li>
<li>Puis on lance le container</li>
<li>Puis on exécute echo &lsquo;Hello world&rsquo;</li>
</ul>


<p>D&#8217;ailleurs si on relance la même commande, on constate que l&#8217;image est déjà sur le disque dur.</p>

<p>la commande prend moins d&#8217;une seconde. Pourtant on a chargé un container et lancer une commande !</p>

<p>Essayons la commande suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run ubuntu:14.04 - it /bin/bash
</span><span class='line'>root@b2634b81c3dc:/#
</span></code></pre></td></tr></table></div></figure>


<p>Nous avons un bash intéractif. <code>-i</code> mode interactif, et <code>-t</code> affiche un pseudo terminal</p>

<p>Il faut comprendre que  dès que la commande principale est finie, l&#8217;instance aussi. Dans le cas <code>Echo 'Hello World'</code> la commande se finit de suite. Dans le cas de <code>/bin/bash</code> On spécifie le mode interactif. Donc l&#8217;instance continue tant que l&#8217;on a pas quitté le bash.</p>

<p>Ouvrons un nouveau terminal</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker ps
</span><span class='line'>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</span><span class='line'>b2634b81c3dc        ubuntu:14.04        /bin/bash           <span class="m">43</span> seconds ago      Up <span class="m">42</span> seconds                           sharp_archimedes
</span></code></pre></td></tr></table></div></figure>


<p>On voit que mon image est toujours en cours.</p>

<p>La commande docker ps affiche tout les containers allumés pour afficher tout les containers allumés pendant la session. C&#8217;est <code>dockers ps -a</code></p>

<p>On peux inspecter une instance avec la commande</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker inspect sharp_archimedes
</span><span class='line'>docker inspect b2634b81c3dc
</span></code></pre></td></tr></table></div></figure>


<p>Cela renvoie un json.</p>

<p>On peux aussi lister les images disponibles via la commande</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker images
</span></code></pre></td></tr></table></div></figure>


<p>Vous voulez télécharger des images</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker pull centos
</span></code></pre></td></tr></table></div></figure>


<p>Vous cherchez une images particulières</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker search php56
</span></code></pre></td></tr></table></div></figure>


<p>La liste des images disponibles est disponible sur <a href="https://hub.docker.com/">Docker Hub</a> . D&#8217;ailleurs Dockers est très couplé avec DockerHub. DockerHub est un le GitHub pour Docker. On peux très bien faire du Git sans GitHub. C&#8217;est la même chose pour docker.</p>

<p>Docker et Git partage aussi la notion de commit et de push.</p>

<p>relancons notre instance</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -it ubuntu:14.04 /bin/bash
</span><span class='line'>root@f5882f7f608d:/#
</span></code></pre></td></tr></table></div></figure>


<p>Installons un paquet au hasard</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install vim
</span></code></pre></td></tr></table></div></figure>


<p>On quitte <code>Exit</code></p>

<p>puis on commit</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo docker commit f5882f7f608do marc/vim
</span><span class='line'>4f177bd27a9ff0f6dc2a830403925b5360bfe0b93d476f7fc3231110e7f71b1c
</span></code></pre></td></tr></table></div></figure>


<p>Si je liste les images.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker images
</span></code></pre></td></tr></table></div></figure>


<p>je vois apparaitre mon <code>marc/vim</code></p>

<p>Je peux ainsi réutiliser mon container ainsi</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo docker run -it marc/vim vim
</span></code></pre></td></tr></table></div></figure>


<p>On peux ainsi se créer ses propres containers. Mais c&#8217;est un peu laborieux. Docker utilise des <code>DockerFile</code> pour automatiser le process. Cela fera un prochain post</p>

<h2>Résumé des commandes</h2>

<ul>
<li><code>docker run -i -t ubuntu:14.10 /bin/bash</code> lance en mode interactif et un terminal avec la commande Bash.</li>
<li><code>docker run -i -t ubuntu:14.10 'hello world'</code></li>
<li><code>docker ps</code> liste les containers en cours.</li>
<li><code>docker ps -a</code> liste tout les containers.</li>
<li><code>docker images</code> liste toutes les images.</li>
<li><code>docker pull centos</code> pour télécharger une image (tout les images officielles sont sur le <a href="https://hub.docker.com/">Hub</a></li>
<li><code>docker inspect uuid</code> affiche les informations sur l&#8217;instance.</li>
<li><code>docker commit uuid name</code>pour commiter.</li>
</ul>


<h2>Conclusion</h2>

<p>Bon j&#8217;avoue que je débute depuis 2 jours.  Ce qui m&#8217;impressionne dans Docker c&#8217;est la vitesse (moins d&#8217;une seconde pour démarrer). C&#8217;est plutôt simple d&#8217;utilisation. La notion de commit a l&#8217;air sympa (Même si au fond c&#8217;est l&#8217;équivalent d&#8217;un snapshot sous vmware). J&#8217;espère pouvoir faire mon premier dépôt sous DockerHub bientôt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Suite Visiteur Pattern : Visiteur Booleen]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/04/06/suite-visiteur-pattern-visiteur-bool%C3%A9en/"/>
    <updated>2015-04-06T19:55:44+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/04/06/suite-visiteur-pattern-visiteur-booléen</id>
    <content type="html"><![CDATA[<h2>Introduction:</h2>

<p>Nous allons refaire la même chose que notre interpréteur d&#8217;expressions.
Mais avec des expressions booléennes.
Par exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$expression</span> <span class="o">=</span> <span class="k">new</span> <span class="k">Or</span><span class="p">(</span> <span class="k">new</span> <span class="k">And</span><span class="p">(</span><span class="k">New</span> <span class="k">False</span><span class="p">(),</span> <span class="k">New</span> <span class="k">True</span><span class="p">()),</span> <span class="k">new</span> <span class="k">False</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous allons ensuite rajouter les comparaisons <code>==</code>, <code>&lt;</code>, etc ..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$expression</span> <span class="o">=</span> <span class="k">new</span> <span class="k">Not</span><span class="p">(</span><span class="k">new</span> <span class="nx">NotEqual</span><span class="p">(</span><span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Variable</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">)));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Beaucoup de code. mais si vous avez compris la première partie. cela devrait aller.</p>

<h2>Expression Booléenne</h2>

<p>Nous définissons l&#8217;interface suivante.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Une expression Booléenne</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">interface</span> <span class="nx">BoolExpression</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">accept</span><span class="p">(</span><span class="nx">VisitorBoolExpression</span> <span class="nv">$v</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Une classe abstraite.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">Unary</span> <span class="k">implements</span> <span class="nx">BoolExpression</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">accept</span><span class="p">(</span><span class="nx">VisitorBoolExpression</span> <span class="nv">$v</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$v</span><span class="o">-&gt;</span><span class="na">visit</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour faire l&#8217;algèbre booléen j&#8217;ai besoin de <code>False</code> et de <code>True</code></p>

<p>Voici le code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">True</span> <span class="k">extends</span> <span class="nx">Unary</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">False</span> <span class="k">extends</span> <span class="nx">Unary</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai aussi besoin de la négation</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Not</span> <span class="k">extends</span> <span class="nx">Unary</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$expr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="o">=</span> <span class="nv">$expr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getValue</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je vais rajouter la condition And, Or, Nand (No-et), Nor(Non-ou)</p>

<p>Je définis une classe avec deux arguments dans le constructeur.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Binary</span> <span class="k">extends</span> <span class="nx">Unary</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$left</span><span class="p">,</span> <span class="nx">BoolExpression</span> <span class="nv">$right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span> <span class="o">=</span> <span class="nv">$left</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span> <span class="o">=</span> <span class="nv">$right</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getLeft</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getRight</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Les classes sont alors très simples.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// Or et And sont des mots réservés en Php.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BinaryOr</span> <span class="k">extends</span> <span class="nx">Binary</span><span class="p">{}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BinaryAnd</span> <span class="k">extends</span> <span class="nx">Binary</span><span class="p">{}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BinaryNand</span> <span class="k">extends</span> <span class="nx">Binary</span><span class="p">{}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BinaryNor</span> <span class="k">extends</span> <span class="nx">Binary</span><span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai un peu près tout.</p>

<p>On peut passer au Visiteur.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">interface</span> <span class="nx">VisitorBoolExpression</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visit</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$expr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">VisitorBoolEvaluation</span> <span class="k">implements</span> <span class="nx">VisitorBoolExpression</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$context</span><span class="p">;</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$context</span><span class="p">){</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">context</span> <span class="o">=</span> <span class="nv">$context</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visit</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$expr</span><span class="p">){</span>
</span><span class='line'>        <span class="nv">$class</span> <span class="o">=</span> <span class="s1">&#39;visit&#39;</span><span class="o">.</span><span class="nb">get_class</span><span class="p">(</span><span class="nv">$expr</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$class</span><span class="p">(</span><span class="nv">$expr</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitTrue</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitFalse</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitNot</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">!</span><span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitBinaryOr</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getLeft</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">)</span><span class="o">||</span><span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getRight</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitBinaryAnd</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getLeft</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getRight</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitBinaryNor</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">!</span><span class="p">(</span><span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getLeft</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">)</span><span class="o">||</span><span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getRight</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitBinaryNand</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">!</span><span class="p">(</span><span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getLeft</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getRight</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Quelques exemples.</p>

<p>On réutilise notre mémoire du billet précédent. On utilise aussi <code>var_dump</code> plutôt que <code>echo</code> car <code>echo false</code> ne renvoie rien.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$memory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Memory</span><span class="p">();</span>
</span><span class='line'><span class="nv">$memory</span><span class="o">-&gt;</span><span class="na">write</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ve</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VisitorBoolEvaluation</span><span class="p">(</span><span class="nv">$memory</span><span class="p">);</span>
</span><span class='line'><span class="c1">// une expression</span>
</span><span class='line'><span class="nv">$expression</span> <span class="o">=</span>  <span class="k">new</span> <span class="k">True</span><span class="p">();</span>
</span><span class='line'><span class="c1">// appelle le visiteur</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$expression</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$ve</span><span class="p">))</span> <span class="c1">// affiche bool(true);</span>
</span><span class='line'><span class="nv">$expression</span> <span class="o">=</span>  <span class="k">new</span> <span class="k">Not</span><span class="p">(</span><span class="k">new</span> <span class="k">False</span><span class="p">());</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$expression</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$ve</span><span class="p">))</span> <span class="c1">// affiche bool(true);</span>
</span><span class='line'><span class="nv">$expression</span> <span class="o">=</span>  <span class="k">new</span> <span class="nx">BinaryAnd</span><span class="p">(</span><span class="k">new</span> <span class="k">Not</span><span class="p">(</span><span class="k">new</span> <span class="k">False</span><span class="p">()),</span> <span class="k">new</span> <span class="nx">BinaryOr</span><span class="p">(</span><span class="k">new</span> <span class="k">True</span><span class="p">(),</span> <span class="k">new</span> <span class="k">False</span><span class="p">()));</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$expression</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$ve</span><span class="p">))</span> <span class="c1">//Affiche bool(true);</span>
</span></code></pre></td></tr></table></div></figure>


<p>bien sur on peux refaire un autre visiteur pour traduire en chaînes de caractères</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">VisitorBoolPrint</span> <span class="k">implements</span> <span class="nx">VisitorBoolExpression</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$context</span><span class="p">;</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$context</span><span class="p">){</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">context</span> <span class="o">=</span> <span class="nv">$context</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visit</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$expr</span><span class="p">){</span>
</span><span class='line'>        <span class="nv">$class</span> <span class="o">=</span> <span class="s1">&#39;visit&#39;</span><span class="o">.</span><span class="nb">get_class</span><span class="p">(</span><span class="nv">$expr</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$class</span><span class="p">(</span><span class="nv">$expr</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitTrue</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;true&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitFalse</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;false&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitNot</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;!&quot;</span> <span class="o">.</span> <span class="nv">$epr</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitBinaryOr</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;(&quot;</span> <span class="o">.</span> <span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getLeft</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="s1">&#39;||&#39;</span> <span class="o">.</span><span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getRight</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">)</span><span class="o">.</span> <span class="s2">&quot;)&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le même exemple .</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$memory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Memory</span><span class="p">();</span>
</span><span class='line'><span class="nv">$memory</span><span class="o">-&gt;</span><span class="na">write</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="nv">$ve</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VisitorBoolPrint</span><span class="p">(</span><span class="nv">$memory</span><span class="p">);</span>
</span><span class='line'><span class="c1">// une expression</span>
</span><span class='line'><span class="nv">$expression</span> <span class="o">=</span>  <span class="k">new</span> <span class="k">True</span><span class="p">();</span>
</span><span class='line'><span class="c1">// appelle le visiteur</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$expression</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$ve</span><span class="p">))</span> <span class="c1">// affiche true;</span>
</span><span class='line'><span class="nv">$expression</span> <span class="o">=</span>  <span class="k">new</span> <span class="k">Not</span><span class="p">(</span><span class="k">new</span> <span class="k">False</span><span class="p">());</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$expression</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$ve</span><span class="p">))</span> <span class="c1">// affiche !false;</span>
</span><span class='line'><span class="nv">$expression</span> <span class="o">=</span>  <span class="k">new</span> <span class="nx">BinaryAnd</span><span class="p">(</span><span class="k">new</span> <span class="k">Not</span><span class="p">(</span><span class="k">new</span> <span class="k">False</span><span class="p">()),</span> <span class="k">new</span> <span class="nx">BinaryOr</span><span class="p">(</span><span class="k">new</span> <span class="k">True</span><span class="p">(),</span> <span class="k">new</span> <span class="k">False</span><span class="p">()));</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$expression</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$ve</span><span class="p">))</span> <span class="c1">//Affiche (!false&amp;&amp;(true||false));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Les comparaisons</h2>

<p>Nous pouvons rajouter le <code>==</code>, <code>!=</code>, <code>&gt;</code> , <code>&lt;</code> !</p>

<p>ajoutons de nouveau objet. les object prennent en entrée des expressions mais sortent des boléens.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">BinaryComparaison</span> <span class="k">extends</span> <span class="nx">Unary</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">Expression</span> <span class="nv">$left</span><span class="p">,</span> <span class="nx">Expression</span> <span class="nv">$right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span> <span class="o">=</span> <span class="nv">$left</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span> <span class="o">=</span> <span class="nv">$right</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getLeft</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getRight</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Equal</span> <span class="k">extends</span> <span class="nx">BinaryComparaison</span><span class="p">{}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">NotEqual</span> <span class="k">extends</span> <span class="nx">BinaryComparaison</span><span class="p">{}</span>
</span><span class='line'><span class="c1">//Greater Than Equal</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Gte</span> <span class="k">extends</span> <span class="nx">BinaryComparaison</span><span class="p">{}</span>
</span><span class='line'><span class="c1">// Lesser Than Equal</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Lte</span> <span class="k">extends</span> <span class="nx">BinaryComparaison</span><span class="p">{}</span>
</span><span class='line'><span class="c1">// Lesser Than</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Lt</span> <span class="k">extends</span> <span class="nx">BinaryComparaison</span><span class="p">{}</span>
</span><span class='line'><span class="c1">// Greater Than</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Gt</span> <span class="k">extends</span> <span class="nx">BinaryComparaison</span><span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour mon visiteur je vais utiliser mon visiteur d&#8217;expression du post précédent.</p>

<p>donc je modifie le constructeur.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$context</span><span class="p">,</span> <span class="nv">$ve</span><span class="p">){</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">context</span> <span class="o">=</span> <span class="nv">$context</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">ve</span> <span class="o">=</span> <span class="nv">$ve</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>je ne montre que le égal, mais vous avez un peu près l&#8217;idée pour le reste.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">visitEqual</span><span class="p">(</span><span class="nx">BoolExpression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getLeft</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">ve</span><span class="p">)</span>  <span class="o">==</span> <span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getRight</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">ve</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le visiteur booléen utilise un autre visiteur pour évaluer une expression.</p>

<p>Un exemple d&#8217;utilisation</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$memory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Memory</span><span class="p">();</span>
</span><span class='line'><span class="nv">$memory</span><span class="o">-&gt;</span><span class="na">write</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="c1">// une visiteur d&#39;expression</span>
</span><span class='line'><span class="nv">$ve</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VisitorEvaluation</span><span class="p">(</span><span class="nv">$memory</span><span class="p">);</span>
</span><span class='line'><span class="c1">// un visiteur pour les expressions booléennes</span>
</span><span class='line'><span class="nv">$vb</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VisitorBoolEvaluation</span><span class="p">(</span><span class="nv">$memory</span><span class="p">,</span> <span class="nv">$ve</span><span class="p">);</span>
</span><span class='line'><span class="c1">// une expression</span>
</span><span class='line'><span class="nv">$expression</span> <span class="o">=</span>  <span class="k">new</span> <span class="k">Not</span><span class="p">(</span><span class="k">new</span> <span class="nx">Equal</span><span class="p">(</span> <span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Addition</span><span class="p">(</span><span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Variable</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">))));</span>
</span><span class='line'><span class="nb">var_dump</span> <span class="p">(</span> <span class="nv">$expression</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$vb</span><span class="p">)</span> <span class="p">);</span><span class="c1">// affiche bool(true)</span>
</span></code></pre></td></tr></table></div></figure>


<p>si je reprend mon autre visiteur <code>VisitorToPhp</code> avec le <code>visitorBoolPrint</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$memory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Memory</span><span class="p">();</span>
</span><span class='line'><span class="nv">$memory</span><span class="o">-&gt;</span><span class="na">write</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="nv">$ve</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VisitorToPhp</span><span class="p">(</span><span class="nv">$memory</span><span class="p">);</span>
</span><span class='line'><span class="nv">$vb</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VisitorBoolPrint</span><span class="p">(</span><span class="nv">$memory</span><span class="p">,</span> <span class="nv">$ve</span><span class="p">);</span>
</span><span class='line'><span class="c1">// une expression</span>
</span><span class='line'><span class="nv">$expression</span> <span class="o">=</span>  <span class="k">new</span> <span class="k">Not</span><span class="p">(</span><span class="k">new</span> <span class="nx">Equal</span><span class="p">(</span> <span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Addition</span><span class="p">(</span><span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Variable</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">))));</span>
</span><span class='line'><span class="nb">var_dump</span> <span class="p">(</span> <span class="nv">$expression</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$vb</span><span class="p">)</span> <span class="p">);</span> <span class="c1">//affiche  &quot;!(10==(5+$i))&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Une conclusion.</h2>

<ul>
<li>Dans le premier post : On a vu le visiteur pour évaluer/afficher des expressions.</li>
<li>dans le second post : le visiteur pour les expressions booléennes et les comparaisons. Celui-ci utilise le premier visiteur pour faire les calculs.</li>
</ul>


<p>dans un prochain post, je vais montrer un troisième visiteur <code>visitorInstruction</code> pour évaluer des instructions d&#8217;un langage très simple. Mais cela est un peu long à écrire. Il y a un peu de théorie et des figures à faire.</p>

<p>Merci de m&#8217;avoir lu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interpréteur Et Visiteur Pattern]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/04/05/interpreteur-et-visiteur-pattern/"/>
    <updated>2015-04-05T18:16:10+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/04/05/interpreteur-et-visiteur-pattern</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Nous allons voir ensemble sur une série trois posts</p>

<ul>
<li>le design-pattern interpréteur</li>
<li>les limitations et une solution qui va introduire le visiteur pattern</li>
</ul>


<h1>Mise en place</h1>

<p>Nous allons créer un simple calculatrice.</p>

<p>Nous définissons l&#8217;interface suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Une expression arithmétique</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">interface</span> <span class="nx">Expression</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">interpret</span><span class="p">(</span><span class="nx">Context</span> <span class="nv">$context</span> <span class="o">=</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Evaluer des constantes</h2>

<p>Voici le code pour évaluer des constantes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">Class</span> <span class="nc">Constant</span> <span class="k">implements</span> <span class="nx">Expression</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">interpret</span><span class="p">(</span><span class="nx">Context</span> <span class="nv">$context</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$constante</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$constante</span><span class="o">-&gt;</span><span class="na">interpret</span><span class="p">();</span> <span class="c1">// affiche 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>jusqu&#8217;ici rien de complexe. Si j&#8217;interprète la constante que j&#8217;ai définie à 5, j&#8217;obtiens 5.</p>

<h2>Evaluer des additions</h2>

<p>voici le code pour interpréter les additions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">Class</span> <span class="nc">Addition</span> <span class="k">Implements</span> <span class="nx">Expression</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">Expression</span> <span class="nv">$left</span><span class="p">,</span> <span class="nx">Expression</span> <span class="nv">$right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span> <span class="o">=</span> <span class="nv">$right</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span> <span class="o">=</span> <span class="nv">$left</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">interpret</span><span class="p">(</span><span class="nx">Context</span> <span class="nv">$context</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span><span class="o">-&gt;</span><span class="na">interpret</span><span class="p">(</span><span class="nv">$context</span><span class="p">)</span> <span class="o">+</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span><span class="o">-&gt;</span><span class="na">interpret</span><span class="p">(</span><span class="nv">$context</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$addition</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Addition</span><span class="p">(</span><span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">6</span><span class="p">));</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$constante</span><span class="o">-&gt;</span><span class="na">interpret</span><span class="p">();</span> <span class="c1">// affiche 11</span>
</span></code></pre></td></tr></table></div></figure>


<p>On utilise la <strong>récursion</strong> pour interpréter la partie droite et gauche</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$addition</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Addition</span><span class="p">(</span><span class="k">new</span> <span class="nx">Addition</span><span class="p">(</span> <span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">6</span><span class="p">)),</span> <span class="k">new</span> <span class="nx">Constante</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$constante</span><span class="o">-&gt;</span><span class="na">interpret</span><span class="p">();</span> <span class="c1">// affiche 15</span>
</span></code></pre></td></tr></table></div></figure>


<p>Faire la multiplication, la soustraction, la division ne sont pas plus compliquées. Il suffit de changer le signe dans la fonction interpret()</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// muliplication </span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">interpret</span><span class="p">(</span><span class="nx">Context</span> <span class="nv">$context</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span><span class="o">-&gt;</span><span class="na">interpret</span><span class="p">(</span><span class="nv">$context</span><span class="p">)</span> <span class="o">*</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span><span class="o">-&gt;</span><span class="na">interpret</span><span class="p">(</span><span class="nv">$context</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ajouter d&#8217;autres méthodes</h2>

<p>Ajoutons la methode Abso qui renvoie la valeur absolue, la fonction min qui renvoie le minimum</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">Class</span> <span class="nc">Abso</span> <span class="k">Implements</span> <span class="nx">Expression</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">interpret</span><span class="p">(</span><span class="nx">Context</span> <span class="nv">$context</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">abs</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="o">-&gt;</span><span class="na">interpret</span><span class="p">(</span><span class="nv">$context</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">Class</span> <span class="nc">Minimum</span> <span class="k">Implements</span> <span class="nx">Expression</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">Expression</span> <span class="nv">$left</span><span class="p">,</span> <span class="nx">Expression</span> <span class="nv">$right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span> <span class="o">=</span> <span class="nv">$right</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span> <span class="o">=</span> <span class="nv">$left</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">interpret</span><span class="p">(</span><span class="nx">Context</span> <span class="nv">$context</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span><span class="o">-&gt;</span><span class="na">interpret</span><span class="p">(</span><span class="nv">$context</span><span class="p">),</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span><span class="o">-&gt;</span><span class="na">interpret</span><span class="p">(</span><span class="nv">$context</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>un exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$min</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Minimum</span><span class="p">(</span><span class="k">new</span> <span class="nx">Abso</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Addition</span><span class="p">(</span><span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">24</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">2</span><span class="p">)));</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$min</span><span class="o">-&gt;</span><span class="na">interpret</span><span class="p">();</span> <span class="c1">// renvoie 10</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tout n&#8217;est qu&#8217;une question de contexte</h2>

<p>Nous allons ajouter les variables.</p>

<p>Il nous faut d&#8217;abord implémenter le Context</p>

<p>Voici la définition</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Interface Context</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">interface</span> <span class="nx">Context</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// write a value in memory</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">write</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// get a value from the memory</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">read</span><span class="p">(</span><span class="nv">$name</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//return all the value</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getAll</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * A Memory</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Memory</span> <span class="k">implements</span> <span class="nx">Context</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$memory</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// write a value in memory</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">write</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">memory</span><span class="p">[</span><span class="nv">$name</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// get a value from the memory</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">read</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">memory</span><span class="p">[</span><span class="nv">$name</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getAll</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">memory</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il ne nous reste plus qu&#8217;à implémenter la variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Variable</span> <span class="k">implements</span> <span class="nx">Expression</span>
</span><span class='line'><span class="p">{</span>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">=</span> <span class="nv">$name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">interpret</span><span class="p">(</span><span class="nx">Context</span> <span class="nv">$context</span> <span class="o">=</span> <span class="k">null</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$context</span><span class="o">-&gt;</span><span class="na">read</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On comprend l&#8217;intérêt du context. Il nous permet de passer un pseudo-scope..</p>

<p>Un exemple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$memory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Memory</span><span class="p">();</span>
</span><span class='line'><span class="nv">$memory</span><span class="o">-&gt;</span><span class="na">write</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="nv">$expression</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Addition</span><span class="p">(</span><span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Variable</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">));</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$expression</span><span class="o">-&gt;</span><span class="na">interpret</span><span class="p">(</span><span class="nv">$memory</span><span class="p">);</span> <span class="c1">// 20</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$memory</span><span class="o">-&gt;</span><span class="na">write</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$expression</span><span class="o">-&gt;</span><span class="na">interpret</span><span class="p">(</span><span class="nv">$memory</span><span class="p">);</span> <span class="c1">// 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peux rajouter plein d&#8217;autre expression. L&#8217;avantage est qu&#8217;il suffit de rajouter une méthode <code>-&gt;interpret(..)</code> pour chaque objet.</p>

<h1>mais si on change le cahier des charges&hellip;</h1>

<p>Changeons le cahier des charges. Je souhaite transformer mon Expression en chaine de caractères. Je peux m&#8217;en sortir en surchargeant la méthode <code>__tostring</code></p>

<p>Par exemple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$expression</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Addition</span> <span class="p">(</span><span class="k">new</span> <span class="nx">Addition</span><span class="p">(</span><span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">4</span><span class="p">)),</span> <span class="k">new</span> <span class="nx">Constante</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span>
</span><span class='line'><span class="nv">$expression</span><span class="o">-&gt;</span><span class="na">__toString</span><span class="p">()</span> <span class="c1">// me donne ((3 + 4) + 4);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// pour la constante</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">function</span> <span class="nf">__toString</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// pour l&#39;addition</span>
</span><span class='line'>         <span class="k">public</span> <span class="k">function</span> <span class="nf">__toString</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// this-&gt;left-&gt;__toString()</span>
</span><span class='line'>                <span class="k">return</span> <span class="s1">&#39;(&#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span> <span class="o">.</span> <span class="s1">&#39; + &#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span> <span class="o">.</span><span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rechangeons le cahier des charges : je veux la traduction en Php</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$expression</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Addition</span> <span class="p">(</span><span class="k">new</span> <span class="nx">Addition</span><span class="p">(</span><span class="k">new</span> <span class="nx">Variable</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">4</span><span class="p">)),</span> <span class="k">new</span> <span class="nx">Constante</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span>
</span><span class='line'><span class="nv">$expression</span><span class="o">-&gt;</span><span class="na">__toPhp</span><span class="p">()</span> <span class="c1">// me donne (($i + 4) + 4);</span>
</span></code></pre></td></tr></table></div></figure>


<p>je suis un peu bloqué, je dois rajouter à chaque fois une méthode dans chaque Object. Je perd un peu de la simplicité du pattern..</p>

<h2>Visiteur Pattern à la rescousse !</h2>

<p>Je vais définir une méthode <code>accept(Visitor $visitor)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">interface</span> <span class="nx">Expression</span><span class="p">{</span>
</span><span class='line'>     <span class="k">public</span> <span class="k">function</span> <span class="nf">accept</span><span class="p">(</span><span class="nx">VisitorExpression</span> <span class="nv">$v</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>avec VisitorExpression définit ainsi</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">VisitorExpression</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">abstract</span> <span class="k">function</span> <span class="nf">visite</span><span class="p">(</span><span class="nx">Expression</span> <span class="nv">$expr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici comment se transforme l&#8217;addition, la constante et la variable (je ne mets pas tout..)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">Class</span> <span class="nc">Constant</span> <span class="k">implements</span> <span class="nx">Expression</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getValue</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">accept</span><span class="p">(</span><span class="nx">VisitorExpression</span> <span class="nv">$v</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$v</span><span class="o">-&gt;</span><span class="na">visit</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">Class</span> <span class="nc">Addition</span> <span class="k">Implements</span> <span class="nx">Expression</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">Expression</span> <span class="nv">$left</span><span class="p">,</span> <span class="nx">Expression</span> <span class="nv">$right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span> <span class="o">=</span> <span class="nv">$right</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span> <span class="o">=</span> <span class="nv">$left</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getLeft</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getRight</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">accept</span><span class="p">(</span><span class="nx">VisitorExpression</span> <span class="nv">$v</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$v</span><span class="o">-&gt;</span><span class="na">visit</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Variable</span> <span class="k">implements</span> <span class="nx">Expression</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">=</span> <span class="nv">$name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getName</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">accept</span><span class="p">(</span><span class="nx">VisitorExpression</span> <span class="nv">$v</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$v</span><span class="o">-&gt;</span><span class="na">visit</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici l&#8217;implémentation de notre Visiteur</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">VisitorEvaluation</span> <span class="k">extends</span> <span class="nx">VisitorExpression</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$context</span><span class="p">;</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$context</span><span class="p">){</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">context</span> <span class="o">=</span> <span class="nv">$context</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visit</span><span class="p">(</span><span class="nx">Expression</span> <span class="nv">$expr</span><span class="p">){</span>
</span><span class='line'>        <span class="nv">$class</span> <span class="o">=</span> <span class="s1">&#39;visit&#39;</span><span class="o">.</span><span class="nb">get_class</span><span class="p">(</span><span class="nv">$expr</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$class</span><span class="p">(</span><span class="nv">$expr</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitAddition</span><span class="p">(</span><span class="nx">Expression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getLeft</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>            <span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getRight</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitConstant</span><span class="p">(</span><span class="nx">Expression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitVariable</span><span class="p">(</span><span class="nx">Expression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">context</span><span class="o">-&gt;</span><span class="na">read</span><span class="p">(</span><span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>en pratique. On appelle la méthode <code>accept</code>. Celle-ci appelle la methode <code>visit($this)</code>. la méthode visit détermine la fonction à appeller.
Si c&#8217;est une constante alors <code>visistConstant()</code> celle-ci résout la valeur. pour une addition c&#8217;est un plus compliqué on ré-appelle récursivement <code>accept</code> sur chaque partie de l&#8217;addition.</p>

<p>Voici comment s&#8217;en servir</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// j&#39;ai besoin d&#39;une mémoire</span>
</span><span class='line'><span class="nv">$memory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Memory</span><span class="p">();</span>
</span><span class='line'><span class="nv">$memory</span><span class="o">-&gt;</span><span class="na">write</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="c1">// j&#39;ai besoin d&#39;un visiteur</span>
</span><span class='line'><span class="nv">$ve</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VisitorEvaluation</span><span class="p">(</span><span class="nv">$memory</span><span class="p">);</span>
</span><span class='line'><span class="c1">// une expression</span>
</span><span class='line'><span class="nv">$expression</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Addition</span><span class="p">(</span><span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Variable</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">));</span>
</span><span class='line'><span class="c1">// appelle le visiteur</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$expression</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$ve</span><span class="p">);</span> <span class="c1">// 20</span>
</span></code></pre></td></tr></table></div></figure>


<p>On se rend compte qu&#8217;il n&#8217;y a plus de logique dans mes objet. Tout est sous-traité dans le visiteur.</p>

<p>L&#8217;avantage de cette méthode est qu&#8217;il est très simple de changer le visiteur sans changer la logique.</p>

<p>Par exemple le visiteur qui convertit en php</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">VisitorToPhp</span> <span class="k">extends</span> <span class="nx">VisitorEvaluation</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitAddition</span><span class="p">(</span><span class="nx">Expression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;(&#39;</span> <span class="o">.</span>  <span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getLeft</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39;+&#39;</span>
</span><span class='line'>            <span class="o">.</span> <span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getRight</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">)</span><span class="o">.</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitVariable</span><span class="p">(</span><span class="nx">Expression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="s1">&#39;$&#39;</span><span class="o">.</span> <span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">convertMemory</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">foreach</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">context</span><span class="o">-&gt;</span><span class="na">getAll</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$output</span> <span class="o">.=</span> <span class="s1">&#39;$&#39;</span><span class="o">.</span><span class="nv">$key</span> <span class="o">.</span> <span class="s1">&#39; = &#39;</span> <span class="o">.</span> <span class="nv">$value</span> <span class="o">.</span> <span class="s1">&#39;;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$output</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getOutput</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;echo&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">translate</span><span class="p">(</span><span class="nx">Expression</span> <span class="nv">$exp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">convertMemory</span><span class="p">()</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getOutput</span><span class="p">()</span> <span class="o">.</span> <span class="nv">$exp</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et celui qui convertit en Javascript !</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">VisitorToJs</span> <span class="k">extends</span> <span class="nx">VisitorToPhp</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">visitVariable</span><span class="p">(</span><span class="nx">Expression</span> <span class="nv">$expr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="nv">$expr</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">convertMemory</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">foreach</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">context</span><span class="o">-&gt;</span><span class="na">getAll</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$output</span> <span class="o">.=</span> <span class="s1">&#39;var &#39;</span><span class="o">.</span> <span class="nv">$key</span> <span class="o">.</span> <span class="s1">&#39; = &#39;</span> <span class="o">.</span> <span class="nv">$value</span> <span class="o">.</span> <span class="s1">&#39;;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$output</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getOutput</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;console.log&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$memory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Memory</span><span class="p">();</span>
</span><span class='line'><span class="nv">$memory</span><span class="o">-&gt;</span><span class="na">write</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="nv">$ve</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VisitorEvaluation</span><span class="p">(</span><span class="nv">$memory</span><span class="p">);</span>
</span><span class='line'><span class="c1">// une expression</span>
</span><span class='line'><span class="nv">$expression</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Addition</span><span class="p">(</span><span class="k">new</span> <span class="nx">Constant</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Variable</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">));</span>
</span><span class='line'><span class="c1">// appelle le visiteur evaluation simple</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$expression</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$ve</span><span class="p">);</span> <span class="c1">// 20</span>
</span><span class='line'><span class="c1">// evaluation conversion php </span>
</span><span class='line'><span class="nv">$php</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VisitorToPhp</span><span class="p">(</span><span class="nv">$memory</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$expression</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$php</span><span class="p">);</span> <span class="c1">// (10 + $i)</span>
</span><span class='line'><span class="nv">$js</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VisitorToJs</span><span class="p">(</span><span class="nv">$memory</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$expression</span><span class="o">-&gt;</span><span class="na">accept</span><span class="p">(</span><span class="nv">$js</span><span class="p">);</span> <span class="c1">// (10 + i)</span>
</span><span class='line'><span class="c1">// j&#39;ai rajouté une méthode translate qui est un raccourci</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$php</span><span class="o">-&gt;</span><span class="na">translate</span><span class="p">(</span><span class="nv">$expression</span><span class="p">);</span> <span class="c1">// $i = 10;echo(10+$i)</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$js</span><span class="o">-&gt;</span><span class="na">translate</span><span class="p">(</span><span class="nv">$expression</span><span class="p">);</span> <span class="c1">// var i = 10;console.log(10+i)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Les limitations du visiteur pattern</p>

<ul>
<li>toute la logique est sur le visiteur. s&#8217;il y a un beaucoup de type d&#8217;expression (dans notre cas Addition, Constant, Variable, Abso, Multiplication ..) c&#8217;est autant de ligne à rajouter dans celui-ci.</li>
<li>rajouter un <em>type</em>, oblige à le ré-implementer partout.</li>
</ul>


<p>Les avantages du visiteur pattern.
On peut parfaitement imaginer un type document, et lui ajouter un visiteur <code>toJson</code>, <code>toPdf</code>, <code>toEbook</code>, <code>toHtml</code>. sans jamais changer le modèle.</p>

<p>Nous continuerons avec le visiteur pattern dans un prochain post. Nous ajouterons un visiteur pour les expressions booléenes. puis nous ajouterons un visiteur pour des instructions. nous allons créer un mini-langage..</p>

<p>Ce projet vient des notes que j&#8217;avais prise quand j&#8217;étais au CNAM sur le cours de Design-Pattern en Java. J&#8217;avais adoré!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comprendre La Ligne De Commande De Vi]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/03/30/comprendre-la-ligne-de-commande-de-vi/"/>
    <updated>2015-03-30T22:36:21+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/03/30/comprendre-la-ligne-de-commande-de-vi</id>
    <content type="html"><![CDATA[<p>Sous Vi quand on appuie sur <code>:</code> on a la ligne de commande</p>

<p>Tout le monde connaît</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:wq // quitter et enregistrer
</span><span class='line'>:q! // quitter sans enregistrer et sans confirmation !</span></code></pre></td></tr></table></div></figure>


<p>Mais en pratique il existe plein de commandes.</p>

<p>Par exemple :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:1,10d </span></code></pre></td></tr></table></div></figure>


<p>efface la ligne 1 à 10 (<code>d</code> = delete)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:1,10m 10</span></code></pre></td></tr></table></div></figure>


<p>bouge les lignes de 1 à 10 de 10 ligne (ici <code>m</code> = move)</p>

<p>le &ldquo;pattern&rdquo; est toujours le même</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>: (début, fin)action</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th> mouvements </th>
<th style="text-align:center;"> traduction</th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>1,10</code>      </td>
<td style="text-align:center;"> entre la ligne 1 et  la ligne 1 à 10 </td>
</tr>
<tr>
<td> <code>.,10</code>      </td>
<td style="text-align:center;"> <code>.</code> signifie la ligne actuelle      </td>
</tr>
<tr>
<td> <code>10,$</code> </td>
<td style="text-align:center;"> <code>$</code> signifie la dernière ligne</td>
</tr>
<tr>
<td> <code>/mot1/,/mot2/</code> </td>
<td style="text-align:center;"> entre le <code>mot1</code> et le <code>mot2</code></td>
</tr>
<tr>
<td> <code>., +5</code> </td>
<td style="text-align:center;"> entre la ligne actuelle (<code>.</code>) et les 5 lignes suivantes</td>
</tr>
<tr>
<td> <code>%</code> </td>
<td style="text-align:center;"> tout le fichier</td>
</tr>
</tbody>
</table>


<p>quelques actions</p>

<table>
<thead>
<tr>
<th>racourcci</th>
<th> traduction</th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>d</code> </td>
<td> comme <strong>d</strong>elete</td>
</tr>
<tr>
<td> <code>j</code> </td>
<td> comme <strong>j</strong>oin</td>
</tr>
<tr>
<td><code>sort</code></td>
<td> trier (sort) les lignes</td>
</tr>
<tr>
<td><code>w</code></td>
<td> pour enregistrer</td>
</tr>
<tr>
<td><code>y</code></td>
<td> comme yank</td>
</tr>
</tbody>
</table>


<h2>le plus connu substitute</h2>

<p>vous avez souvent vu cette syntaxe dans les commits <code>s/mot1/mot2</code></p>

<p>ici <code>s</code> signifie <strong>substitute</strong>.</p>

<p>par exemple</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:%s/mot1/mot2/g</span></code></pre></td></tr></table></div></figure>


<p>va remplacer le mot 1 par le mot 2
le <code>g</code> active le flag <code>global</code> et remplace si le mot apparait deux fois.</p>

<p>par exemple</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mot1 = $mot1 + 1;
</span><span class='line'>
</span><span class='line'>// s/mot1/mot2 
</span><span class='line'>$mot2 = $mot1 + 1 ; // on ne change que le premier mot
</span><span class='line'>
</span><span class='line'>// s/mot1/mot2/g
</span><span class='line'>$mot2 = $mot2 + 1 // tout les mots</span></code></pre></td></tr></table></div></figure>


<h2>Encore un peu plus loin</h2>

<p>la commande suivante permet de grouper les mots</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:g/mot/ #donne toute les lignes contenant mot</span></code></pre></td></tr></table></div></figure>


<p><code>g</code> ici signifie <strong>g</strong>roup</p>

<p>On peut chaîner les differentes actions
par exemple</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:g/pattern/s/mot/mot2/g # toutes les lignes qui contiennent le pattern, remplace mot1 par mot2.
</span><span class='line'>
</span><span class='line'>:g/pattern/d # efface toute les lignes qui contiennent le pattern suivant
</span><span class='line'>
</span><span class='line'>:g/pattern/p # 'print toutes lignes qui contienne le pattern suivant</span></code></pre></td></tr></table></div></figure>


<p>la derniere ligne est la plus connue. pattern est le plus souvent une <em>regex</em> donc la traduction <code>g/regex/p</code> ->donne la commande <code>grep</code> sous linux.</p>

<p>en faite, toutes les commandes que j&#8217;ai données proviennent de <code>sed</code>. mais ce n&#8217;est pas un hasard. <code>vi</code> est l&#8217;abbreviation de <strong>V</strong>isual <strong>I</strong>nteraction of Sed. un <em>sed interactif</em>.</p>

<p>J&#8217;espère que cela vous fera apprecier <code>sed</code> comme <code>vi</code>. on peut rester très longtemps sur toutes les commandes.</p>

<p>j&#8217;avais expliqué dans un précédent articles les mouvements en mode normal sont</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Action + Nombre de fois + Mouvement
</span><span class='line'>
</span><span class='line'>Exemple:
</span><span class='line'>d5w # *d*elete *5* word
</span><span class='line'>yG  # copier jusqu'à la fin du fichier (G)
</span><span class='line'>=4j # indenter (=) 4 lignes vers le bas 
</span><span class='line'>di( # efface entre les parenthèses *d*elete *i*nside ( 
</span><span class='line'>
</span><span class='line'>Dans le mode commande
</span><span class='line'>: début, fin action
</span><span class='line'>
</span><span class='line'>:%d # efface tout le fichier
</span><span class='line'>:1,10y # copie dans le presse-papier la ligne 1 à 10
</span><span class='line'>:%s/include_one/require_once/gc
</span></code></pre></td></tr></table></div></figure>


<p>Il me reste à vous parler des buffers et des macros. et on aura presque fait le tour de la magie de <code>vi</code>.</p>

<h2>une commande de la vrai vie</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:%s/\s\+$//</span></code></pre></td></tr></table></div></figure>


<p>sur tout le fichier (<code>%</code>) remplace(<code>s</code>) un ou plus(<code>+</code>) espaces (<code>\s</code>) à la fin de la ligne (<code>$</code>) par du vide. cette commande supprime les espaces vides à la fin des lignes..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FizzBuzz Sans Boucle If]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/03/22/fizzbuzz-sans-boucle-if/"/>
    <updated>2015-03-22T23:19:46+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/03/22/fizzbuzz-sans-boucle-if</id>
    <content type="html"><![CDATA[<p>Bon, j&#8217;ai passé deux-trois entretiens ou on m&#8217;a demandé d&#8217;implémenter &ldquo;fizzbuz&rdquo;</p>

<p>Les règles sont simples.</p>

<ul>
<li>Écrire un programme qui écrit les nombres de 1 à 100.</li>
<li>Si le chiffre est divisible par 3 afficher seulement &ldquo;fizz&rdquo;</li>
<li>Si le chiffre est divisible par 5 afficher seulement &ldquo;buzz&rdquo;</li>
<li>Si divisible par 3 et 5 afficher &ldquo;fizzbuzz&rdquo;</li>
<li>sinon afficher le chiffre tout seul</li>
</ul>


<p>Il y a plein de solutions possibles</p>

<h2>la plus littérale</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">%</span> <span class="mi">15</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s1">&#39;fizzbuzz&#39;</span><span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s1">&#39;buzz&#39;</span><span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s1">&#39;fizz&#39;</span><span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$i</span> <span class="o">.</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>la version de wikipedia</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nv">$i</span><span class="o">%</span><span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$output</span> <span class="o">.=</span> <span class="s1">&#39;fizz&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nv">$i</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$output</span> <span class="o">.=</span> <span class="s1">&#39;buzz&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$output</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$output</span> <span class="o">.=</span> <span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$output</span><span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ma version que j&#8217;avais programmé</h2>

<p>Le <code>continue</code> n&#8217;est pas souvent utilisé. Mais je trouve qu&#8217;il remplit son rôle ici.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">%</span> <span class="mi">15</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s1">&#39;fizzbuzz&#39;</span><span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s1">&#39;buzz&#39;</span><span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s1">&#39;fizz&#39;</span><span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$i</span> <span class="o">.</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Sans boucle if</h2>

<p>Il existe une version qui n&#8217;utilise aucune boucle if.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$resp</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;fizzbuzz&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;fizz&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;buzz&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;fizz&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;fizz&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;fizz&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="k">false</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">$output</span> <span class="o">=</span> <span class="nv">$resp</span><span class="p">[</span><span class="nv">$i</span><span class="o">%</span><span class="mi">15</span><span class="p">])</span> <span class="o">||</span> <span class="p">(</span><span class="nv">$output</span> <span class="o">=</span> <span class="nv">$i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$output</span><span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>En php on ne peux pas faire la commande suivante qui correcte en javascript;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">value</span> <span class="o">||</span> <span class="nx">defautvalue</span> <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$output</span> <span class="o">=</span> <span class="nx">$resp</span><span class="p">[</span><span class="nx">i</span><span class="o">%</span><span class="mi">15</span><span class="p">]</span> <span class="o">||</span> <span class="nx">$i</span><span class="c1">// =&gt; $output = true</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est pour cela que l&#8217;on utilise cette ligne un peu bancale.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="nx">$output</span> <span class="o">=</span> <span class="nx">$resp</span><span class="p">[</span><span class="nx">$i</span><span class="o">%</span><span class="mi">15</span><span class="p">])</span> <span class="o">||</span> <span class="p">(</span><span class="nx">$output</span> <span class="o">=</span> <span class="nx">$i</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il n&#8217;y a pas de boucle if. Si un jour on vous demande d&#8217;implémenter FizzBuzzb en essayer cette version.</p>
]]></content>
  </entry>
  
</feed>
