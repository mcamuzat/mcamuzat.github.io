<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Journal d'un panda qui code]]></title>
  <link href="http://mcamuzat.github.io/atom.xml" rel="self"/>
  <link href="http://mcamuzat.github.io/"/>
  <updated>2016-05-17T17:48:54+02:00</updated>
  <id>http://mcamuzat.github.io/</id>
  <author>
    <name><![CDATA[mcamuzat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Proxmox 4 partie 3 : Connection via ssh]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/05/17/proxmox-partie-3-connection-via-ssh/"/>
    <updated>2016-05-17T14:54:12+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/05/17/proxmox-partie-3-connection-via-ssh</id>
    <content type="html"><![CDATA[<p>Nous avons vus dans les deux anciens post:</p>

<ul>
<li><a href="http://mcamuzat.github.io/blog/2016/02/28/installation-dun-proxmox-4-dot-0/">comment régler le proxmox et le réseau</a></li>
<li><a href="http://mcamuzat.github.io/blog/2016/03/08/installation-dun-proxmox-4-dot-0-partie-2-nginx/">comment rediriger le trafic avec nginx</a></li>
</ul>


<p>Nous allons voir comment simplifier l&#8217;accès en mettant un accès SSH sur chaque instance. Pour se connecter à l&#8217;instance 101. La commande sera</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh deploy@&lt;url/ip du proxmox&gt; -p50101</span></code></pre></td></tr></table></div></figure>


<p>Enfin je donne la version complète du fichier <code>ipstable_start.sh</code></p>

<!--more-->


<h2>Introduction</h2>

<p>Pour se connecter sur un instance pour le moment on est obligé de passé par l&#8217;interface graphique ou par la ligne de commande. La ligne de commande n&#8217;est pas évidente( pour quitter <code>Ctrl A</code> + <code>q</code>) et pas pratique. On aimerait pourvoir se connecter via l&#8217;extérieur pour mettre en place du déploiement automatique genre <a href="http://capistranorb.com/">capistrano</a></p>

<h3>Par rapport au PROXMOX 3.</h3>

<p>Avec OpenVZ par défaut le ssh est ouvert pour l&#8217;utilisateur root. <em>Ce n&#8217;est pas le cas sur LXC</em>.
Deux possibilités:</p>

<ul>
<li>Ajouter un utilisateur deploy : <code>sudo adduser deploy</code> sur l&#8217;instance, c&#8217;est d&#8217;ailleurs en un sens inévitable si vous travaillez en équipe.</li>
<li>Ou autoriser l&#8217;utilisateur root à se connecter à l&#8217;extérieur. Il faut modifier le fichier <code>/etc/ssh/sshd_config</code> sur l&#8217;instance et modifier la ligne <code>PermitRootLogin without-password</code> à <code>PermitRootLogin yes</code></li>
</ul>


<h3>Redirection via iptable</h3>

<p>voici la syntaxe pour la machine <code>vm101</code>.
On redirige le port 50101 du proxmox vers la vm101 port 22</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 50101 -j DNAT --to-destination 192.168.15.101:22</span></code></pre></td></tr></table></div></figure>


<p>On peut faire une boucle for pour créer par défaut. <code>vm101-&gt;50101, vm102-&gt;50102, ..</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for i in {1..200}
</span><span class='line'>do
</span><span class='line'>   let "inport=50+$i"
</span><span class='line'>   iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport $inport -j DNAT --to-destination 192.168.15.$i:22
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<p>Il y aussi des règles sur mesure, Dans mon fichier vous verrez l&#8217;exemple de Node+Socket.io ou je redirige le port 8000 du proxmox vers l&#8217;instance 102</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 8000 -j DNAT --to-destination 192.168.15.102:8000</span></code></pre></td></tr></table></div></figure>


<p>Enfin le fichier final.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#vider table NAT</span>
</span><span class='line'>iptables -F
</span><span class='line'>iptables -X
</span><span class='line'>iptables -t nat -F
</span><span class='line'>iptables -t nat -X
</span><span class='line'>iptables -t mangle -F
</span><span class='line'>iptables -t mangle -X
</span><span class='line'>iptables -P INPUT ACCEPT
</span><span class='line'>iptables -P FORWARD ACCEPT
</span><span class='line'>iptables -P OUTPUT ACCEPT
</span><span class='line'>
</span><span class='line'><span class="c"># On laisse sortir les vm</span>
</span><span class='line'>iptables -t nat -A POSTROUTING -s 192.168.15.0/24 -o vmbr0 -j MASQUERADE
</span><span class='line'>
</span><span class='line'><span class="c"># Je redirige tout le trafic web vers instance nginx</span>
</span><span class='line'>
</span><span class='line'>iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport <span class="m">80</span> -j DNAT --to-destination 192.168.15.&lt;instance du nginx&gt;:80
</span><span class='line'>
</span><span class='line'><span class="c"># Les instances sont joignable via la commande suivante</span>
</span><span class='line'><span class="c"># ssh &lt;user_instance&gt;@&lt;ip ou url du proxmox&gt; -p 50+&lt;instance&gt;</span>
</span><span class='line'><span class="c"># par exemple:</span>
</span><span class='line'><span class="c"># ssh deploy@monadress.com -p 50102</span>
</span><span class='line'><span class="c"># se connecte sur le vm102 avec l&#39;utilisateur deploy (capistrano)</span>
</span><span class='line'><span class="k">for</span> i in <span class="o">{</span>1..200<span class="o">}</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>   <span class="nb">let</span> <span class="s2">&quot;inport=50+$i&quot;</span>
</span><span class='line'>   iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport <span class="nv">$inport</span> -j DNAT --to-destination 192.168.15.<span class="nv">$i</span>:22
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c"># la vm 102 est un node.js+socket.io</span>
</span><span class='line'>iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport <span class="m">8000</span> -j DNAT --to-destination 192.168.15.102:8000
</span></code></pre></td></tr></table></div></figure>


<h2>Un exemple pour capistrano</h2>

<p>un exemple pour la vm101 (si l&#8217;utilisateur deploy existe..)</p>

<p>Un morceau de <code>deploy.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ssh_options</span><span class="o">[</span><span class="ss">:port</span><span class="o">]</span> <span class="o">=</span> <span class="mi">50101</span>
</span><span class='line'><span class="c1"># path the directory</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span>   <span class="s2">&quot;/var/www/le_projet/&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="s1">&#39;master&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:domain</span><span class="p">,</span>      <span class="s2">&quot;&lt;url du proxmox&gt;&quot;</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:web</span><span class="p">,</span>        <span class="n">domain</span>                         <span class="c1"># Your HTTP server, Apache/etc</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:app</span><span class="p">,</span>        <span class="n">domain</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span>       <span class="c1"># This may be the same as your `Web` server</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:db</span><span class="p">,</span>         <span class="n">domain</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span>       <span class="c1"># This may be the same as your `Web` server</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Use SSH agent forwarding to deploy via Capistrano</span>
</span><span class='line'><span class="n">ssh_options</span><span class="o">[</span><span class="ss">:forward_agent</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Set user </span>
</span><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s2">&quot;deploy&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:group</span><span class="p">,</span> <span class="s2">&quot;deploy&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alors la commande</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cap</span> <span class="n">deploy</span>
</span></code></pre></td></tr></table></div></figure>


<p>
se connecte tout seul sur la Vm</p>

<p>La <a href="http://capistranorb.com/documentation/getting-started/authentication-and-authorisation/">documentation</a> de capistrano est bien faite.
Pour Symfony il existe <a href="https://github.com/everzet/capifony">capyfony</a> mais c&#8217;est depreacted depuis..</p>

<h1>Conclusion</h1>

<p>J&#8217;ai eu beaucoup de mal à trouver des documentations à jours pour le PROXMOX 4. Cette série d&#8217;article contient le résultat de mes recherches. (Je remercie aussi mes collègues pour l&#8217;aide).</p>

<p>Il y a plein de liens qui expliquent beaucoup mieux que moi. N&#8217;hésitez pas à commencer par ceux-là et revenez sur mes posts pour adapter de proxmox3 à proxmox4.
Je pense surtout à</p>

<ul>
<li><a href="http://myatus.com/p/poor-mans-proxmox-cluster/">proxmox cluster</a></li>
<li><a href="http://blog.ganbaranai.fr/2013/08/il-etait-une-fois-proxmox-derriere-une-ip-unique/">Il était une fois, Proxmox derrière une IP unique …</a> Humblement je n&#8217;ai pas tout compris.</li>
</ul>


<p>Merci de m&#8217;avoir lu.</p>

<ul>
<li>Partie 1 : <a href="http://mcamuzat.github.io/blog/2016/02/28/installation-dun-proxmox-4-dot-0/">Proxmox : mise en place</a></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2016/03/08/installation-dun-proxmox-4-dot-0-partie-2-nginx/">Proxmox : Nginx</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2016/05/17/proxmox-partie-3-connection-via-ssh/">Proxmox : Réglage ssh</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM : formater le JSON]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/05/08/vim-formater-le-json/"/>
    <updated>2016-05-08T17:51:22+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/05/08/vim-formater-le-json</id>
    <content type="html"><![CDATA[<p>Aujourd&#8217;hui nous allons voir comment formater un json un peu crade pour le transformer en quelques choses de plus sympathique.</p>

<p>Soit le JsonSchema suivant</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="s2">&quot;$schema&quot;</span><span class="o">:</span><span class="s2">&quot;http://json-schema.org/draft-04/schema#&quot;</span><span class="p">,</span><span class="s2">&quot;type&quot;</span><span class="o">:</span><span class="s2">&quot;object&quot;</span><span class="p">,</span><span class="s2">&quot;properties&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;address&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">:</span><span class="s2">&quot;object&quot;</span><span class="p">,</span><span class="s2">&quot;properties&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;streetAddress&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">:</span><span class="s2">&quot;string&quot;</span><span class="p">},</span><span class="s2">&quot;city&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">:</span><span class="s2">&quot;string&quot;</span><span class="p">}},</span><span class="s2">&quot;required&quot;</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;streetAddress&quot;</span><span class="p">,</span><span class="s2">&quot;city&quot;</span><span class="p">]},</span><span class="s2">&quot;phoneNumber&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">:</span><span class="s2">&quot;array&quot;</span><span class="p">,</span><span class="s2">&quot;items&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">:</span><span class="s2">&quot;object&quot;</span><span class="p">,</span><span class="s2">&quot;properties&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;location&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">:</span><span class="s2">&quot;string&quot;</span><span class="p">},</span><span class="s2">&quot;code&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;type&quot;</span><span class="o">:</span><span class="s2">&quot;integer&quot;</span><span class="p">}},</span><span class="s2">&quot;required&quot;</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;location&quot;</span><span class="p">,</span><span class="s2">&quot;code&quot;</span><span class="p">]}}},</span><span class="s2">&quot;required&quot;</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;address&quot;</span><span class="p">,</span><span class="s2">&quot;phoneNumber&quot;</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pas de retour à la ligne.</p>

<p>Grâce à la commande suivante.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">:%!</span><span class="nx">python</span> <span class="o">-</span><span class="nx">m</span> <span class="nx">json</span><span class="p">.</span><span class="nx">tool</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le fichier devient</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;$schema&quot;</span><span class="o">:</span> <span class="s2">&quot;http://json-schema.org/draft-04/schema#&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;properties&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;address&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;properties&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s2">&quot;city&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="s2">&quot;streetAddress&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s2">&quot;required&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="s2">&quot;streetAddress&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;city&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;object&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;phoneNumber&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;items&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s2">&quot;properties&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;code&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                        <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;integer&quot;</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="s2">&quot;location&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                        <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="s2">&quot;required&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                    <span class="s2">&quot;location&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s2">&quot;code&quot;</span>
</span><span class='line'>                <span class="p">],</span>
</span><span class='line'>                <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;object&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;array&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;required&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;address&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;phoneNumber&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;object&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On utilise en pratique python pour réécrire le code.</p>

<p>Vous pouvez essayer</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">python</span> <span class="o">-</span><span class="nx">m</span> <span class="nx">json</span><span class="p">.</span><span class="nx">tool</span> <span class="o">&lt;</span><span class="nx">le</span> <span class="nx">fichier</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">json</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce qui est pratique est que python est installé par défaut sous Linux. Il existe aussi <a href="https://stedolan.github.io/jq/">jq</a>, mais il n&#8217;est pas par défaut.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jeu de la vie]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/04/03/jeu-de-la-vie/"/>
    <updated>2016-04-03T21:29:42+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/04/03/jeu-de-la-vie</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Je suis en train de suivre la formation sur <a href="https://www.freecodecamp.com">FreeCodeCamp</a>. Un des exercices et de refaire &ldquo;le jeu de la vie&rdquo; en <a href="https://facebook.github.io/react/">React</a>.</p>

<p>Le jeu de la vie a été crée par <a href="https://fr.wikipedia.org/wiki/John_Horton_Conway">Conway</a>.</p>

<p>Les règles sont très simples.</p>

<ul>
<li>Soit un Damier avec des cellules.</li>
<li>Si une cellule à seulement un voisin autour d&#8217;elle, elle meure de à cause de l&#8217;isolement</li>
<li>Si une cellule a plus de 3 voisins elle meure de surpopulation.</li>
<li>Si il y a exactement trois voisins et que la case est vide, une cellule se crée.</li>
</ul>


<p>Une animation parle mieux..</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/C2vgICfQawE" frameborder="0" allowfullscreen></iframe>




<!--more-->


<p>Vidéo du créateur</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/E8kUJL04ELA" frameborder="0" allowfullscreen></iframe>


<p>Voici le code que j&#8217;ai implémenté.</p>

<p data-height="750" data-theme-id="0" data-slug-hash="pywGaG" data-default-tab="result" data-user="mcamuzat" class="codepen">See the Pen <a href="http://codepen.io/mcamuzat/pen/pywGaG/">Game of life React FreecodeCamp</a> by mcamuzat (<a href="http://codepen.io/mcamuzat">@mcamuzat</a>) on <a href="http://codepen.io">CodePen</a>.</p>


<script async src="//s.codepen.io/assets/embed/ei.js"></script>


<h1>En conclusion</h1>

<p>Au moment ou j&#8217;écris ces lignes, un nouveau type de <a href="http://www.conwaylife.com/wiki/Copperhead">vaisseau</a>  a été découvert <a href="https://niginsblog.wordpress.com/2016/03/07/new-spaceship-speed-in-conways-game-of-life/">voir aussi..</a>. Il y a toujours des amateurs..</p>

<p> Sous google une recherche sur <a href="https://www.google.com/search?q=conway%27s+game+of+life">conway&rsquo;s game of life</a> donne un easter-egg.</p>

<ul>
<li><a href="https://fr.wikipedia.org/wiki/Jeu_de_la_vie">wikipedia</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nano : Activer la coloration syntaxique]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/03/27/nano-activer-la-coloration-syntaxique/"/>
    <updated>2016-03-27T21:41:45+02:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/03/27/nano-activer-la-coloration-syntaxique</id>
    <content type="html"><![CDATA[<p>Sous linux, on utilise le plus souvent <code>vim</code> ou <code>nano</code>. Je suis un grand fan de de <code>vim</code> mais aujourd&#8217;hui je vais parler de <code>nano</code>. Par défaut il n&#8217;y a pas de coloration syntaxique et pas de couleurs tout cours. Nous allons activer celle-ci</p>

<p>Et voici le résultat sur un fichier php.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/nanocolors.png" width="600" height="404" title="la coloration syntaxique sous nano" alt="la coloration syntaxique"></p>

<!--more-->


<p>Il faut créer un fichier <code>.nanorc</code> dans votre home. Et rajouter la ligne suivante.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>include /usr/share/nano/sh.nanorc</span></code></pre></td></tr></table></div></figure>


<p>Tous les fichiers se situent <code>/usr/share/nano</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>asm.nanorc     fortran.nanorc   man.nanorc     ocaml.nanorc   ruby.nanorc
</span><span class='line'>awk.nanorc     gentoo.nanorc    mgp.nanorc     patch.nanorc   sh.nanorc
</span><span class='line'>cmake.nanorc   groff.nanorc     mutt.nanorc    perl.nanorc    tcl.nanorc
</span><span class='line'>c.nanorc       html.nanorc      nano-menu.xpm  php.nanorc     tex.nanorc
</span><span class='line'>css.nanorc     java.nanorc      nanorc.nanorc  pov.nanorc     xml.nanorc
</span><span class='line'>debian.nanorc  makefile.nanorc  objc.nanorc    python.nanorc</span></code></pre></td></tr></table></div></figure>


<p>Il suffit d&#8217;ajouter la ligne avec le langage que voulez.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>include /usr/share/nano/&lt;le language&gt;.nanorc</span></code></pre></td></tr></table></div></figure>


<p>Mais il y a encore mieux !</p>

<p>Un <a href="https://github.com/serialhex/nano-highlight">dépot</a> avec plein de fichier <code>.nanorc</code>.</p>

<p>Pour installer</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/serialhex/nano-highlight.git ~/.nano</span></code></pre></td></tr></table></div></figure>


<p>Il suffit de rajouter dans son <code>.nanorc</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>include "~/.nano/php.nanorc"</span></code></pre></td></tr></table></div></figure>


<p>Il y a aussi ce <a href="https://github.com/scopatz/nanorc">dépôt</a>.</p>

<h2>En conclusion</h2>

<p>Nano est un outil très chouette. C&#8217;est souvent l&#8217;éditeur par défault dans linux.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les plugins sous VIM : Tabular]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/03/20/les-plugins-sous-vim-tabular/"/>
    <updated>2016-03-20T21:49:10+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/03/20/les-plugins-sous-vim-tabular</id>
    <content type="html"><![CDATA[<p>Nous allons voir ensemble un Plugin sous vim <a href="https://github.com/godlygeek/tabular">Tabular</a>.</p>

<p>Il permet d&#8217;aligner les lignes de codes
par exemple :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|un tableau | une autre colonne|
</span><span class='line'>| ha | Ho|
</span><span class='line'>| bonjour | hello|
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>Si je sélectionne le texte et que j&#8217;appuie sur <code>:</code> et que je tape <code>:Tabularize /|</code></p>

<p>Mon tableau devient</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>| un tableau | une autre colonne |
</span><span class='line'>| un         | deux              |
</span><span class='line'>| bonjour    | hello             |</span></code></pre></td></tr></table></div></figure>


<p>Cela marche avec n&#8217;importe quelle clés</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var var1 = "hello";
</span><span class='line'>var une_variable_tres_longue =  "atchoum";</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;appuie <code>:Tabularize /=</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var var1                     = "hello";
</span><span class='line'>var une_variable_tres_longue = "atchoum";</span></code></pre></td></tr></table></div></figure>


<p>la syntaxe est <code>:Tabularize /&lt;le ou les caractères que vous voulez indenter&gt;</code>
Pour les tableaux en php</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span>
</span><span class='line'> <span class="s2">&quot;a&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;salut&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;bonjour&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Résultats : <code>:Tabularize /=&gt;</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span>
</span><span class='line'> <span class="s2">&quot;a&quot;</span>     <span class="o">=&gt;</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;salut&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;bonjour&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je m&#8217;en sers surtout pour indenter les tableaux dans les features dans <a href="http://docs.behat.org/en/v3.0/">Behat</a>.</p>

<h2>installation</h2>

<p>Si vous avez installé <a href="https://github.com/junegunn/vim-plug">vim-plug</a> il suffit de rajouter la ligne suivante.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Plug</span> <span class="s1">&#39;godlygeek/tabular&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Des liens</h2>

<p>Une <a href="http://vimcasts.org/episodes/aligning-text-with-tabular-vim/">video</a> qui explique tout (en anglais).</p>

<h2>La série sur les plugin VIM</h2>

<ul>
<li><a href="http://mcamuzat.github.io/blog/2016/03/13/vim-plug-gestion-des-plugins/">Installation des plugins</a></li>
<li><a href="http://mcamuzat.github.io/blog/2016/03/20/les-plugins-sous-vim-tabular/">Tabularize</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim-plug : Gestion des plugins]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/03/13/vim-plug-gestion-des-plugins/"/>
    <updated>2016-03-13T17:44:53+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/03/13/vim-plug-gestion-des-plugins</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Il existe une quantité monstrueuse de plugin sur Vim. Je vais parler de la gestion de plugin. Avant de commencer une série sur les meilleurs plugins de Vim.</p>

<h2>Installation de Vim-plug</h2>

<p>Nous allons utiliser un gestionnaire de plugin : <a href="https://github.com/junegunn/vim-plug">vim-plug</a>.</p>

<p>Nous allons éditer notre fichier <code>~/.vimrc</code></p>

<!--more-->


<p>Nous collons les lignes suivantes au tout début de votre fichier.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>" Auto load / install plugin manager
</span><span class='line'>
</span><span class='line'>if !1 | finish | endif
</span><span class='line'>
</span><span class='line'>" auto-install vim-plug
</span><span class='line'>if empty(glob('~/.vim/autoload/plug.vim'))
</span><span class='line'>    echo "Installing VimPlug..."
</span><span class='line'>    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
</span><span class='line'>    autocmd VimEnter * PlugInstall
</span><span class='line'>endif
</span><span class='line'>
</span><span class='line'>" VimPlug 
</span><span class='line'>call plug#begin('~/.vim/plugged')
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>" VIMPROC 
</span><span class='line'>Plug 'Shougo/vimproc', { 'do': 'make' }
</span><span class='line'>
</span><span class='line'>" Syntastic  
</span><span class='line'>" https://github.com/scrooloose/syntastic
</span><span class='line'>Plug 'scrooloose/syntastic'
</span><span class='line'>
</span><span class='line'>" Fugitive
</span><span class='line'>" fugitive.vim: a Git wrapper so awesome, it should be illegal
</span><span class='line'>" https://github.com/tpope/vim-fugitive
</span><span class='line'>Plug 'tpope/vim-fugitive'
</span><span class='line'>
</span><span class='line'>" Surround
</span><span class='line'>" surround.vim: quoting/parenthesizing made simple
</span><span class='line'>" https://github.com/tpope/vim-surround
</span><span class='line'>Plug 'tpope/vim-surround'
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>call plug#end()
</span><span class='line'>" Required:
</span><span class='line'>filetype plugin indent on
</span></code></pre></td></tr></table></div></figure>


<p>Voila exactement ce que fais le programme.</p>

<ul>
<li>Si Vim-plug n&#8217;existe pas, On va le télécharger</li>
<li>On donne la liste des plugins à télécharger. Pour rajoutez un plugin il suffit de le rajouter entre <code>call plug#begin('~/.vim/plugged')</code> et <code>call plug#end()</code></li>
</ul>


<p>Par exemple si je souhaite rajoutez le plugin Nerdtree (permet un d&#8217;avoir une affichage en arbre des fichiers)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>call plug#begin('~/.vim/plugged')
</span><span class='line'>...
</span><span class='line'>Plug 'scrooloose/nerdtree'
</span><span class='line'>...
</span><span class='line'>call plug#end()</span></code></pre></td></tr></table></div></figure>


<p>Pour installer dans vim</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:PlugInstall</span></code></pre></td></tr></table></div></figure>


<p>Normalement tout les plugins s&#8217;installent en parallèles avec des jolies barres de progressions.</p>

<p>Pour updater les plugins</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:PlugUpdate </span></code></pre></td></tr></table></div></figure>


<p>Pour supprimer les plugins inutiles</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:PlugClean</span></code></pre></td></tr></table></div></figure>


<p>Enfin il existe une vue spécifique pour voir le status des plugins</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:PlugStatus</span></code></pre></td></tr></table></div></figure>


<h2>Mais encore..</h2>

<p>Ce qui est sympa avec Vim-plug est que l&#8217;on peut mettre des conditions dans les plugins</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'</span></code></pre></td></tr></table></div></figure>


<p>ici <code>vim-snippets</code> dépends de <code>ultisnips</code></p>

<p>On charge paresseusement les plugins</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Plug 'StanAngeloff/php.vim', { 'for': 'php' }</span></code></pre></td></tr></table></div></figure>


<p>Je n&#8217;ai besoin du plugin <code>php-vim</code> que si j&#8217;utilise un fichier PHP.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }</span></code></pre></td></tr></table></div></figure>


<p>Je charge le plugin que si je l&#8217;appelle.</p>

<h2>Les alternatives</h2>

<ul>
<li><a href="https://github.com/tpope/vim-pathogen">Pathogen</a> historiquement le premier. Il suffisait de créer un dossier <code>bundle</code> dans <code>.vim</code> et de cloner le plugin vim. Et le plugin était installé. Pour supprimer le plugin, il suffit faire un rm du dépôt</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir  .vim/bundle
</span><span class='line'><span class="nb">cd</span> .vim/bundle
</span><span class='line'>// on clone le plugin
</span><span class='line'>git clone https://github.com/tpope/vim-surround.git
</span><span class='line'>git clone https://github.com/scrooloose/nerdtree.git
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai utilisé ceci pendant des années et cela me suffisait</p>

<ul>
<li><a href="https://github.com/Shougo/neobundle.vim">NeoBundle</a> Un peu près la même chose que vim-plug. Il est censé être un peu plus complet que <a href="https://github.com/junegunn/vim-plug">vim-plug</a>.</li>
</ul>


<h2>Commiter son <code>.vimrc</code></h2>

<p> L&#8217;idée est de versionner son fichier <code>.vimrc</code> sur github. Et de partager les raccourcis claviers, Il n&#8217;est pas rare d&#8217;avoir des fichiers de 1000 lignes. Je suis en train de refaire le mien.</p>

<p> Un vimrc c&#8217;est pour résumer.</p>

<ol>
<li>Je copie/colle tout les <code>.vimrc</code> que je trouve</li>
<li>J&#8217;installe 70 plugins</li>
<li>Je me rend compte que j&#8217;utilise 5 plugins à peine.</li>
<li>Je n&#8217;utilise aucun raccourci donc je supprime tout.</li>
<li>heu..  je ne suis plus du tout à jours sur les plugins,.. On recommence à l&#8217;étape 1</li>
</ol>


<p>Nous allons continuer avec les plugins dans une future série d&#8217;articles.</p>

<p>Merci de m&#8217;avoir lu, Je m&#8217;excuse pour les fautes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installation d'un proxmox 4.0 : Nginx]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/03/08/installation-dun-proxmox-4-dot-0-partie-2-nginx/"/>
    <updated>2016-03-08T21:35:36+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/03/08/installation-dun-proxmox-4-dot-0-partie-2-nginx</id>
    <content type="html"><![CDATA[<p>Dans le <a href="http://mcamuzat.github.io/blog/2016/02/28/installation-dun-proxmox-4-dot-0/">post précédent</a>, nous avons réglé le réseau pour que les instances récupèrent le réseau. Enfin nous avons crée une première instance que j&#8217;ai nommé <code>nginxproxy</code>.</p>

<p>Ce que je veux..</p>

<p>J&#8217;ai plusieurs sites et noms de domaine sur mon Proxmox. Je souhaite mettre chaque site dans un container. Ainsi tout est isolé, je peux mettre toute les versions que je veux.</p>

<p>Par exemple, je souhaite</p>

<ul>
<li>blog.domaine1.fr parte vers l&#8217;instance 102 qui contient son propre apache.</li>
<li>image.domaine1.fr vers l&#8217;instance 103 etc ..</li>
</ul>


<p>Nous allons utiliser  <strong>Nginx</strong> pour rediriger le trafic.
<img class="center" src="http://mcamuzat.github.io/images/nginx-logo.png" width="313" height="72" title="logo de nginx" alt="logo de nginx"></p>

<p>Je vais</p>

<ul>
<li>rediriger tout le trafic du port 80 du proxmox vers mon instance1 (que j&#8217;ai appellé nginxProxy)</li>
<li>installer Nginx en proxy sur cette VM. j&#8217;arrive sur la machine avec l&#8217;url blog.domaine1.fr, je renvoie vers la machine 102</li>
</ul>


<!--more-->


<h2>Partie 1 rediriger le port 80</h2>

<p>Il suffit de rajouter la ligne suivante dans mon fichier <code>iptables_start.sh</code> sur le <strong>Proxmox</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># VM &lt;numero de la vm&gt; : nginx proxy/gateway
</span><span class='line'>iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 80 -j DNAT --to-destination 192.168.15.&lt;ip de la vm&gt;:80</span></code></pre></td></tr></table></div></figure>


<p>Maintenant tout le trafic web se redirige vers le futur Nginx.</p>

<h2>Partie 2 installation de Nginx</h2>

<p>Sur la vm précédemment crée.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install nginx
</span></code></pre></td></tr></table></div></figure>


<p>Il faut rajouter la ligne suivante dans le fichier <code>/etc/nginx/nginx.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  <span class="c">##</span>
</span><span class='line'>    <span class="c"># Virtual Host Configs</span>
</span><span class='line'>    <span class="c">##</span>
</span><span class='line'>    <span class="c">## la ligne à rajouter ##</span>
</span><span class='line'>    include /etc/nginx/proxy_params<span class="p">;</span>
</span><span class='line'>    <span class="c">## </span>
</span><span class='line'>    include /etc/nginx/conf.d/*.conf<span class="p">;</span>
</span><span class='line'>    include /etc/nginx/sites-enabled/*<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et rajouter ou créer (je ne me souviens plus ..)  le fichier <code>/etc/nginx/proxy_params</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>proxy_set_header Host <span class="nv">$http_host</span><span class="p">;</span>
</span><span class='line'>proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class='line'>proxy_set_header X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>proxy_set_header X-Forwarded-Proto <span class="nv">$scheme</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enfin voici un exemple pour blog.domaine1.com</p>

<ul>
<li>créer un fichier <code>/etc/nginx/sites-available/blog.domaine1.com.conf</code></li>
<li>dans ce fichier recopier la conf suivante</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>server <span class="o">{</span>
</span><span class='line'>        server_name blog.domaine1.com.conf<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        location / <span class="o">{</span>
</span><span class='line'>            proxy_pass http://192.168.15.&lt;ip de la vm&gt;<span class="p">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pas grand chose à rajouter la conf parle d&#8217;elle-même.</p>

<p>Il ne reste plus qu&#8217;a activer le site</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> /etc/nginx/sites-enabled/
</span><span class='line'>ln -s ../site-available/blog.domaine1.com.conf
</span></code></pre></td></tr></table></div></figure>


<p>Un Nginx restart..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>service nginx restart
</span></code></pre></td></tr></table></div></figure>


<p>Il ne nous reste plus qu&#8217;a créer une VM pour héberger le blog.domaine1.com</p>

<h2>Conclusion</h2>

<p>Tout cela marche bien mais je suis resté assez flou sur la façon de se connecter sur les VMs</p>

<p>Dans la partie 3 Je vais essayer de clarifier tout cela.. Je m&#8217;excuse pour les fautes d&#8217;orthographes. Et je vous remercie de m&#8217;avoir lu.</p>

<ul>
<li>Partie 1 : <a href="http://mcamuzat.github.io/blog/2016/02/28/installation-dun-proxmox-4-dot-0/">Proxmox : mise en place</a></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2016/03/08/installation-dun-proxmox-4-dot-0-partie-2-nginx/">Proxmox : Nginx</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2016/05/17/proxmox-partie-3-connection-via-ssh/">Proxmox : Réglage ssh</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installation d'un proxmox 4.0]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/28/installation-dun-proxmox-4-dot-0/"/>
    <updated>2016-02-28T16:47:39+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/28/installation-dun-proxmox-4-dot-0</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p><img class="center" src="http://mcamuzat.github.io/images/proxmox-logo.png" width="292" height="35" title="logo de proxmox" alt="logo de proxmox"></p>

<p>J&#8217;ai acheté un serveur dédié chez OVH. Au travail nous utilisons un <a href="https://www.proxmox.com/en/proxmox-ve">Proxmox</a> En solution de virtualisation. Étant plutôt content du logiciel. J&#8217;ai tout naturellement installé Proxmox sur mon serveur dédié. J&#8217;en ai profité pour passer à la version 4.</p>

<p>Mais &hellip;</p>

<p>Proxmox V4 utilise <a href="https://help.ubuntu.com/community/LXC">LXC</a>  alors que la version précédente utilise <a href="https://openvz.org/Main_Page">OpenVZ</a>. Et tous les tutoriaux sont globalement sur les versions 3.</p>

<p>Je suis arrivé à installer le logiciel. Voici le résumé de la première partie</p>

<ul>
<li>Installation du Proxmox</li>
<li>Réglage du Réseau</li>
<li>Création d&#8217;une première instance.</li>
</ul>


<!--more-->


<h2>Installations de proxmox</h2>

<p>J&#8217;ai acheté la machine déjà installée sur <a href="https://www.ovh.com/fr/">OVH</a>.</p>

<p>Pas grand chose à dire dessus.</p>

<h2>Réglage du réseau</h2>

<p>se connecter en ssh</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh root@&lt;ip_de_la_machine&gt;</span></code></pre></td></tr></table></div></figure>


<p>dans le <code>/etc/network/interfaces</code>
C&#8217;est un peu la ou j&#8217;ai eu beaucoup de mal. Par défaut il y a normalement déjà deux interfaces virtuelles (des bridges pour être plus précis) déjà installées. <code>vmbr0</code> et <code>vmbr1</code>.</p>

<ul>
<li><strong>Ne touchez pas à <code>vmbr0</code></strong></li>
</ul>


<p>Voici la configuration de mon serveur.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># This file describes the network interfaces available on your system
</span><span class='line'># and how to activate them. For more information, see interfaces(5).
</span><span class='line'>
</span><span class='line'># The loopback network interface
</span><span class='line'>auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>
</span><span class='line'># for Routing
</span><span class='line'>auto vmbr1
</span><span class='line'>iface vmbr1 inet static
</span><span class='line'>        #post-up /etc/pve/kvm-networking.sh
</span><span class='line'>        address 192.168.15.20/24
</span><span class='line'>        bridge_ports none
</span><span class='line'>        bridge_stp off
</span><span class='line'>        bridge_fd 0
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># vmbr0: Bridging. Make sure to use only MAC adresses that were assigned to you.
</span><span class='line'>auto vmbr0
</span><span class='line'>iface vmbr0 inet static
</span><span class='line'>      ... l'ip de la machine ..
</span><span class='line'>
</span><span class='line'>iface vmbr0 inet6 static
</span><span class='line'>      ... la même chose en ipv6..</span></code></pre></td></tr></table></div></figure>


<p>Je n&#8217;ai rajouté que les lignes suivantes dans vmbr1</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    address 192.168.15.20/24
</span><span class='line'>    bridge_ports none
</span><span class='line'>    bridge_stp off
</span><span class='line'>    bridge_fd 0</span></code></pre></td></tr></table></div></figure>


<p>Il faut aussi activer l&#8217;IP forwarding
pour ce faire il faut éditer le fichier <code>/etc/sysctl.conf</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/sysctl.conf:
</span><span class='line'>net.ipv4.ip_forward = 1</span></code></pre></td></tr></table></div></figure>


<p>Il faut lancer le programme pour prendre en compte les modifications</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sysctl -p /etc/sysctl.conf</span></code></pre></td></tr></table></div></figure>


<p>Et redémarrer le service network</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service network restart</span></code></pre></td></tr></table></div></figure>


<h2>Mise en place de Iptable.</h2>

<p>Voici le script dans le répertoire
<code>/root/iptables_start.sh</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#vider table NAT</span>
</span><span class='line'>iptables -F
</span><span class='line'>iptables -X
</span><span class='line'>iptables -t nat -F
</span><span class='line'>iptables -t nat -X
</span><span class='line'>iptables -t mangle -F
</span><span class='line'>iptables -t mangle -X
</span><span class='line'>iptables -P INPUT ACCEPT
</span><span class='line'>iptables -P FORWARD ACCEPT
</span><span class='line'>iptables -P OUTPUT ACCEPT
</span><span class='line'>
</span><span class='line'><span class="c"># On laisse sortir les VM/container</span>
</span><span class='line'>iptables -t nat -A POSTROUTING -s 192.168.15.0/24 -o vmbr0 -j MASQUERADE
</span></code></pre></td></tr></table></div></figure>


<p>La première partie vide toute les règles de redirection.</p>

<p>La seconde partie va permettre au VM dont l&#8217;IP est entre 192.168.15.1 à 192.168.15.254 de sortir sur le réseau.</p>

<h2>Résumé</h2>

<ul>
<li>Nous avons réglé <code>vmbr1</code> avec une adresse en 192.168.15.20/24</li>
<li>Nous avons activé le forward d&#8217;IP</li>
<li>Nous avons créer un script <code>iptables_start.sh</code> qui supprime les anciennes regles et qui permet au réseau 192.168.15.0/24 de récuperer le net.</li>
</ul>


<h2>Créer sa Première instance.</h2>

<p>Allons sur la dashboard de votre proxmox (voir mail OVH)</p>

<h3>Récupérer des Isos/templates</h3>

<p>Normalement vous avez une icônes avec un disque dur avec normal(..) cliquer sur <code>content-&gt;menu Template</code></p>

<p><img class="center" src="http://mcamuzat.github.io/images/choixtemplate.png" width="600" height="407" title="choix des isos templates" alt="choix des isos templates"></p>

<p>Téléchargeons une Ubuntu.</p>

<h3>Créer un container</h3>

<p>Cliquer sur l&#8217;icône <code>create CT</code> en haut à droite.</p>

<h4>Général</h4>

<p>Normalement avoir l&#8217;image suivante.
<img class="center" src="http://mcamuzat.github.io/images/creationvmgeneral.png" width="600" height="379" title="création nouveau container" alt="création nouveau container">
Mettons le noms de l&#8217;instance <code>nginxproxy</code> et mettons un mots de passe. Normalement on vous propose <code>VM ID 101</code> si vous n&#8217;avez aucun container.</p>

<h4>Template</h4>

<p>Mettre l&#8217;iso Ubuntu que vous venez de télécharger</p>

<h4>Root Disk</h4>

<p>8 giga c&#8217;est très bien</p>

<h4>CPU</h4>

<p>C&#8217;est ici que l&#8217;on regle le nombre de cpu</p>

<h4>La mémoire</h4>

<p>Vous pouvez rajouter de la mémoire ici (2Giga en Memoire, Swap 512)</p>

<h4>Network</h4>

<p>C&#8217;est ici que c&#8217;est un peu plus compliqué</p>

<p><img class="center" src="http://mcamuzat.github.io/images/creationvmreseau.png" width="600" height="390" title="réglage du réseau" alt="réglage du réseau">
dans le bridge mettre <strong>vmbr1</strong></p>

<p>Dans l&#8217;ip c&#8217;est simple c&#8217;est <code>192.168.15.&lt;numéro d'instance&gt;/24</code>. si vous avez l&#8217;instance 101 alors l&#8217;ip est <code>192.168.15.101/24</code></p>

<p>Dans la <em>gateway</em> c&#8217;est <code>192.168.15.20</code> la même IP défini dans le <code>vmbr1</code></p>

<h4>Dns</h4>

<p>Rien à faire..</p>

<p>Vous n&#8217;avez plus qu&#8217;a confirmer. Normalement en 15 secondes la VM est crée.</p>

<h4>Finition.</h4>

<p>Avant d&#8217;allumer la vm cliquer sur l&#8217;icône de la VM puis <code>Options</code> puis cliquez sur la ligne <code>Start at boot</code> puis <code>Edit</code> et <code>yes</code> si le proxmox redémarre, on relance la machine (ce qui n&#8217;est pas le cas par défaut)</p>

<h4>Allumage</h4>

<p>Vous pouvez lancer la vm cliquez sur start.</p>

<h2>Conclusion</h2>

<p>Nous avons réglé le proxmox, installé la première instance. dans la partie 2 nous nous connecterons sur l&#8217;instance pour terminer les réglages. Nous mettrons en place aussi le nginx pour rediriger les urls vers les bonnes instances.</p>

<ul>
<li>Partie 1 : <a href="http://mcamuzat.github.io/blog/2016/02/28/installation-dun-proxmox-4-dot-0/">Proxmox : mise en place</a></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2016/03/08/installation-dun-proxmox-4-dot-0-partie-2-nginx/">Proxmox : Nginx</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2016/05/17/proxmox-partie-3-connection-via-ssh/">Proxmox : Réglage ssh</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Des jolis dépôts]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/21/des-jolis-depots/"/>
    <updated>2016-02-21T16:26:09+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/21/des-jolis-depots</id>
    <content type="html"><![CDATA[<p>Aujourd&#8217;hui on va se faire plaisir et admirer des images de notre travail.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/codeologyreact.png" width="600" height="578" title="représentation 3D de ReactJs" alt="représentation 3D de ReactJs"></p>

<!--more-->


<h2>Gource</h2>

<p>Cela crée une animation des différents commits. Cela permet de visualiser le travail accompli, les différents intervenants.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/gource.png" width="600" height="353" title="screenshot du site officiel" alt="screenshot du site officiel"></p>

<ul>
<li><a href="http://gource.io/">Gource</a></li>
</ul>


<h2>Codeology</h2>

<p>Crée un modèle 3D du dépots.</p>

<p>C&#8217;est assez bizarre.. On ne comprend pas trop ce qui est représenté. Mais C&#8217;est plûtot joli.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/codeology.png" width="600" height="346" title="representation 3D de Three.js" alt="representation 3D de Three.js"></p>

<ul>
<li><a href="http://codeology.braintreepayments.com/">codeology</a></li>
<li>vue de <a href="http://codeology.braintreepayments.com/featured/facebook/react">ReactJs</a></li>
<li>vue de <a href="http://codeology.braintreepayments.com/featured/django/django">Danjgo</a></li>
</ul>


<h2><a href="http://ghv.artzub.com/">http://ghv.artzub.com/</a></h2>

<p>Rentrez l&#8217;utilisateur et puis le projet (la visualisation s&#8217;inspire de <a href="http://www.michaelogawa.com/code_swarm/">codeswarm</a>)</p>

<ul>
<li><p>Vue par auteur
<img class="center" src="http://mcamuzat.github.io/images/githubvisualbyauthor.png" width="600" height="350" title="vue par auteur" alt="vue par auteur"></p></li>
<li><p>Vue par projet
<img class="center" src="http://mcamuzat.github.io/images/githubvisualbyproject.png" width="600" height="342" title="vue par auteur" alt="vue par auteur"></p></li>
<li><p><a href="http://ghv.artzub.com/">http://ghv.artzub.com</a></p></li>
</ul>


<h2>Conclusion</h2>

<p>Il y a eu des tentatives de générer un CV via le dépôt de github (Notamment <a href="http://resume.github.io/">resumé (down)</a> et <a href="https://github.com/dfm/osrc">The Open Source Report Card (down)</a>. <strong>Les deux sites ne marchent plus depuis la modifcation de l&#8217;API de Github</strong>.</p>

<p>Un Github bien rempli montre que l&#8217;utilisateur est actif et qu&#8217;il participe. Mais le contraire ne prouve rien. Cela fait 7 ans que je bosse dans le monde de l&#8217;informatique. Mon Github est plutôt vide (mais grâce au blog je le remplis chaque semaine..)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim et Markdown]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/15/vim-et-markdown/"/>
    <updated>2016-02-15T20:24:36+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/15/vim-et-markdown</id>
    <content type="html"><![CDATA[<p>Une astuce que je viens d&#8217;apprendre.</p>

<p>Pour écrire du code en Markdown on utilise la syntaxe suivante</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>```php
</span><span class='line'>le code terminé par ```
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est pas génial car on perd la coloration syntaxique, et j&#8217;ai fais pas mal d&#8217;erreurs.</p>

<p>Mais grâce à la commande suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">g</span>:markdown_fenced_languages <span class="p">=</span> [<span class="s1">&#39;html&#39;</span><span class="p">,</span> <span class="s1">&#39;vim&#39;</span><span class="p">,</span> <span class="s1">&#39;php&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;bash=sh&#39;</span>]
</span></code></pre></td></tr></table></div></figure>


<p>Voici un avant et après
<img class="center" src="http://mcamuzat.github.io/images/avantapres.png" width="600" height="189" title="avant et après" alt="avant et après"></p>

<p>C&#8217;est beaucoup mieux ! Un petit bémol pour le PHP (ma joie !) il faut obligatoirement mettre <code>&lt;?php</code>.</p>

<p>Bref un commande que j&#8217;aurai aimé avoir avant.</p>

<p>Il y a plein d&#8217;astuce de ce genre sur le site suivant</p>

<ul>
<li><a href="https://til.hashrocket.com/">til</a> <strong>TIL</strong> est l&#8217;abbrévation de <strong>T</strong>oday <strong>I</strong> <strong>L</strong>ean cela vient de <a href="https://www.reddit.com/r/todayilearned/">reddit</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remettre au propre son dépot git]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/14/remettre-au-propre-son-depot-git/"/>
    <updated>2016-02-14T17:03:58+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/14/remettre-au-propre-son-depot-git</id>
    <content type="html"><![CDATA[<p>Lorsque l&#8217;on souhaite sauvegarder son travail. Il y a toujours des fichiers modifiés que l&#8217;on ne souhaite pas commiter.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/gitmenage.png" width="387" height="490" title="avant et après" alt="avant et après"></p>

<!--more-->


<h2>Pour éviter de tracker des fichiers.</h2>

<p><strong>Règle N°1 : éviter <code>git add .</code></strong></p>

<p>Personnellement j&#8217;utilise tig. (voir le <a href="http://mcamuzat.github.io/blog/2015/10/04/tig-status/">post</a>)</p>

<p>Solution bis :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add -p </span></code></pre></td></tr></table></div></figure>


<h2>Pour reverter les fichiers modifiés</h2>

<p><strong>Règle N°2 : éviter le <code>git reset --hard</code></strong></p>

<p>La solution est un peu trop radicale. Comme le <code>git add .</code> vous allez le regretter un jour, car vous perdez tout votre travail. Ce que vous voulez c&#8217;est remettre certain fichier au propre et ce n&#8217;est pas forcement la bonne commande.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -- .</span></code></pre></td></tr></table></div></figure>


<p>A noter que cela réverte tout vos fichiers, mais s&#8217;il faut filtrer.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -- /web/.</span></code></pre></td></tr></table></div></figure>


<p>Bien entendu il existe le mode interactif</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -p</span></code></pre></td></tr></table></div></figure>


<h2>Reverter un commit.</h2>

<p><strong>Attention si le commit est déja pushé. Vous serez obliger de faire un <code>push -f</code> donc on évite de faire cela sur les branches master, staging, develop</strong></p>

<p>Vous avez commiter mais le commit est pas bon.</p>

<p>Si c&#8217;est juste le message qui est faux</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit --amend</span></code></pre></td></tr></table></div></figure>


<p>Si un des fichiers n&#8217;est pas bon</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset HEAD^ --soft</span></code></pre></td></tr></table></div></figure>


<p>Vous remarquez que j&#8217;utilise <code>--soft</code> au lieu <code>--hard</code>. Le reset soft me remets avant que j&#8217;ai commité. Je ne perds pas mon travail, même mieux les fichiers sont déjà prêt à être commités.</p>

<h2>Supprimer les fichiers qui ne sont pas trackés</h2>

<p>Vous avez un <code>export.sql</code>, <code>toto.txt</code>, <code>npm-debug.log</code></p>

<p><em>Attention à ne pas perdre du travail.</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clean -f -d -x
</span><span class='line'>git clean -fdx</span></code></pre></td></tr></table></div></figure>


<p>Avec <code>-f</code> force <strong>Obligatoire</strong> <code>-d</code> pour directory(répertoire) <code>-x</code> virer les fichiers ignorés de git.</p>

<p>Pour voir ce qui pourrait être effacé pendant la commande.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clean -n</span></code></pre></td></tr></table></div></figure>


<p>Enfin il existe aussi un mode interactif</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clean -i </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Insérer avec classe dans VIM]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/07/inserer-avec-classe-dans-vim/"/>
    <updated>2016-02-07T19:20:36+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/07/inserer-avec-classe-dans-vim</id>
    <content type="html"><![CDATA[<p><em>tl;dr : sous vi utilisez <code>a</code> au lieu de <code>i</code></em></p>

<p>Tout le monde utilise VI pour éditer ses fichiers de configs sous linux ou les fichiers sur un serveur distant (il y a aussi <code>nano</code> qui marche super bien). Moi personnellement je code aussi du php/js avec. Pour insérer du texte on utilise la touche <code>i</code> comme insérer puis <code>ESC</code> pour quitter le mode insertion. Je vais parler des autres touches pour insérer du texte.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/viminser.png" width="517" height="220" title="Il y a 6 touches pour insérer" alt="Il y a 6 touches pour insérer"></p>

<!--more-->


<h2>Insérer.</h2>

<p>Le problème de la touche <code>i</code> c&#8217;est justement que l&#8217;on insère le texte. Le curseur n&#8217;est pas à la bonne position. On souhaite plutôt ajouter du texte après le curseur. Et c&#8217;est le principe de la touche <code>a</code> (comme <strong>A</strong>ppend ou <strong>A</strong>jouter).</p>

<p>Si c&#8217;est rajouter une ligne vide. La touche <code>o</code> comme <strong>o</strong>pen une nouvelle ligne.</p>

<h3>Un concept important dans VIM</h3>

<p><strong>la lettre majuscule est la version plus <em>musclée</em> que la minuscule</strong></p>

<ul>
<li><code>i</code> insère au <strong>début du curseur</strong>.</li>
<li><code>I</code> insère au <strong>début de la ligne</strong></li>
<li><code>a</code> ajoute du <strong>texte à la fin du curseur.</strong></li>
<li><code>A</code> ajoute du <strong>texte à la fin de la ligne</strong>.</li>
</ul>


<p><strong>la lettre majuscule est le contraire de la version minuscule</strong></p>

<ul>
<li><code>o</code> ouvre une ligne <strong>après le curseur</strong></li>
<li><code>O</code> ouvre une ligne <strong>avant le curseur</strong></li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/viminser.png" width="517" height="220" title="Il y a 6 touches pour insérer" alt="Il y a 6 touches pour insérer"></p>

<p>En résumé</p>

<ul>
<li>Si vous appuyez sur <code>i</code> et <code>-&gt;</code> : utiliser <code>a</code></li>
<li>Si vous voulez commenter une ligne <code>I</code> suivi de<code>//</code></li>
<li>vous avez oublié une virgule à la fin de la ligne. alors <code>A,</code></li>
<li>vous voulez rajouter une ligne au lieu de <code>i</code> et <code>&lt;enter&gt;</code> , la touche <code>o</code>.</li>
</ul>


<h2>Se répéter</h2>

<p>Essayons de commenter les trois lignes.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>instruction 1 &lt;-mon curseur est à cette ligne.
</span><span class='line'>instruction 2
</span><span class='line'>instruction 3</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;appuie sur <code>I</code> puis <code>//</code> pour commenter</p>

<p>J&#8217;obtiens</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//instruction 1
</span><span class='line'>instruction 2
</span><span class='line'>instruction 3</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;appuie sur <code>j</code> ou <code>bas</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//instruction 1
</span><span class='line'>instruction 2 &lt;-mon curseur
</span><span class='line'>instruction 3</span></code></pre></td></tr></table></div></figure>


<p>Si j&#8217;appuie sur la touche <code>.</code> je répète la dernière instruction. La touche <code>.</code> est probablement la touche la plus utile.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//instruction 1
</span><span class='line'>//instruction 2 &lt;-mon curseur
</span><span class='line'>instruction 3</span></code></pre></td></tr></table></div></figure>


<p>Et ainsi de suite..</p>

<p>Mais il y a beaucoup de manière sur VIM pour faire la même chose.</p>

<p>Par exemple sélectionnons le texte avec la touche <code>v</code> ou la souris( <code>set mouse=a</code>). puis appuyons sur <code>:</code></p>

<p>Vous deviez voir</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'&lt;,'&gt;`</span></code></pre></td></tr></table></div></figure>


<p>alors complétons la ligne par <code>'&lt;,'&gt;norm I//</code> et tout le texte sélectionné est commenté!
La commande précédente se lit sur la zone sélectionnée <code>'&lt;,'&gt;</code>  appuyez(<code>norm</code>)  sur <code>I</code> puis <code>\\</code>.</p>

<h2>Un dernier raccourci-clavier..</h2>

<p>La touche <code>gi</code> vous emmène au dernier endroit ou vous avez inséré du texte et place directement en insertion.</p>

<p>En conclusion, Il n&#8217;y pas que le touche <code>i</code> dans Vi. En fait on se sert assez peu de cette touche.. C&#8217;est pourtant la plus connue..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud9 un workspace en ligne]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/02/01/cloud9-un-workspace-en-ligne/"/>
    <updated>2016-02-01T21:14:07+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/02/01/cloud9-un-workspace-en-ligne</id>
    <content type="html"><![CDATA[<p>Je me suis inscris sur <a href="http://www.freecodecamp.com">FreecodeCamp</a>. C&#8217;est gratuit et annonce une formation du Bootstrap/Nodejs/React/D3/javascript. Bon au moment ou j&#8217;écris ces lignes D3 et React sont en <em>coming soon</em> (c&#8217;est dommage c&#8217;était surtout ca qui m&#8217;intéressait). L&#8217;idée est de former des développeur back et front pour aider des associations. L&#8217;idée me semble bonne.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/freecodecamp.png" width="600" height="217" title="FreecodeCamp" alt="FreeCodeCamp"></p>

<!--more-->


<p>Sur les projets backends pour éviter d&#8217;installer un linux, le site conseille de créer un compte sur <a href="https://c9.io/">Cloud9</a>.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/introcloud9.png" width="600" height="259" title="accueil" alt="page d\"></p>

<p>Je crée un nouveau workspace.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/choixcloud9.png" width="600" height="453" title="environnent de dev" alt="choix de l"></p>

<p>Je choisis nodejs.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/workspacecloud9.png" width="600" height="413" title="le workspace" alt="le workspace"></p>

<p>Sur cette image on voit l&#8217;explorateur de fichiers, l&#8217;éditeur et la ligne de commande. Nous sommes déjà dans un vm. Toutes les commandes Linux sont disponibles. <code>apt-get</code>, <code>npm</code> etc..</p>

<p>Dans l&#8217;onglet <code>windows&gt;share</code></p>

<p><img class="center" src="http://mcamuzat.github.io/images/sharecloud9.png" width="456" height="142" title="environnement de dev" alt="Url de l\"></p>

<p>Ici on voit l&#8217;url de l&#8217;environment. Si j&#8217;allume le nodejs. mon application est disponible à</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://&lt;mon-env&gt;-&lt;monuser&gt;.c9users.io/</span></code></pre></td></tr></table></div></figure>


<p>à la création de l&#8217;environnement il est possible de choisir un dépôt.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/choixdepot.png" width="600" height="115" title="choix en mettant le dépôt" alt="choix en mettant le dépôt"></p>

<p>on précise par exemple..</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://github.com/johnstonbl01/clementinejs-fcc.git</span></code></pre></td></tr></table></div></figure>


<p>Ainsi l&#8217;environnement est déjà prêt.</p>

<h2>Conclusion</h2>

<p>Cloud9 est gratuit et il n&#8217;y pas vraiment de raison de se priver.</p>

<p>Il n&#8217;y a qu&#8217;un environnement privé pour une licence gratuite. Mais c&#8217;est largement suffisant pour débuter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades: Applicative et les listes]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/01/25/les-monades-applicative-et-les-listes/"/>
    <updated>2016-01-25T20:45:47+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/01/25/les-monades-applicative-et-les-listes</id>
    <content type="html"><![CDATA[<p>Dans le précédent <a href="http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives/">post</a>, j&#8217;avais parlé des applicatives sur les Maybes.</p>

<p>Nous allons voir ensemble comment les applicatives se comportent sur les listes.</p>

<p>Rappelons que l&#8217;idée des applicatives c&#8217;est</p>

<ul>
<li>ma valeur est dans un container</li>
<li>et ma fonction que je vais appliquer est aussi dans un container</li>
</ul>


<p>Pour la liste c&#8217;est un peu près la même idée.</p>

<ul>
<li>mes valeurs sont dans une collection</li>
<li>mes fonctions sont aussi dans une collection</li>
</ul>


<!--more-->


<p>Initialisons une Collection de valeurs</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$collectionValue</span> <span class="o">=</span> <span class="nx">Monad\Collection</span><span class="o">::</span><span class="na">of</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Créons un collection de fonctions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$collection</span> <span class="o">=</span> <span class="nx">Monad\Collection</span><span class="o">::</span><span class="na">of</span><span class="p">([</span>
</span><span class='line'>    <span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">3</span> <span class="o">+</span> <span class="nv">$a</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">4</span> <span class="o">+</span> <span class="nv">$a</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Regardons de suite le résultat, nous obtenons une collection qui contient <code>[4, 5, 5, 6]</code>. En fait on a calculé toutes les possibilités.. Puisque <code>[1+3, 1+4, 2+3, 2+4]</code></p>

<p>Essayons de programmer un générateur de nom de scout (?!!)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// des animaux</span>
</span><span class='line'><span class="nv">$collectionAnimaux</span> <span class="o">=</span> <span class="nx">Monad\Collection</span><span class="o">::</span><span class="na">of</span><span class="p">([</span>
</span><span class='line'>  <span class="s2">&quot;renard&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;blaireau&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;aigle&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;panda&quot;</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// des adjectifs</span>
</span><span class='line'><span class="nv">$collectionAdjectif</span> <span class="o">=</span>  <span class="nx">Monad\Collection</span><span class="o">::</span><span class="na">of</span><span class="p">([</span>
</span><span class='line'>  <span class="s2">&quot;affectueux&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;perçant&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;agile&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;bavard&quot;</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// des générateurs</span>
</span><span class='line'><span class="nv">$collectionGenerateur</span> <span class="o">=</span> <span class="nx">Monad\Collection</span><span class="o">::</span><span class="na">of</span><span class="p">([</span>
</span><span class='line'>    <span class="nx">Maybe\just</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">f\curryN</span><span class="p">(</span>
</span><span class='line'>            <span class="mi">2</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$nom</span><span class="p">,</span><span class="nv">$adj</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nv">$nom</span> <span class="o">.</span> <span class="s2">&quot; &quot;</span> <span class="o">.</span> <span class="nv">$adj</span><span class="p">;}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>    <span class="nx">Maybe\just</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">f\curryN</span><span class="p">(</span>
</span><span class='line'>            <span class="mi">2</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$nom</span><span class="p">,</span><span class="nv">$adj</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="s2">&quot;petit &quot;</span><span class="o">.</span> <span class="nv">$nom</span> <span class="o">.</span> <span class="s2">&quot; &quot;</span> <span class="o">.</span> <span class="nv">$adj</span><span class="p">;}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">]</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// On mélange</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$collectionGerateur</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nv">$collectionAnimaux</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nv">$collectionAdjectif</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Grâce à l&#8217;évaluation partielle je peux créer des fonctions à plusieurs arguments. Les applicatives sur les listes me permette de faire toutes les combinaisons.</p>

<p>J&#8217;obtiens</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="o">..</span> <span class="mi">32</span> <span class="nx">résultats</span>
</span><span class='line'> <span class="nx">string</span><span class="p">(</span><span class="mi">14</span><span class="p">)</span> <span class="s2">&quot;panda perçant&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="s2">&quot;panda agile&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span> <span class="s2">&quot;panda bavard&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">23</span><span class="p">)</span> <span class="s2">&quot;petit renard affectueux&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">17</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">21</span><span class="p">)</span> <span class="s2">&quot;petit renard perçant&quot;</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">18</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">string</span><span class="p">(</span><span class="mi">18</span><span class="p">)</span> <span class="s2">&quot;petit renard agile&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bon c&#8217;est sur que <em>petit renard affectueux</em> n&#8217;est pas génial comme nom..</p>

<p>Le Panda bavard.</p>

<p>Liste des articles</p>

<ul>
<li>Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
<li>Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a></li>
<li>Partie 5 : <a href="http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives/">Les applicatives</a></li>
<li>Partie 6 : <a href="http://mcamuzat.github.io/blog/2016/01/25/les-monades-applicative-et-les-listes/">Les applicatives et les listes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je joue donc je programme 3]]></title>
    <link href="http://mcamuzat.github.io/blog/2016/01/18/je-joue-donc-je-programme-3/"/>
    <updated>2016-01-18T20:25:01+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2016/01/18/je-joue-donc-je-programme-3</id>
    <content type="html"><![CDATA[<p>Nous continuons à la recherche de soft donc le but du jeux est d&#8217;apprendre à programmer.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/climurder.png" width="600" height="488" title="Screenshot du dépot CLmurder" alt="Screenshot de cli murder"></p>

<!--more-->


<h2>Les Capture The Flag /Wargame.</h2>

<p>Le but ici est de s&#8217;introduire le premier dans un programme(via connection ssh, iso) et de capturer le drapeau. C&#8217;est un concours et un peu un jeux de piste. On distingue deux types</p>

<ul>
<li><p>les CTF. c&#8217;est un jeu avec une date de début et une date de fin. Je n&#8217;ai jamais participé à ce genre d&#8217;évènement.</p>

<ul>
<li>Actualité <a href="https://ctftime.org/">CTFTime</a></li>
<li><a href="http://en.wikipedia.org/wiki/Capture_the_flag#Computer_security">wikipedia</a></li>
<li>Débuter : <a href="https://www.endgame.com/blog/how-get-started-ctf">How to Get Started in CTF </a> et <a href="https://trailofbits.github.io/ctf/">CTF Field Guide</a></li>
<li>Une liste <a href="https://github.com/apsdehal/awesome-ctf">complète</a></li>
</ul>
</li>
<li><p>Quand on peux rentrer à n&#8217;importe quelle moment on parle de Wargame.</p>

<ul>
<li><a href="http://smashthestack.org/">SmashTheStack</a></li>
<li><a href="http://overthewire.org/wargames/">OverTheWire</a> Le premier challenge <a href="http://overthewire.org/wargames/bandit/">Bandit</a> est vraiment pour un débutant (<strong>Moi!!</strong>)</li>
<li><a href="https://exploit-exercises.com/">Exploit Exercises</a> Les Isos sont téléchargeables</li>
</ul>
</li>
</ul>


<p>Il y a plein de techniques  j&#8217;avoue que je connais assez peu, j&#8217;ai un peu joué avec la backtrack (maintenant connue sur le nom de <a href="https://www.kali.org/">Khali-Linux</a>)</p>

<h2>Xss-Game</h2>

<p>Pour apprendres les failles XSS , C&#8217;est google qui a fais le site suivant</p>

<ul>
<li><a href="https://xss-game.appspot.com/">XSS Game</a></li>
</ul>


<h2>Les concours</h2>

<p>Je suis beaucoup sur <a href="http://www.codewars.com">Codewars</a>. La présentation est clean..</p>

<p>Mais il existe une énorme quantité de site dans le même genre.</p>

<ul>
<li><a href="http://projecteuler.net">Le plus connus le projet Euler</a></li>
<li><a href="http://www.codechef.com">Code Chef</a></li>
<li><a href="http://codeforces.com">Codeforces</a></li>
<li><a href="http://www.codewars.com">Codewars</a></li>
<li><a href="http://eudyptula-challenge.org">Eudyptula Challenge</a>(Kernel Linux)</li>
<li><a href="https://code.google.com/codejam/contests.html">Google Code Jam</a></li>
<li><a href="https://www.hackerrank.com">HackerRank</a></li>
<li><a href="http://ioccc.org">International Obfuscated C Code Contest</a> le code le plus obscure possible..</li>
<li><a href="http://ipsc.ksp.sk">Internet Problem Solving Contest</a></li>
<li><a href="http://www.kaggle.com/competitions">Kaggle</a> (les données fournis proviennent de véritables mesures/études)</li>
<li><a href="http://www.teamleada.com" title="">Leada</a> cours en lignes..</li>
<li><a href="http://community.topcoder.com/tc">Top Coder</a> Il y a des récompenses pour certains challenges.</li>
<li><a href="https://www.codeeval.com">CodeEval</a> Si vous cherchez du travail et mettre en valeur son CV</li>
</ul>


<p>Et aussi</p>

<ul>
<li><a href="http://www.dmoz.org/Computers/Programming/Contests/">Annuaire</a></li>
<li><a href="http://en.wikipedia.org/wiki/Category:Programming_contests">Article wikipedia</a></li>
</ul>


<h2>Cryptologie</h2>

<p>Il existe aussi des concours pour apprendre de la cryptologie</p>

<ul>
<li><a href="https://www.mysterytwisterc3.org/en/">Mystery Twister</a></li>
<li><a href="http://cryptopals.com/">Matasano Challenge</a></li>
</ul>


<h2>Divers</h2>

<ul>
<li><a href="https://github.com/veltman/clmystery">The Command Line Murders</a> résoudre un crime avec la ligne de commande..</li>
<li><a href="https://github.com/git-game/git-game">Git game</a> Un jeu de piste en git.

<h2>Conclusion</h2></li>
</ul>


<p>Je vous laisse j&#8217;ai un crime à résoudre.. Il y a de quoi s&#8217;occuper.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell : Stack]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/12/27/haskell-stack/"/>
    <updated>2015-12-27T18:39:17+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/12/27/haskell-stack</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Je ne développe pas en <a href="https://www.haskell.org/">Haskell</a> mais je regarde beaucoup. La série que j&#8217;écris sur la programmation fonctionnelle me force à regarder le langage de plus près. Le monde haskell s&#8217;est enrichi d&#8217;un nouvel outil <strong>Stack</strong>.</p>

<h2>Stack et Haskell</h2>

<p>Stack est un logiciel qui gère l&#8217;installation/les packages/la création/le build/les tests d&#8217;un projet Haskell.</p>

<p>Il a plusieurs avantages:</p>

<ul>
<li>Il a été pensé pour automatiser le build.</li>
<li>Il a une ligne de commande sympathique que nous allons voir par la suite.</li>
<li>Il utilise un fichier <code>stack.yml</code> c&#8217;est l&#8217;équivalent d&#8217;un <code>composer.json</code> en php ou un <code>package.json</code> en node.</li>
<li>Tout est installé dans le <code>~/.stack</code> tout les programmes sont <em>isolés</em> et n&#8217;interfèrent pas avec les autres logiciels déjà pré installés.</li>
</ul>


<!--more-->


<h2>Mise en place.</h2>

<p>Il suffit d&#8217;ajouter les clés/et le dépôt sous ubuntu :  <a href="http://docs.haskellstack.org/en/stable/README.html#how-to-install">voir la documentation</a>
Une fois que le logiciel est installé</p>

<h3>Etape 1 : structure d&#8217;un projet.</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack new my-project</span></code></pre></td></tr></table></div></figure>


<p>crée une arborescence toute faite</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>├── LICENSE
</span><span class='line'>├── Setup.hs
</span><span class='line'>├── app
</span><span class='line'>│   └── Main.hs
</span><span class='line'>├── my-project.cabal
</span><span class='line'>├── src
</span><span class='line'>│   └── Lib.hs
</span><span class='line'>├── stack.yaml
</span><span class='line'>└── test
</span><span class='line'>    └── Spec.hs
</span><span class='line'>
</span><span class='line'>    3 directories, 7 files</span></code></pre></td></tr></table></div></figure>


<p>A noter qu&#8217;il existe des templates d&#8217;applications (Un peu comme <a href="http://yeoman.io/">Yeoman</a>)</p>

<p>Par exemple pour créer une application Yesod (Pour faire un serveur web) et Mysql</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack new mon-projet yesod-mysql</span></code></pre></td></tr></table></div></figure>


<p>Pour lister les différents templates</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack templates
</span><span class='line'>chrisdone
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>yesod-minimal
</span><span class='line'>yesod-mongo
</span><span class='line'>yesod-mysql
</span><span class='line'>yesod-postgres
</span><span class='line'>yesod-postgres-fay
</span><span class='line'>yesod-simple
</span><span class='line'>yesod-sqlite</span></code></pre></td></tr></table></div></figure>


<h2>Etape 2 : Installation des librairies</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd mon-projet
</span><span class='line'>$ stack setup</span></code></pre></td></tr></table></div></figure>


<p>Si Haskell n&#8217;est pas encore installé dans <code>~/.stack</code>, le logiciel s&#8217;occupe de tout, il installe aussi toutes les dépendances.</p>

<h2>Etape 3 : build et compilation</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack build</span></code></pre></td></tr></table></div></figure>


<p>Le haskell est un language compilé. Le logiciel compile tout le projet.</p>

<h2>Etape 4 : Lancer le programme</h2>

<p>Pour lancer le programme</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack exec mon-projet</span></code></pre></td></tr></table></div></figure>


<p>Pour lancer les tests. Tout les projets viennents avec des tests</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack test
</span></code></pre></td></tr></table></div></figure>


<h2>Etape 5 : Installer le programme</h2>

<p>un peu comme un <code>make install</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack install</span></code></pre></td></tr></table></div></figure>


<h2>Etape 6 : Docker</h2>

<p>Docker c&#8217;est cool et pratique.</p>

<p>dans le <code>stack.yml</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>...
</span><span class='line'>image:
</span><span class='line'>  container:
</span><span class='line'>    # Image de base
</span><span class='line'>    base: "fpco/ubuntu-with-libgmp:14.04"
</span><span class='line'>    # Noms de l'iso.
</span><span class='line'>    name: "mcamuzat/mon-projet"
</span><span class='line'>    # Nom du programme à lancer 
</span><span class='line'>    entrypoints:
</span><span class='line'>      - mon-projet
</span></code></pre></td></tr></table></div></figure>


<p>Si l&#8217;image de base existe déjà</p>

<p>Alors</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ stack image container</span></code></pre></td></tr></table></div></figure>


<p>Cela génère le container.</p>

<p>Il ne reste plus qu&#8217;à lancer le container</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo docker run -t -i mcamuzat/mon-projet mon-projet</span></code></pre></td></tr></table></div></figure>


<h2>Listes de commandes</h2>

<ul>
<li><code>stack new nom-du-projet nom-du-template</code> crée un nouveau projet</li>
<li><code>stack setup</code> mise en place du projet</li>
<li><code>stack build</code> compile le projet</li>
<li><code>stack exec nom-du-programme</code> lance le programme</li>
<li><code>stack repl</code> Lance le mode interactif</li>
<li><code>stack test</code> Lance les tests</li>
<li><code>stack install</code> installe le programme.</li>
<li><code>stack templates</code> liste tout les templates.</li>
</ul>


<h2>Conclusion</h2>

<p>Je me mets au Haskell. C&#8217;est assez passionnant. Le langage n&#8217;est pas simple (je me casse un peu les dents dessus). Je suis pour l&#8217;instant juste sur les premiers problèmes de <a href="http://www.codewars.com/">codewars</a>. J&#8217;espère faire des post sur haskell par la suite. Il y a déja plein de tutoriels.</p>

<h2>Liens</h2>

<ul>
<li><a href="http://docs.haskellstack.org/en/stable/README.html">Le site officiel</a></li>
<li><a href="http://conscientiousprogrammer.com/blog/2015/11/30/haskell-tidbits-24-days-of-hackage-2015-day-1-introduction-and-stack/">Une introduction en anglais</a></li>
<li><a href="http://www.stephendiehl.com/posts/haskell_2016.html">Un second article an anglais</a></li>
<li><a href="https://www.fpcomplete.com/blog/2015/11/kubernetes">Créer le container Docker</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les monades 5: les applicatives]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives/"/>
    <updated>2015-12-20T15:49:14+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives</id>
    <content type="html"><![CDATA[<p>Nous allons voir les foncteurs applicatifs.</p>

<p>Reprenons le container Maybe</p>

<p><img class="center" src="http://mcamuzat.github.io/images/applicative.png" width="428" height="212" title="Avec évaluation partielle" alt="avec évaluation partielle"></p>

<p>Ce que j&#8217;aimerai c&#8217;est pouvoir faire ce genre d&#8217;opération</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Maybe</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="nx">Maybe</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">=</span> <span class="nx">Maybe</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="nx">Container</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="o">*</span> <span class="nx">Container</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="o">=</span> <span class="nx">Container</span><span class="p">(</span><span class="mi">40</span><span class="p">)</span>
</span><span class='line'><span class="nb">str_repeat</span><span class="p">(</span><span class="nx">Maybe</span><span class="p">(</span><span class="s2">&quot;.oOo&quot;</span><span class="p">),</span> <span class="nx">Maybe</span><span class="p">(</span><span class="s2">&quot;3&quot;</span><span class="p">))</span> <span class="o">=</span> <span class="nx">Maybe</span><span class="p">(</span><span class="s2">&quot;.oOo.oOo.oOo&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>La bonne nouvelle c&#8217;est que c&#8217;est possible.</p>

<!--more-->


<p>J&#8217;ai besoin de 2 étapes:</p>

<ul>
<li>Nous allons mettre en place la librairie <a href="https://github.com/widmogrod/php-functional">php-functionnal</a>. Il devient difficile d&#8217;utiliser sa propre librairie.</li>
<li>Nous avons besoin d&#8217;une nouvelle opération <code>ap</code> pour applicative.</li>
</ul>


<h2>installation de php-functionnal</h2>

<p>Grâce à composer c&#8217;est très simple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">composer</span> <span class="k">require</span> <span class="nx">widmogrod</span><span class="o">/</span><span class="nx">php</span><span class="o">-</span><span class="nx">functional</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici le fichier php dans la racine du projet</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">require_once</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span> <span class="c1">// Autoload files using Composer autoload</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Monad\Maybe</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Functional</span> <span class="k">as</span> <span class="nx">f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="nx">Maybe\Just</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nv">$b</span> <span class="o">=</span> <span class="nv">$a</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;});</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$b</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si vous obtenez ceci</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Monad\Maybe\Just</span><span class="c1">#4 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tout va bien!!</p>

<p>Je n&#8217;ai pas utilisé les mêmes noms que la librairie voici les traductions</p>

<ul>
<li>Container -> Identity</li>
<li>Collection -> Collection</li>
<li>Some -> Just</li>
<li>Nothing -> Nothing</li>
<li><code>Maybe\just(10)</code> est un helper <code>Maybe\Just::of(10)</code></li>
<li><code>Maybe\nothing()</code> -> <code>Maybe\Nothing::of(10)</code></li>
</ul>


<p>Nous allons faire quelque chose de curieux puisque nous ne mettons pas une valeur dans notre Maybe mais une fonction !</p>

<p>Regardons un exemple simple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$addOne</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;});</span>
</span><span class='line'><span class="nv">$value</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$addOne</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans le premier Maybe on a mis une fonction. <code>ap</code> prend en entrée un Maybe.</p>

<p>Nous obtenons</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Monad\Maybe\Just</span><span class="c1">#5 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">int</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Essayons avec <code>Nothing</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$addOne</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;});</span>
</span><span class='line'><span class="nv">$value</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Maybe\nothing</span><span class="p">();</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$addOne</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Monad\Maybe\Nothing</span><span class="c1">#4 (0) {</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cela ne semble pas très utiles</p>

<p>Nous allons utiliser notre fonction <code>curryN</code> du <a href="">post précédent</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="nv">$b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$add</span> <span class="o">=</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="nx">f\curryN</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;add&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$add</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">MayBe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// just(10)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>la fonction add est une addition et prend deux arguments. <code>(? + ?)</code></li>
<li>Je la transforme en évaluation partielle avec CurryN() et je la place dans un <code>just(? + ?)</code></li>
<li>Au premier <code>ap</code> je soumet le premier argument, il manque encore un argument , la fonction devient <code>just( 5 + ?)</code>.</li>
<li>Au second <code>ap</code> l&#8217;argument manquant est fournis. La fonction est complète <code>just( 5 + 5)</code> -> <code>just(10)</code>.</li>
</ul>


<p>La recette est simple, Je mets la fonction à plusieurs arguments dans mon Maybe avec le curryN. et j&#8217;applique chacun des arguments.</p>

<p>En fait si on fait une image</p>

<p><img class="center" src="http://mcamuzat.github.io/images/applicative.png" width="428" height="212" title="Avec évaluation partielle" alt="avec évaluation partielle"></p>

<p>Mais nous pouvons faire cela avec toutes les fonctions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$superStrRepeat</span> <span class="o">=</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="nx">f\curryN</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;str_repeat&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//alors </span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>   <span class="nv">$superStrRepeat</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\just</span><span class="p">(</span><span class="s2">&quot;.o0o&quot;</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="c1">//Maybe\just(&quot;.oOo.oOo.oOo&quot;);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>   <span class="nv">$superStrRepeat</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\nothing</span><span class="p">())</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="c1">//Maybe\Nothing();</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>   <span class="nv">$superStrRepeat</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\nothing</span><span class="p">())</span><span class="o">-&gt;</span><span class="na">ap</span><span class="p">(</span><span class="nx">Maybe\nothing</span><span class="p">()))</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="c1">// Maybe\Nothing</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est pratique car nous pouvons maintenant appliquer des fonctions à plusieurs arguments. et des fonctions qui ne travaillent pas avec des object Maybe, Nothing.</p>

<p>Quand on &ldquo;augmente&rdquo; les fonctions pour travailler avec d&#8217;autre types,  on appelle cela le <code>Lift</code></p>

<p>D&#8217;ailleurs cela s&#8217;exprime en 1 ligne avec la librairie</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nx">f\liftA2</span><span class="p">(</span><span class="s2">&quot;add&quot;</span><span class="p">,</span> <span class="nx">MayBe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">)));</span>
</span><span class='line'><span class="c1">// Maybe\Just(10)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nx">f\liftA2</span><span class="p">(</span><span class="s2">&quot;str_repeat&quot;</span><span class="p">,</span><span class="nx">MayBe\just</span><span class="p">(</span><span class="s2">&quot;.o0o&quot;</span><span class="p">),</span> <span class="nx">Maybe\just</span><span class="p">(</span><span class="mi">5</span><span class="p">)));</span>
</span><span class='line'><span class="c1">// Maybe\just(&quot;.o0o.o0o.o0o.o0o.o0o&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://mcamuzat.github.io/images/str_repeataveccontainer.png" width="517" height="425" title="On utilise la fonction LiftA2" ></p>

<h2>Pour résumer.</h2>

<ul>
<li>Les <em>functors</em> implémentent la fonction <code>map</code> qui prend en entrée une fonction.</li>
<li>Les <em>applicatives</em> implémentent la fonction <code>ap</code> prend en entrée un applicative. Cela permet d&#8217;appliquer des fonctions à plusieurs arguments.</li>
<li>Les <em>monades</em> implémentent la fonction <code>bind</code> qui prend entrée une fonction <em>monadique</em> c&#8217;est à dire qui renvoie une Nomade.</li>
</ul>


<p>Tous les monades que j&#8217;ai présenté implémentent les 3 fonctions (Maybe, Collection, Identity(Container)).</p>

<h2>En conclusion.</h2>

<p>Dans le prochain Post nous allons voir le cas particulier de <code>ap</code> pour les collections.</p>

<ul>
<li>Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
<li>Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a></li>
<li>Partie 5 : <a href="http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives/">Les applicatives</a></li>
<li>Partie 6 : <a href="http://mcamuzat.github.io/blog/2016/01/25/les-monades-applicative-et-les-listes/">Les applicatives et les listes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je joue donc je programme 2]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/12/13/je-joue-donc-je-programme-2/"/>
    <updated>2015-12-13T18:05:20+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/12/13/je-joue-donc-je-programme-2</id>
    <content type="html"><![CDATA[<p>J&#8217;avais <a href="blog/2015/05/04/je-joue-donc-je-programme/">déjà parlé</a> de jeux pour apprendre à programmer.
<img class="center" src="http://mcamuzat.github.io/images/thimble.png" width="600" height="345" title="thimble" alt="Thimble"></p>

<!--more-->


<h2>Le CSS</h2>

<h3>Apprendre les selecteurs</h3>

<p>C&#8217;est assez basique mais la présentation est très propre
<a href="flukeout.github.io">Cssdiner</a>
<img class="center" src="http://mcamuzat.github.io/images/cssdiner.png" width="600" height="606" title="Css diner" alt="Css diner"></p>

<h3>Apprendre la balise <code>flex</code></h3>

<p>C&#8217;est relativement récent cela ne marche pas sur tout les navigateurs (pas de problème sous firefox)
<a href="http://flexboxfroggy.com/">flexbox froggy</a></p>

<p><img class="center" src="http://mcamuzat.github.io/images/flexfrog.png" width="600" height="399" title="flexbox froggy" alt="flexbox froggy"></p>

<h3>Créer ses propres pages</h3>

<p>Pas un jeu mais un tutoriel de la part de mozilla
<a href="https://thimble.mozilla.org/en-US">thimble</a></p>

<p><img class="center" src="http://mcamuzat.github.io/images/thimble.png" width="600" height="345" title="thimble" alt="Thimble"></p>

<h2>Javascript</h2>

<p><a href="https://jsfiddle.net/qmmc8mpr/embedded/result/">l&#8217;adresse</a></p>

<p>Le but est à la fois simple et plutôt compliqué faire atteindre x à l&#8217;infini. Sauf que vous devez payer pour ajouter des caractères.</p>

<ul>
<li>1er caractère : 1000 points</li>
<li>2nd caractères : 10000 points</li>
<li>3ème caractères : 100000 points.</li>
</ul>


<p>On ne peux utiliser les caractères  <code>[e, E, *, /, 5, 6, 7, 8, 9, another x]</code>. Ce serait trop simple <code>x+=x</code>.</p>

<p>Quand on connait l&#8217;astuce cela se résout en 30 secondes.</p>

<p><img class="center" src="http://mcamuzat.github.io/images/javascriptinfini.png" width="600" height="450" title="Un petit casse-tête" alt="Un petit casse-tête"></p>

<h2>En conclusion</h2>

<p>Voila de quoi occuper vos soirées.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades : Evaluation partielle]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/"/>
    <updated>2015-12-06T18:49:49+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle</id>
    <content type="html"><![CDATA[<h2>Interlude.</h2>

<p>J&#8217;ai besoin pour le prochain chapitre d&#8217;introduire la notion d&#8217;application partielle. Cela consiste à évaluer une partie de la fonction même si je n&#8217;ai pas tous les arguments.</p>

<p>Soit la fonction suivante.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">plus</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="nv">$b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Que donne l&#8217;exécution ?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">plus</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>Une erreur bien entendu, puisque il manque un argument..</p>

<p>Voici une fonction tirée de la librairie <a href="https://github.com/widmogrod/php-functional">php-functionnal</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">push</span><span class="p">(</span><span class="k">array</span> <span class="nv">$array</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$values</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$values</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$array</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$array</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">curryN</span><span class="p">(</span><span class="nv">$numberOfArguments</span><span class="p">,</span> <span class="nx">callable</span> <span class="nv">$function</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$args</span> <span class="o">=</span> <span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$numberOfArguments</span><span class="p">,</span> <span class="nv">$function</span><span class="p">,</span> <span class="nv">$args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$argsLeft</span> <span class="o">=</span> <span class="nv">$numberOfArguments</span> <span class="o">-</span> <span class="nb">func_num_args</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$argsLeft</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="o">?</span> <span class="nb">call_user_func_array</span><span class="p">(</span><span class="nv">$function</span><span class="p">,</span> <span class="nx">push</span><span class="p">(</span><span class="nv">$args</span><span class="p">,</span> <span class="nb">func_get_args</span><span class="p">()))</span>
</span><span class='line'>            <span class="o">:</span> <span class="nx">curryN</span><span class="p">(</span><span class="nv">$argsLeft</span><span class="p">,</span> <span class="nv">$function</span><span class="p">,</span> <span class="nx">push</span><span class="p">(</span><span class="nv">$args</span><span class="p">,</span> <span class="nb">func_get_args</span><span class="p">()));</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et maintenant reprenons ma première fonction</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$add</span> <span class="o">=</span> <span class="nx">curryN</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="nv">$b</span><span class="p">;});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maintenant réessayons notre commande</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$add10</span> <span class="o">=</span> <span class="nv">$add</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je n&#8217;ai pas d&#8217;erreur mais il y a mieux !</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$add10</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c1">// 20.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Varions encore un peu avec aucun argument</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$addition</span> <span class="o">=</span> <span class="nv">$add</span><span class="p">();</span>
</span><span class='line'><span class="nx">result</span> <span class="o">=</span> <span class="nv">$addition</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span><span class="c1">//20</span>
</span></code></pre></td></tr></table></div></figure>


<p>S&#8217;il manque un argument, la fonction ne renvoie pas de résultat mais une nouvelle fonction.</p>

<p>On appelle cela l&#8217;évaluation partielle.</p>

<p>C&#8217;est plutôt pratique..</p>

<h2>Quelques applications pratiques</h2>

<h3>On réutilise mieux les calculs.</h3>

<p>Par exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result1</span> <span class="o">=</span> <span class="nv">$valeurTresComplique</span> <span class="o">+</span> <span class="nv">$valeursTresSimple1</span><span class="p">;</span>
</span><span class='line'><span class="nv">$result2</span> <span class="o">=</span> <span class="nv">$valeurTresComplique</span> <span class="o">+</span> <span class="nv">$valeursTresSimple2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Devient</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$partiel</span> <span class="o">=</span> <span class="nv">$add</span><span class="p">(</span><span class="nv">$valeurTresComplique</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result1</span> <span class="o">=</span> <span class="nv">$partiel</span><span class="p">(</span><span class="nv">$valeursTresSimple1</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result2</span> <span class="o">=</span> <span class="nv">$partiel</span><span class="p">(</span><span class="nv">$valeursTresSimple2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>C&#8217;est plus simple à tester.</h3>

<p>Si toute les fonctions ne prennent qu&#8217;un argument, Il y a moins de cas à tester.
De plus cela permet une meilleure isolation du code. Une fonction à 5-6 arguments est rarement un bon signe dans le code.</p>

<h3>Cela permet de chainer les fonctions.</h3>

<p>Nous allons nous servir de cette astuce pour nos monades/functors. Depuis le début on ne peux mettre qu&#8217;une seule valeur dans mon <em>container</em> donc comment faire pour faire des fonctions à plusieurs arguments ?</p>

<h2>Les évaluations partielles</h2>

<p>Il faut quand même noter que le langage PHP n&#8217;est pas génial pour le coup.</p>

<p>L&#8217;expression suivante en javascript est parfaitement légale.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">result</span> <span class="o">=</span> <span class="nx">add</span><span class="p">(</span><span class="mi">10</span><span class="p">)(</span><span class="mi">5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>je suis obligé d&#8217;utiliser une variable intermédiaire en PHP.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$add10</span><span class="o">=</span> <span class="nx">add</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$add10</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bref la syntaxe n&#8217;est pas très pratique.</p>

<h2>Conclusion</h2>

<p>En Haskell et <a href="https://fr.wikipedia.org/wiki/OCaml">OCaml</a> l&#8217;évaluation partielle est la norme.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">max</span> <span class="mi">10</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>En fait le langage fait.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">(</span><span class="n">max</span> <span class="mi">10</span><span class="p">)</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>Transformer une fonction à plusieurs arguments en une série de fonction à un argument s&#8217;appelle la <em>Curryfication</em>. Cela vient du prénom de la première personne a avoir écris sur le sujet <a href="https://fr.wikipedia.org/wiki/Haskell_Curry">Haskell Curry</a>. Le nom de famille doit voir dire quelque chose aussi..</p>

<p>Cela semble un peu compliqué et pas forcement intéressant sur les exemples que j&#8217;ai choisi. Mais dans le prochain post nous allons utiliser cette notion.</p>

<p>Merci de m&#8217;avoir lu.</p>

<ul>
<li>Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
<li>Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a></li>
<li>Partie 5 : <a href="http://mcamuzat.github.io/blog/2015/12/20/les-monades-5-les-applicatives/">Les applicatives</a></li>
<li>Partie 6 : <a href="http://mcamuzat.github.io/blog/2016/01/25/les-monades-applicative-et-les-listes/">Les applicatives et les listes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Monades : Les listes]]></title>
    <link href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/"/>
    <updated>2015-11-29T21:44:52+01:00</updated>
    <id>http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes</id>
    <content type="html"><![CDATA[<p>Nous continuons notre exploration des Monades/Functors, nous allons parler de Collection, de lapins, de marteaux et de non-déterminisme.</p>

<p>Voici notre nouveau <em>container</em> Le container <strong>List</strong>. Il prend en entrée un tableau (Array) ou en Php un <code>Traversable</code>.
<img class="center" src="http://mcamuzat.github.io/images/collection.png" width="600" height="450" title="Le container Collection" alt="Le container collection"></p>

<p>Nous allons voir ensemble les listes, Collections. Nous allons voir le <code>map</code>, le <code>bind</code> nous allons voir que le comportement n&#8217;est pas exactement le même..</p>

<!--more-->


<p>Ne nous embêtons pas allons directement dans l&#8217;implémentation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Collection</span> <span class="k">extends</span> <span class="nx">Container</span><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param array $value</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">isNativeTraversable</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>            <span class="o">?</span> <span class="nv">$value</span>
</span><span class='line'>            <span class="o">:</span> <span class="p">[</span><span class="nv">$value</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">isNativeTraversable</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">is_array</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="o">||</span> <span class="nv">$value</span> <span class="nx">instanceof</span> <span class="nx">\Traversable</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">map</span><span class="p">(</span><span class="nx">callable</span> <span class="nv">$transformation</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$result</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">=</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">extract</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$value</span> <span class="nx">instanceof</span> <span class="nx">Container</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$result</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$result</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On garde toujours la même définition. <code>map</code> prend toujours une fonction et renvoie un Objet du même type. <code>extract</code> renvoie la valeur, <code>Collection::of</code> renvoie une collection.</p>

<p>Quelques exemples</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">var_dump</span><span class="p">(</span>
</span><span class='line'>   <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">value</span><span class="p">;})</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nv">$value</span><span class="o">-</span><span class="mi">1</span><span class="p">;})</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">);</span> <span class="c1">// [ 1, 3, 5, 7]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;one&quot;</span><span class="p">,</span><span class="s2">&quot;two&quot;</span><span class="p">,</span><span class="s2">&quot;three&quot;</span><span class="p">))</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="s2">&quot;strtoupper&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$value</span><span class="o">.</span><span class="s2">&quot;!!!!&quot;</span><span class="p">;})</span>
</span><span class='line'>     <span class="o">-&gt;</span><span class="na">extract</span><span class="p">()</span>
</span><span class='line'><span class="p">);</span><span class="c1">// [&quot;ONE!!!!&quot;, &quot;TWO!!!!&quot;,&quot;THREE!!!!&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous allons reprendre notre liste du post <a href="blog/2015/11/22/les-monades-3-le-maybe-suite/">précédent</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;id_article&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;titre&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;titre1&#39;</span><span class="p">,</span> <span class="s1">&#39;meta&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;images&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;//first.jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;//second.jpg&#39;</span><span class="p">]]],</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;id_article&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;titre&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;titre2&#39;</span><span class="p">,</span> <span class="s1">&#39;meta&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;images&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;//third.jpg&#39;</span><span class="p">]]],</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;id_article&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;titre&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;titre3&#39;</span><span class="p">],</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://mcamuzat.github.io/images/arraydanscontainer.png" width="600" height="450" title="Un array dans le container" alt="Un array dans le container"></p>

<ul>
<li>Nous allons transformer chaque ligne en <code>maybe</code> grâce à l&#8217;instruction <code>maybeFromValue</code> (<a href="blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">post2</a>)</li>
</ul>


<p><img class="center" src="http://mcamuzat.github.io/images/collectionmaybe.png" width="600" height="450" title="Un array dans le container" alt="Un array dans le container"></p>

<p>Nous aimerions utiliser notre instruction <code>get</code>.</p>

<p>l&#8217;algo :</p>

<ul>
<li>je récupère le maybe.</li>
<li>J&#8217;appelle la fonction bind du maybe avec le get</li>
</ul>


<p>Cela donne ..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">get</span><span class="p">(</span><span class="nv">$key</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$value</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$array</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$array</span><span class="p">[</span><span class="nv">$key</span><span class="p">])</span> <span class="o">?</span> <span class="nx">Some</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$array</span><span class="p">[</span><span class="nv">$key</span><span class="p">])</span> <span class="o">:</span> <span class="nx">Nothing</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oui vous ne rêvez pas c&#8217;est une fonction qui renvoie une fonction qui renvoie une fonction.</p>

<p>L&#8217;implémentation est sympathique..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Collection</span><span class="o">:</span><span class="nx">of</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nx">fromValue</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;meta&quot;</span><span class="p">))</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;images&quot;</span><span class="p">))</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous obtenons en une ligne <em>sans if sans condition</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="s2">&quot;//first.jpg&quot;</span><span class="p">,</span> <span class="s2">&quot;//third.jpg&quot;</span><span class="p">,</span> <span class="k">null</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Le bind</h2>

<p>Je n&#8217;ai pas donnée le code du bind qui se résume à</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">bind</span><span class="p">(</span><span class="nx">callable</span> <span class="nv">$transformation</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">concat</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je vais essayer de justifier tout cela.</p>

<p>Partons d&#8217;abord du principe que <code>$this-&gt;concat</code> n&#8217;existe pas..</p>

<p>Donc mon <code>bind</code> devient</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">bind</span><span class="p">(</span><span class="nx">callable</span> <span class="nv">$transformation</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="nv">$transformation</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">addOne</span><span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$input</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">addOne</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Collection</span><span class="c1">#6 (1) {</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Collection</span><span class="c1">#5 (1) {</span>
</span><span class='line'>      <span class="k">protected</span> <span class="nv">$value</span> <span class="o">=&gt;</span>
</span><span class='line'>      <span class="k">array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">Collection</span><span class="c1">#2 (1) {</span>
</span><span class='line'>          <span class="o">...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">Collection</span><span class="c1">#3 (1) {</span>
</span><span class='line'>          <span class="o">...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="k">class</span> <span class="nc">Collection</span><span class="c1">#4 (1) {</span>
</span><span class='line'>          <span class="o">...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous avons une collection qui contient une collection (double container!!) et pire dans chaque valeur est encore une collection !. On perd aussi le chainage.</p>

<p>Bref nous avons tout perdu.</p>

<h3>Solution le marteau.</h3>

<p><img class="center" src="http://mcamuzat.github.io/images/marteau.png" width="515" height="150" title="Le marteau comme solution." alt="Le marteau comme solution"></p>

<p>Nous allons aplatir le résultat.</p>

<p>C&#8217;est a dire que nous allons transformer notre collection <code>[[a],[b],[c]]</code> en <code>[a, b, c]</code></p>

<p>Voici l&#8217;implémentation en code.. C&#8217;est un peu long n&#8217;hésitez pas à sauter cette partie..</p>

<p>Partons du principe que c&#8217;est un array..</p>

<p>On aplati notre liste ainsi</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$flatten</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="s2">&quot;d&quot;</span><span class="p">),</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;b&quot;</span><span class="p">),</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="p">));</span>
</span><span class='line'><span class="nv">$result</span><span class="p">;</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$flatten</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$value</span> <span class="k">as</span> <span class="nv">$subvalue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$subvalue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span> <span class="c1">//array(&quot;a&quot;, &quot;d&quot;, &quot;b&quot;, &quot;c&quot;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le problème est que notre collection n&#8217;est pas un <code>Array</code>.. Mais essayons avec une fonction un peu plus tordue</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nb">array_reduce</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">$flatten</span><span class="p">,</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">(</span><span class="nv">$acc</span><span class="p">,</span> <span class="nv">$value</span><span class="p">){</span>
</span><span class='line'>    <span class="nb">array_reduce</span><span class="p">(</span><span class="nv">$value</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$idontcare</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="k">use</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$acc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$acc</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$acc</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="p">[]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est un façon un peu plus complexe d&#8217;exprimer la même chose que le code plus haut. Sans utiliser les boucles <code>foreach</code>.</p>

<p>Le reduce pour notre collection est facilement exprimable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// dans la classe Collection</span>
</span><span class='line'> <span class="k">public</span> <span class="k">function</span> <span class="nf">reduce</span><span class="p">(</span><span class="nx">callable</span> <span class="nv">$function</span><span class="p">,</span> <span class="nv">$accumulator</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="k">as</span> <span class="nv">$item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$accumulator</span> <span class="o">=</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$function</span><span class="p">,</span> <span class="nv">$accumulator</span><span class="p">,</span> <span class="nv">$item</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$accumulator</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Reprenons le code du <code>array_reduce</code> et utilisons notre <code>reduce</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="c1">// dans la classe Collection</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">concat</span><span class="p">(</span><span class="nx">Collection</span> <span class="nv">$collection</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$collection</span><span class="o">-&gt;</span><span class="na">reduce</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$agg</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$value</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$value</span> <span class="nx">instanceof</span> <span class="nx">Collection</span><span class="p">)</span> <span class="o">?</span> <span class="nv">$value</span> <span class="o">:</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$value</span><span class="o">-&gt;</span><span class="na">reduce</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$agg</span><span class="p">,</span> <span class="nv">$v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$agg</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$v</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="nv">$agg</span><span class="p">;</span>
</span><span class='line'>            <span class="p">},</span> <span class="nv">$agg</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span> <span class="p">[]);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici comment on aplatit notre fonction et on sauvegarde le chainage. Mais il y a mieux..</p>

<h2>Si j&#8217;avais un marteau..</h2>

<p>Montrons quelque exemples de bind.</p>

<h3>Exemple 1 : Les lapins.</h3>

<p>Soit le fonction suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">reproduction</span><span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$input</span><span class="p">,</span> <span class="nv">$input</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un exemple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$lapin</span> <span class="o">=</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;lapin&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;reproduction&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;reproduction&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le résultat</p>

<p><img class="center" src="http://mcamuzat.github.io/images/reproductionlapin.png" width="594" height="482" title="Un array dans le container" alt="Un array dans le container"></p>

<ul>
<li>premier bind</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="s2">&quot;lapin&quot;</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="na">map</span> <span class="o">-&gt;</span><span class="p">[[</span><span class="s2">&quot;lapin&quot;</span><span class="p">,</span> <span class="s2">&quot;lapin&quot;</span><span class="p">,</span><span class="s2">&quot;lapin&quot;</span><span class="p">]]</span> <span class="o">-&gt;</span> <span class="na">concat</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="s2">&quot;lapin&quot;</span><span class="p">,</span> <span class="s2">&quot;lapin&quot;</span><span class="p">,</span><span class="s2">&quot;lapin&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>second bind</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="s2">&quot;lapin&quot;</span><span class="p">,</span> <span class="s2">&quot;lapin&quot;</span><span class="p">,</span><span class="s2">&quot;lapin&quot;</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="na">map</span> <span class="p">[[</span><span class="s2">&quot;lapin&quot;</span><span class="p">,</span><span class="s2">&quot;lapin&quot;</span><span class="p">,</span><span class="s2">&quot;lapin&quot;</span><span class="p">][</span><span class="o">..</span><span class="p">][</span><span class="o">..</span><span class="p">]]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="s2">&quot;lapin&quot;</span> <span class="o">..</span> <span class="o">*</span><span class="mi">9</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous commençons avec un lapin, nous multiplions par 3 à chaque interaction. Comme la liste est aplatie à chaque fois.</p>

<h3>Exemple 2 : les fractales</h3>

<p>Soit la fonction suivante</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">fractale</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$value</span> <span class="o">==</span> <span class="s2">&quot;#&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span><span class="p">)));</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">,</span> <span class="s2">&quot;_&quot;</span><span class="p">,</span><span class="s2">&quot;_&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;#&quot;</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;fractale&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;fractale&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;fractale&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span><span class='line'><span class="k">echo</span> <span class="nb">implode</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'><span class="c1">//#_#___#_#_________#_#___#_#</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Exemple 3 : avec les chiffres</h3>

<p>Soit la fonction suivante</p>

<p>La fonction inférieure à 20 renvoie un array vide.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">moiEtMonSuccesseur</span><span class="p">(</span><span class="nv">$input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$input</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">inferieurA20</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">if</span><span class="p">(</span><span class="nv">$value</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">([]);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="p">(</span><span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$value</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">])</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;moiEtMonSuccesseur&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;inferieurA20&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s2">&quot;moiEtMonSuccesseur&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">extract</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>premier <code>bind</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="na">map</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">],[</span><span class="mi">20</span><span class="p">,</span><span class="mi">21</span><span class="p">],[</span><span class="mi">30</span><span class="p">,</span><span class="mi">31</span><span class="p">]]</span><span class="o">-&gt;</span><span class="na">concat</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>second <code>bind</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="na">map</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="mi">10</span><span class="p">],[</span><span class="mi">11</span><span class="p">],[</span><span class="mi">20</span><span class="p">],[],[],[]]</span><span class="o">-&gt;</span> <span class="na">concat</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>troisième <code>bind</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="na">map</span> <span class="p">[[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">],</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">],</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="p">]]</span><span class="o">-&gt;</span> <span class="na">concat</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">21</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Exemple 4: Trouver les positions possibles d&#8217;un jeux de société</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">donneTousLesCoupsPossibles</span><span class="p">(</span><span class="nv">$position</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//renvoie toutes les positions légales</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Collection</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nx">position_possible</span><span class="o">..</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$postion1</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">donneTousLesCoupsPossibles</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">donneTousLesCoupsPossibles</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>cette fonction donne toute les parties possibles dans deux coup.</p>

<h2>Conclusion</h2>

<p>On comprend assez bien l&#8217;intérêt de cette monade pour gérer des listes, mais il y a une autre vision possible. La collection avec le bind est considérée comme une façon de gérer des entrées <em>non déterministes</em>. J&#8217;ai eu un peu de mal à comprendre, mais voici l&#8217;idée.
La valeur 3 n&#8217;a qu&#8217;une valeur qui est <code>3</code> facile, la valeur <code>[1, 2, 3]</code> est une représentation de la même valeur sauf qu&#8217;elle à trois états possible <code>1, 2, 3</code>. Grâce au <code>bind</code> je prend en compte tous les états possibles.</p>

<p>Pour résumer :</p>

<ul>
<li>Le Maybe prend le cas ou la valeur est présente.</li>
<li>La liste permet de gérer le Non-determinisme.</li>
</ul>


<p>Il reste encore beaucoup de chose à parler. Nous avons parlé des functors(<code>map</code> ou <code>fmap</code>), des monades (<code>of</code> et <code>bind</code>) nous allons voir les applicatives..</p>

<h1>des liens.</h1>

<ul>
<li>Ma référence pour l&#8217;implémentation est <a href="https://github.com/widmogrod/php-functional">php-functional</a>.</li>
<li>La bible pour le haskell est <a href="learnyouahaskell.com">Learn You a Haskell for Great Good!</a> Le livre est gratuit avec des jolis dessins. Enfin le fond et la forme sont vraiment bon.</li>
<li><p>Il existe en français !! <a href="http://lyah.haskell.fr/">Apprendre Haskell vous fera le plus grand bien !</a></p></li>
<li><p>Partie 1 : <a href="http://mcamuzat.github.io/blog/2015/11/11/les-monades-en-php-cest-possible-dot/">Monade/Functor</a></p></li>
<li>Partie 2 : <a href="http://mcamuzat.github.io/blog/2015/11/15/les-monades-suite-le-functor-maybe-dot/">Le functor Maybe</a></li>
<li>Partie 3 : <a href="http://mcamuzat.github.io/blog/2015/11/22/les-monades-3-le-maybe-suite/">Le functor Maybe avec le Bind</a></li>
<li>Partie 4 : <a href="http://mcamuzat.github.io/blog/2015/11/29/les-monades-les-listes/">Les listes</a></li>
<li>Interlude : <a href="http://mcamuzat.github.io/blog/2015/12/06/les-monades-evaluation-partielle/">Les évaluations partielles</a></li>
<li>Partie 5 : <a href="2015/12/20/les-monades-5-les-applicatives/">Les applicatives</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
